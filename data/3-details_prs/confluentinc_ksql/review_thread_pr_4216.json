{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTM5MTMz", "number": 4216, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjozNDo1MlrODWBYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzowNTo1OFrODWshnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDE3ODU2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlRestServiceContextBinder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjozNDo1MlrOFaijHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTozNzozN1rOFbDpwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3MzM0Mg==", "bodyText": "If we're adding a factory method, can we make the constructor private or package private?", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r363373342", "createdAt": "2020-01-06T16:34:52Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlRestServiceContextBinder.java", "diffHunk": "@@ -31,9 +35,19 @@\n public class KsqlRestServiceContextBinder extends AbstractBinder {\n   public KsqlRestServiceContextBinder(\n       final KsqlConfig ksqlConfig,\n-      final KsqlSecurityExtension securityExtension\n+      final KsqlSecurityExtension securityExtension,\n+      final Supplier<SchemaRegistryClient> schemaRegistryClientSupplier\n   ) {\n-    KsqlRestServiceContextFactory.configure(ksqlConfig, securityExtension);\n+    KsqlRestServiceContextFactory.configure(ksqlConfig, securityExtension,\n+        schemaRegistryClientSupplier);\n+  }\n+\n+  public static BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> createFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38dff4a83f0e03a2597b33307ce142458842598"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxNTcxMw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r363915713", "createdAt": "2020-01-07T19:37:37Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlRestServiceContextBinder.java", "diffHunk": "@@ -31,9 +35,19 @@\n public class KsqlRestServiceContextBinder extends AbstractBinder {\n   public KsqlRestServiceContextBinder(\n       final KsqlConfig ksqlConfig,\n-      final KsqlSecurityExtension securityExtension\n+      final KsqlSecurityExtension securityExtension,\n+      final Supplier<SchemaRegistryClient> schemaRegistryClientSupplier\n   ) {\n-    KsqlRestServiceContextFactory.configure(ksqlConfig, securityExtension);\n+    KsqlRestServiceContextFactory.configure(ksqlConfig, securityExtension,\n+        schemaRegistryClientSupplier);\n+  }\n+\n+  public static BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> createFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3MzM0Mg=="}, "originalCommit": {"oid": "f38dff4a83f0e03a2597b33307ce142458842598"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDE4NzA4OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjozNzo1NVrOFaioRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoxNzoxMVrOFbEpqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3NDY2MA==", "bodyText": "nit: add null check please", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r363374660", "createdAt": "2020-01-06T16:37:55Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -178,7 +184,8 @@ public WSQueryEndpoint(\n     this.defaultServiceContextFactory =\n         Objects.requireNonNull(defaultServiceContextFactory, \"defaultServiceContextFactory\");\n     this.serverState = Objects.requireNonNull(serverState, \"serverState\");\n-    this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");;\n+    this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");\n+    this.schemaRegistryClientSupplier = schemaRegistryClientSupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38dff4a83f0e03a2597b33307ce142458842598"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMjA3Mg==", "bodyText": "Added", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r363932072", "createdAt": "2020-01-07T20:17:11Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -178,7 +184,8 @@ public WSQueryEndpoint(\n     this.defaultServiceContextFactory =\n         Objects.requireNonNull(defaultServiceContextFactory, \"defaultServiceContextFactory\");\n     this.serverState = Objects.requireNonNull(serverState, \"serverState\");\n-    this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");;\n+    this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");\n+    this.schemaRegistryClientSupplier = schemaRegistryClientSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3NDY2MA=="}, "originalCommit": {"oid": "f38dff4a83f0e03a2597b33307ce142458842598"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTEwODkwOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjowMzo1MlrOFblO0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoxNjowMFrOFblgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NTg3NA==", "bodyText": "I can't add a comment in the dispose method. But you have to make sure not to close this default serviceContext on the dispose. The dispose is called after a REST request finished.\nBtw, could you rename this variable to defaultServiceContext or serverServiceContext? so we know this is used as the default.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364465874", "createdAt": "2020-01-08T22:03:52Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "diffHunk": "@@ -89,10 +88,7 @@ public KsqlSecurityContext provide() {\n         Optional.ofNullable(request.getHeader(HttpHeaders.AUTHORIZATION));\n \n     if (!securityExtension.getUserContextProvider().isPresent()) {\n-      return new KsqlSecurityContext(\n-          Optional.ofNullable(principal),\n-          defaultServiceContextFactory.create(ksqlConfig, authHeader)\n-      );\n+      return new KsqlSecurityContext(Optional.ofNullable(principal), serviceContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3MDQzNQ==", "bodyText": "Removed the dispose.  Sorry, forgot that from our conversation.\nRenamed as well.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364470435", "createdAt": "2020-01-08T22:16:00Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "diffHunk": "@@ -89,10 +88,7 @@ public KsqlSecurityContext provide() {\n         Optional.ofNullable(request.getHeader(HttpHeaders.AUTHORIZATION));\n \n     if (!securityExtension.getUserContextProvider().isPresent()) {\n-      return new KsqlSecurityContext(\n-          Optional.ofNullable(principal),\n-          defaultServiceContextFactory.create(ksqlConfig, authHeader)\n-      );\n+      return new KsqlSecurityContext(Optional.ofNullable(principal), serviceContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NTg3NA=="}, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTEyNDkwOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoxMDo1OFrOFblZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoyNTowN1rOFbpZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2ODQ5OA==", "bodyText": "I think this createFactory method is not necessary. The default serviceContext is passed to the KsqlRestApplication in the previous line. With that, you can configure the KsqlSecurityContextBinder in the configureBaseApplication method like:\nconfig.register(serviceContextBinderFactory.apply(ksqlConfigNoPort, securityExtension, serviceContext));", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364468498", "createdAt": "2020-01-08T22:10:58Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -469,7 +470,7 @@ static KsqlRestApplication buildApplication(\n         versionCheckerFactory,\n         Integer.MAX_VALUE,\n         serviceContext,\n-        KsqlSecurityContextBinder::new);\n+        KsqlSecurityContextBinder.createFactory(serviceContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3MzU5OA==", "bodyText": "Ah, yeah.  I was kind of trying to fit the existing types, but you're right.  Simplified to:\nconfig.register(new KsqlSecurityContextBinder(\n        ksqlConfigNoPort, securityExtension, serviceContext));", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364473598", "createdAt": "2020-01-08T22:24:27Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -469,7 +470,7 @@ static KsqlRestApplication buildApplication(\n         versionCheckerFactory,\n         Integer.MAX_VALUE,\n         serviceContext,\n-        KsqlSecurityContextBinder::new);\n+        KsqlSecurityContextBinder.createFactory(serviceContext));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2ODQ5OA=="}, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNDE1NA==", "bodyText": "Doesn't work quite that way, per our below discussion.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364534154", "createdAt": "2020-01-09T02:25:07Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -469,7 +470,7 @@ static KsqlRestApplication buildApplication(\n         versionCheckerFactory,\n         Integer.MAX_VALUE,\n         serviceContext,\n-        KsqlSecurityContextBinder::new);\n+        KsqlSecurityContextBinder.createFactory(serviceContext));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2ODQ5OA=="}, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTEyODQxOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoxMjoyNlrOFblbQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjoyNDo0MVrOFbltSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2OTA1OA==", "bodyText": "Is this necessary if we you pass all the require parameters during the construction of the class?", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364469058", "createdAt": "2020-01-08T22:12:26Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinder.java", "diffHunk": "@@ -31,9 +34,17 @@\n public class KsqlSecurityContextBinder extends AbstractBinder {\n   public KsqlSecurityContextBinder(\n       final KsqlConfig ksqlConfig,\n-      final KsqlSecurityExtension securityExtension\n+      final KsqlSecurityExtension securityExtension,\n+      final ServiceContext serviceContext\n   ) {\n-    KsqlSecurityContextBinderFactory.configure(ksqlConfig, securityExtension);\n+    KsqlSecurityContextBinderFactory.configure(ksqlConfig, securityExtension, serviceContext);\n+  }\n+\n+  public static BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> createFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3MzY3Mg==", "bodyText": "Nope, removed.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364473672", "createdAt": "2020-01-08T22:24:41Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinder.java", "diffHunk": "@@ -31,9 +34,17 @@\n public class KsqlSecurityContextBinder extends AbstractBinder {\n   public KsqlSecurityContextBinder(\n       final KsqlConfig ksqlConfig,\n-      final KsqlSecurityExtension securityExtension\n+      final KsqlSecurityExtension securityExtension,\n+      final ServiceContext serviceContext\n   ) {\n-    KsqlSecurityContextBinderFactory.configure(ksqlConfig, securityExtension);\n+    KsqlSecurityContextBinderFactory.configure(ksqlConfig, securityExtension, serviceContext);\n+  }\n+\n+  public static BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> createFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2OTA1OA=="}, "originalCommit": {"oid": "e00cbe4e15635d0d5a7852c45d0e20ca5774bf4b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI0NDU0OnYy", "diffSide": "LEFT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzowNDoyNlrOFbmjgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoxODoyMlrOFbpUHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4NzU1Mw==", "bodyText": "Oops, I didn't mean to remove it. This is the tricky line but easy to fix. The ServiceContext must be closed only when a default is not used (so it is created in the last line of the provide method).\nIt can be fixed by keeping a boolean flag to track if the getServiceContext() can be closed or not. Perhapsa variable like mustClose to False when the defaultServiceContext is used?", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364487553", "createdAt": "2020-01-08T23:04:26Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "diffHunk": "@@ -108,6 +104,5 @@ public KsqlSecurityContext provide() {\n \n   @Override\n   public void dispose(final KsqlSecurityContext ksqlSecurityContext) {\n-    ksqlSecurityContext.getServiceContext().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683907bb46feec3cc00605417f0b54f963087977"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMjc2NA==", "bodyText": "This closes the admin client and doesn't make sense to do with a singleton because a subsequent request will need it.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364532764", "createdAt": "2020-01-09T02:18:22Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/context/KsqlSecurityContextBinderFactory.java", "diffHunk": "@@ -108,6 +104,5 @@ public KsqlSecurityContext provide() {\n \n   @Override\n   public void dispose(final KsqlSecurityContext ksqlSecurityContext) {\n-    ksqlSecurityContext.getServiceContext().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4NzU1Mw=="}, "originalCommit": {"oid": "683907bb46feec3cc00605417f0b54f963087977"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI0NzY0OnYy", "diffSide": "LEFT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzowNTo1OFrOFbmlaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMjoxNzowMFrOFbpTEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4ODA0MQ==", "bodyText": "Is this safe to remove? I think it was added to mock some unit tests. If they're passing, then I'm good with this, but if not, then you might need to return it.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364488041", "createdAt": "2020-01-08T23:05:58Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -468,18 +464,15 @@ static KsqlRestApplication buildApplication(\n         restConfig,\n         versionCheckerFactory,\n         Integer.MAX_VALUE,\n-        serviceContext,\n-        KsqlSecurityContextBinder::new);\n+        serviceContext);\n   }\n \n   static KsqlRestApplication buildApplication(\n       final String metricsPrefix,\n       final KsqlRestConfig restConfig,\n       final Function<Supplier<Boolean>, VersionCheckerAgent> versionCheckerFactory,\n       final int maxStatementRetries,\n-      final ServiceContext serviceContext,\n-      final BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> serviceContextBinderFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683907bb46feec3cc00605417f0b54f963087977"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMjQ5Nw==", "bodyText": "Yes, I discovered this was required.  Added it back.", "url": "https://github.com/confluentinc/ksql/pull/4216#discussion_r364532497", "createdAt": "2020-01-09T02:17:00Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -468,18 +464,15 @@ static KsqlRestApplication buildApplication(\n         restConfig,\n         versionCheckerFactory,\n         Integer.MAX_VALUE,\n-        serviceContext,\n-        KsqlSecurityContextBinder::new);\n+        serviceContext);\n   }\n \n   static KsqlRestApplication buildApplication(\n       final String metricsPrefix,\n       final KsqlRestConfig restConfig,\n       final Function<Supplier<Boolean>, VersionCheckerAgent> versionCheckerFactory,\n       final int maxStatementRetries,\n-      final ServiceContext serviceContext,\n-      final BiFunction<KsqlConfig, KsqlSecurityExtension, Binder> serviceContextBinderFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4ODA0MQ=="}, "originalCommit": {"oid": "683907bb46feec3cc00605417f0b54f963087977"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2335, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}