{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODUxNDM1", "number": 5150, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMzo0OVrOD1O85w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNToxN1rOD1O-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTQ2MDg3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/FieldInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMzo0OVrOGKkTCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMzo0OVrOGKkTCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMzY0MA==", "bodyText": "Kept SYSTEM around for now, so that using a later CLI with old server doesn't result in a deserialization error.\nNot strictly necessary, but simple to do.", "url": "https://github.com/confluentinc/ksql/pull/5150#discussion_r413733640", "createdAt": "2020-04-23T11:23:49Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/FieldInfo.java", "diffHunk": "@@ -30,7 +30,8 @@\n public class FieldInfo {\n \n   public enum FieldType {\n-    SYSTEM, KEY\n+    SYSTEM, // To be removed in the future. 0.9 saw this value no longer used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f238ac395cb182a46a07ab3655e4772d29a643c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTQ2MjQ2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/EntityUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNDoxM1rOGKkT8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNDoxM1rOGKkT8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMzg3Mw==", "bodyText": "This filters ROWTIME from the schema returned by DESCRIBE etc.", "url": "https://github.com/confluentinc/ksql/pull/5150#discussion_r413733873", "createdAt": "2020-04-23T11:24:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/EntityUtil.java", "diffHunk": "@@ -39,6 +40,7 @@ private EntityUtil() {\n \n   public static List<FieldInfo> buildSourceSchemaEntity(final LogicalSchema schema) {\n     final List<FieldInfo> allFields = schema.columns().stream()\n+        .filter(f -> f.namespace() != Namespace.META)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f238ac395cb182a46a07ab3655e4772d29a643c1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTQ2MzkxOnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/TableRowsEntityFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNDozOVrOGKkU3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNDozOVrOGKkU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNDEwOQ==", "bodyText": "These changes remove ROWTIME from pull queries that use select *.", "url": "https://github.com/confluentinc/ksql/pull/5150#discussion_r413734109", "createdAt": "2020-04-23T11:24:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/TableRowsEntityFactory.java", "diffHunk": "@@ -55,7 +55,6 @@ public static LogicalSchema buildSchema(\n     }\n \n     return builder\n-        .valueColumns(schema.metadata())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f238ac395cb182a46a07ab3655e4772d29a643c1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTQ2NjE0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNToxN1rOGKkWLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNToxN1rOGKkWLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNDQ0NQ==", "bodyText": "This change excludes ROWTIME from push / persistent queries that use * in the projection.", "url": "https://github.com/confluentinc/ksql/pull/5150#discussion_r413734445", "createdAt": "2020-04-23T11:25:17Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java", "diffHunk": "@@ -140,19 +139,26 @@ private static LogicalSchema buildSchema(final DataSource dataSource) {\n         .withMetaAndKeyColsInValue(dataSource.getKsqlTopic().getKeyFormat().isWindowed());\n   }\n \n+  @SuppressWarnings(\"UnstableApiUsage\")\n   private static Stream<ColumnName> orderColumns(\n       final List<Column> columns,\n       final LogicalSchema schema\n   ) {\n-    // When doing a `select *` system and key columns should be at the front of the column list\n+    // When doing a `select *` key columns should be at the front of the column list\n     // but are added at the back during processing for performance reasons.\n     // Switch them around here:\n-    final Map<Boolean, List<Column>> partitioned = columns.stream().collect(Collectors\n-        .groupingBy(c -> SchemaUtil.isSystemColumn(c.name()) || schema.isKeyColumn(c.name())));\n+    final Stream<Column> keys = columns.stream()\n+        .filter(c -> schema.isKeyColumn(c.name()));\n \n-    final List<Column> all = partitioned.get(true);\n-    all.addAll(partitioned.get(false));\n-    return all.stream().map(Column::name);\n+    final Stream<Column> windowBounds = columns.stream()\n+        .filter(c -> SchemaUtil.isWindowBound(c.name()));\n+\n+    final Stream<Column> values = columns.stream()\n+        .filter(c -> !SchemaUtil.isWindowBound(c.name()))\n+        .filter(c -> !schema.isKeyColumn(c.name()))\n+        .filter(c -> !schema.isMetaColumn(c.name()));\n+\n+    return Streams.concat(keys, windowBounds, values).map(Column::name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f238ac395cb182a46a07ab3655e4772d29a643c1"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}