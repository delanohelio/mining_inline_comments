{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTE3Mzc4", "number": 6055, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1ODoyMVrOEar5ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMTo0OFrOEar94w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDE3NjQyOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1ODoyMVrOHERPrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1OTo0MlrOHERSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzODg5NQ==", "bodyText": "Should you assert the value inserted is not available because it does not match the filter? Or, is the insert needed?", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474238895", "createdAt": "2020-08-20T19:58:21Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTU4NA==", "bodyText": "the next assert does that - if (2, 0) was inserted, then the next assert would have read it and the test would have failed", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474239584", "createdAt": "2020-08-20T19:59:42Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzODg5NQ=="}, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDE4MTA2OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1OTo0NFrOHERSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMTowNlrOHERVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTYwNA==", "bodyText": "Are these really needed if there're no assertions to verify they're not from b?", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474239604", "createdAt": "2020-08-20T19:59:44Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDMyOA==", "bodyText": "see above, ASSERT reads from the output topic one at a time (polls) - so they implicitly verify it didn't make it into b", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240328", "createdAt": "2020-08-20T20:01:06Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTYwNA=="}, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDE4Nzg3OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMTo0OFrOHERWrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMjoyNFrOHERX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDY4NQ==", "bodyText": "is this how it works internally in streams? I didn't know that filtered out values are written as tombstones.", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240685", "createdAt": "2020-08-20T20:01:48Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 < 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, -1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+ASSERT VALUES b (id, col1) VALUES (1, -1);\n+\n+----------------------------------------------------------------------------------------------------\n+-- note that each insert that is filtered out corresponds with a tombstone emitted into\n+-- the topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDk3OQ==", "bodyText": "yes - this is because streams doesn't know whether or not the value exists when it hits a filter, so to be safe it always emits a tombstone", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240979", "createdAt": "2020-08-20T20:02:24Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 < 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, -1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+ASSERT VALUES b (id, col1) VALUES (1, -1);\n+\n+----------------------------------------------------------------------------------------------------\n+-- note that each insert that is filtered out corresponds with a tombstone emitted into\n+-- the topic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDY4NQ=="}, "originalCommit": {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2916, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}