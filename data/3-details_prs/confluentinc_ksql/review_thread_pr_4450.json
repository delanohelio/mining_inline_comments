{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDgwMzYw", "number": 4450, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjoyOVrODdaMLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDowMTozN1rODdds7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY0Mzk5OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjoyOVrOFl_tNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNzoxOVrOFmolLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTM5Ng==", "bodyText": "Note: the dodgily named Aggregate-Aggregate-WindowSelect2 node here will go with the next PR.  It's temporary only.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375385396", "createdAt": "2020-02-05T17:02:29Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(\n+        () -> new KsTransformer<>(new WindowBoundsPopulator()),\n+        Named.as(StreamsUtil.buildOpName(\n+            AggregateBuilderUtils.windowSelectContext(aggregate)\n+        ) + \"2\")\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NTA4NA==", "bodyText": "REmoved in #4459", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r376055084", "createdAt": "2020-02-06T20:07:19Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(\n+        () -> new KsTransformer<>(new WindowBoundsPopulator()),\n+        Named.as(StreamsUtil.buildOpName(\n+            AggregateBuilderUtils.windowSelectContext(aggregate)\n+        ) + \"2\")\n+    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTM5Ng=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjA5ODE1OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyMzo0NFrOFmEMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNzowOVrOFmokzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1ODgzNQ==", "bodyText": "this is not really the right error message right? in this case the column is used in the select, but it's not supported because it's a parameter to an aggregate function.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375458835", "createdAt": "2020-02-05T19:23:44Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -36,21 +37,26 @@\n   private final MutableAggregateAnalysis aggregateAnalysis;\n   private final QualifiedColumnReferenceExp defaultArgument;\n   private final FunctionRegistry functionRegistry;\n+  private final boolean hasWindowExpression;\n \n   AggregateAnalyzer(\n       final MutableAggregateAnalysis aggregateAnalysis,\n       final QualifiedColumnReferenceExp defaultArgument,\n+      final boolean hasWindowExpression,\n       final FunctionRegistry functionRegistry\n   ) {\n     this.aggregateAnalysis = Objects.requireNonNull(aggregateAnalysis, \"aggregateAnalysis\");\n     this.defaultArgument = Objects.requireNonNull(defaultArgument, \"defaultArgument\");\n     this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.hasWindowExpression = hasWindowExpression;\n   }\n \n   void processSelect(final Expression expression) {\n     final Set<ColumnReferenceExp> nonAggParams = new HashSet<>();\n     final AggregateVisitor visitor = new AggregateVisitor((aggFuncName, node) -> {\n-      if (!aggFuncName.isPresent()) {\n+      if (aggFuncName.isPresent()) {\n+        throwOnWindowBoundColumnIfWindowedAggregate(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxNzQyOA==", "bodyText": "Error message submitted in next PR will be explicit about not being able to use window bounds as parameters to UDAFs.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375917428", "createdAt": "2020-02-06T15:51:12Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -36,21 +37,26 @@\n   private final MutableAggregateAnalysis aggregateAnalysis;\n   private final QualifiedColumnReferenceExp defaultArgument;\n   private final FunctionRegistry functionRegistry;\n+  private final boolean hasWindowExpression;\n \n   AggregateAnalyzer(\n       final MutableAggregateAnalysis aggregateAnalysis,\n       final QualifiedColumnReferenceExp defaultArgument,\n+      final boolean hasWindowExpression,\n       final FunctionRegistry functionRegistry\n   ) {\n     this.aggregateAnalysis = Objects.requireNonNull(aggregateAnalysis, \"aggregateAnalysis\");\n     this.defaultArgument = Objects.requireNonNull(defaultArgument, \"defaultArgument\");\n     this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.hasWindowExpression = hasWindowExpression;\n   }\n \n   void processSelect(final Expression expression) {\n     final Set<ColumnReferenceExp> nonAggParams = new HashSet<>();\n     final AggregateVisitor visitor = new AggregateVisitor((aggFuncName, node) -> {\n-      if (!aggFuncName.isPresent()) {\n+      if (aggFuncName.isPresent()) {\n+        throwOnWindowBoundColumnIfWindowedAggregate(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1ODgzNQ=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NDk4OA==", "bodyText": "Fix in #4459", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r376054988", "createdAt": "2020-02-06T20:07:09Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -36,21 +37,26 @@\n   private final MutableAggregateAnalysis aggregateAnalysis;\n   private final QualifiedColumnReferenceExp defaultArgument;\n   private final FunctionRegistry functionRegistry;\n+  private final boolean hasWindowExpression;\n \n   AggregateAnalyzer(\n       final MutableAggregateAnalysis aggregateAnalysis,\n       final QualifiedColumnReferenceExp defaultArgument,\n+      final boolean hasWindowExpression,\n       final FunctionRegistry functionRegistry\n   ) {\n     this.aggregateAnalysis = Objects.requireNonNull(aggregateAnalysis, \"aggregateAnalysis\");\n     this.defaultArgument = Objects.requireNonNull(defaultArgument, \"defaultArgument\");\n     this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.hasWindowExpression = hasWindowExpression;\n   }\n \n   void processSelect(final Expression expression) {\n     final Set<ColumnReferenceExp> nonAggParams = new HashSet<>();\n     final AggregateVisitor visitor = new AggregateVisitor((aggFuncName, node) -> {\n-      if (!aggFuncName.isPresent()) {\n+      if (aggFuncName.isPresent()) {\n+        throwOnWindowBoundColumnIfWindowedAggregate(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1ODgzNQ=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjExMTQ4OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyNzo0MlrOFmEUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjoxNzozOFrOFmhOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MDk3MA==", "bodyText": "Should we drop unaliased column references to windowstart/windowend from the list of select expressions? That way a user can project windowstart/windowend without an alias.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375460970", "createdAt": "2020-02-05T19:27:42Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -418,7 +418,8 @@ private LogicalSchema buildAggregateSchema(\n     }\n \n     final LogicalSchema sourceSchema = buildProjectionSchema(\n-        sourcePlanNode.getSchema(),\n+        sourcePlanNode.getSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxODk3Mw==", "bodyText": "Sorry, I don't follow what you mean.  Can you explain more?\n\nThat way a user can project windowstart/windowend without an alias.\n\nDo you mean be able to do:\nSELECT Foo.WINDOWSTART, WINDOWEND FROM FOO ...\n???\nBoth aliased and non-aliased window bounds columns are supported.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375918973", "createdAt": "2020-02-06T15:53:27Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -418,7 +418,8 @@ private LogicalSchema buildAggregateSchema(\n     }\n \n     final LogicalSchema sourceSchema = buildProjectionSchema(\n-        sourcePlanNode.getSchema(),\n+        sourcePlanNode.getSchema()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MDk3MA=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzNDU3Ng==", "bodyText": "Ah, I now understand.  Already on my radar. #4458 tracks.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375934576", "createdAt": "2020-02-06T16:17:38Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -418,7 +418,8 @@ private LogicalSchema buildAggregateSchema(\n     }\n \n     final LogicalSchema sourceSchema = buildProjectionSchema(\n-        sourcePlanNode.getSchema(),\n+        sourcePlanNode.getSchema()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MDk3MA=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjIxOTMzOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDowMTozN1rOFmFXwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNjo1MlrOFmokUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3ODIwOQ==", "bodyText": "Should we do this in a separate step? Once we support using key columns directly we won't need to project these into the value anymore right?", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375478209", "createdAt": "2020-02-05T20:01:37Z", "author": {"login": "rodesai"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyMTQ3NQ==", "bodyText": "Humm... well, introduction of structured keys is very likely to be a breaking change anyway. However, I can see your point.  This would fit well as a separate step, but I'm up against it on the clock.  Would you have time to split this? (Wait for the follow up PR before you do).  Otherwise, I'll add it to my list and do my best to get it done before the release.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375921475", "createdAt": "2020-02-06T15:57:05Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3ODIwOQ=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NDg2Ng==", "bodyText": "Thinking on this more... I'm not sure adding another step really helps in this situation.\nIf we add the extra step, then once we have structured keys and the window bounds columns can just be in the key schema, then we'd no longer need the extra step.  New plans could just omit it, but existing plans would still contain it.  So the step would likely become a no-op, but we'd need to keep it around for compatibility sakes\nContrast this to what would happen if we kept this where it is.  When structured keys is done we can just delete this bit of code from here.  New and old plans will now still have the same steps and will still both work.  No need for some legacy step to be kept around.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r376054866", "createdAt": "2020-02-06T20:06:52Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3ODIwOQ=="}, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2082, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}