{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTEzNjM3", "number": 5482, "reviewThreads": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo0Nzo1MVrOD_4glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MTo0NFrOEFu-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzEyNzI2OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo0Nzo1MVrOGaz-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo0Nzo1MVrOGaz-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2NzY5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ------------------------------------\n          \n          \n            \n            --------------------------------------------", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430767690", "createdAt": "2020-05-26T23:47:51Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a52c1104b9cc93ca59f1cba41f5ac570f05d2d3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzEyODAyOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo0ODoxNlrOGaz-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo0ODoxNlrOGaz-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2NzgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), \n          \n          \n            \n            Since some system requests aren't done on behalf of a user, like `/heartbeat` and `/lag`,", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430767821", "createdAt": "2020-05-26T23:48:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------\n+\n+Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a52c1104b9cc93ca59f1cba41f5ac570f05d2d3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzEzNDcwOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo1MjowMlrOGa0DDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzo1MjowMlrOGa0DDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2ODkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can read generally about configuring `ksql.internal.listener` [here](index.md).\n          \n          \n            \n            For more information about configuring `ksql.internal.listener`, see [Configure ksqlDB for HTTPS](index.html#configure-ksqldb-for-https).", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430768908", "createdAt": "2020-05-26T23:52:02Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------\n+\n+Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  Similarly, since your internal certificate is likely\n+self-signed, a trust store is required to contain certificates for nodes in your cluster.\n+\n+```properties\n+# Contains both internal and external certificates for this node.\n+# e.g. cert and key for external.example.com and node-1.internal.example.com\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains internal certificates for all nodes in the cluster.\n+# e.g. cert for node-2.internal.example.com and node-3.internal.example.com\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=https://external.example.com:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Not only does this configure system authentication to be secure and authenticated at the\n+connection level, but ksqlDB then also considers these requests to be authenticated.\n+\n+\n+You can read generally about configuring `ksql.internal.listener` [here](index.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a52c1104b9cc93ca59f1cba41f5ac570f05d2d3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM1MTUwOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMjo1M1rOGbAHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMjo1M1rOGbAHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NjUzOQ==", "bodyText": "Don't assume they'll be self-signed. This is probably not the norm.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `ksql.internal.listener`.  Similarly, since your internal certificate is likely\n          \n          \n            \n            self-signed, a trust store is required to contain certificates for nodes in your cluster.\n          \n          \n            \n            `ksql.internal.listener`.  If your internal certificate is self-signed, a trust store is required to contain certificates for nodes in your cluster.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430966539", "createdAt": "2020-05-27T09:02:53Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------\n+\n+Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  Similarly, since your internal certificate is likely\n+self-signed, a trust store is required to contain certificates for nodes in your cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM1NTk3OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNDowOVrOGbAKKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo1MjowN1rOGbhE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NzMzOQ==", "bodyText": "Not sure what this is saying.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430967339", "createdAt": "2020-05-27T09:04:09Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------\n+\n+Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  Similarly, since your internal certificate is likely\n+self-signed, a trust store is required to contain certificates for nodes in your cluster.\n+\n+```properties\n+# Contains both internal and external certificates for this node.\n+# e.g. cert and key for external.example.com and node-1.internal.example.com\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains internal certificates for all nodes in the cluster.\n+# e.g. cert for node-2.internal.example.com and node-3.internal.example.com\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=https://external.example.com:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Not only does this configure system authentication to be secure and authenticated at the\n+connection level, but ksqlDB then also considers these requests to be authenticated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNjY3OQ==", "bodyText": "Hah, ok.  I was just meaning that the request attains a status as run by a SystemUser at the KSQL level.  It's not purely that the connection is https.\nThis is confusing.  I'll remove it.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431506679", "createdAt": "2020-05-27T23:52:07Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,42 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+------------------------------------\n+\n+Since some system requests aren't done on behalf of a user (e.g. `/heartbeat`, `/lag`), \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  Similarly, since your internal certificate is likely\n+self-signed, a trust store is required to contain certificates for nodes in your cluster.\n+\n+```properties\n+# Contains both internal and external certificates for this node.\n+# e.g. cert and key for external.example.com and node-1.internal.example.com\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains internal certificates for all nodes in the cluster.\n+# e.g. cert for node-2.internal.example.com and node-3.internal.example.com\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=https://external.example.com:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Not only does this configure system authentication to be secure and authenticated at the\n+connection level, but ksqlDB then also considers these requests to be authenticated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NzMzOQ=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM5MTIwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxMzozNlrOGbAhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowOToyMFrOGbhX9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MzIzMQ==", "bodyText": "Why do we have an Optional<Boolean> for isInternalListener.  Surely it either is an internal listerned or it isn't!  It's very confusing having it as an optional.\nWhat does Optional.of(false) mean for isInternalListerner?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430973231", "createdAt": "2020-05-27T09:13:36Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "diffHunk": "@@ -37,12 +38,17 @@\n   private AuthHandlers() {\n   }\n \n-  static void setupAuthHandlers(final Server server, final Router router) {\n+  static void setupAuthHandlers(final Server server, final Router router,\n+      final Optional<Boolean> isInternalListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMTU0Mw==", "bodyText": "Optional.empty() means that no internal listener is set.  Optional.of(false) means that there is, but this is not it.  Optional.of(true) means there is and this is it.\nIt makes sense to have these three states in ServerVerticle given how the InternalEndpointHandler is installed, but i don't think it does here.  I'll simplify it to just a boolean.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431511543", "createdAt": "2020-05-28T00:09:20Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "diffHunk": "@@ -37,12 +38,17 @@\n   private AuthHandlers() {\n   }\n \n-  static void setupAuthHandlers(final Server server, final Router router) {\n+  static void setupAuthHandlers(final Server server, final Router router,\n+      final Optional<Boolean> isInternalListener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MzIzMQ=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM5NTkxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNDo0OVrOGbAkFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDoyOToyNlrOGbhuHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3Mzk3NQ==", "bodyText": "We should have internal endpoints for internally proxied requests, e.g. show queries and pull queries.  These too should NOT require authetication.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430973975", "createdAt": "2020-05-27T09:14:49Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java", "diffHunk": "@@ -26,7 +26,7 @@\n public class InternalEndpointHandler implements Handler<RoutingContext> {\n   public static final String CONTEXT_DATA_IS_INTERNAL = \"isInternal\";\n \n-  private static final Set<String> INTERNAL_PATHS = ImmutableSet.of(\n+  public static final Set<String> INTERNAL_PATHS = ImmutableSet.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNzIxMg==", "bodyText": "The current code does.  This set INTERNAL_PATHS says that if these are used on a public listener, it's an error.  This was the recommended strategy vs not installing the endpoints at all on the public listener.\nI no longer use this in SystemAuthenticationHandler which is only installed on the internal listener and accepts requests for all paths, but verifies they come on an SSL connection with a verified peer.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431517212", "createdAt": "2020-05-28T00:29:26Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java", "diffHunk": "@@ -26,7 +26,7 @@\n public class InternalEndpointHandler implements Handler<RoutingContext> {\n   public static final String CONTEXT_DATA_IS_INTERNAL = \"isInternal\";\n \n-  private static final Set<String> INTERNAL_PATHS = ImmutableSet.of(\n+  public static final Set<String> INTERNAL_PATHS = ImmutableSet.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3Mzk3NQ=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyMzA3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMTo0MlrOGbA1YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDo0Njo1OVrOGbiAXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODQwMQ==", "bodyText": "This feels very wrong.   This is the client that each node uses to talk to other nodes right?  It shouldn't have two KsqlClient instances.  All communication within the cluster should be trusted once the connections are authenticated.\nBoth pull requests and the show queries requests can be moved to a different internal specific endpoint, such that they can be differentiated from client requests.  This then means only a single sharedClient is needed here.  Not two, and then the code/engineer needs to know which to use for which internal requests.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430978401", "createdAt": "2020-05-27T09:21:42Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -45,26 +47,32 @@\n \n   private final Optional<String> authHeader;\n   private final KsqlClient sharedClient;\n+  private final KsqlClient internalClient;\n \n-  DefaultKsqlClient(final Optional<String> authHeader, final Map<String, Object> clientProps) {\n+  DefaultKsqlClient(final Optional<String> authHeader, final Map<String, Object> clientProps,\n+      final Optional<HostAliasResolver> hostAliasResolver) {\n     this(\n         authHeader,\n         new KsqlClient(\n             toClientProps(clientProps),\n             Optional.empty(),\n             new LocalProperties(ImmutableMap.of()),\n-            createClientOptions()\n-        )\n+            createClientOptions(),\n+            hostAliasResolver\n+        ),\n+        getInternalClient(toClientProps(clientProps), hostAliasResolver)\n     );\n   }\n \n   @VisibleForTesting\n   DefaultKsqlClient(\n       final Optional<String> authHeader,\n-      final KsqlClient sharedClient\n+      final KsqlClient sharedClient,\n+      final KsqlClient internalClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMTg4NQ==", "bodyText": "Good call.  When this wasn't enabled for all internal endpoints, both had to be maintained, but with your previous suggestion to make use the SystemUser for all endpoints on the internal listener, there's just one KsqlClient now.\nI agree about splitting up internal vs external endpoints.  I had previously done that in my internal listener change.  I was asked to undo it and instead expose the same set of endpoints, but have a handler that makes the real internal ones unauthorized on the public listener.  Either way, only one client is now needed here since DefaultKsqlClient is only for inter-node communication.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431521885", "createdAt": "2020-05-28T00:46:59Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -45,26 +47,32 @@\n \n   private final Optional<String> authHeader;\n   private final KsqlClient sharedClient;\n+  private final KsqlClient internalClient;\n \n-  DefaultKsqlClient(final Optional<String> authHeader, final Map<String, Object> clientProps) {\n+  DefaultKsqlClient(final Optional<String> authHeader, final Map<String, Object> clientProps,\n+      final Optional<HostAliasResolver> hostAliasResolver) {\n     this(\n         authHeader,\n         new KsqlClient(\n             toClientProps(clientProps),\n             Optional.empty(),\n             new LocalProperties(ImmutableMap.of()),\n-            createClientOptions()\n-        )\n+            createClientOptions(),\n+            hostAliasResolver\n+        ),\n+        getInternalClient(toClientProps(clientProps), hostAliasResolver)\n     );\n   }\n \n   @VisibleForTesting\n   DefaultKsqlClient(\n       final Optional<String> authHeader,\n-      final KsqlClient sharedClient\n+      final KsqlClient sharedClient,\n+      final KsqlClient internalClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODQwMQ=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyNzkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzowMFrOGbA4eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDo1ODowNFrOGbiLhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTE5Mw==", "bodyText": "nit: all the new tests being added by people tend to use the shouldXXX naming style.  If there some reason you've moved away from this?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430979193", "createdAt": "2020-05-27T09:23:00Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;\n+\n+  @Test\n+  public void noListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNDc0MA==", "bodyText": "Nope, not really intentional.  'Should' it is.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431524740", "createdAt": "2020-05-28T00:58:04Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;\n+\n+  @Test\n+  public void noListener() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTE5Mw=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyODUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzowOFrOGbA41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDo1NzozM1rOGbiK9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTI4Nw==", "bodyText": "nit: private.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430979287", "createdAt": "2020-05-27T09:23:08Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNDU5OA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431524598", "createdAt": "2020-05-28T00:57:33Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTI4Nw=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQzMjU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNDowN1rOGbA7Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMTowMTowMlrOGbiObA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTk0Mw==", "bodyText": "success here meaning....? Running with mutual auth internally?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430979943", "createdAt": "2020-05-27T09:24:07Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;\n+\n+  @Test\n+  public void noListener() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of()));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.empty());\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void notMutualAuth() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of(\n+        KsqlRestConfig.INTERNAL_LISTENER_CONFIG, \"https://localhost:9188\",\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+        KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_NONE\n+    )));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.of(true));\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void notInternal() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of(\n+        KsqlRestConfig.INTERNAL_LISTENER_CONFIG, \"https://localhost:9188\",\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+        KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_REQUIRED\n+    )));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.of(false));\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void success() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNTQ4NA==", "bodyText": "Returned the handler.  Improved the name.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431525484", "createdAt": "2020-05-28T01:01:02Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {\n+\n+  @Mock Server server;\n+  @Mock RoutingContext routingContext;\n+\n+  @Test\n+  public void noListener() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of()));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.empty());\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void notMutualAuth() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of(\n+        KsqlRestConfig.INTERNAL_LISTENER_CONFIG, \"https://localhost:9188\",\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+        KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_NONE\n+    )));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.of(true));\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void notInternal() {\n+    when(server.getConfig()).thenReturn(new KsqlRestConfig(ImmutableMap.of(\n+        KsqlRestConfig.INTERNAL_LISTENER_CONFIG, \"https://localhost:9188\",\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+        KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_REQUIRED\n+    )));\n+    Optional<SystemAuthenticationHandler> handler =\n+        SystemAuthenticationHandler.getSystemAuthenticationHandler(server, Optional.of(false));\n+    assertThat(handler.isPresent(), is(false));\n+  }\n+\n+  @Test\n+  public void success() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTk0Mw=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQzNTc3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNTowM1rOGbA9eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMTowMjo0NFrOGbiP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MDQ3Mg==", "bodyText": "why does this need to change?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430980472", "createdAt": "2020-05-27T09:25:03Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "diffHunk": "@@ -38,9 +40,29 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(HighAvailabilityTestUtil.class);\n \n-  static ClusterStatusResponse sendClusterStatusRequest(final TestKsqlRestApp restApp) {\n-    try (final KsqlRestClient restClient = restApp.buildInternalKsqlClient()) {\n-      final RestResponse<ClusterStatusResponse> res = restClient.makeClusterStatusRequest();\n+  static ClusterStatusResponse sendClusterStatusRequest(\n+      final TestKsqlRestApp restApp) {\n+    try (final KsqlRestClient restClient = restApp.buildKsqlClient()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNTg4Mw==", "bodyText": "I had previously added the additional version below which allowed for https calls to the client API, so I could use different certs for the public listener and private.  But this wasn't really what I was testing, so I removed all of these and just added a simple auth credential version.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431525883", "createdAt": "2020-05-28T01:02:44Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "diffHunk": "@@ -38,9 +40,29 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(HighAvailabilityTestUtil.class);\n \n-  static ClusterStatusResponse sendClusterStatusRequest(final TestKsqlRestApp restApp) {\n-    try (final KsqlRestClient restClient = restApp.buildInternalKsqlClient()) {\n-      final RestResponse<ClusterStatusResponse> res = restClient.makeClusterStatusRequest();\n+  static ClusterStatusResponse sendClusterStatusRequest(\n+      final TestKsqlRestApp restApp) {\n+    try (final KsqlRestClient restClient = restApp.buildKsqlClient()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MDQ3Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ0MTgyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNjo0MFrOGbBBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjowODo1OFrOGctqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQ1Mg==", "bodyText": "I'm not a fan of fine grained unit tests like these - they end up being very brittle and can provide a false sense of security. Would much rather see more coarse grained tests :)", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430981452", "createdAt": "2020-05-27T09:26:40Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNDQyNg==", "bodyText": "Unit tests are often somewhat brittle for this reason, but the benefit is that you can test every code path.\nI think this is fairly in line with the codebase.  What would you change to make it coarser?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431524426", "createdAt": "2020-05-28T00:56:52Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQ1Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMTU0Ng==", "bodyText": "It's a bit incongruous to add a fine grained mock test for this handler - the other handlers don't have this and that's been the approach we've taken with the new API. Instead we use much more coarse grained test which test the code as it would actually be used in a real setup. E.g. take a look at AuthTest.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431711546", "createdAt": "2020-05-28T09:43:16Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQ1Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDY3MA==", "bodyText": "Unlike full blown integration tests these kinds of tests run really fast, so you should be able to write enough tests that exercise all the code paths, but unlike fine grained unit tests, they run exactly as they would in the real system, and we're not testing the implementation directly thus allowing it to evolve and be refactored much more easily.\nBTW... I'm well known for my opinion on fine grained unit tests (you should see my Twitter conversations), and I'm currently thinking of writing a blog post on them and why I think this approach - mainly championed by \"TDD\" has been super damaging in our industry ;)", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431714670", "createdAt": "2020-05-28T09:48:52Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQ1Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MTUyNA==", "bodyText": "I was following the pattern in ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/... where other auth handers do this kind of test.  It would seem a shame to delete my nice test.\nI'm happen to try to write a few test cases in AuthTest to specifically test this, though it's likely going to be a bit complex since it requires setting up https.  I'll give this a shot.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r432761524", "createdAt": "2020-05-29T22:08:58Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/auth/SystemAuthenticationHandlerTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package io.confluent.ksql.api.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SystemAuthenticationHandlerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQ1Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ1MTQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ClientTrustStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyOToyNVrOGbBHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMTowODoyMVrOGbiVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MzA5MQ==", "bodyText": "Can we move all of this out into a different class? This this class stays focussed on the simple case?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430983091", "createdAt": "2020-05-27T09:29:25Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ClientTrustStore.java", "diffHunk": "@@ -42,7 +43,48 @@\n       + \"7rKeqVDlpM5lUidfckmrF3TxmS6d1aN/1WSZtDZCnNK8+h6LrrbtSQMsS6tc1Cv5YjJ/7KB+rQmTmGJCdzI5E=\";\n \n   private static final String TRUSTSTORE_PASSWORD = \"password\";\n+\n+  // Trust store containing two certs, for internal.example.com and external.example.com\n+  private static final String BASE64_ENCODED_STORE_MULTIPLE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNzM3Mg==", "bodyText": "Done, moved to MultiNodeKeyStore.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431527372", "createdAt": "2020-05-28T01:08:21Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ClientTrustStore.java", "diffHunk": "@@ -42,7 +43,48 @@\n       + \"7rKeqVDlpM5lUidfckmrF3TxmS6d1aN/1WSZtDZCnNK8+h6LrrbtSQMsS6tc1Cv5YjJ/7KB+rQmTmGJCdzI5E=\";\n \n   private static final String TRUSTSTORE_PASSWORD = \"password\";\n+\n+  // Trust store containing two certs, for internal.example.com and external.example.com\n+  private static final String BASE64_ENCODED_STORE_MULTIPLE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MzA5MQ=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ1MjQ5OnYy", "diffSide": "RIGHT", "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ServerKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyOTo0MlrOGbBIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMTowODo0NVrOGbiWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MzI3Mg==", "bodyText": "Likewise.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430983272", "createdAt": "2020-05-27T09:29:42Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ServerKeyStore.java", "diffHunk": "@@ -88,7 +89,103 @@\n   private static final String KEY_PASSWORD = \"password\";\n   private static final String KEYSTORE_PASSWORD = \"password\";\n   private static final String TRUSTSTORE_PASSWORD = \"password\";\n+\n+  // Keystore containing two certs, for external.example.com and internal.example.com\n+  private static final String BASE64_ENCODED_STORE_MULTIPLE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNzQ2MQ==", "bodyText": "Done, moved to MultiNodeTrustStore.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431527461", "createdAt": "2020-05-28T01:08:45Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-test-util/src/main/java/io/confluent/ksql/test/util/secure/ServerKeyStore.java", "diffHunk": "@@ -88,7 +89,103 @@\n   private static final String KEY_PASSWORD = \"password\";\n   private static final String KEYSTORE_PASSWORD = \"password\";\n   private static final String TRUSTSTORE_PASSWORD = \"password\";\n+\n+  // Keystore containing two certs, for external.example.com and internal.example.com\n+  private static final String BASE64_ENCODED_STORE_MULTIPLE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MzI3Mg=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ5MzQ3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0MTozNFrOGbBj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowMzo1OFrOGbhSig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MDMxOA==", "bodyText": "We should be capturing the name of the entity connecting to use, i.e. the hostname of the remote server, and storing this in the principle.  This can then be used later when logging out request information so that we/users can see which node a remove request came from.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r430990318", "createdAt": "2020-05-27T09:41:34Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.InternalEndpointHandler;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (InternalEndpointHandler.INTERNAL_PATHS.contains(routingContext.normalisedPath())) {\n+      routingContext.setUser(new SystemUser(new SystemPrincipal()));\n+    }\n+    routingContext.next();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDE1NA==", "bodyText": "Good idea.  Done.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r431510154", "createdAt": "2020-05-28T00:03:58Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.InternalEndpointHandler;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (InternalEndpointHandler.INTERNAL_PATHS.contains(routingContext.normalisedPath())) {\n+      routingContext.setUser(new SystemUser(new SystemPrincipal()));\n+    }\n+    routingContext.next();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MDMxOA=="}, "originalCommit": {"oid": "1ede2cb2c076eba8338baefffd2d0c3b68cce0cc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzkwNzU3OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo1NDozNFrOGdDahw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo1NDozNFrOGdDahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExNzgzMQ==", "bodyText": "As time goes on there will be more an more functionality that requires inter-node communication.  Having clustered services that talk inter-node is a common pattern, (e.g. Kafka!), so I don't think we need to call out the endpoints that are being used - these are an implementation detail and don't really help the user.   Hence, I think it's clearer/cleaner just to say:\n\nksqlDB supports securing inter-node communication using SSL mutual authentication.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433117831", "createdAt": "2020-06-01T08:54:34Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,44 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+Since some system requests aren't done on behalf of a user, like `/heartbeat` and `/lag`, \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk0MTY1OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNjoyN1rOGdDvRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMTo1NFrOGfZ-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzE0MA==", "bodyText": "This, and the example config below, seems to assume the users in securing the client facing endpoint via SSL as well. That may not be the case.\nAlso, the ksql.ssl.keystore.alias.xxx in the example config aren't explained anywhere.\nConfiguring this stuff is normally a pain point for users, so the more hand-holding and the better the examples we can provide the better. To that end, I would encourage adding different sections for :\n\nConfiguring ksqlDB to use SSL mutual auth for inter-node comms and SSL server auth for client comms.  This section should explain about the aliases configs and how these relate to the keystores - I'd be tempted to give a step-by-step guide of how to create the necessary keystores and truststores, so that its really clear where in the process the user defines the alias they later reference in the ksql.ssl.keystore.alias.xxx configs.\nConfiguring ksqlDB to use SSL mutual auth for inter-node comms only, (which assumes some other auth method on the client facing comms).\nConfiguring ksqlDB to use jaas for external - does this require them to have specific paths in the exclude list for specific features to work?  If it does, that's not really a workable solution going forward as that list will change.  Users generally customize their properties files and then upgrade by updating the jars only - can we have some single setting that turns off auth on internal calls?\nConfiguring ksqlDB to use jaas for internal and external - if this is even possible?\nConfiguring ksqlDB to use a custom auth handler installed by the user - if this is even possible?\n\nI know the later points above are outside the scope of this PR - but now that we've got this new internal listener config we need to make sure the documentation covers the different valid combinations of auth setup for the listeners and make sure they are easy to configure. Of course, you can update the config in a follow-on PR. But document it we should - otherwise we've done all the hard work, but users will likely struggle to use the feature!", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433123140", "createdAt": "2020-06-01T09:06:27Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,44 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+Since some system requests aren't done on behalf of a user, like `/heartbeat` and `/lag`, \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is self-signed, a trust store is required to contain certificates for nodes in your cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyODg5OA==", "bodyText": "It would be good to see if @JimGalasyn has the time to try and follow the steps to create a working secure two-node setup!", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433128898", "createdAt": "2020-06-01T09:19:33Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,44 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+Since some system requests aren't done on behalf of a user, like `/heartbeat` and `/lag`, \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is self-signed, a trust store is required to contain certificates for nodes in your cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzE0MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDY5OQ==", "bodyText": "Ok, I've improved the documentation here quite a lot.\n\nThis, and the example config below, seems to assume the users in securing the client facing endpoint via SSL as well. That may not be the case.\n\nI removed that assumption.  The first example is with internal only.  I also give a second example that shows setting things up with both.\n\nAlso, the ksql.ssl.keystore.alias.xxx in the example config aren't explained anywhere.\n\nI now give more elaborated explanations on it.\n\nConfiguring this stuff is normally a pain point for users, so the more hand-holding and the better the examples we can provide the better. To that end, I would encourage adding different sections for :\nConfiguring ksqlDB to use SSL mutual auth for inter-node comms and SSL server auth for client comms. This section should explain about the aliases configs and how these relate to the keystores - I'd be tempted to give a step-by-step guide of how to create the necessary keystores and truststores, so that its really clear where in the process the user defines the alias they later reference in the ksql.ssl.keystore.alias.xxx configs.\n\nI added a whole section on how to generate the keystore and trust store.  It seems like maybe this could live elsewhere, but it's right in the middle of things at the moment.\n\nConfiguring ksqlDB to use SSL mutual auth for inter-node comms only, (which assumes some other auth method on the client facing comms).\n\nAdded\n\nConfiguring ksqlDB to use jaas for external - does this require them to have specific paths in the exclude list for specific features to work? If it does, that's not really a workable solution going forward as that list will change.\n\nAdded.\nThis is what's used in one of my functional tests.  It requires no exclude lists.  That was one of the big changes I did was to have KSQL consider this request authenticated as a SystemUser.\n\nUsers generally customize their properties files and then upgrade by updating the jars only - can we have some single setting that turns off auth on internal calls?\n\nI'm confused by what you mean.  Do you want a flag that negates other auth settings and disables it?  At the moment, ksql.internal.ssl.client.authentication=NONE works more or less that way.  It may still use SSL on the internal connection, but it won't require verification on either side (server or client).\n\nConfiguring ksqlDB to use jaas for internal and external - if this is even possible?\n\nNot possible at the moment for internal.\n\nConfiguring ksqlDB to use a custom auth handler installed by the user - if this is even possible?\nI know the later points above are outside the scope of this PR - but now that we've got this new internal listener config we need to make sure the documentation covers the different valid combinations of auth setup for the listeners and make sure they are easy to configure. Of course, you can update the config in a follow-on PR. But document it we should - otherwise we've done all the hard work, but users will likely struggle to use the feature!\n\nI added documentation for the above cases.  I agree we should keep working on this and I'm open to doing followup work there.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435584699", "createdAt": "2020-06-04T22:21:54Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,44 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+Since some system requests aren't done on behalf of a user, like `/heartbeat` and `/lag`, \n+user-based authentication is not appropriate for them. Instead, ksqlDB supports SSL mutual authentication for system requests.\n+\n+In addition to some of the HTTPS configurations above, your key store must now\n+contain not only the certificate/key for the endpoints exposed with `listeners`, but also\n+the additional certificate/key for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is self-signed, a trust store is required to contain certificates for nodes in your cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzE0MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk1NjgzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxMTo0MlrOGdD4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMjo0N1rOGfZ_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTQ5Ng==", "bodyText": "Can't this just be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (SystemAuthenticationHandler.hasAuthorization(routingContext)) {\n          \n          \n            \n                if (SystemAuthenticationHandler. isAuthenticatedAsSystemUser(routingContext)) {\n          \n      \n    \n    \n  \n\nNot sure the second hasAuthorization method adds anything here...", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433125496", "createdAt": "2020-06-01T09:11:42Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -54,6 +54,11 @@ public void handle(final RoutingContext routingContext) {\n       return;\n     }\n \n+    if (SystemAuthenticationHandler.hasAuthorization(routingContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTAwNQ==", "bodyText": "Ok.  Done.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435585005", "createdAt": "2020-06-04T22:22:47Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -54,6 +54,11 @@ public void handle(final RoutingContext routingContext) {\n       return;\n     }\n \n+    if (SystemAuthenticationHandler.hasAuthorization(routingContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTQ5Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk1ODg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxMjoyNVrOGdD5qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMzoyOFrOGfaAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTgwMg==", "bodyText": "Nice! Thanks for grabbing this info.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433125802", "createdAt": "2020-06-01T09:12:25Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTIyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435585228", "createdAt": "2020-06-04T22:23:28Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTgwMg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk2Njc1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxNToxM1rOGdD-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyNDozMFrOGfaCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNzAzMg==", "bodyText": "Does this call fail is auth mode is set to NONE?\nIf that's the case, then we shouldn't be throwing an exception here is auth mode is controlled by the user, right? i.e. if they want internal communication encrypted, but don't care about mutual auth, then this shouldn't be failing.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433127032", "createdAt": "2020-06-01T09:15:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));\n+    routingContext.next();\n+  }\n+\n+  private static Principal getPeerPrincipal(final SSLSession sslSession) {\n+    try {\n+      return sslSession.getPeerPrincipal();\n+    } catch (SSLPeerUnverifiedException e) {\n+      throw new IllegalStateException(\"Peer should always be verified\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTU0OQ==", "bodyText": "If auth mode is set to None, this handler won't even be installed.  It's only installed when mutual auth is enabled.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435585549", "createdAt": "2020-06-04T22:24:30Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));\n+    routingContext.next();\n+  }\n+\n+  private static Principal getPeerPrincipal(final SSLSession sslSession) {\n+    try {\n+      return sslSession.getPeerPrincipal();\n+    } catch (SSLPeerUnverifiedException e) {\n+      throw new IllegalStateException(\"Peer should always be verified\", e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNzAzMg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzk3MDgyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToxNjozN1rOGdEA6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyNTowMlrOGfaCtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNzY1Ng==", "bodyText": "nit: This would be better as JavaDocs - either on the method, or on the class.   JavaDocs are available to developers within the IDE, e.g CTRL+J in my setup, these comments aren't.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433127656", "createdAt": "2020-06-01T09:16:37Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));\n+    routingContext.next();\n+  }\n+\n+  private static Principal getPeerPrincipal(final SSLSession sslSession) {\n+    try {\n+      return sslSession.getPeerPrincipal();\n+    } catch (SSLPeerUnverifiedException e) {\n+      throw new IllegalStateException(\"Peer should always be verified\", e);\n+    }\n+  }\n+\n+  public static boolean isAuthenticatedAsSystemUser(final RoutingContext routingContext) {\n+    final User user = routingContext.user();\n+    return user instanceof SystemUser;\n+  }\n+\n+  public static boolean hasAuthorization(final RoutingContext routingContext) {\n+    return isAuthenticatedAsSystemUser(routingContext);\n+  }\n+\n+  public static Optional<SystemAuthenticationHandler> getSystemAuthenticationHandler(\n+      final Server server, final boolean isInternalListener) {\n+    // The requirements for being considered a system call on behalf of the SystemUser are that\n+    // SSL mutual auth is in effect for the connection (meaning that the request is verified to be\n+    // coming from a known set of servers in the cluster), and that it came on the internal\n+    // listener interface, meaning that it's being done with the authorization of the system\n+    // rather than directly on behalf of the user. Mutual auth is only enforced when SSL is used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTcxNw==", "bodyText": "Good point.  Moved to java docs.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435585717", "createdAt": "2020-06-04T22:25:02Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/SystemAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.core.http.HttpConnection;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLSession;\n+\n+public class SystemAuthenticationHandler implements Handler<RoutingContext> {\n+\n+  public SystemAuthenticationHandler() {}\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final HttpConnection httpConnection = routingContext.request().connection();\n+    if (!httpConnection.isSsl()) {\n+      throw new IllegalStateException(\"Should only have ssl connections\");\n+    }\n+    final Principal peerPrincipal = getPeerPrincipal(httpConnection.sslSession());\n+    routingContext.setUser(new SystemUser(peerPrincipal));\n+    routingContext.next();\n+  }\n+\n+  private static Principal getPeerPrincipal(final SSLSession sslSession) {\n+    try {\n+      return sslSession.getPeerPrincipal();\n+    } catch (SSLPeerUnverifiedException e) {\n+      throw new IllegalStateException(\"Peer should always be verified\", e);\n+    }\n+  }\n+\n+  public static boolean isAuthenticatedAsSystemUser(final RoutingContext routingContext) {\n+    final User user = routingContext.user();\n+    return user instanceof SystemUser;\n+  }\n+\n+  public static boolean hasAuthorization(final RoutingContext routingContext) {\n+    return isAuthenticatedAsSystemUser(routingContext);\n+  }\n+\n+  public static Optional<SystemAuthenticationHandler> getSystemAuthenticationHandler(\n+      final Server server, final boolean isInternalListener) {\n+    // The requirements for being considered a system call on behalf of the SystemUser are that\n+    // SSL mutual auth is in effect for the connection (meaning that the request is verified to be\n+    // coming from a known set of servers in the cluster), and that it came on the internal\n+    // listener interface, meaning that it's being done with the authorization of the system\n+    // rather than directly on behalf of the user. Mutual auth is only enforced when SSL is used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNzY1Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAwNjU2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToyOTo1OFrOGdEXJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozNjowMVrOGfaSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMzM0OA==", "bodyText": "Rather than passing isInternalListener to SystemAuthenticationHandler.getSystemAuthenticationHandler, why not just only call this method if isInternalListener is true?  This decouples SystemAuthenticationHandler from any concept of internal.\nPersonally, I'd be tempted to go further: I'd move the logic of when the system auth handler should be installed into this AuthHandlers class. i.e. move the getSystemAuthenticationHandler into this class.   Why?  It's generally a good pattern to separate the logic of when something should be used from the something itself.  This decoupling allows the same something to be used in the future in some other way without needing to be changed.\nThe systemAuthenticationHandler.ifPresent(handler -> router.route().handler(handler)); could then also be moved into the call.\nBut this is just a suggestion. Feel free to ignore me.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433133348", "createdAt": "2020-06-01T09:29:58Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "diffHunk": "@@ -37,12 +38,17 @@\n   private AuthHandlers() {\n   }\n \n-  static void setupAuthHandlers(final Server server, final Router router) {\n+  static void setupAuthHandlers(final Server server, final Router router,\n+      final boolean isInternalListener) {\n     final Optional<AuthHandler> jaasAuthHandler = getJaasAuthHandler(server);\n     final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n     final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n     final Optional<Handler<RoutingContext>> pluginHandler =\n         authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+    final Optional<SystemAuthenticationHandler> systemAuthenticationHandler\n+        = SystemAuthenticationHandler.getSystemAuthenticationHandler(server, isInternalListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4OTY3MQ==", "bodyText": "I think it's generally good to have the isInternalListener in getSystemAuthenticationHandler so that all of the logic is in one place so it's easy to reason about.\nI'm fine to move getSystemAuthenticationHandler here.  I put it in SystemAuthenticationHandler to organize related logic together, but I get your point about decoupling installation from the logic itself.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435589671", "createdAt": "2020-06-04T22:36:01Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AuthHandlers.java", "diffHunk": "@@ -37,12 +38,17 @@\n   private AuthHandlers() {\n   }\n \n-  static void setupAuthHandlers(final Server server, final Router router) {\n+  static void setupAuthHandlers(final Server server, final Router router,\n+      final boolean isInternalListener) {\n     final Optional<AuthHandler> jaasAuthHandler = getJaasAuthHandler(server);\n     final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n     final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n     final Optional<Handler<RoutingContext>> pluginHandler =\n         authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+    final Optional<SystemAuthenticationHandler> systemAuthenticationHandler\n+        = SystemAuthenticationHandler.getSystemAuthenticationHandler(server, isInternalListener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMzM0OA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxMTcyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMTo1NFrOGdEaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0OTo0MlrOGfaktg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            listener.getScheme().equalsIgnoreCase(\"https\"), isInternalListener),\n          \n          \n            \n                            listener.getScheme().equalsIgnoreCase(\"https\"), isInternalListener.orElse(false)),", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433134160", "createdAt": "2020-06-01T09:31:54Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -115,7 +117,7 @@ public synchronized void start() {\n         final VertxCompletableFuture<String> vcf = new VertxCompletableFuture<>();\n         final ServerVerticle serverVerticle = new ServerVerticle(endpoints,\n             createHttpServerOptions(config, listener.getHost(), listener.getPort(),\n-                listener.getScheme().equalsIgnoreCase(\"https\")),\n+                listener.getScheme().equalsIgnoreCase(\"https\"), isInternalListener),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDQyMg==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435594422", "createdAt": "2020-06-04T22:49:42Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -115,7 +117,7 @@ public synchronized void start() {\n         final VertxCompletableFuture<String> vcf = new VertxCompletableFuture<>();\n         final ServerVerticle serverVerticle = new ServerVerticle(endpoints,\n             createHttpServerOptions(config, listener.getHost(), listener.getPort(),\n-                listener.getScheme().equalsIgnoreCase(\"https\")),\n+                listener.getScheme().equalsIgnoreCase(\"https\"), isInternalListener),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDE2MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxMjM2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMjowOFrOGdEasg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0OTo1MFrOGfak2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Optional<Boolean> isInternalListener) {\n          \n          \n            \n                  final boolean isInternalListener) {", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433134258", "createdAt": "2020-06-01T09:32:08Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -239,7 +241,8 @@ public int queryConnectionCount() {\n   }\n \n   private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ksqlRestConfig,\n-      final String host, final int port, final boolean tls) {\n+      final String host, final int port, final boolean tls,\n+      final Optional<Boolean> isInternalListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDQ1OA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435594458", "createdAt": "2020-06-04T22:49:50Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -239,7 +241,8 @@ public int queryConnectionCount() {\n   }\n \n   private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ksqlRestConfig,\n-      final String host, final int port, final boolean tls) {\n+      final String host, final int port, final boolean tls,\n+      final Optional<Boolean> isInternalListener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDI1OA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxMjkzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMjoyMlrOGdEbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMjoyMlrOGdEbEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (isInternalListener.isPresent() && isInternalListener.get()) {\n          \n          \n            \n                  if (isInternalListener) {", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433134352", "createdAt": "2020-06-01T09:32:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      if (isInternalListener.isPresent() && isInternalListener.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODAxNDI5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozMjo1MVrOGdEb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1MDowMFrOGfalFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDU1MA==", "bodyText": "nit: move these into the appropriate branch of the if/else?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433134550", "createdAt": "2020-06-01T09:32:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDUxOQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435594519", "createdAt": "2020-06-04T22:50:00Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNDU1MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA2OTgxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1Mzo1NlrOGdE-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowMzoxN1rOGfa2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0MzMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AuthHandlers.setupAuthHandlers(server, router,\n          \n          \n            \n                    isInternalListener.isPresent() && isInternalListener.get());\n          \n          \n            \n                AuthHandlers.setupAuthHandlers(server, router,  isInternalListener.orElse(false));\n          \n      \n    \n    \n  \n\n??", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433143336", "createdAt": "2020-06-01T09:53:56Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -118,7 +118,8 @@ private Router setupRouter() {\n     isInternalListener.ifPresent(isInternal ->\n         router.route().handler(new InternalEndpointHandler(isInternal)));\n \n-    AuthHandlers.setupAuthHandlers(server, router);\n+    AuthHandlers.setupAuthHandlers(server, router,\n+        isInternalListener.isPresent() && isInternalListener.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5ODkxOQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435598919", "createdAt": "2020-06-04T23:03:17Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -118,7 +118,8 @@ private Router setupRouter() {\n     isInternalListener.ifPresent(isInternal ->\n         router.route().handler(new InternalEndpointHandler(isInternal)));\n \n-    AuthHandlers.setupAuthHandlers(server, router);\n+    AuthHandlers.setupAuthHandlers(server, router,\n+        isInternalListener.isPresent() && isInternalListener.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0MzMzNg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA3Njk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1NjoyOVrOGdFCkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNDo1NVrOGj9CXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NDQ2Ng==", "bodyText": "default value for the aliases in the config is an empty string. Adding a validator to the KsqlRestConfig  for the two alias configs can ensure the value is never null, making this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (keyStoreAlias != null && !keyStoreAlias.isEmpty()) {\n          \n          \n            \n                  if (!keyStoreAlias.isEmpty()) {", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433144466", "createdAt": "2020-06-01T09:56:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      if (isInternalListener.isPresent() && isInternalListener.get()) {\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());\n       }\n+    }\n+    return options;\n+  }\n \n-      final String trustStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n-      final Password trustStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n-      if (trustStorePath != null && !trustStorePath.isEmpty()) {\n-        options.setTrustStoreOptions(\n-            new JksOptions().setPath(trustStorePath).setPassword(trustStorePassword.value()));\n+  private static void setTlsOptions(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final HttpServerOptions options,\n+      final String keyStoreAlias,\n+      final ClientAuth clientAuth\n+  ) {\n+    options.setUseAlpn(true).setSsl(true);\n+\n+    final String keyStorePath = ksqlRestConfig\n+        .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+    final Password keyStorePassword = ksqlRestConfig\n+        .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+    if (keyStorePath != null && !keyStorePath.isEmpty()) {\n+      final JksOptions keyStoreOptions = new JksOptions()\n+          .setPassword(keyStorePassword.value());\n+      if (keyStoreAlias != null && !keyStoreAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTA0MQ==", "bodyText": "Done.  If I have \"\" as the default, is there a way for it to ever be null?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435595041", "createdAt": "2020-06-04T22:51:24Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      if (isInternalListener.isPresent() && isInternalListener.get()) {\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());\n       }\n+    }\n+    return options;\n+  }\n \n-      final String trustStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n-      final Password trustStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n-      if (trustStorePath != null && !trustStorePath.isEmpty()) {\n-        options.setTrustStoreOptions(\n-            new JksOptions().setPath(trustStorePath).setPassword(trustStorePassword.value()));\n+  private static void setTlsOptions(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final HttpServerOptions options,\n+      final String keyStoreAlias,\n+      final ClientAuth clientAuth\n+  ) {\n+    options.setUseAlpn(true).setSsl(true);\n+\n+    final String keyStorePath = ksqlRestConfig\n+        .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+    final Password keyStorePassword = ksqlRestConfig\n+        .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+    if (keyStorePath != null && !keyStorePath.isEmpty()) {\n+      final JksOptions keyStoreOptions = new JksOptions()\n+          .setPassword(keyStorePassword.value());\n+      if (keyStoreAlias != null && !keyStoreAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NDQ2Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNTczMw==", "bodyText": "Not sure. Maybe explicitly setting it via ksql.what.ever=null in the config file?  If that doesn't allow nulls then great!", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440115733", "createdAt": "2020-06-15T11:41:34Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      if (isInternalListener.isPresent() && isInternalListener.get()) {\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());\n       }\n+    }\n+    return options;\n+  }\n \n-      final String trustStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n-      final Password trustStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n-      if (trustStorePath != null && !trustStorePath.isEmpty()) {\n-        options.setTrustStoreOptions(\n-            new JksOptions().setPath(trustStorePath).setPassword(trustStorePassword.value()));\n+  private static void setTlsOptions(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final HttpServerOptions options,\n+      final String keyStoreAlias,\n+      final ClientAuth clientAuth\n+  ) {\n+    options.setUseAlpn(true).setSsl(true);\n+\n+    final String keyStorePath = ksqlRestConfig\n+        .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+    final Password keyStorePassword = ksqlRestConfig\n+        .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+    if (keyStorePath != null && !keyStorePath.isEmpty()) {\n+      final JksOptions keyStoreOptions = new JksOptions()\n+          .setPassword(keyStorePassword.value());\n+      if (keyStoreAlias != null && !keyStoreAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NDQ2Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MzM3NA==", "bodyText": "I tested that and it was the string \"null\" so I think we're good here.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440353374", "createdAt": "2020-06-15T18:04:55Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +254,54 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      final String externalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+      final String internalAlias = ksqlRestConfig\n+          .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      if (isInternalListener.isPresent() && isInternalListener.get()) {\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());\n       }\n+    }\n+    return options;\n+  }\n \n-      final String trustStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n-      final Password trustStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n-      if (trustStorePath != null && !trustStorePath.isEmpty()) {\n-        options.setTrustStoreOptions(\n-            new JksOptions().setPath(trustStorePath).setPassword(trustStorePassword.value()));\n+  private static void setTlsOptions(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final HttpServerOptions options,\n+      final String keyStoreAlias,\n+      final ClientAuth clientAuth\n+  ) {\n+    options.setUseAlpn(true).setSsl(true);\n+\n+    final String keyStorePath = ksqlRestConfig\n+        .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+    final Password keyStorePassword = ksqlRestConfig\n+        .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+    if (keyStorePath != null && !keyStorePath.isEmpty()) {\n+      final JksOptions keyStoreOptions = new JksOptions()\n+          .setPassword(keyStorePassword.value());\n+      if (keyStoreAlias != null && !keyStoreAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NDQ2Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA4MzM0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1ODo1NFrOGdFGiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyMjozMVrOGfbM6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NTQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"\",\n          \n          \n            \n                        \"\",\n          \n          \n            \n                        new NonNullValidator(),", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433145481", "createdAt": "2020-06-01T09:58:54Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -364,6 +384,27 @@\n             Importance.MEDIUM,\n             \"\"\n         ).define(\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+            Type.STRING,\n+            SSL_CLIENT_AUTHENTICATION_NONE,\n+            SSL_CLIENT_AUTHENTICATION_VALIDATOR,\n+            Importance.MEDIUM,\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_DOC\n+        ).define(\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",\n+            Importance.MEDIUM,\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_DOC\n+        )\n+        .define(\n+            KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDcxMw==", "bodyText": "Same here", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435604713", "createdAt": "2020-06-04T23:22:31Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -364,6 +384,27 @@\n             Importance.MEDIUM,\n             \"\"\n         ).define(\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+            Type.STRING,\n+            SSL_CLIENT_AUTHENTICATION_NONE,\n+            SSL_CLIENT_AUTHENTICATION_VALIDATOR,\n+            Importance.MEDIUM,\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_DOC\n+        ).define(\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",\n+            Importance.MEDIUM,\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_DOC\n+        )\n+        .define(\n+            KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NTQ4MQ=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA4MzQ3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1ODo1OFrOGdFGow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0MDoxM1rOGjufgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NTUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"\",\n          \n          \n            \n                        \"\",\n          \n          \n            \n                        new NonNullValidator(),", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433145507", "createdAt": "2020-06-01T09:58:58Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -364,6 +384,27 @@\n             Importance.MEDIUM,\n             \"\"\n         ).define(\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+            Type.STRING,\n+            SSL_CLIENT_AUTHENTICATION_NONE,\n+            SSL_CLIENT_AUTHENTICATION_VALIDATOR,\n+            Importance.MEDIUM,\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_DOC\n+        ).define(\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDYzOQ==", "bodyText": "I tested it out by passing \"null\" and empty string and I can't get it to be null when it has a default as \"\".  I'm pretty sure this validator isn't required.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435604639", "createdAt": "2020-06-04T23:22:17Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -364,6 +384,27 @@\n             Importance.MEDIUM,\n             \"\"\n         ).define(\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+            Type.STRING,\n+            SSL_CLIENT_AUTHENTICATION_NONE,\n+            SSL_CLIENT_AUTHENTICATION_VALIDATOR,\n+            Importance.MEDIUM,\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_DOC\n+        ).define(\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NTUwNw=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNTA3Mg==", "bodyText": "cool", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440115072", "createdAt": "2020-06-15T11:40:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -364,6 +384,27 @@\n             Importance.MEDIUM,\n             \"\"\n         ).define(\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG,\n+            Type.STRING,\n+            SSL_CLIENT_AUTHENTICATION_NONE,\n+            SSL_CLIENT_AUTHENTICATION_VALIDATOR,\n+            Importance.MEDIUM,\n+            KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_DOC\n+        ).define(\n+            KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG,\n+            Type.STRING,\n+            \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NTUwNw=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA5OTI0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowNToyMFrOGdFQnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyNDoxMlrOGfbOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (trustStoreLocation != null) {\n          \n          \n            \n                  if (trustStoreLocation != null && !trustStoreLocation.isEmpty()) {\n          \n      \n    \n    \n  \n\n???", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433148060", "createdAt": "2020-06-01T10:05:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNTE5OA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435605198", "createdAt": "2020-06-04T23:24:12Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODA2MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEwMTQ3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowNjowNVrOGdFR8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozMjowM1rOGfbXkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (keyStoreLocation != null) {\n          \n          \n            \n                    if (keyStoreLocation != null && !keyStoreLocation.isEmpty()) {\n          \n      \n    \n    \n  \n\n???\nPITA these configs don't default to \"\" and have a validator to ensure they're not null!", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433148401", "createdAt": "2020-06-01T10:06:05Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNzQ0MQ==", "bodyText": "I wasn't able to get this to have a null value, even when I don't set it...  It appears to have a default of \"\".", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435607441", "createdAt": "2020-06-04T23:32:03Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODQwMQ=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEwNDQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowNzowOVrOGdFTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozMzozMVrOGfbb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODg0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (internalAlias != null && !internalAlias.isEmpty()) {\n          \n          \n            \n                      if (!internalAlias.isEmpty()) {\n          \n      \n    \n    \n  \n\nThis one we control, so can have suitable defaults and validators to ensure never null.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433148842", "createdAt": "2020-06-01T10:07:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {\n+          final String suppliedKeyStorePassord = Strings.nullToEmpty(clientProps\n+              .get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n+          final JksOptions keyStoreOptions = new JksOptions()\n+              .setPassword(suppliedKeyStorePassord);\n+          if (internalAlias != null && !internalAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwODU2Mg==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435608562", "createdAt": "2020-06-04T23:33:31Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {\n+          final String suppliedKeyStorePassord = Strings.nullToEmpty(clientProps\n+              .get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n+          final JksOptions keyStoreOptions = new JksOptions()\n+              .setPassword(suppliedKeyStorePassord);\n+          if (internalAlias != null && !internalAlias.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODg0Mg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEwNjUzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowODowMVrOGdFVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzo0NjozNlrOGfb-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0OTE5Mg==", "bodyText": "Does this work if mode is REQUESTED?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433149192", "createdAt": "2020-06-01T10:08:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {\n+          final String suppliedKeyStorePassord = Strings.nullToEmpty(clientProps\n+              .get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n+          final JksOptions keyStoreOptions = new JksOptions()\n+              .setPassword(suppliedKeyStorePassord);\n+          if (internalAlias != null && !internalAlias.isEmpty()) {\n+            keyStoreOptions.setValue(KeystoreUtil.getKeyStore(\n+                keyStoreLocation, suppliedKeyStorePassord, internalAlias));\n+          } else {\n+            keyStoreOptions.setPath(keyStoreLocation);\n+          }\n+          httpClientOptions.setKeyStoreOptions(keyStoreOptions);\n+        }\n+      }\n+    };\n+  }\n \n+  private static KsqlClient getInternalClient(final Map<String, String> clientProps,\n+      final Optional<HostAliasResolver> hostAliasResolver) {\n+    final boolean verifyHost =\n+        !KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_NONE.equals(clientProps.get(\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxNzQ1MA==", "bodyText": "If the server requires anything other than NONE for requesting clients, then then it will also verify identities as a requesting client when doing internal communication.  If REQUESTED is done, while https is in use, it requires that their certs check out.\nThis is a little arbitrary.  I wanted a simple way to allow for having https, but not doing verification here (i.e. \"NONE\") without introducing another config.  What do you think?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435617450", "createdAt": "2020-06-04T23:46:36Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -164,5 +167,50 @@ private static HttpClientOptions createClientOptions() {\n     return clientProps;\n   }\n \n+  private static Consumer<HttpClientOptions> prepareHttpOptionsForSSL(\n+      final Map<String, String> clientProps, final boolean verifyHost) {\n+    return (httpClientOptions) -> {\n+      httpClientOptions.setVerifyHost(verifyHost);\n+      httpClientOptions.setSsl(true);\n+      final String internalAlias = clientProps\n+          .get(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+      final String trustStoreLocation = clientProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+      if (trustStoreLocation != null) {\n+        final String suppliedTruststorePassword = clientProps\n+            .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        httpClientOptions.setTrustStoreOptions(new JksOptions().setPath(trustStoreLocation)\n+            .setPassword(suppliedTruststorePassword == null ? \"\" : suppliedTruststorePassword));\n+\n+        final String keyStoreLocation = clientProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        if (keyStoreLocation != null) {\n+          final String suppliedKeyStorePassord = Strings.nullToEmpty(clientProps\n+              .get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n+          final JksOptions keyStoreOptions = new JksOptions()\n+              .setPassword(suppliedKeyStorePassord);\n+          if (internalAlias != null && !internalAlias.isEmpty()) {\n+            keyStoreOptions.setValue(KeystoreUtil.getKeyStore(\n+                keyStoreLocation, suppliedKeyStorePassord, internalAlias));\n+          } else {\n+            keyStoreOptions.setPath(keyStoreLocation);\n+          }\n+          httpClientOptions.setKeyStoreOptions(keyStoreOptions);\n+        }\n+      }\n+    };\n+  }\n \n+  private static KsqlClient getInternalClient(final Map<String, String> clientProps,\n+      final Optional<HostAliasResolver> hostAliasResolver) {\n+    final boolean verifyHost =\n+        !KsqlRestConfig.SSL_CLIENT_AUTHENTICATION_NONE.equals(clientProps.get(\n+        KsqlRestConfig.KSQL_INTERNAL_SSL_CLIENT_AUTHENTICATION_CONFIG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0OTE5Mg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEwOTU4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowOToxMlrOGdFXGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzo0OTo1M1rOGfcB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0OTcyMw==", "bodyText": "Better to encode the optionality of password into the signature of the method? i.e. Optional<String> password?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433149723", "createdAt": "2020-06-01T10:09:12Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxODI3MQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435618271", "createdAt": "2020-06-04T23:49:53Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0OTcyMw=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODExMzkzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxMDo0N1rOGdFZtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzo1MDowMVrOGfcB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MDM5MA==", "bodyText": "Is this assuming the same password for the keystore and the key?  Isn't it possible these are different?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433150390", "createdAt": "2020-06-01T10:10:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxODI5OA==", "bodyText": "You're right.  Made it a separate parameter.  By default, I'm passing the same password for both, since we don't appear to use the key password in ksql at the moment.\nThe keytool will use the same password for keys as for the keystore if you don't provide a separate one, so this seems like the default behavior.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435618298", "createdAt": "2020-06-04T23:50:01Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MDM5MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODExNTg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxMToxOVrOGdFawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoxNjozMVrOGfccVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MDY1Ng==", "bodyText": "Include the alias in the message to make it clear which is failing?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433150656", "createdAt": "2020-06-01T10:11:19Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNTA0NQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435625045", "createdAt": "2020-06-05T00:16:31Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MDY1Ng=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyMDIyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxMjo1OVrOGdFdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoxOTo0MlrOGfcfYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MTM1OQ==", "bodyText": "Why not use try-with-resource, removing the need for finally block\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                try (FileInputStream input = new InputStream(keyStoreParth) {", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433151359", "createdAt": "2020-06-01T10:12:59Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);\n+    }\n+\n+    if (key == null || chain == null) {\n+      throw new KsqlException(\"Alias doesn't exist in keystore: \" + alias);\n+    }\n+\n+    final byte[] singleValueKeyStore = createSingleValueKeyStore(key, chain, pw, alias);\n+    return Buffer.buffer(singleValueKeyStore);\n+  }\n+\n+  private static KeyStore loadExistingKeyStore(final String keyStorePath, final char[] pw) {\n+    FileInputStream input = null;\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNTgyNQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435625825", "createdAt": "2020-06-05T00:19:42Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);\n+    }\n+\n+    if (key == null || chain == null) {\n+      throw new KsqlException(\"Alias doesn't exist in keystore: \" + alias);\n+    }\n+\n+    final byte[] singleValueKeyStore = createSingleValueKeyStore(key, chain, pw, alias);\n+    return Buffer.buffer(singleValueKeyStore);\n+  }\n+\n+  private static KeyStore loadExistingKeyStore(final String keyStorePath, final char[] pw) {\n+    FileInputStream input = null;\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MTM1OQ=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyMjY5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNDowM1rOGdFfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoxOTo1OFrOGfcfmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MTc3MA==", "bodyText": "input stream leak...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  keyStore.load(new FileInputStream(keyStorePath), pw);\n          \n          \n            \n                  keyStore.load(input, pw);", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433151770", "createdAt": "2020-06-01T10:14:03Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);\n+    }\n+\n+    if (key == null || chain == null) {\n+      throw new KsqlException(\"Alias doesn't exist in keystore: \" + alias);\n+    }\n+\n+    final byte[] singleValueKeyStore = createSingleValueKeyStore(key, chain, pw, alias);\n+    return Buffer.buffer(singleValueKeyStore);\n+  }\n+\n+  private static KeyStore loadExistingKeyStore(final String keyStorePath, final char[] pw) {\n+    FileInputStream input = null;\n+    try {\n+      input = new FileInputStream(keyStorePath);\n+      final KeyStore keyStore = KeyStore.getInstance(KEYSTORE_TYPE);\n+      keyStore.load(new FileInputStream(keyStorePath), pw);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNTg4Mw==", "bodyText": "oops.  Good catch", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435625883", "createdAt": "2020-06-05T00:19:58Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/KeystoreUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlException;\n+import io.vertx.core.buffer.Buffer;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class KeystoreUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(KeystoreUtil.class);\n+  private static final String KEYSTORE_TYPE = \"JKS\";\n+\n+  private KeystoreUtil() {}\n+\n+  /**\n+   * Utility to fetch a Vert.x Buffer that is the serialized version of the key store from the\n+   * given path, but which contains only the entry for the given alias.  This circumvents Vert.x's\n+   * direct support of an alias option.\n+   * @param keyStorePath The original key store which may contain multiple certificates\n+   * @param password The key store password\n+   * @param alias The alias of the entry to extract\n+   * @return The Buffer containing the keystore\n+   */\n+  public static Buffer getKeyStore(\n+      final String keyStorePath,\n+      final String password,\n+      final String alias\n+  ) {\n+    final char[] pw = password != null ? password.toCharArray() : null;\n+    final KeyStore keyStore = loadExistingKeyStore(keyStorePath, pw);\n+\n+    final PrivateKey key;\n+    final Certificate[] chain;\n+    try {\n+      key = (PrivateKey) keyStore.getKey(alias, pw);\n+      chain = keyStore.getCertificateChain(alias);\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Error fetching key/certificate\", e);\n+    }\n+\n+    if (key == null || chain == null) {\n+      throw new KsqlException(\"Alias doesn't exist in keystore: \" + alias);\n+    }\n+\n+    final byte[] singleValueKeyStore = createSingleValueKeyStore(key, chain, pw, alias);\n+    return Buffer.buffer(singleValueKeyStore);\n+  }\n+\n+  private static KeyStore loadExistingKeyStore(final String keyStorePath, final char[] pw) {\n+    FileInputStream input = null;\n+    try {\n+      input = new FileInputStream(keyStorePath);\n+      final KeyStore keyStore = KeyStore.getInstance(KEYSTORE_TYPE);\n+      keyStore.load(new FileInputStream(keyStorePath), pw);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MTc3MA=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEzNzMwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMDoxMFrOGdFoXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1Mjo0MlrOGfc98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NDE0Mg==", "bodyText": "why are we passing in a consumer that is just called back with the httpClientOptions passed in?  This feels like an anti-pattern to me.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433154142", "createdAt": "2020-06-01T10:20:10Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver\n   ) {\n     this.vertx = Vertx.vertx();\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(\n+      final Optional<BasicCredentials> credentials,\n+      final LocalProperties localProperties,\n+      final HttpClientOptions httpClientOptions,\n+      final Consumer<HttpClientOptions> sslHttpClientOptionsConsumer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzY0OA==", "bodyText": "Because it's only used when SSL is used...  I agree I don't like it.  I'll instead pass in a Function<Boolean, HttpClientOptions> factory that takes in if it's ssl in place of this as well as the HttpClientOptions before it.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435633648", "createdAt": "2020-06-05T00:52:42Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver\n   ) {\n     this.vertx = Vertx.vertx();\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(\n+      final Optional<BasicCredentials> credentials,\n+      final LocalProperties localProperties,\n+      final HttpClientOptions httpClientOptions,\n+      final Consumer<HttpClientOptions> sslHttpClientOptionsConsumer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NDE0Mg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE0MDUyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMToyMlrOGdFqLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozNjo1OFrOGfefwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NDYwNg==", "bodyText": "Rather than store a Optional<HostResolver>, why not default to a HostResolver impl that just returns the value passed? e.g. Function.identify().  This would simplify this code.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433154606", "createdAt": "2020-06-01T10:21:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver\n   ) {\n     this.vertx = Vertx.vertx();\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(\n+      final Optional<BasicCredentials> credentials,\n+      final LocalProperties localProperties,\n+      final HttpClientOptions httpClientOptions,\n+      final Consumer<HttpClientOptions> sslHttpClientOptionsConsumer,\n+      final Optional<HostAliasResolver> hostAliasResolver\n+  ) {\n+    this.vertx = Vertx.vertx();\n+    this.basicAuthHeader = createBasicAuthHeader(\n+        Objects.requireNonNull(credentials, \"credentials\"));\n+    this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n+    this.httpNonTlsClient = createHttpClient(vertx, httpClientOptions, sslHttpClientOptionsConsumer,\n+        false);\n+    this.httpTlsClient = createHttpClient(vertx, httpClientOptions, sslHttpClientOptionsConsumer,\n+        true);\n+  }\n+\n   public KsqlTarget target(final URI server) {\n     final boolean isUriTls = server.getScheme().equalsIgnoreCase(\"https\");\n     final HttpClient client = isUriTls ? httpTlsClient : httpNonTlsClient;\n+    final String aliasHost = hostAliasResolver.map(resolver -> resolver.resolve(server.getHost()))\n+        .orElse(server.getHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1ODY5MA==", "bodyText": "I effectively did this with your BiFunction<Integer, String, SocketAddress> socketAddressFactory suggestion.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435658690", "createdAt": "2020-06-05T02:36:58Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver\n   ) {\n     this.vertx = Vertx.vertx();\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(\n+      final Optional<BasicCredentials> credentials,\n+      final LocalProperties localProperties,\n+      final HttpClientOptions httpClientOptions,\n+      final Consumer<HttpClientOptions> sslHttpClientOptionsConsumer,\n+      final Optional<HostAliasResolver> hostAliasResolver\n+  ) {\n+    this.vertx = Vertx.vertx();\n+    this.basicAuthHeader = createBasicAuthHeader(\n+        Objects.requireNonNull(credentials, \"credentials\"));\n+    this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.hostAliasResolver = Objects.requireNonNull(hostAliasResolver, \"hostAliasResolver\");\n+    this.httpNonTlsClient = createHttpClient(vertx, httpClientOptions, sslHttpClientOptionsConsumer,\n+        false);\n+    this.httpTlsClient = createHttpClient(vertx, httpClientOptions, sslHttpClientOptionsConsumer,\n+        true);\n+  }\n+\n   public KsqlTarget target(final URI server) {\n     final boolean isUriTls = server.getScheme().equalsIgnoreCase(\"https\");\n     final HttpClient client = isUriTls ? httpTlsClient : httpNonTlsClient;\n+    final String aliasHost = hostAliasResolver.map(resolver -> resolver.resolve(server.getHost()))\n+        .orElse(server.getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NDYwNg=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE0Njg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMzo1N1rOGdFuIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1MDoyOVrOGfc70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTYxNw==", "bodyText": "It seems a shame to require every use of this production class to supply a HostAliasResolver, given this should only be passed for test cases, right?  And most test cases won't need this either. Just one or two specific tests that are testing the new code you're adding. Yet HostAliasResolver is mentioned around 40 times in this PR.\nIs there another way?\nAt the very least you could remove this parameter from this constructor and add another constructor, annotated with @VisibleForTesting that takes the resolver.  However, ideally, the production code should know nothing of HostAliasResolver...\nI think this can be achieved by injecting an interface to handle the SocketAddress.inetSocketAddress call.   So rather than taking a HostAliasResolver the @VisiableForTesting constructor takes BiFunction<Integer, String, SocketAddress> socketAddressFactory.  Test code can then use this to perform the same aliasing that HostAliasResolver does now.   Please see if you can remove HostAliasResolver from the production code base, or at least from the non- @VisibleForTesting constructors.\nSocketAddress.inetSocketAddress(server.getPort(), aliasHost)", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433155617", "createdAt": "2020-06-01T10:23:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzEwNQ==", "bodyText": "Yeah, I agree I didn't really like having to add this, but you need some \"seam\" to inject the test version.\nNice suggestion. I did the factory as you mentioned.  A named interface is definitely a little misleading for test-only code.  Now I have a @VisibleForTesting constructor where I take it, and the other just uses the default SocketAddress::inetSocketAddress.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435633105", "createdAt": "2020-06-05T00:50:29Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -44,27 +45,50 @@\n   private final HttpClient httpTlsClient;\n   private final LocalProperties localProperties;\n   private final Optional<String> basicAuthHeader;\n+  private final Optional<HostAliasResolver> hostAliasResolver;\n \n   public KsqlClient(\n       final Map<String, String> clientProps,\n       final Optional<BasicCredentials> credentials,\n       final LocalProperties localProperties,\n-      final HttpClientOptions httpClientOptions\n+      final HttpClientOptions httpClientOptions,\n+      final Optional<HostAliasResolver> hostAliasResolver", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTYxNw=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE3NDg3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozNDo1OVrOGdGABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1MToyMFrOGju0mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDE5OQ==", "bodyText": "why are we passing in host here? I'm assuming this is different to socketAddress.getHost.  This is really counter-intuitive and the kind of thing that will trip people up later when they make changes to this class.\nIs there any reason by you can't just change the calling code to pass in the right socketAdrress?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r433160199", "createdAt": "2020-06-01T10:34:59Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -73,28 +73,31 @@\n   private final SocketAddress socketAddress;\n   private final LocalProperties localProperties;\n   private final Optional<String> authHeader;\n+  private final String host;\n \n   KsqlTarget(\n       final HttpClient httpClient,\n       final SocketAddress socketAddress,\n       final LocalProperties localProperties,\n-      final Optional<String> authHeader\n+      final Optional<String> authHeader,\n+      final String host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzkzNw==", "bodyText": "This host value is what's passed to the server as the host header rather than what's used to actually connect.  This is what allows you to connect to localhost while claiming you're talking to example.com and to compare the returned cert to example.com.\nI agree it's a little confusing, though this is the exact API we use in Vert.x: https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html#request-io.vertx.core.http.HttpMethod-io.vertx.core.net.SocketAddress-int-java.lang.String-java.lang.String-io.vertx.core.Handler-\nThe difference there is that they have a lot of overloaded versions that don't require this additional host parameter, so you have to read about it if you want to us it.  I tried adding documentation.  Tell me if you have other ideas.  (One such thing might be taking in arbitrary headers and then I could set the host header explicitly, and use the socketAddress.host() as before, though I don't really consider this cleaner).", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r435663937", "createdAt": "2020-06-05T02:59:25Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -73,28 +73,31 @@\n   private final SocketAddress socketAddress;\n   private final LocalProperties localProperties;\n   private final Optional<String> authHeader;\n+  private final String host;\n \n   KsqlTarget(\n       final HttpClient httpClient,\n       final SocketAddress socketAddress,\n       final LocalProperties localProperties,\n-      final Optional<String> authHeader\n+      final Optional<String> authHeader,\n+      final String host", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDE5OQ=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMDQ3Mg==", "bodyText": "Looks good.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440120472", "createdAt": "2020-06-15T11:51:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -73,28 +73,31 @@\n   private final SocketAddress socketAddress;\n   private final LocalProperties localProperties;\n   private final Optional<String> authHeader;\n+  private final String host;\n \n   KsqlTarget(\n       final HttpClient httpClient,\n       final SocketAddress socketAddress,\n       final LocalProperties localProperties,\n-      final Optional<String> authHeader\n+      final Optional<String> authHeader,\n+      final String host", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDE5OQ=="}, "originalCommit": {"oid": "51f0152d2fb11214d27f069e56e038e1a980ab1e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc5NzQzOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoyMjowOFrOGjsLGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1NDowM1rOGj8q2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzA4Mw==", "bodyText": "Link to the markdown docs so that the links work in Github!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n          \n          \n            \n            For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440077083", "createdAt": "2020-06-15T10:22:08Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NzM1Mw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440347353", "createdAt": "2020-06-15T17:54:03Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzA4Mw=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTg1MjU1OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo0MDoxMlrOGjsu-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo0ODowMlrOGkD6Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NjI2NQ==", "bodyText": "Add recommendation about using SSL encryption for external listener if using plain-text BASIC http auth - or better still, just update the example to use SSL-client-auth.\nThe existing Configure ksqlDB for Basic HTTP Authentication section has such a recommendation. Equally this existing section could be updated to do-the-right-thing and have both BASIC and SSL client auth.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440086265", "createdAt": "2020-06-15T10:40:12Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n+\n+### Using Authentication on the Internal Listener\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+### Using Authentication for Both the Internal and External Listener\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NTkyNg==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440465926", "createdAt": "2020-06-15T21:48:02Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n+\n+### Using Authentication on the Internal Listener\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+### Using Authentication for Both the Internal and External Listener\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NjI2NQ=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTg5MTE4OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1Mjo1NlrOGjtG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1ODozMVrOGkFfkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MjM3NA==", "bodyText": "I've just had a look at what's already in this document and I think, rather than adding a brand new section, the details you're covering need to be integrated with what is already there.\nCurrently, the sections above cover:\n\n\"Configuring ksqlDB for HTTPS\" i.e. External encrypted using SSL-client auth.\n\n'Configure the CLI for HTTPS', i.e. CLI side config needed to talk to server over ssl.\n\n\n\"Configure ksqlDB for Basic HTTP Authentication\", i.e. External secured using HTTP-BASIC auth.\n\n'Configure the CLI for Basic HTTP Authentication', i.e. CLI config needed for HTTP-BASIC.\n\n\n\nNOTE: the text right at the top of the doc, which is an index of sorts, link to the above sections.\nThen the sections you've added are:\n\nInternal secured using SSL-mutual auth\nInternal secured using SSL-mutual auth + External secured using HTTP-BASIC auth.\nInternal secured using SSL-mutual auth + External encrypted using SSL-client auth\n\nNOTE: the text right at the top of the doc needs updating to link to your new sections.\nOthers have also previously added new sections without updating the preamble / index at the top. So we could do with fixing that.\nRecommended structure:\nWhat I'd recommend is updating the blurb at the top to something that calls out 'single listener' vs 'dual listener' difference, and 'authentication' vs 'encryption' and links to appropriate sections, and includes links to any new sections added by others. Maybe something like the following.\nNote: Each index level would link to the appropriate section in the doc below. Each configuration section title clearly states, in a consistent manner, what's being configured.  This will allow people to jump to the big they need.\nIt also directs ccloud users away to the ccloud docs, allowing this page to focus on the on-prem setup.\n\nksqlDB supports several combinations of encryption and authentication on its client-facing and internal endpoints, and also supports many of the security features of the other services it communicates with, like {{ site.aktm }} and {{ site.sr }}.\n\nSecuring ksqlDB on Confluent Cloud\nSecuring ksqlDB on premise\n\nSecuring ksqlDB installation\n\nSecuring interactive deployments\n\nSecuring single listener setup\n\nConfiguring listener for SSL encryption\nConfiguring listener for HTTP-BASIC authentication\nConfiguring listener for JAAS authentication\n\n\nSecuring dual listener setup\n\nConfiguring internal for SSL-mutual authentication\nConfiguring internal for SSL-mutual authentication + external for SSL encryption\nConfiguring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\nConfiguring internal for SSL-mutual authentication + external for JAAS authentication\n\n\nSecuring headless deployments\n\n\n\n\nSecuring communication with other services\n\nConfigure ksqlDB for Confluent Control Center\nConfigure ksqlDB for Secured Confluent Schema Registry\nConfigure ksqlDB for Secured Apache Kafka clusters\n\nConfiguring Kafka Encrypted Communication\nConfigure Kafka Authentication\nConfigure Authorization of ksqlDB with Kafka ACLs\n\nConfluent Platform v5.0 (Apache Kafka v2.0) and above\nConfluent Platform versions below v5.0 (Apache Kafka < v2.0)\n\n\n\n\n\n\n\n\n\n\nThen each section heading can explain the top level items that come within it. For example:\n\nSecuring ksqlDB on premise\nThis section covers how to secure installations of ksqlDB outside of Confluent Cloud, e.g. on-premise installations or manual installations on other cloud platforms.\nThe section is split into:\n\nSecuring ksqlDB installation: covering how to secure access to ksqlDB itself and its own internal communication.\nSecuring communication with other services: covering how to secure communication with other services and access to the resources they hold.\n\nSecuring ksqlDB installation\nksqlDB supports two main deployment modes:\n\nSecuring interactive deployments: interactive deployments are those where the ksqlDB servers accept client connections.\nSecuring headless deployments: headless deployments are those where the ksqlDB servers do not accept client connections. They read the SQL statements they should run from a file on-disk.\n\nSecuring interactive deployments\nSecuring the interactive ksqlDB installation involves securing the HTTP endpoints the ksqlDB server is listening on.\nAs well as accepting connections and requests from clients, a multi-node ksqlDB cluster also requires inter-node communications.  You can choose to configure the external client and internal inter-node communication  separately or over a single listener:\n\nSecuring single listener setup:  ideal for single-node installations, or where the inter-node communication is over the same network interfaces as client communication.\nSecuring dual listener setup: useful where inter-node communication is over a different network interfaces or requires different authentication or encryption configuration.\n\n\nI'm sure you get the idea!\nAlso, take a look at the existing preamble text at the top. I'm sure there's useful information in there.  I'd be restructuring it and moving it into the appropriate sections. e.g. the bit about how to pass the config file to the server should be in the Securing ksqlDB on premise section.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440092374", "createdAt": "2020-06-15T10:52:56Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MTkyMw==", "bodyText": "I've just had a look at what's already in this document and I think, rather than adding a brand new section, the details you're covering need to be integrated with what is already there.\n\nI followed your instructions fairly closely, so I think we're good there.\n@JimGalasyn Can you take a look at my docs changes again?  Also, How can I verify that the local anchor links work correctly?  None of my tools allow for checking this.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440491923", "createdAt": "2020-06-15T22:58:31Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MjM3NA=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjAxMjcyOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozMzowN1rOGjuSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozODowNlrOGj-HkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTgwNw==", "bodyText": "Maybe include ksql.ssl.client.authentication= whatever, just so users are aware?", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440111807", "createdAt": "2020-06-15T11:33:07Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n+\n+### Using Authentication on the Internal Listener\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+### Using Authentication for Both the Internal and External Listener\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the \n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication, \n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+### Configuring HTTPS on the Internal and External Listeners\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,\n+refer [below](#setting-up-a-key-store-and-trust-store).\n+\n+In such a configuration, you must specify which key pair is used for a given\n+listener by providing a key store alias.  For example, \n+if set, `ksql.ssl.keystore.alias.internal` will be used to find the key store entry\n+with the given alias when setting up the internal listener.  Similarly,\n+`ksql.ssl.keystore.alias.external` is used for the client listener `listeners`.\n+Below is an example configuration:\n+\n+```properties\n+# Contains the client certificate for this node under the alias 'client'.\n+# (e.g. key pair for external.example.com)\n+# Contains the internal certificate for this node under the alias 'internal_node1'.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# The aliases referenced above\n+ksql.ssl.keystore.alias.external=client\n+ksql.ssl.keystore.alias.internal=internal_node1\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=https://external.example.com:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTA4OQ==", "bodyText": "Sure, added ksql.ssl.client.authentication=NONE since most configurations use another mechanism for client authentication.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440371089", "createdAt": "2020-06-15T18:38:06Z", "author": {"login": "AlanConfluent"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n+\n+### Using Authentication on the Internal Listener\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+### Using Authentication for Both the Internal and External Listener\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the \n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication, \n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+### Configuring HTTPS on the Internal and External Listeners\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,\n+refer [below](#setting-up-a-key-store-and-trust-store).\n+\n+In such a configuration, you must specify which key pair is used for a given\n+listener by providing a key store alias.  For example, \n+if set, `ksql.ssl.keystore.alias.internal` will be used to find the key store entry\n+with the given alias when setting up the internal listener.  Similarly,\n+`ksql.ssl.keystore.alias.external` is used for the client listener `listeners`.\n+Below is an example configuration:\n+\n+```properties\n+# Contains the client certificate for this node under the alias 'client'.\n+# (e.g. key pair for external.example.com)\n+# Contains the internal certificate for this node under the alias 'internal_node1'.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# The aliases referenced above\n+ksql.ssl.keystore.alias.external=client\n+ksql.ssl.keystore.alias.internal=internal_node1\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=https://external.example.com:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTgwNw=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjAxNjk2OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozNDozN1rOGjuVhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozNDozN1rOGjuVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMjUxNg==", "bodyText": "perfect!", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440112516", "createdAt": "2020-06-15T11:34:37Z", "author": {"login": "big-andy-coates"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,6 +219,134 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n+Configure ksqlDB for Internal Authentication\n+--------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.html#configuring-listeners-of-a-ksqldb-cluster).\n+\n+### Using Authentication on the Internal Listener\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+### Using Authentication for Both the Internal and External Listener\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the \n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication, \n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+### Configuring HTTPS on the Internal and External Listeners\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,\n+refer [below](#setting-up-a-key-store-and-trust-store).\n+\n+In such a configuration, you must specify which key pair is used for a given\n+listener by providing a key store alias.  For example, \n+if set, `ksql.ssl.keystore.alias.internal` will be used to find the key store entry\n+with the given alias when setting up the internal listener.  Similarly,\n+`ksql.ssl.keystore.alias.external` is used for the client listener `listeners`.\n+Below is an example configuration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjAyODM3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozODozN1rOGjucsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNDowN1rOGj9AoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNDM1Mw==", "bodyText": "Just a suggestion but:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (isInternalListener) {\n          \n          \n            \n                    final String internalAlias = ksqlRestConfig\n          \n          \n            \n                        .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n          \n          \n            \n                    setTlsOptions(ksqlRestConfig, options, internalAlias,\n          \n          \n            \n                        ksqlRestConfig.getClientAuthInternal());\n          \n          \n            \n                  } else {\n          \n          \n            \n                    final String externalAlias = ksqlRestConfig\n          \n          \n            \n                        .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n          \n          \n            \n                    setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());\n          \n          \n            \n                  final String ksConfigName = isInternalListener:\n          \n          \n            \n                       ? KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG\n          \n          \n            \n                       : KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG;\n          \n          \n            \n                       \n          \n          \n            \n                  final String alias = ksqlRestConfig.getString(ksConfigName);\n          \n          \n            \n                  setTlsOptions(ksqlRestConfig, options, alias, ksqlRestConfig.getClientAuthInternal());", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440114353", "createdAt": "2020-06-15T11:38:37Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +255,57 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      if (isInternalListener) {\n+        final String internalAlias = ksqlRestConfig\n+            .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        final String externalAlias = ksqlRestConfig\n+            .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MjkyOA==", "bodyText": "Done.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440352928", "createdAt": "2020-06-15T18:04:07Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -251,30 +255,57 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n         .setPerFrameWebSocketCompressionSupported(true);\n \n     if (tls) {\n-      options.setUseAlpn(true).setSsl(true);\n-\n-      final String keyStorePath = ksqlRestConfig\n-          .getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n-      final Password keyStorePassword = ksqlRestConfig\n-          .getPassword(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n-      if (keyStorePath != null && !keyStorePath.isEmpty()) {\n-        options.setKeyStoreOptions(\n-            new JksOptions().setPath(keyStorePath).setPassword(keyStorePassword.value()));\n+      if (isInternalListener) {\n+        final String internalAlias = ksqlRestConfig\n+            .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_INTERNAL_CONFIG);\n+        setTlsOptions(ksqlRestConfig, options, internalAlias,\n+            ksqlRestConfig.getClientAuthInternal());\n+      } else {\n+        final String externalAlias = ksqlRestConfig\n+            .getString(KsqlRestConfig.KSQL_SSL_KEYSTORE_ALIAS_EXTERNAL_CONFIG);\n+        setTlsOptions(ksqlRestConfig, options, externalAlias, ksqlRestConfig.getClientAuth());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNDM1Mw=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA0OTE0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/SystemAuthenticationFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NTo1MVrOGjuqCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyNTo0OFrOGj9tGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzc3MA==", "bodyText": "Avoid hardcoded ports in tests - it causes tests to fail if the ports in use, e.g.\n\nIf the build server is running two builds on the same box\nAn engineer is running two builds, for two different change sets, at the same time.\nAn engineer is running ksql to test something else, while they've also got a build running.\netc.\n\nI think you should be able to just set it to http://0.0.0.0:0 and the server will auto-pick a free port.  It certainly did in Jetty days, not sure about Vert.x.  Check with Tim if it doesn't work. I'm sure he'll know how to.\nPlease update all places the port is hardcoded.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440117770", "createdAt": "2020-06-15T11:45:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/SystemAuthenticationFunctionalTest.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.integration;\n+\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.sendClusterStatusRequest;\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.waitForClusterToBeDiscovered;\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.waitForRemoteServerToChangeStatus;\n+import static io.confluent.ksql.test.util.EmbeddedSingleNodeKafkaCluster.JAAS_KAFKA_PROPS_NAME;\n+import static io.confluent.ksql.test.util.EmbeddedSingleNodeKafkaCluster.VALID_USER1;\n+import static io.confluent.ksql.util.KsqlConfig.KSQL_STREAMS_PREFIX;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.AdditionalMatchers.not;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.BasicCredentials;\n+import io.confluent.ksql.rest.entity.ClusterStatusResponse;\n+import io.confluent.ksql.rest.entity.KsqlHostInfoEntity;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.security.KsqlAuthorizationProvider;\n+import io.confluent.ksql.serde.FormatFactory;\n+import io.confluent.ksql.test.util.secure.MultiNodeKeyStore;\n+import io.confluent.ksql.test.util.secure.MultiNodeTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.PageViewDataProvider;\n+import io.vertx.core.net.SocketAddress;\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@Category({IntegrationTest.class})\n+@RunWith(Enclosed.class)\n+public class SystemAuthenticationFunctionalTest {\n+\n+  private static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  static {\n+    try {\n+      TMP.create();\n+    } catch (final IOException e) {\n+      throw new AssertionError(\"Failed to init TMP\", e);\n+    }\n+  }\n+\n+  private static final PageViewDataProvider PAGE_VIEWS_PROVIDER = new PageViewDataProvider();\n+  private static final String PAGE_VIEW_TOPIC = PAGE_VIEWS_PROVIDER.topicName();\n+  private static final String PAGE_VIEW_STREAM = PAGE_VIEWS_PROVIDER.kstreamName();\n+  private static final KsqlHostInfoEntity host0 = new KsqlHostInfoEntity(\"node-1.example.com\",\n+      8188);\n+  private static final KsqlHostInfoEntity host1 = new KsqlHostInfoEntity(\"node-2.example.com\",\n+      8189);\n+  private static final BiFunction<Integer, String, SocketAddress> LOCALHOST_FACTORY =\n+      (port, host) -> SocketAddress.inetSocketAddress(port, \"localhost\");\n+\n+  private static final Map<String, Object> JASS_AUTH_CONFIG = ImmutableMap.<String, Object>builder()\n+      .put(\"authentication.method\", \"BASIC\")\n+      .put(\"authentication.roles\", \"**\")\n+      // Reuse the Kafka JAAS config for KSQL authentication which has the same valid users\n+      .put(\"authentication.realm\", JAAS_KAFKA_PROPS_NAME)\n+      .put(\n+          KsqlConfig.KSQL_SECURITY_EXTENSION_CLASS,\n+          MockKsqlSecurityExtension.class.getName()\n+      )\n+      .build();\n+\n+  private static final Map<String, Object> COMMON_CONFIG = ImmutableMap.<String, Object>builder()\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_ENABLE_CONFIG, true)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_SEND_INTERVAL_MS_CONFIG, 200)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_CHECK_INTERVAL_MS_CONFIG, 1000)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_DISCOVER_CLUSTER_MS_CONFIG, 1000)\n+      .put(KSQL_STREAMS_PREFIX + StreamsConfig.STATE_DIR_CONFIG, getNewStateDir())\n+      .put(KSQL_STREAMS_PREFIX + StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1)\n+      .put(KsqlConfig.KSQL_SHUTDOWN_TIMEOUT_MS_CONFIG, 1000)\n+      .putAll(ServerKeyStore.keyStoreProps())\n+      .build();\n+\n+  private static Map<String, String> internalKeyStoreProps(boolean node1) {\n+    Map<String, String> keyStoreProps = node1\n+        ? MultiNodeKeyStore.keyStoreNode1Props()\n+        : MultiNodeKeyStore.keyStoreNode2Props();\n+    Map<String, String> trustStoreProps = MultiNodeTrustStore.trustStoreNode1Node2Props();\n+    return ImmutableMap.of(\n+        SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,\n+        keyStoreProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n+        SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+        keyStoreProps.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n+        SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,\n+        trustStoreProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n+        SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,\n+        trustStoreProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)\n+    );\n+  }\n+\n+  private static final BasicCredentials USER1 = BasicCredentials.of(\n+      VALID_USER1.username,\n+      VALID_USER1.password\n+  );\n+\n+  private static void commonClassSetup(final IntegrationTestHarness TEST_HARNESS,\n+      final TestKsqlRestApp REST_APP_0) {\n+    TEST_HARNESS.ensureTopics(2, PAGE_VIEW_TOPIC);\n+    TEST_HARNESS.produceRows(PAGE_VIEW_TOPIC, PAGE_VIEWS_PROVIDER, FormatFactory.JSON);\n+    RestIntegrationTestUtil.createStream(REST_APP_0, PAGE_VIEWS_PROVIDER, Optional.of(USER1));\n+    RestIntegrationTestUtil.makeKsqlRequest(\n+        REST_APP_0,\n+        \"CREATE STREAM S AS SELECT * FROM \" + PAGE_VIEW_STREAM + \";\",\n+        Optional.of(USER1)\n+    );\n+  }\n+\n+  @RunWith(MockitoJUnitRunner.class)\n+  public static class MutualAuth {\n+    private static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+    private static final TestKsqlRestApp REST_APP_0 = TestKsqlRestApp\n+        .builder(TEST_HARNESS::kafkaBootstrapServers)\n+        .withEnabledKsqlClient(LOCALHOST_FACTORY)\n+        .withProperty(KsqlRestConfig.LISTENERS_CONFIG, \"http://0.0.0.0:8088\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDMxNA==", "bodyText": "This works fine for listeners, so I did that there.  There's a bit of an issue with doing this for KsqlRestConfig.INTERNAL_LISTENER_CONFIG because I have to also reference the port when setting KsqlRestConfig.ADVERTISED_LISTENER_CONFIG.  At the moment, configs have to be set by the time the server starts up, and yet using port 0, the port doesn't get resolved until the server starts.\nThis can possibly be resolved by reworking the code a bit, but that seems like work for a followup.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440364314", "createdAt": "2020-06-15T18:25:48Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/SystemAuthenticationFunctionalTest.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.integration;\n+\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.sendClusterStatusRequest;\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.waitForClusterToBeDiscovered;\n+import static io.confluent.ksql.rest.integration.HighAvailabilityTestUtil.waitForRemoteServerToChangeStatus;\n+import static io.confluent.ksql.test.util.EmbeddedSingleNodeKafkaCluster.JAAS_KAFKA_PROPS_NAME;\n+import static io.confluent.ksql.test.util.EmbeddedSingleNodeKafkaCluster.VALID_USER1;\n+import static io.confluent.ksql.util.KsqlConfig.KSQL_STREAMS_PREFIX;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.AdditionalMatchers.not;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.BasicCredentials;\n+import io.confluent.ksql.rest.entity.ClusterStatusResponse;\n+import io.confluent.ksql.rest.entity.KsqlHostInfoEntity;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.security.KsqlAuthorizationProvider;\n+import io.confluent.ksql.serde.FormatFactory;\n+import io.confluent.ksql.test.util.secure.MultiNodeKeyStore;\n+import io.confluent.ksql.test.util.secure.MultiNodeTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.PageViewDataProvider;\n+import io.vertx.core.net.SocketAddress;\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@Category({IntegrationTest.class})\n+@RunWith(Enclosed.class)\n+public class SystemAuthenticationFunctionalTest {\n+\n+  private static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  static {\n+    try {\n+      TMP.create();\n+    } catch (final IOException e) {\n+      throw new AssertionError(\"Failed to init TMP\", e);\n+    }\n+  }\n+\n+  private static final PageViewDataProvider PAGE_VIEWS_PROVIDER = new PageViewDataProvider();\n+  private static final String PAGE_VIEW_TOPIC = PAGE_VIEWS_PROVIDER.topicName();\n+  private static final String PAGE_VIEW_STREAM = PAGE_VIEWS_PROVIDER.kstreamName();\n+  private static final KsqlHostInfoEntity host0 = new KsqlHostInfoEntity(\"node-1.example.com\",\n+      8188);\n+  private static final KsqlHostInfoEntity host1 = new KsqlHostInfoEntity(\"node-2.example.com\",\n+      8189);\n+  private static final BiFunction<Integer, String, SocketAddress> LOCALHOST_FACTORY =\n+      (port, host) -> SocketAddress.inetSocketAddress(port, \"localhost\");\n+\n+  private static final Map<String, Object> JASS_AUTH_CONFIG = ImmutableMap.<String, Object>builder()\n+      .put(\"authentication.method\", \"BASIC\")\n+      .put(\"authentication.roles\", \"**\")\n+      // Reuse the Kafka JAAS config for KSQL authentication which has the same valid users\n+      .put(\"authentication.realm\", JAAS_KAFKA_PROPS_NAME)\n+      .put(\n+          KsqlConfig.KSQL_SECURITY_EXTENSION_CLASS,\n+          MockKsqlSecurityExtension.class.getName()\n+      )\n+      .build();\n+\n+  private static final Map<String, Object> COMMON_CONFIG = ImmutableMap.<String, Object>builder()\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_ENABLE_CONFIG, true)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_SEND_INTERVAL_MS_CONFIG, 200)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_CHECK_INTERVAL_MS_CONFIG, 1000)\n+      .put(KsqlRestConfig.KSQL_HEARTBEAT_DISCOVER_CLUSTER_MS_CONFIG, 1000)\n+      .put(KSQL_STREAMS_PREFIX + StreamsConfig.STATE_DIR_CONFIG, getNewStateDir())\n+      .put(KSQL_STREAMS_PREFIX + StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1)\n+      .put(KsqlConfig.KSQL_SHUTDOWN_TIMEOUT_MS_CONFIG, 1000)\n+      .putAll(ServerKeyStore.keyStoreProps())\n+      .build();\n+\n+  private static Map<String, String> internalKeyStoreProps(boolean node1) {\n+    Map<String, String> keyStoreProps = node1\n+        ? MultiNodeKeyStore.keyStoreNode1Props()\n+        : MultiNodeKeyStore.keyStoreNode2Props();\n+    Map<String, String> trustStoreProps = MultiNodeTrustStore.trustStoreNode1Node2Props();\n+    return ImmutableMap.of(\n+        SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,\n+        keyStoreProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n+        SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+        keyStoreProps.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n+        SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,\n+        trustStoreProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n+        SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,\n+        trustStoreProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)\n+    );\n+  }\n+\n+  private static final BasicCredentials USER1 = BasicCredentials.of(\n+      VALID_USER1.username,\n+      VALID_USER1.password\n+  );\n+\n+  private static void commonClassSetup(final IntegrationTestHarness TEST_HARNESS,\n+      final TestKsqlRestApp REST_APP_0) {\n+    TEST_HARNESS.ensureTopics(2, PAGE_VIEW_TOPIC);\n+    TEST_HARNESS.produceRows(PAGE_VIEW_TOPIC, PAGE_VIEWS_PROVIDER, FormatFactory.JSON);\n+    RestIntegrationTestUtil.createStream(REST_APP_0, PAGE_VIEWS_PROVIDER, Optional.of(USER1));\n+    RestIntegrationTestUtil.makeKsqlRequest(\n+        REST_APP_0,\n+        \"CREATE STREAM S AS SELECT * FROM \" + PAGE_VIEW_STREAM + \";\",\n+        Optional.of(USER1)\n+    );\n+  }\n+\n+  @RunWith(MockitoJUnitRunner.class)\n+  public static class MutualAuth {\n+    private static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+    private static final TestKsqlRestApp REST_APP_0 = TestKsqlRestApp\n+        .builder(TEST_HARNESS::kafkaBootstrapServers)\n+        .withEnabledKsqlClient(LOCALHOST_FACTORY)\n+        .withProperty(KsqlRestConfig.LISTENERS_CONFIG, \"http://0.0.0.0:8088\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzc3MA=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA1NTA0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/services/TestDefaultKsqlClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0Nzo1N1rOGjut7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyNjoxMFrOGj9uEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExODc2NQ==", "bodyText": "Is it worth having two versions: one with and one without this function?  Seems like most things won't need the ability to override the host.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440118765", "createdAt": "2020-06-15T11:47:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/services/TestDefaultKsqlClientFactory.java", "diffHunk": "@@ -11,8 +13,9 @@\n public class TestDefaultKsqlClientFactory {\n \n   // Creates an instance with no auth\n-  public static SimpleKsqlClient instance(Map<String, Object> clientProps) {\n-    return new DefaultKsqlClient(Optional.empty(), clientProps);\n+  public static SimpleKsqlClient instance(Map<String, Object> clientProps,\n+      final BiFunction<Integer, String, SocketAddress> socketAddressFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDU2Mw==", "bodyText": "Sure, added.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440364563", "createdAt": "2020-06-15T18:26:10Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/services/TestDefaultKsqlClientFactory.java", "diffHunk": "@@ -11,8 +13,9 @@\n public class TestDefaultKsqlClientFactory {\n \n   // Creates an instance with no auth\n-  public static SimpleKsqlClient instance(Map<String, Object> clientProps) {\n-    return new DefaultKsqlClient(Optional.empty(), clientProps);\n+  public static SimpleKsqlClient instance(Map<String, Object> clientProps,\n+      final BiFunction<Integer, String, SocketAddress> socketAddressFactory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExODc2NQ=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA2MTQ1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1MDoxNVrOGjuyQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNToyMFrOGj-BwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExOTg3Mg==", "bodyText": "Worth adding java docs on the params?  The new socketAddressFactory probably isn't obvious", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440119872", "createdAt": "2020-06-15T11:50:15Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -55,16 +58,33 @@ public KsqlClient(\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.socketAddressFactory = SocketAddress::inetSocketAddress;\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2OTYwMA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440369600", "createdAt": "2020-06-15T18:35:20Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlClient.java", "diffHunk": "@@ -55,16 +58,33 @@ public KsqlClient(\n     this.basicAuthHeader = createBasicAuthHeader(\n         Objects.requireNonNull(credentials, \"credentials\"));\n     this.localProperties = Objects.requireNonNull(localProperties, \"localProperties\");\n+    this.socketAddressFactory = SocketAddress::inetSocketAddress;\n     this.httpNonTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, false);\n     this.httpTlsClient = createHttpClient(vertx, clientProps, httpClientOptions, true);\n   }\n \n+  public KsqlClient(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExOTg3Mg=="}, "originalCommit": {"oid": "dc801b4f9a8ab90b578d343bdc5e7003e7d2dec7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ1ODA1OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzozOTo0MFrOGkGQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzozOTo0MFrOGkGQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNDUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            client-facing and internal endpoints, and also supports many of the security\n          \n          \n            \n            client-facing and internal endpoints. ksqlDB also supports many of the security", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440504526", "createdAt": "2020-06-15T23:39:40Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -6,21 +6,39 @@ description: Settings for security ksqlDB\n keywords: ksqldb, confguration, security, acl, ssl, sasl, keystore, truststore\n ---\n \n-ksqlDB supports authentication on its HTTP endpoints and also supports\n-many of the security features of the other services it communicates\n-with, like {{ site.aktm }} and {{ site.sr }}.\n-\n-- ksqlDB supports Basic HTTP authentication on its RESTful and WebSocket\n-  endpoints, which means that the endpoints can be protected by a\n-  username and password.\n-- ksqlDB supports {{ site.aktm }} security features such as\n-  [SSL for encryption](https://docs.confluent.io/current/kafka/encryption.html),\n-  [SASL for authentication](https://docs.confluent.io/current/kafka/authentication_sasl/index.html),\n-  and [authorization with ACLs](https://docs.confluent.io/current/kafka/authorization.html).\n-- ksqlDB supports\n-  [Schema Registry security features](https://docs.confluent.io/current/schema-registry/security/index.html)\n-  such SSL for encryption and mutual authentication for authorization.\n-- ksqlDB supports SSL on all network traffic.\n+ksqlDB supports several combinations of encryption and authentication on its\n+client-facing and internal endpoints, and also supports many of the security", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ2MTQxOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MTowNlrOGkGSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MTowNlrOGkGSug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            e.g. on-premise installations or manual installations on other cloud platforms.\n          \n          \n            \n            like on-premises installations or manual installations on other cloud platforms.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440505018", "createdAt": "2020-06-15T23:41:06Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -6,21 +6,39 @@ description: Settings for security ksqlDB\n keywords: ksqldb, confguration, security, acl, ssl, sasl, keystore, truststore\n ---\n \n-ksqlDB supports authentication on its HTTP endpoints and also supports\n-many of the security features of the other services it communicates\n-with, like {{ site.aktm }} and {{ site.sr }}.\n-\n-- ksqlDB supports Basic HTTP authentication on its RESTful and WebSocket\n-  endpoints, which means that the endpoints can be protected by a\n-  username and password.\n-- ksqlDB supports {{ site.aktm }} security features such as\n-  [SSL for encryption](https://docs.confluent.io/current/kafka/encryption.html),\n-  [SASL for authentication](https://docs.confluent.io/current/kafka/authentication_sasl/index.html),\n-  and [authorization with ACLs](https://docs.confluent.io/current/kafka/authorization.html).\n-- ksqlDB supports\n-  [Schema Registry security features](https://docs.confluent.io/current/schema-registry/security/index.html)\n-  such SSL for encryption and mutual authentication for authorization.\n-- ksqlDB supports SSL on all network traffic.\n+ksqlDB supports several combinations of encryption and authentication on its\n+client-facing and internal endpoints, and also supports many of the security\n+features of the other services it communicates with, like {{ site.aktm }} and\n+{{ site.sr }}.\n+\n+- [Securing ksqlDB on Confluent Cloud](#configure-ksqldb-for-confluent-cloud)\n+- [Securing ksqlDB on premise](#securing-ksqlDB-on-premise)\n+  - [Securing ksqlDB installation](#securing-ksqldb-installation)\n+    - [Securing interactive deployments](#securing-interactive-deployments)\n+      - [Securing single listener setup](#securing-single-listener-setup)\n+        - [Configuring listener for SSL encryption](#configuring-listener-for-ssl-encryption)\n+        - [Configuring listener for HTTP-BASIC authentication](#configuring-listener-for-http-basic-authentication)\n+      - [Securing dual listener setup](#securing-dual-listener-setup)\n+        - [Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication)\n+        - [Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption)\n+        - [Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication)\n+    - [Securing headless deployments](#securing-headless-deployments)\n+\n+  - [Securing communication with other services](#securing-communication-with-other-services)\n+    - [Configure ksqlDB for Confluent Control Center](#configure-ksqldb-for-confluent-control-center)\n+    - [Configure ksqlDB for Secured Confluent Schema Registry](#configure-ksqldb-for-secured-confluent-schema-registry)\n+    - [Configure ksqlDB for Secured Apache Kafka clusters](#configure-ksqldb-for-secured-apache-kafka-clusters)\n+      - [Configuring Kafka Encrypted Communication](#configuring-kafa-encrypted-communication)\n+      - [Configuring Kafka Authentication](#configuring-kafka-authentication)\n+      - [Configure Authorization of ksqlDB with Kafka ACLs](#configure-authorization-of-ksqldb-with-kafka-acls)\n+        - [Confluent Platform v5.0 (Apache Kafka v2.0) and above](#confluent-platform-v5.0-(apache-kafka-v2.0)-and-above)\n+        - [Confluent Platform versions below v5.0 (Apache Kafka < v2.0)](#confluent-platform-versions-below-v.5.0-(apache-kafka-<-v2.0))\n+\n+Securing ksqlDB on premise\n+--------------------------\n+\n+This section covers how to secure installations of ksqlDB outside of Confluent Cloud,\n+e.g. on-premise installations or manual installations on other cloud platforms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ2NDI3OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MjozOVrOGkGUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MjozOVrOGkGUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTQ5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Securing the interactive ksqlDB installation involves securing the HTTP endpoints the ksqlDB server is listening on.\n          \n          \n            \n            Securing the interactive ksqlDB installation involves securing the HTTP endpoints that the ksqlDB server is listening on.", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440505496", "createdAt": "2020-06-15T23:42:39Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -36,8 +54,75 @@ configuration file specified.\n     or TAR archives. For more information, see\n     [On-Premises Deployments](https://docs.confluent.io/current/installation/installing_cp/index.html).\n \n-Configure ksqlDB for HTTPS\n---------------------------\n+\n+The section is split into:\n+\n+[Securing ksqlDB installation](#securing-ksqldb-installation): Covers how to secure access to ksqlDB itself\n+and its own internal communication.\n+\n+[Securing communication with other services](#securing-communication-with-other-services): Covers how to secure\n+communication with other services and access to the resources they hold.\n+\n+Securing ksqlDB installation\n+----------------------------\n+\n+ksqlDB supports two main deployment modes:\n+\n+[Securing interactive deployments](#securing-interactive-deployments): Interactive deployments are those where\n+the ksqlDB servers accept client connections.\n+\n+[Securing headless deployments](#securing-headless-deployments): headless\n+deployments are those where the ksqlDB servers do not accept client connections.\n+They read the SQL statements they should run from a file on-disk.\n+\n+\n+Securing interactive deployments\n+--------------------------------\n+\n+Securing the interactive ksqlDB installation involves securing the HTTP endpoints the ksqlDB server is listening on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ2NTYwOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MzoyNlrOGkGVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0MzoyNlrOGkGVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTcwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Securing single listener setup\n          \n          \n            \n            Securing single-listener setup", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440505707", "createdAt": "2020-06-15T23:43:26Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -36,8 +54,75 @@ configuration file specified.\n     or TAR archives. For more information, see\n     [On-Premises Deployments](https://docs.confluent.io/current/installation/installing_cp/index.html).\n \n-Configure ksqlDB for HTTPS\n---------------------------\n+\n+The section is split into:\n+\n+[Securing ksqlDB installation](#securing-ksqldb-installation): Covers how to secure access to ksqlDB itself\n+and its own internal communication.\n+\n+[Securing communication with other services](#securing-communication-with-other-services): Covers how to secure\n+communication with other services and access to the resources they hold.\n+\n+Securing ksqlDB installation\n+----------------------------\n+\n+ksqlDB supports two main deployment modes:\n+\n+[Securing interactive deployments](#securing-interactive-deployments): Interactive deployments are those where\n+the ksqlDB servers accept client connections.\n+\n+[Securing headless deployments](#securing-headless-deployments): headless\n+deployments are those where the ksqlDB servers do not accept client connections.\n+They read the SQL statements they should run from a file on-disk.\n+\n+\n+Securing interactive deployments\n+--------------------------------\n+\n+Securing the interactive ksqlDB installation involves securing the HTTP endpoints the ksqlDB server is listening on.\n+\n+As well as accepting connections and requests from clients, a multi-node ksqlDB\n+cluster also requires inter-node communications. You can choose to configure\n+the external client and internal inter-node communication separately or over\n+a single listener:\n+\n+[Securing single listener setup](#securing-single-listener-setup): Ideal for\n+single-node installations, or where the inter-node communication is over the\n+same network interfaces as client communication.\n+\n+[Securing dual listener setup](#securing-dual-listener-setup): Useful where\n+inter-node communication is over a different network interfaces or requires\n+different authentication or encryption configuration.\n+\n+\n+Securing headless deployments\n+-----------------------------\n+\n+Unlike interactive deployments, there are no exposed REST APIs, so security\n+is greatly simplified.\n+\n+You may still have to [secure communication](#securing-communication-with-other-services) with other services.\n+\n+\n+Securing single listener setup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ2NzQyOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NDoyM1rOGkGWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NDoyM1rOGkGWjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Securing dual listener setup\n          \n          \n            \n            Securing dual-listener setup", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440505999", "createdAt": "2020-06-15T23:44:23Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ2NzgzOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NDo0MlrOGkGW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NDo0MlrOGkGW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            configurations.  This is most likely the case when ksqlDB is deployed as an\n          \n          \n            \n            configurations. This is most likely the case when ksqlDB is deployed as an", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440506079", "createdAt": "2020-06-15T23:44:42Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3MDcyOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NjoxNVrOGkGYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0NjoxNVrOGkGYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n          \n          \n            \n            Configuring internal for SSL-mutual authentication and external for HTTP-BASIC authentication", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440506528", "createdAt": "2020-06-15T23:46:15Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3MjE2OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0Njo1OVrOGkGZdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0Njo1OVrOGkGZdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --------------------------------------------------------------------------------\n          \n          \n            \n            ---------------------------------------------------------------------------------------------", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440506742", "createdAt": "2020-06-15T23:46:59Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3NTYwOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0ODo1N1rOGkGbkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0ODo1N1rOGkGbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Client facing basic HTTP authentication can be used alongside authentication for the\n          \n          \n            \n            Client-facing basic HTTP authentication can be used alongside authentication for the", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440507283", "createdAt": "2020-06-15T23:48:57Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3NjE3OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0OToyMVrOGkGb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0OToyMVrOGkGb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring internal for SSL-mutual authentication + external for SSL encryption\n          \n          \n            \n            Configuring internal for SSL-mutual authentication and external for SSL encryption", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440507383", "createdAt": "2020-06-15T23:49:21Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the\n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+\n+!!! note\n+\tIf you're using Basic authentication, we recommended that you\n+    [configure ksqlDB to use HTTPS for secure communication](#configuring-listner-for-ssl-encryption),\n+    because the Basic protocol passes credentials in plain text.\n+\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication,\n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+Configuring internal for SSL-mutual authentication + external for SSL encryption", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3NjUwOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0OTozN1rOGkGcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo0OTozN1rOGkGcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --------------------------------------------------------------------------------\n          \n          \n            \n            ----------------------------------------------------------------------------------", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440507435", "createdAt": "2020-06-15T23:49:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the\n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+\n+!!! note\n+\tIf you're using Basic authentication, we recommended that you\n+    [configure ksqlDB to use HTTPS for secure communication](#configuring-listner-for-ssl-encryption),\n+    because the Basic protocol passes credentials in plain text.\n+\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication,\n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+Configuring internal for SSL-mutual authentication + external for SSL encryption\n+--------------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3ODMyOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MDozN1rOGkGdQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MDozN1rOGkGdQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            different from its internal identity.  In order to create such a key store,\n          \n          \n            \n            different from its internal identity. To create such a key store,", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440507715", "createdAt": "2020-06-15T23:50:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the\n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+\n+!!! note\n+\tIf you're using Basic authentication, we recommended that you\n+    [configure ksqlDB to use HTTPS for secure communication](#configuring-listner-for-ssl-encryption),\n+    because the Basic protocol passes credentials in plain text.\n+\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication,\n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+Configuring internal for SSL-mutual authentication + external for SSL encryption\n+--------------------------------------------------------------------------------\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ3OTYzOnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MToxNFrOGkGeCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MToxNFrOGkGeCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            listener by providing a key store alias.  For example,\n          \n          \n            \n            listener by providing a key store alias.  For example,\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            listener by providing a key store alias.  For example,\n          \n          \n            \n            listener by providing a key store alias. For example,", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440507913", "createdAt": "2020-06-15T23:51:14Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the\n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+\n+!!! note\n+\tIf you're using Basic authentication, we recommended that you\n+    [configure ksqlDB to use HTTPS for secure communication](#configuring-listner-for-ssl-encryption),\n+    because the Basic protocol passes credentials in plain text.\n+\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication,\n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+Configuring internal for SSL-mutual authentication + external for SSL encryption\n+--------------------------------------------------------------------------------\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,\n+refer [below](#setting-up-a-key-store-and-trust-store).\n+\n+In such a configuration, you must specify which key pair is used for a given\n+listener by providing a key store alias.  For example,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDQ4MDU2OnYy", "diffSide": "RIGHT", "path": "docs/operate-and-deploy/installation/server-config/security.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MTo0NFrOGkGelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1MTo0NFrOGkGelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwODA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            with the given alias when setting up the internal listener.  Similarly,\n          \n          \n            \n            with the given alias when setting up the internal listener. Similarly,", "url": "https://github.com/confluentinc/ksql/pull/5482#discussion_r440508052", "createdAt": "2020-06-15T23:51:44Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/security.md", "diffHunk": "@@ -219,13 +304,193 @@ credentials when starting the CLI by using the `--user` and\n <ksql-install>bin/ksql --user fred --password letmein http://localhost:8088\n ```\n \n-Configure ksqlDB for Confluent Cloud\n+Securing dual listener setup\n+----------------------------\n+\n+Using dual listeners for ksqlDB is appropriate when the client and\n+inter-node communication utilize different authentication and security\n+configurations.  This is most likely the case when ksqlDB is deployed as an\n+IaaS service.\n+\n+The supported setups are SSL-mutual auth for the internal communication\n+combined with SSL encryption and authentication for the external client:\n+\n+[Configuring internal for SSL-mutual authentication](#configuring-intenral-for-ssl-mutual-authentication):\n+Creates secure and authenticated connections for inter-node communication,\n+but leaves the external\n+client API unsecured. This is most appropriate when clients are trusted, but\n+the internal APIs are protected from use.\n+\n+[Configuring internal for SSL-mutual authentication + external for SSL encryption](#configuring-internal-for-ssl-mutual-authentication-+-external-for-ssl-encryption):\n+Creates secure and authenticated connections for inter-node\n+communication and uses SSL for the external client API. This is most\n+likely to be pair with authentication below.\n+\n+[Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication](#configuring-internal-for-ssl-mutual-authentication-+-external-for-http-basic-authentication):\n+Creates secure and authenticated connections for inter-node\n+communication and uses basic authentication for the external client API.\n+This is most likely to be paired with SSL above.\n+\n+Configuring internal for SSL-mutual authentication\n+--------------------------------------------------\n+\n+ksqlDB supports securing inter-node communication using SSL mutual authentication.\n+\n+For more information about configuring `ksql.internal.listener`, see [Configuring Listeners of a ksqlDB Cluster](index.md#configuring-listeners-of-a-ksqldb-cluster).\n+\n+Your key store must contain the key pair for your internal listener set with\n+`ksql.internal.listener`.  If your internal certificate is not signed by a recognized\n+public Certificate Authority, a trust store is required to contain certificates for\n+nodes in your cluster.  Below is an example configuration:\n+\n+```properties\n+# Contains the internal key pair for this node.\n+# (e.g. key pair for node-1.internal.example.com)\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+# Contains the certificates for nodes in the cluster.\n+# (e.g. certs for node-1.internal.example.com, node-2.internal.example.com)\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+# This enables mutual auth checking for the internal listener\n+ksql.internal.ssl.client.authentication=REQUIRED\n+```\n+\n+Configuring internal for SSL-mutual authentication + external for HTTP-BASIC authentication\n+--------------------------------------------------------------------------------\n+\n+Client facing basic HTTP authentication can be used alongside authentication for the\n+internal listener. This ensures that neither the client or internal\n+APIs can be accessed by unauthorized users.\n+\n+!!! note\n+\tIf you're using Basic authentication, we recommended that you\n+    [configure ksqlDB to use HTTPS for secure communication](#configuring-listner-for-ssl-encryption),\n+    because the Basic protocol passes credentials in plain text.\n+\n+Below is an example configuration:\n+\n+```properties\n+ssl.keystore.location=/var/private/ssl/ksql.server.keystore.jks\n+ssl.keystore.password=xxxx\n+ssl.key.password=yyyy\n+\n+ssl.truststore.location=/var/private/ssl/ksql.server.truststore.jks\n+ssl.truststore.password=zzzz\n+\n+listeners=http://0.0.0.0:8088\n+ksql.internal.listener=https://node-1.internal.example.com:8099\n+\n+ksql.internal.ssl.client.authentication=REQUIRED\n+\n+authentication.method=BASIC\n+authentication.roles=admin,developer,user,ksq-user\n+authentication.realm=KsqlServer-Props\n+\n+```\n+\n+For more detail on basic authentication,\n+[see above](#configure-ksqldb-for-basic-http-authentication).\n+\n+Configuring internal for SSL-mutual authentication + external for SSL encryption\n+--------------------------------------------------------------------------------\n+\n+If you want to use HTTPS on `listeners` as well as use SSL mutual\n+auth for internal communication on `ksql.internal.listener`, you will likely\n+require two different key pairs, since your host's identity to clients may be\n+different from its internal identity.  In order to create such a key store,\n+refer [below](#setting-up-a-key-store-and-trust-store).\n+\n+In such a configuration, you must specify which key pair is used for a given\n+listener by providing a key store alias.  For example,\n+if set, `ksql.ssl.keystore.alias.internal` will be used to find the key store entry\n+with the given alias when setting up the internal listener.  Similarly,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c87b67575970d48f5c03594ac0be8a7f7fdad74"}, "originalPosition": 263}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}