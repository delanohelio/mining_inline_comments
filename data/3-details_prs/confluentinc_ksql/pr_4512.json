{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjAzOTg3", "number": 4512, "title": "feat: Plug insert streams into backend", "bodyText": "Description\nImplements #4263\nThis PR plugs the new API inserts functionality into the back-end. There are probably a few other small unrelated refactorings in there too.\nReviewer: Please look in particular at KeyValueCoercer.coerceObject - this takes a value supplied by the user and coerces it to the correct SqlType. I had hoped to use SqlValueCoercer for that but it seems it doesn't handle all cases. The result is a bit... ugly. If you know of a better way of doing this please suggest alternatives. Maybe there is some API in engine that I am not aware of that makes things easier.\nTesting done\nAdded new tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-11T11:23:16Z", "url": "https://github.com/confluentinc/ksql/pull/4512", "merged": true, "mergeCommit": {"oid": "2482f0f3f384827c66f70dc08c9a2be44bd1ff83"}, "closed": true, "closedAt": "2020-02-14T18:50:44Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDZ63rgBqjMwMjg1NzUxNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcETQr2ABqjMwMzk1OTgwNDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "388eca82f2bcf14b2fc8625179aa252cf55e3b2c", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/388eca82f2bcf14b2fc8625179aa252cf55e3b2c", "committedDate": "2020-02-11T16:43:40Z", "message": "inserts stream"}, "afterCommit": {"oid": "2a6cbcd0c33dee9c46682f92f10b5be515e52a86", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/2a6cbcd0c33dee9c46682f92f10b5be515e52a86", "committedDate": "2020-02-11T22:59:07Z", "message": "inserts stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20abb85c40d89fc5dc338b4571f72159f3ba3f9b", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/20abb85c40d89fc5dc338b4571f72159f3ba3f9b", "committedDate": "2020-02-12T11:30:07Z", "message": "inserts"}, "afterCommit": {"oid": "fa9438117be1772ca2ccf892e79d41fe01047ba7", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/fa9438117be1772ca2ccf892e79d41fe01047ba7", "committedDate": "2020-02-12T11:37:11Z", "message": "inserts stream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjA3NDcz", "url": "https://github.com/confluentinc/ksql/pull/4512#pullrequestreview-358607473", "createdAt": "2020-02-13T22:47:48Z", "commit": {"oid": "ab3ff60464dfb8c6eebcb315085a37cf584f782e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f8a603e9217a4a4e99c32354891a9b337e12aca", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/3f8a603e9217a4a4e99c32354891a9b337e12aca", "committedDate": "2020-02-14T07:47:55Z", "message": "force jenkins build"}, "afterCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3", "committedDate": "2020-02-14T13:41:56Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTYxMzM3", "url": "https://github.com/confluentinc/ksql/pull/4512#pullrequestreview-358961337", "createdAt": "2020-02-14T14:04:47Z", "commit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDowNDo0N1rOFp3jnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoyNDozOFrOFp4LoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0NjE3Mg==", "bodyText": "Why pass a field as a param?", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379446172", "createdAt": "2020-02-14T14:04:47Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/plugin/KsqlServerEndpoints.java", "diffHunk": "@@ -168,10 +176,43 @@ public String getName() {\n   }\n \n   @Override\n-  public InsertsSubscriber createInsertsSubscriber(final String target,\n+  public InsertsStreamSubscriber createInsertsSubscriber(final String target,\n       final JsonObject properties,\n-      final Subscriber<JsonObject> acksSubscriber) {\n-    return null;\n+      final Subscriber<InsertResult> acksSubscriber, final Context context,\n+      final WorkerExecutor workerExecutor) {\n+    Utils.checkIsWorker();\n+    final ServiceContext serviceContext = createServiceContext(new DummyPrincipal());\n+    final DataSource dataSource = getDataSource(ksqlConfig, ksqlEngine.getMetaStore(),\n+        SourceName.of(target));\n+    if (dataSource.getDataSourceType() == DataSourceType.KTABLE) {\n+      throw new KsqlException(\"Cannot insert into a table\");\n+    }\n+    return InsertsSubscriber.createInsertsSubscriber(serviceContext, properties, dataSource,\n+        ksqlConfig, context, acksSubscriber, workerExecutor);\n+  }\n+\n+  private DataSource getDataSource(\n+      final KsqlConfig ksqlConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0NjYxOQ==", "bodyText": "internalTopics can probably be a field.  You could even inject it so that it's easier to unit test this class without coupling to ReservedInternalTopics functionality.", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379446619", "createdAt": "2020-02-14T14:05:41Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/plugin/KsqlServerEndpoints.java", "diffHunk": "@@ -168,10 +176,43 @@ public String getName() {\n   }\n \n   @Override\n-  public InsertsSubscriber createInsertsSubscriber(final String target,\n+  public InsertsStreamSubscriber createInsertsSubscriber(final String target,\n       final JsonObject properties,\n-      final Subscriber<JsonObject> acksSubscriber) {\n-    return null;\n+      final Subscriber<InsertResult> acksSubscriber, final Context context,\n+      final WorkerExecutor workerExecutor) {\n+    Utils.checkIsWorker();\n+    final ServiceContext serviceContext = createServiceContext(new DummyPrincipal());\n+    final DataSource dataSource = getDataSource(ksqlConfig, ksqlEngine.getMetaStore(),\n+        SourceName.of(target));\n+    if (dataSource.getDataSourceType() == DataSourceType.KTABLE) {\n+      throw new KsqlException(\"Cannot insert into a table\");\n+    }\n+    return InsertsSubscriber.createInsertsSubscriber(serviceContext, properties, dataSource,\n+        ksqlConfig, context, acksSubscriber, workerExecutor);\n+  }\n+\n+  private DataSource getDataSource(\n+      final KsqlConfig ksqlConfig,\n+      final MetaStore metaStore,\n+      final SourceName sourceName\n+  ) {\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+    if (dataSource == null) {\n+      throw new KsqlException(\"Cannot insert values into an unknown stream: \"\n+          + sourceName);\n+    }\n+\n+    if (dataSource.getKsqlTopic().getKeyFormat().isWindowed()) {\n+      throw new KsqlException(\"Cannot insert values into windowed stream\");\n+    }\n+\n+    final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0NjcyMA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.\nAlso, take defensive copies of the data, i.e. ImmutableList.copyOf", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379446720", "createdAt": "2020-02-14T14:05:54Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/plugin/PullQueryPublisher.java", "diffHunk": "@@ -19,24 +19,29 @@\n import io.confluent.ksql.api.server.BufferedPublisher;\n import io.confluent.ksql.api.spi.QueryPublisher;\n import io.vertx.core.Context;\n+import java.util.ArrayList;\n import java.util.List;\n \n public class PullQueryPublisher extends BufferedPublisher<GenericRow> implements QueryPublisher {\n \n   private final List<String> columnNames;\n   private final List<String> columnTypes;\n \n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   public PullQueryPublisher(final Context ctx, final TableRows tableRows,\n       final List<String> columnNames, final List<String> columnTypes) {\n-    super(ctx);\n+    super(ctx, toGenericRows(tableRows));\n+    this.columnNames = columnNames;\n+    this.columnTypes = columnTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0OTcxMw==", "bodyText": "Not a very helpful error message. Not sure what a user can do with such a message. Can we not provide more details? e.g. the exception message?  Or are we intentionally trying to avoid returning potentially embarrassing error messages? e.g. null in a NPE?", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379449713", "createdAt": "2020-02-14T14:11:45Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/AcksSubscriber.java", "diffHunk": "@@ -54,22 +55,41 @@ protected void afterSubscribe(final Subscription subscription) {\n   }\n \n   @Override\n-  public void handleValue(final JsonObject value) {\n+  public void handleValue(final InsertResult result) {\n     checkContext();\n-    insertsStreamResponseWriter.writeInsertResponse();\n-    acksSent++;\n-    if (insertsSent != null && insertsSent == acksSent) {\n-      close();\n-    } else if (response.writeQueueFull()) {\n-      if (!drainHandlerSet) {\n-        response.drainHandler(v -> {\n-          drainHandlerSet = false;\n-          checkMakeRequest();\n-        });\n-        drainHandlerSet = true;\n+    if (responseEnded) {\n+      return;\n+    }\n+    if (result.succeeded()) {\n+      insertsStreamResponseWriter.writeInsertResponse(new InsertAck(result.sequenceNumber()));\n+      acksSent++;\n+      if (insertsSent != null && insertsSent == acksSent) {\n+        close();\n+      } else if (response.writeQueueFull()) {\n+        if (!drainHandlerSet) {\n+          response.drainHandler(v -> {\n+            drainHandlerSet = false;\n+            checkMakeRequest();\n+          });\n+          drainHandlerSet = true;\n+        }\n+      } else {\n+        checkMakeRequest();\n       }\n     } else {\n-      checkMakeRequest();\n+      log.error(\"Error in processing inserts\", result.exception());\n+      final InsertError insertError;\n+      final Exception exception = result.exception();\n+      if (exception instanceof KsqlInsertsException) {\n+        insertError = new InsertError(result.sequenceNumber(),\n+            ((KsqlInsertsException) exception).getErrorCode(),\n+            exception.getMessage());\n+      } else {\n+        insertError = new InsertError(result.sequenceNumber(), ERROR_CODE_INTERNAL_ERROR,\n+            \"Error in processing inserts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MjU4NA==", "bodyText": "I find such heavily nested if/else if/else code very hard to grok.\nHave you considered moving the two main chunks into handleSuccess and handleError type methods?\nTaking the success one as an example, it might look something like:\nprivate void handleSuccess(final InsertResult result) {\n      insertsStreamResponseWriter.writeInsertResponse(new InsertAck(result.sequenceNumber()));\n     acksSent++;\n\n     if (insertsSent != null && insertsSent == acksSent) {\n         close();\n         return;\n      }\n\n      if (response.writeQueueFull()) {\n            if (!drainHandlerSet) {\n                 response.drainHandler(v -> {\n                     drainHandlerSet = false;\n                     checkMakeRequest();\n                 });\n               drainHandlerSet = true;\n            }\n            return;\n      }\n\n     checkMakeRequest();\n}\nI find this much easier to follow, as each if block returns, meaning I don't need to scan down the rest of the method to see what else is going to happen.", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379452584", "createdAt": "2020-02-14T14:17:20Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/AcksSubscriber.java", "diffHunk": "@@ -54,22 +55,41 @@ protected void afterSubscribe(final Subscription subscription) {\n   }\n \n   @Override\n-  public void handleValue(final JsonObject value) {\n+  public void handleValue(final InsertResult result) {\n     checkContext();\n-    insertsStreamResponseWriter.writeInsertResponse();\n-    acksSent++;\n-    if (insertsSent != null && insertsSent == acksSent) {\n-      close();\n-    } else if (response.writeQueueFull()) {\n-      if (!drainHandlerSet) {\n-        response.drainHandler(v -> {\n-          drainHandlerSet = false;\n-          checkMakeRequest();\n-        });\n-        drainHandlerSet = true;\n+    if (responseEnded) {\n+      return;\n+    }\n+    if (result.succeeded()) {\n+      insertsStreamResponseWriter.writeInsertResponse(new InsertAck(result.sequenceNumber()));\n+      acksSent++;\n+      if (insertsSent != null && insertsSent == acksSent) {\n+        close();\n+      } else if (response.writeQueueFull()) {\n+        if (!drainHandlerSet) {\n+          response.drainHandler(v -> {\n+            drainHandlerSet = false;\n+            checkMakeRequest();\n+          });\n+          drainHandlerSet = true;\n+        }\n+      } else {\n+        checkMakeRequest();\n       }\n     } else {\n-      checkMakeRequest();\n+      log.error(\"Error in processing inserts\", result.exception());\n+      final InsertError insertError;\n+      final Exception exception = result.exception();\n+      if (exception instanceof KsqlInsertsException) {\n+        insertError = new InsertError(result.sequenceNumber(),\n+            ((KsqlInsertsException) exception).getErrorCode(),\n+            exception.getMessage());\n+      } else {\n+        insertError = new InsertError(result.sequenceNumber(), ERROR_CODE_INTERNAL_ERROR,\n+            \"Error in processing inserts\");\n+      }\n+      insertsStreamResponseWriter.writeError(insertError).end();\n+      responseEnded = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MzQ3NA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379453474", "createdAt": "2020-02-14T14:19:08Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/BaseSubscriber.java", "diffHunk": "@@ -47,26 +51,26 @@\n    *                be executed on this context. This ensures the code is never executed\n    *                concurrently by more than one thread.\n    */\n-  public ReactiveSubscriber(final Context context) {\n+  public BaseSubscriber(final Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NDM2OA==", "bodyText": "don't return nulls -> if this shouldn't be called, then throw an exception! e.g. UnsupportedOperationException.", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379454368", "createdAt": "2020-02-14T14:20:46Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/InsertResult.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+public interface InsertResult {\n+\n+  long sequenceNumber();\n+\n+  boolean succeeded();\n+\n+  Exception exception();\n+\n+  static InsertResult succeededInsert(final long sequenceNumber) {\n+    return new InsertResult() {\n+      @Override\n+      public long sequenceNumber() {\n+        return sequenceNumber;\n+      }\n+\n+      @Override\n+      public boolean succeeded() {\n+        return true;\n+      }\n+\n+      @Override\n+      public Exception exception() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NTQ2Mg==", "bodyText": "nit: Can we have all the fields declared at the top of the file, please?", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379455462", "createdAt": "2020-02-14T14:22:46Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -103,30 +122,55 @@ private void handleArgs(final Buffer buff) {\n         return;\n       }\n \n-      acksSubscriber =\n-          insertsStreamArgs.get().requiresAcks ? new AcksSubscriber(ctx, routingContext.response(),\n-              insertsStreamResponseWriter) : null;\n-      final InsertsSubscriber insertsSubscriber = endpoints\n-          .createInsertsSubscriber(insertsStreamArgs.get().target,\n-              insertsStreamArgs.get().properties,\n-              acksSubscriber);\n-      publisher = new BufferedPublisher<>(ctx);\n+      routingContext.response().endHandler(v -> handleResponseEnd());\n+\n+      acksSubscriber = new AcksSubscriber(ctx, routingContext.response(),\n+          insertsStreamResponseWriter);\n+\n+      recordParser.pause();\n+      createInsertsSubscriberAsync(insertsStreamArgs.get().target,\n+          insertsStreamArgs.get().properties,\n+          acksSubscriber, ctx)\n+          .thenAccept(insertsSubscriber -> {\n+            publisher = new BufferedPublisher<>(ctx);\n \n-      // This forces response headers to be written so we know we send a 200 OK\n-      // This is important if we subsequently find an error in the stream\n-      routingContext.response().write(\"\");\n+            // This forces response headers to be written so we know we send a 200 OK\n+            // This is important if we subsequently find an error in the stream\n+            routingContext.response().write(\"\");\n \n-      publisher.subscribe(insertsSubscriber);\n+            publisher.subscribe(insertsSubscriber);\n \n+            recordParser.resume();\n+\n+            this.insertsSubscriber = insertsSubscriber;\n+          })\n+          .exceptionally(t -> handleInsertSubscriberException(t, routingContext));\n     }\n \n-    private void handleRow(final Buffer buff) {\n+    private InsertsStreamSubscriber insertsSubscriber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NjQxNw==", "bodyText": "Would it make sense to have a base KsqlApiException that held the errorCode?  I'm sure there will be other operations other than inserts that want to return a error code, right?", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379456417", "createdAt": "2020-02-14T14:24:38Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/KsqlInsertsException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.confluent.ksql.util.KsqlException;\n+\n+public class KsqlInsertsException extends KsqlException {\n+\n+  private final int errorCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTk1Nzc0", "url": "https://github.com/confluentinc/ksql/pull/4512#pullrequestreview-358995774", "createdAt": "2020-02-14T14:54:11Z", "commit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1NDoxMVrOFp5LJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1NDoxMVrOFp5LJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjY3Ng==", "bodyText": "I think I've seen this snippet of code repeated quite a few times in the new API code.  Might it be worth coding this into a type?  i.e. a type that takes the response as a constructor param, and you can just call enqueue(this::checkMakeRequest) and it will internally handle checking if the queue is full, setting the drain handler and flag etc.?", "url": "https://github.com/confluentinc/ksql/pull/4512#discussion_r379472676", "createdAt": "2020-02-14T14:54:11Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/AcksSubscriber.java", "diffHunk": "@@ -54,22 +55,41 @@ protected void afterSubscribe(final Subscription subscription) {\n   }\n \n   @Override\n-  public void handleValue(final JsonObject value) {\n+  public void handleValue(final InsertResult result) {\n     checkContext();\n-    insertsStreamResponseWriter.writeInsertResponse();\n-    acksSent++;\n-    if (insertsSent != null && insertsSent == acksSent) {\n-      close();\n-    } else if (response.writeQueueFull()) {\n-      if (!drainHandlerSet) {\n-        response.drainHandler(v -> {\n-          drainHandlerSet = false;\n-          checkMakeRequest();\n-        });\n-        drainHandlerSet = true;\n+    if (responseEnded) {\n+      return;\n+    }\n+    if (result.succeeded()) {\n+      insertsStreamResponseWriter.writeInsertResponse(new InsertAck(result.sequenceNumber()));\n+      acksSent++;\n+      if (insertsSent != null && insertsSent == acksSent) {\n+        close();\n+      } else if (response.writeQueueFull()) {\n+        if (!drainHandlerSet) {\n+          response.drainHandler(v -> {\n+            drainHandlerSet = false;\n+            checkMakeRequest();\n+          });\n+          drainHandlerSet = true;\n+        }\n+      } else {\n+        checkMakeRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e0bfcc732841ad275dfe5a4bf3638e4888cd3"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c63ad53ee9653ada35be93b43b2aeec4898626fb", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/c63ad53ee9653ada35be93b43b2aeec4898626fb", "committedDate": "2020-02-14T17:47:42Z", "message": "inserts stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e059af55dac68052ca276c49e33327f2a34262be", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/e059af55dac68052ca276c49e33327f2a34262be", "committedDate": "2020-02-14T17:47:49Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "573d911131b5721acd3fff9da90e20e208d98ecb", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/573d911131b5721acd3fff9da90e20e208d98ecb", "committedDate": "2020-02-14T17:47:49Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33573e2a685bb9b9e4330f8ae723c0b6d8de4d54", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/33573e2a685bb9b9e4330f8ae723c0b6d8de4d54", "committedDate": "2020-02-14T17:47:49Z", "message": "tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee7700f026d9543547e52c4c7e8392d4b497e2f", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/bee7700f026d9543547e52c4c7e8392d4b497e2f", "committedDate": "2020-02-14T17:47:49Z", "message": "Remove unnecessary acls from test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d7d9175432c92c65cd515a150243a0e35d9792", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/76d7d9175432c92c65cd515a150243a0e35d9792", "committedDate": "2020-02-14T17:47:49Z", "message": "tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff91c1e67a1c577af3310a91c12d5f6c42f8850", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/fff91c1e67a1c577af3310a91c12d5f6c42f8850", "committedDate": "2020-02-14T17:47:49Z", "message": "more tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36c9ab82a27b4f7dced8f09febac7e1c928f30d7", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/36c9ab82a27b4f7dced8f09febac7e1c928f30d7", "committedDate": "2020-02-14T17:47:49Z", "message": "try and trigger a jenkins build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b413793c75af273151251ff2585064e403c3418", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/6b413793c75af273151251ff2585064e403c3418", "committedDate": "2020-02-14T17:47:49Z", "message": "force jenkins build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d295f2340738292f9754427c69610799b64f36", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/94d295f2340738292f9754427c69610799b64f36", "committedDate": "2020-02-14T17:47:50Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3f86209ccce032ec752555333ae7683122112d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/ed3f86209ccce032ec752555333ae7683122112d", "committedDate": "2020-02-14T17:47:50Z", "message": "fix error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901392c44ac9190423e36f331c2a89ae29823982", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/901392c44ac9190423e36f331c2a89ae29823982", "committedDate": "2020-02-14T17:47:50Z", "message": "review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4aeaa22f3c4c713e5e93ce9ef357f3f82613d5d4", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/4aeaa22f3c4c713e5e93ce9ef357f3f82613d5d4", "committedDate": "2020-02-14T16:59:49Z", "message": "review"}, "afterCommit": {"oid": "901392c44ac9190423e36f331c2a89ae29823982", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/901392c44ac9190423e36f331c2a89ae29823982", "committedDate": "2020-02-14T17:47:50Z", "message": "review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 6, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}