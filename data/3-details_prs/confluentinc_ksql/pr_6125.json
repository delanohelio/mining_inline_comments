{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTQxOTA1", "number": 6125, "title": "chore: support RUN SCRIPT in KsqlTester", "bodyText": "fixes #6114\nDescription\nAllows the testing tool to accept RUN SCRIPT, which allows advanced CI/CD use cases where the scripts get deployed directly to production.\nTesting done\n\nUnit testing\na new test case in test.sql using test-script.sql\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-31T21:07:48Z", "url": "https://github.com/confluentinc/ksql/pull/6125", "merged": true, "mergeCommit": {"oid": "91ace1bb0151dcd6a3872a2407e85dd96f129ccb"}, "closed": true, "closedAt": "2020-09-02T15:49:20Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEbomfgH2gAyNDc2NTQxOTA1OmFiOWYzOWM3NjNjYWEzNDJjMGVhYTNiNjI2NzkwNDkxNzYxMTNhNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEwEnYgH2gAyNDc2NTQxOTA1Ojc0M2JlMjJiNWJjNjNjZmVmOWFjMTYyZTAzNWYwMzk4MDQ2OTA2NWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab9f39c763caa342c0eaa3b62679049176113a49", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ab9f39c763caa342c0eaa3b62679049176113a49", "committedDate": "2020-08-31T23:44:43Z", "message": "chore: support RUN SCRIPT in KsqlTester"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d06a9947c9490dc475ac170ec6b5f19cf0d08ccc", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/d06a9947c9490dc475ac170ec6b5f19cf0d08ccc", "committedDate": "2020-08-31T21:05:30Z", "message": "chore: support RUN SCRIPT in KsqlTester"}, "afterCommit": {"oid": "ab9f39c763caa342c0eaa3b62679049176113a49", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ab9f39c763caa342c0eaa3b62679049176113a49", "committedDate": "2020-08-31T23:44:43Z", "message": "chore: support RUN SCRIPT in KsqlTester"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MjMzMTQx", "url": "https://github.com/confluentinc/ksql/pull/6125#pullrequestreview-479233141", "createdAt": "2020-09-01T00:57:00Z", "commit": {"oid": "ab9f39c763caa342c0eaa3b62679049176113a49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/b309a31fb5c42eca8addb4cf2039eb5408a05d99", "committedDate": "2020-09-01T03:39:42Z", "message": "chore: minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzA0ODU1", "url": "https://github.com/confluentinc/ksql/pull/6125#pullrequestreview-479704855", "createdAt": "2020-09-01T12:47:00Z", "commit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0NzowMVrOHK0paA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo1OTowNlrOHK1HBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDM3Ng==", "bodyText": "Intent may be clearer with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    s -> assertThat(\"unexpected statement \" + s, false),\n          \n          \n            \n                    s -> fail(\"unexpected statement \" + s),", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481110376", "createdAt": "2020-09-01T12:47:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/parser/SqlTestReaderTest.java", "diffHunk": "@@ -172,4 +181,38 @@ public void shouldThrowOnInvalidStatement() {\n     // Then:\n     assertThat(parsingException.getMessage(), is(\"line 1:8: no viable alternative at input 'CREATE foo'\"));\n   }\n+\n+  @Test\n+  public void shouldReadRunScript() throws IOException {\n+    final String fileContents =\n+        \"CREATE STREAM foo (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='json');\\n\"\n+        + \"CREATE STREAM bar (id INT KEY, col1 INT) WITH (kafka_topic='b', value_format='json');\";\n+    final Path runScript = Files.write(temporaryFolder.newFile().toPath(), fileContents.getBytes());\n+    final String contents = \"\"\n+        + \"--@test: test1\\n\"\n+        + \"RUN SCRIPT '\" + runScript.toString() + \"';\";\n+\n+    // When:\n+    final SqlTestReader reader = SqlTestReader.of(contents);\n+\n+    // Then:\n+    assertThat(reader.hasNext(), is(true));\n+    assertThat(reader.next(), is(TestStatement.of(new TestDirective(Type.TEST, \"test1\", LOC))));\n+\n+    assertThat(reader.hasNext(), is(true));\n+    reader.next().consume(\n+        s -> assertThat(s.getStatementText(), containsString(\"CREATE STREAM foo\")),\n+        s -> assertThat(\"unexpected statement \" + s, false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTcyMw==", "bodyText": "What does the server do when it receives a RUN SCRIPT?  Can we add a suitable test to the server to ensure it returns a suitable error message, please?  e.g.\nRUN SCRIPT is not supported by the server. \nLoad the content of the script file you are trying to run and send that as the body of the request.", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481111723", "createdAt": "2020-09-01T12:49:16Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -90,6 +90,10 @@ assertStatement\n     | ASSERT TABLE sourceName (tableElements)? (WITH tableProperties)?      #assertTable\n     ;\n \n+runScript\n+    : RUN SCRIPT STRING\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMjE1OA==", "bodyText": "Do we have similar negative tests added already for the new assertStatement?", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481112158", "createdAt": "2020-09-01T12:49:56Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -90,6 +90,10 @@ assertStatement\n     | ASSERT TABLE sourceName (tableElements)? (WITH tableProperties)?      #assertTable\n     ;\n \n+runScript\n+    : RUN SCRIPT STRING\n+    ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTcyMw=="}, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMzQ0OA==", "bodyText": "You may run into issues with such a path as IntelliJ and MVN tend to use different current directories.  You can probably work around this by having the test case that runs this explicitly set the current directory to the model directory.", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481113448", "createdAt": "2020-09-01T12:51:58Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/test.sql", "diffHunk": "@@ -85,6 +85,19 @@ CREATE OR REPLACE STREAM bar AS SELECT id, col1 + 1 as col1 FROM foo;\n INSERT INTO foo (rowtime, id, col1) VALUES (1, 1, 1);\n ASSERT VALUES bar (rowtime, id, col1) VALUES (1, 1, 2);\n \n+----------------------------------------------------------------------------------------------------\n+--@test: basic test with run script\n+----------------------------------------------------------------------------------------------------\n+-- contents of script:\n+-- CREATE STREAM foo (id INT KEY, col1 INT) WITH (kafka_topic='foo', value_format='JSON');\n+-- CREATE STREAM bar AS SELECT * FROM foo;\n+RUN SCRIPT './src/test/resources/test-script.sql';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNDQ1MA==", "bodyText": "KsqlException is a questionable exception type here.  There is a TestFrameworkException...", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481114450", "createdAt": "2020-09-01T12:53:36Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestReader.java", "diffHunk": "@@ -155,4 +171,21 @@ public TestStatement next() {\n     throw new IllegalStateException(\"Unexpected parse tree for statement \" + testStatement);\n   }\n \n+  private TestStatement handleRunScript() {\n+    final String script = ParserUtil.unquote(testStatement.runScript().STRING().getText(), \"'\");\n+    try {\n+      final List<String> lines = Files.readAllLines(\n+          Paths.get(ParserUtil.getIdentifierText(script)));\n+      cachedRunScript.addAll(new DefaultKsqlParser().parse(String.join(\"\", lines)));\n+    } catch (IOException e) {\n+      throw new KsqlException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNzk1OQ==", "bodyText": "Probably want to catch a parsing error here and wrap it in something that makes it clear the parsing error is in the script and include the path of the script.", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481117959", "createdAt": "2020-09-01T12:59:06Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestReader.java", "diffHunk": "@@ -155,4 +171,21 @@ public TestStatement next() {\n     throw new IllegalStateException(\"Unexpected parse tree for statement \" + testStatement);\n   }\n \n+  private TestStatement handleRunScript() {\n+    final String script = ParserUtil.unquote(testStatement.runScript().STRING().getText(), \"'\");\n+    try {\n+      final List<String> lines = Files.readAllLines(\n+          Paths.get(ParserUtil.getIdentifierText(script)));\n+      cachedRunScript.addAll(new DefaultKsqlParser().parse(String.join(\"\", lines)));\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7063fed46e92543d4d7dcbbb76a05c764a51ca9", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/e7063fed46e92543d4d7dcbbb76a05c764a51ca9", "committedDate": "2020-09-01T22:13:42Z", "message": "chore: address andys comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "743be22b5bc63cfef9ac162e035f03980469065a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/743be22b5bc63cfef9ac162e035f03980469065a", "committedDate": "2020-09-01T23:33:25Z", "message": "fix: findbugs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4744, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}