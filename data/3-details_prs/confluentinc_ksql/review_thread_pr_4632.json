{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTIyNTcz", "number": 4632, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozODoyNVrODjjGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMTo1M1rODjjlFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAxOTEwOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozODoyNVrOFvauqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoxNjoxOFrOFvjKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMyMg==", "bodyText": "You might want to implement from KsqlTimestampExtractor to we can support this on CSAS/CTAS statements too.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385265322", "createdAt": "2020-02-27T17:38:25Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNzUyMg==", "bodyText": "I think it's already supported because this just wraps other extractors (we always return this extractor). I'm not sure exactly what you mean here?", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385317522", "createdAt": "2020-02-27T19:16:44Z", "author": {"login": "agavra"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMyMg=="}, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwMzQwOQ==", "bodyText": "ah KsqlTimestampExtractor is something new. I'll do this", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385403409", "createdAt": "2020-02-27T22:16:18Z", "author": {"login": "agavra"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMyMg=="}, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAzNzA2OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0Mzo1NVrOFva6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOToxNTo0MVrOFvd4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODIzOQ==", "bodyText": "Will this allow KSQL to display the row with ROWTIME = -1 in case of a failure?\nI'm trying to understand how the FailOnInvalidTimestamp will work in this situation. If a -1 is found on the row, then the FailOnInvalidTimestamp will throw an exception which this code will catch and log it to the processing log. But it returns a -1 back to stream, so the stream will set it to as ROWTIME, won't it?", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385268239", "createdAt": "2020-02-27T17:43:55Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {\n+\n+  private final TimestampExtractor delegate;\n+  private final ProcessingLogger logger;\n+  private final boolean failOnError;\n+\n+  public LoggingTimestampExtractor(\n+      final TimestampExtractor delegate,\n+      final ProcessingLogger logger,\n+      final boolean failOnError\n+  ) {\n+    this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n+    this.logger = Objects.requireNonNull(logger, \"logger\");\n+    this.failOnError = failOnError;\n+  }\n+\n+  @Override\n+  public long extract(final ConsumerRecord<Object, Object> record, final long partitionTime) {\n+    try {\n+      return delegate.extract(record, partitionTime);\n+    } catch (final Exception e) {\n+      logger.error(deserializationErrorMsg(e, record));\n+      if (failOnError) {\n+        throw e;\n+      }\n+      return -1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNjkzNQ==", "bodyText": "any negative timestamp causes the event to be ignored by Kafka Streams. That means that if this wraps FailOnInvalidTimestamp but you set ksql.timestamp.throw.on.invalid to false then it will suppress the throw and just ignore the message", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385316935", "createdAt": "2020-02-27T19:15:41Z", "author": {"login": "agavra"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {\n+\n+  private final TimestampExtractor delegate;\n+  private final ProcessingLogger logger;\n+  private final boolean failOnError;\n+\n+  public LoggingTimestampExtractor(\n+      final TimestampExtractor delegate,\n+      final ProcessingLogger logger,\n+      final boolean failOnError\n+  ) {\n+    this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n+    this.logger = Objects.requireNonNull(logger, \"logger\");\n+    this.failOnError = failOnError;\n+  }\n+\n+  @Override\n+  public long extract(final ConsumerRecord<Object, Object> record, final long partitionTime) {\n+    try {\n+      return delegate.extract(record, partitionTime);\n+    } catch (final Exception e) {\n+      logger.error(deserializationErrorMsg(e, record));\n+      if (failOnError) {\n+        throw e;\n+      }\n+      return -1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODIzOQ=="}, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA4MTgzOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NzoyOFrOFvbWag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NzoyOFrOFvbWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NTQ5OA==", "bodyText": "Use this for the logger name instead of the id directly:\nfinal QueryId queryId = queryBuilder.getQueryId();\nfinal QueryContext queryContex = source.getProperties().getQueryContext()\nfinal String loggerNamePrefix = QueryLoggerUtil.queryLoggerName(queryId, queryContext);\n\nThis way you will get a more specific logger prefix that tells you where in the query plan the message was generated.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385275498", "createdAt": "2020-02-27T17:57:28Z", "author": {"login": "rodesai"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SourceBuilder.java", "diffHunk": "@@ -314,7 +315,13 @@ private static TimestampExtractor timestampExtractor(\n         .map(Column::index)\n         .orElse(-1);\n \n-    return timestampPolicy.create(timestampIndex);\n+    return timestampPolicy.create(\n+        timestampIndex,\n+        ksqlConfig.getBoolean(KsqlConfig.KSQL_TIMESTAMP_THROW_ON_INVALID),\n+        queryBuilder.getProcessingLogContext()\n+            .getLoggerFactory()\n+            .getLogger(queryBuilder.getQueryId().getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA5Njg0OnYy", "diffSide": "RIGHT", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/util/SerdeProcessingLogMessageFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMTo1M1rOFvbfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOToxNDoxMFrOFvd1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3Nzg4NA==", "bodyText": "I'd use a different message type for this error. Deserialization error messages generally mean the serde couldn't deserialize the record in the topic, and contain a base64 encoded representation of the data inside (in a field called recordB64). The data written out here represents something different - KSQL's view of the row once it's been deserialized.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385277884", "createdAt": "2020-02-27T18:01:53Z", "author": {"login": "rodesai"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/util/SerdeProcessingLogMessageFactory.java", "diffHunk": "@@ -34,6 +36,20 @@ private SerdeProcessingLogMessageFactory() {\n   public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(\n       final Throwable exception,\n       final Optional<byte[]> record\n+  ) {\n+    return message(exception, () -> record.map(Base64.getEncoder()::encodeToString).orElse(null));\n+  }\n+\n+  public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NTExNA==", "bodyText": "You should be able to use the existing record processing error (EngineProcessingLogMessageFactory.recordProcessingError)", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385285114", "createdAt": "2020-02-27T18:16:16Z", "author": {"login": "rodesai"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/util/SerdeProcessingLogMessageFactory.java", "diffHunk": "@@ -34,6 +36,20 @@ private SerdeProcessingLogMessageFactory() {\n   public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(\n       final Throwable exception,\n       final Optional<byte[]> record\n+  ) {\n+    return message(exception, () -> record.map(Base64.getEncoder()::encodeToString).orElse(null));\n+  }\n+\n+  public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3Nzg4NA=="}, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNjEzMg==", "bodyText": "i was debating which I should do since this felt like a type of deserialization error to me, but I'll update it to a new type (I can see both sides)", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385316132", "createdAt": "2020-02-27T19:14:10Z", "author": {"login": "agavra"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/util/SerdeProcessingLogMessageFactory.java", "diffHunk": "@@ -34,6 +36,20 @@ private SerdeProcessingLogMessageFactory() {\n   public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(\n       final Throwable exception,\n       final Optional<byte[]> record\n+  ) {\n+    return message(exception, () -> record.map(Base64.getEncoder()::encodeToString).orElse(null));\n+  }\n+\n+  public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3Nzg4NA=="}, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2003, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}