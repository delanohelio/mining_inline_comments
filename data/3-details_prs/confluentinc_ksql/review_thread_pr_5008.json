{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzQ4MjUy", "number": 5008, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNzoxM1rODvQYjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozMTo1MVrODvelfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc4MDkzOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-23-primary-keys-for-tables.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNzoxM1rOGBk4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozOTowOVrOGB5D3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTk5Mw==", "bodyText": "Effectively, the key (from the topic) of a table is already a primary key for the table. This sentence implies it's not a primary key and we want to change this. It might be worth to rephrase to make clear that this KLIP is only a syntax change but not a semantic change? (Ie, we bring the syntax up to data to match the existing semantics.)", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404305993", "createdAt": "2020-04-06T18:37:13Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** Tables in SQL have `PRIMARY KEY`s. In ksqlDB, Tables, like Streams currently have only\n+`KEY` columns, i.e. columns that come from the Kafka message key. We should introduce `PRIMARY KEY`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8fd4e0342e293101b9a766039dfe2f328200cb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNjYzNw==", "bodyText": "done.", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404636637", "createdAt": "2020-04-07T08:39:09Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** Tables in SQL have `PRIMARY KEY`s. In ksqlDB, Tables, like Streams currently have only\n+`KEY` columns, i.e. columns that come from the Kafka message key. We should introduce `PRIMARY KEY`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTk5Mw=="}, "originalCommit": {"oid": "8d8fd4e0342e293101b9a766039dfe2f328200cb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc5ODcyOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-23-primary-keys-for-tables.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0MjoxNFrOGBlDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0MjoxNFrOGBlDpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODkwMg==", "bodyText": "This is great forward thinking!", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404308902", "createdAt": "2020-04-06T18:42:14Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** Tables in SQL have `PRIMARY KEY`s. In ksqlDB, Tables, like Streams currently have only\n+`KEY` columns, i.e. columns that come from the Kafka message key. We should introduce `PRIMARY KEY`\n+syntax for tables as this is standard SQL syntax and will help highlight the difference in semantics\n+for a table's primary key vs a stream's key column.\n+           \n+## Background\n+\n+### KEY keyword\n+\n+A release or two ago ksqlDB introduced the `KEY` keyword to allow users to specify the type of the\n+`ROWKEY` column in their `CREATE TABLE` and `CREATE STREAM` statements. For example:\n+\n+```sql\n+-- table with BIGINT key\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME STRING, ID BIGINT) WITH (...);\n+\n+-- stream with string key\n+CREATE STREAM CLICKS (ROWKEY VARCHAR KEY, AGENT VARCHAR) WITH (...);\n+```\n+\n+### ksqlDB 'any key-name' enhancement\n+\n+There is currently [work afoot](https://github.com/confluentinc/ksql/issues/3536) to remove the\n+restriction that the key column must be named `ROWKEY`. This work is mostly complete, but is\n+currently disabled by a feature flag, waiting on reviews.\n+\n+With this change a table, or stream, can give any name to its key column. This effectively makes the\n+`WITH(KEY)` syntax redundant.  For example:\n+\n+```sql\n+-- old style statement (where the ID value column is an alias for ROWKEY)\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (KEY='ID', ...);\n+\n+-- new style statement:\n+CREATE TABLE USER (ID BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (...);\n+```\n+\n+Removal of the `WITH(KEY)` syntax is benefical as it removes the need for users to duplicate the key\n+into a value column, which can require pre-processing of data.\n+\n+## Motivation\n+\n+### SQL Tables have PRIMARY KEYs\n+\n+The existing `KEY` keyword can currently be used in `CREATE STREAM` and `CREATE TABLE` statements,\n+as shown above.\n+\n+The keyword informs ksqlDB that the column should be loaded from the Kafka message's key, rather\n+than its value.\n+\n+However, for tables, the key column is actually the PRIMARY KEY of the table. Hence we should use\n+the SQL standard `PRIMARY KEY` and not simply `KEY` when defining tables. For example,\n+\n+```sql\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Streams, which by definition do not have a primary key, should not use `PRIMARY KEY`.\n+\n+This change should also make it clearer to users that a table's `PRIMARY` KEY is not the same as a\n+stream's `KEY`. The semantics of how stream and tables keys are processed by ksqlDB are different:\n+\n+1. The SQL standard says the columns in a table's primary key must be NON NULL. Any NULL key is\n+dropped by ksqlDB. No such constraint exists for a stream's key column(s), which are treated much\n+like any value column.\n+\n+2. The SQL standard also says that the combination of the columns in the primary key must be unique.\n+This is why ksqlDB can use a table's primary key to 'upsert' a table's changelog into a materialized\n+table. KsqlDB does not materialize streams.\n+\n+## What is in scope\n+\n+* A syntax only change, requiring tables to be defined with `PRIMARY KEY`, instead of `KEY`.\n+* Only syntax for a single PRIMARY KEY.\n+\n+## What is not in scope\n+\n+* Any functional change in key handling semantics. The proposed change is purely syntactical.\n+* Multiple key columns. Syntax for composite primary keys is well documented in the SQL community\n+and will be introduced with the work to support multiple key columns.\n+\n+## Value/Return\n+\n+Main gains:\n+\n+1. More standard SQL: `PRIMARY KEY` is standard sql syntax, where as `KEY` is not.\n+2. Should help differentiate the difference between a stream's key column and a table's primary key\n+to users.\n+\n+There is also some discussion going on about how ksqlDB should model streams: should they continue\n+to be their own collection type, or should they be modelled as tables without primary keys? If we\n+do go the latter route it will be crucial that we differentiate `PRIMARY KEY`s from non-primary key\n+columns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8fd4e0342e293101b9a766039dfe2f328200cb"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgwNTg0OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-23-primary-keys-for-tables.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NDoxOFrOGBlIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1MDoxMlrOGB5fAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMDEwMw==", "bodyText": "Well, isn't the change backward incompatible if a CTAS using KEY instead of PRIMARY KEY is rejected?", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404310103", "createdAt": "2020-04-06T18:44:18Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** Tables in SQL have `PRIMARY KEY`s. In ksqlDB, Tables, like Streams currently have only\n+`KEY` columns, i.e. columns that come from the Kafka message key. We should introduce `PRIMARY KEY`\n+syntax for tables as this is standard SQL syntax and will help highlight the difference in semantics\n+for a table's primary key vs a stream's key column.\n+           \n+## Background\n+\n+### KEY keyword\n+\n+A release or two ago ksqlDB introduced the `KEY` keyword to allow users to specify the type of the\n+`ROWKEY` column in their `CREATE TABLE` and `CREATE STREAM` statements. For example:\n+\n+```sql\n+-- table with BIGINT key\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME STRING, ID BIGINT) WITH (...);\n+\n+-- stream with string key\n+CREATE STREAM CLICKS (ROWKEY VARCHAR KEY, AGENT VARCHAR) WITH (...);\n+```\n+\n+### ksqlDB 'any key-name' enhancement\n+\n+There is currently [work afoot](https://github.com/confluentinc/ksql/issues/3536) to remove the\n+restriction that the key column must be named `ROWKEY`. This work is mostly complete, but is\n+currently disabled by a feature flag, waiting on reviews.\n+\n+With this change a table, or stream, can give any name to its key column. This effectively makes the\n+`WITH(KEY)` syntax redundant.  For example:\n+\n+```sql\n+-- old style statement (where the ID value column is an alias for ROWKEY)\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (KEY='ID', ...);\n+\n+-- new style statement:\n+CREATE TABLE USER (ID BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (...);\n+```\n+\n+Removal of the `WITH(KEY)` syntax is benefical as it removes the need for users to duplicate the key\n+into a value column, which can require pre-processing of data.\n+\n+## Motivation\n+\n+### SQL Tables have PRIMARY KEYs\n+\n+The existing `KEY` keyword can currently be used in `CREATE STREAM` and `CREATE TABLE` statements,\n+as shown above.\n+\n+The keyword informs ksqlDB that the column should be loaded from the Kafka message's key, rather\n+than its value.\n+\n+However, for tables, the key column is actually the PRIMARY KEY of the table. Hence we should use\n+the SQL standard `PRIMARY KEY` and not simply `KEY` when defining tables. For example,\n+\n+```sql\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Streams, which by definition do not have a primary key, should not use `PRIMARY KEY`.\n+\n+This change should also make it clearer to users that a table's `PRIMARY` KEY is not the same as a\n+stream's `KEY`. The semantics of how stream and tables keys are processed by ksqlDB are different:\n+\n+1. The SQL standard says the columns in a table's primary key must be NON NULL. Any NULL key is\n+dropped by ksqlDB. No such constraint exists for a stream's key column(s), which are treated much\n+like any value column.\n+\n+2. The SQL standard also says that the combination of the columns in the primary key must be unique.\n+This is why ksqlDB can use a table's primary key to 'upsert' a table's changelog into a materialized\n+table. KsqlDB does not materialize streams.\n+\n+## What is in scope\n+\n+* A syntax only change, requiring tables to be defined with `PRIMARY KEY`, instead of `KEY`.\n+* Only syntax for a single PRIMARY KEY.\n+\n+## What is not in scope\n+\n+* Any functional change in key handling semantics. The proposed change is purely syntactical.\n+* Multiple key columns. Syntax for composite primary keys is well documented in the SQL community\n+and will be introduced with the work to support multiple key columns.\n+\n+## Value/Return\n+\n+Main gains:\n+\n+1. More standard SQL: `PRIMARY KEY` is standard sql syntax, where as `KEY` is not.\n+2. Should help differentiate the difference between a stream's key column and a table's primary key\n+to users.\n+\n+There is also some discussion going on about how ksqlDB should model streams: should they continue\n+to be their own collection type, or should they be modelled as tables without primary keys? If we\n+do go the latter route it will be crucial that we differentiate `PRIMARY KEY`s from non-primary key\n+columns.\n+\n+## Public APIS\n+\n+`CREATE TABLE` statements will change from using the `KEY` keyword for key columns to `PRIMARY KEY`.\n+For example:\n+\n+```sql\n+-- current syntax:\n+CREATE TABLE FOO (ID INT KEY, NAME STRING) ...\n+\n+-- proposed syntax:\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Note: `CREATE STREAM` statements will not be affected.\n+\n+## Design\n+\n+This is purely a syntax change.  All that is needed is:\n+\n+ 1. add an optional `PRIMARY` keyword to be added to the syntax of create statements, and\n+ 1. to have the parser reject any `CREATE TABLE` key columns _without_ the `PRIMARY`\n+keyword, and reject any `CREATE STREAM` key column _with_ the new keyword.\n+\n+## Test plan\n+\n+QTT tests will be updated to reflect the new syntax for tables. Existing historic tests will ensure\n+the change is backwards compatible.\n+\n+## LOEs and Delivery Milestones\n+\n+Change already implemented: https://github.com/confluentinc/ksql/pull/4986.\n+\n+## Documentation Updates\n+\n+See existing PR for doc updates: https://github.com/confluentinc/ksql/pull/4986\n+\n+This new syntax will be highlighted in a blog post, (tracked by\n+https://github.com/confluentinc/ksql/issues/4960). The existing examples in the ksqlDB repo and the\n+examples repo will need updating with the new syntax,\n+(tracked by https://github.com/confluentinc/ksql/issues/4927).\n+\n+Where out of data examples are used in the new version of ksqlDB, the error message will be very explicit about what needs to be changed, e.g. \n+\n+```\n+ksql> CREATE TABLE FOO (ROWKEY INT KEY, NAME STRING) WITH (...);\n+Error: Line: 1, COL: 18: `KEY` used in table schema. Tables have primary keys. Please replace KEY with PRIMARY KEY in: ROWKEY INT KEY\n+\n+The following columns are defined as KEY columns. Tables do not support KEY columns, only PRIMARY KEY columns. Please add the `PRIMARY` key word. Columns:\n+ROWKEY\n+Tables have PRIMARY KEYs, which are unique and NON NULL.\n+Streams have KEYs, which have no uniqueness or NON NULL constraints.\n+```\n+\n+## Compatibility Implications\n+\n+None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8fd4e0342e293101b9a766039dfe2f328200cb"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzU4Nw==", "bodyText": "Meh, I've spelled it out.", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404643587", "createdAt": "2020-04-07T08:50:12Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** Tables in SQL have `PRIMARY KEY`s. In ksqlDB, Tables, like Streams currently have only\n+`KEY` columns, i.e. columns that come from the Kafka message key. We should introduce `PRIMARY KEY`\n+syntax for tables as this is standard SQL syntax and will help highlight the difference in semantics\n+for a table's primary key vs a stream's key column.\n+           \n+## Background\n+\n+### KEY keyword\n+\n+A release or two ago ksqlDB introduced the `KEY` keyword to allow users to specify the type of the\n+`ROWKEY` column in their `CREATE TABLE` and `CREATE STREAM` statements. For example:\n+\n+```sql\n+-- table with BIGINT key\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME STRING, ID BIGINT) WITH (...);\n+\n+-- stream with string key\n+CREATE STREAM CLICKS (ROWKEY VARCHAR KEY, AGENT VARCHAR) WITH (...);\n+```\n+\n+### ksqlDB 'any key-name' enhancement\n+\n+There is currently [work afoot](https://github.com/confluentinc/ksql/issues/3536) to remove the\n+restriction that the key column must be named `ROWKEY`. This work is mostly complete, but is\n+currently disabled by a feature flag, waiting on reviews.\n+\n+With this change a table, or stream, can give any name to its key column. This effectively makes the\n+`WITH(KEY)` syntax redundant.  For example:\n+\n+```sql\n+-- old style statement (where the ID value column is an alias for ROWKEY)\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (KEY='ID', ...);\n+\n+-- new style statement:\n+CREATE TABLE USER (ID BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (...);\n+```\n+\n+Removal of the `WITH(KEY)` syntax is benefical as it removes the need for users to duplicate the key\n+into a value column, which can require pre-processing of data.\n+\n+## Motivation\n+\n+### SQL Tables have PRIMARY KEYs\n+\n+The existing `KEY` keyword can currently be used in `CREATE STREAM` and `CREATE TABLE` statements,\n+as shown above.\n+\n+The keyword informs ksqlDB that the column should be loaded from the Kafka message's key, rather\n+than its value.\n+\n+However, for tables, the key column is actually the PRIMARY KEY of the table. Hence we should use\n+the SQL standard `PRIMARY KEY` and not simply `KEY` when defining tables. For example,\n+\n+```sql\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Streams, which by definition do not have a primary key, should not use `PRIMARY KEY`.\n+\n+This change should also make it clearer to users that a table's `PRIMARY` KEY is not the same as a\n+stream's `KEY`. The semantics of how stream and tables keys are processed by ksqlDB are different:\n+\n+1. The SQL standard says the columns in a table's primary key must be NON NULL. Any NULL key is\n+dropped by ksqlDB. No such constraint exists for a stream's key column(s), which are treated much\n+like any value column.\n+\n+2. The SQL standard also says that the combination of the columns in the primary key must be unique.\n+This is why ksqlDB can use a table's primary key to 'upsert' a table's changelog into a materialized\n+table. KsqlDB does not materialize streams.\n+\n+## What is in scope\n+\n+* A syntax only change, requiring tables to be defined with `PRIMARY KEY`, instead of `KEY`.\n+* Only syntax for a single PRIMARY KEY.\n+\n+## What is not in scope\n+\n+* Any functional change in key handling semantics. The proposed change is purely syntactical.\n+* Multiple key columns. Syntax for composite primary keys is well documented in the SQL community\n+and will be introduced with the work to support multiple key columns.\n+\n+## Value/Return\n+\n+Main gains:\n+\n+1. More standard SQL: `PRIMARY KEY` is standard sql syntax, where as `KEY` is not.\n+2. Should help differentiate the difference between a stream's key column and a table's primary key\n+to users.\n+\n+There is also some discussion going on about how ksqlDB should model streams: should they continue\n+to be their own collection type, or should they be modelled as tables without primary keys? If we\n+do go the latter route it will be crucial that we differentiate `PRIMARY KEY`s from non-primary key\n+columns.\n+\n+## Public APIS\n+\n+`CREATE TABLE` statements will change from using the `KEY` keyword for key columns to `PRIMARY KEY`.\n+For example:\n+\n+```sql\n+-- current syntax:\n+CREATE TABLE FOO (ID INT KEY, NAME STRING) ...\n+\n+-- proposed syntax:\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Note: `CREATE STREAM` statements will not be affected.\n+\n+## Design\n+\n+This is purely a syntax change.  All that is needed is:\n+\n+ 1. add an optional `PRIMARY` keyword to be added to the syntax of create statements, and\n+ 1. to have the parser reject any `CREATE TABLE` key columns _without_ the `PRIMARY`\n+keyword, and reject any `CREATE STREAM` key column _with_ the new keyword.\n+\n+## Test plan\n+\n+QTT tests will be updated to reflect the new syntax for tables. Existing historic tests will ensure\n+the change is backwards compatible.\n+\n+## LOEs and Delivery Milestones\n+\n+Change already implemented: https://github.com/confluentinc/ksql/pull/4986.\n+\n+## Documentation Updates\n+\n+See existing PR for doc updates: https://github.com/confluentinc/ksql/pull/4986\n+\n+This new syntax will be highlighted in a blog post, (tracked by\n+https://github.com/confluentinc/ksql/issues/4960). The existing examples in the ksqlDB repo and the\n+examples repo will need updating with the new syntax,\n+(tracked by https://github.com/confluentinc/ksql/issues/4927).\n+\n+Where out of data examples are used in the new version of ksqlDB, the error message will be very explicit about what needs to be changed, e.g. \n+\n+```\n+ksql> CREATE TABLE FOO (ROWKEY INT KEY, NAME STRING) WITH (...);\n+Error: Line: 1, COL: 18: `KEY` used in table schema. Tables have primary keys. Please replace KEY with PRIMARY KEY in: ROWKEY INT KEY\n+\n+The following columns are defined as KEY columns. Tables do not support KEY columns, only PRIMARY KEY columns. Please add the `PRIMARY` key word. Columns:\n+ROWKEY\n+Tables have PRIMARY KEYs, which are unique and NON NULL.\n+Streams have KEYs, which have no uniqueness or NON NULL constraints.\n+```\n+\n+## Compatibility Implications\n+\n+None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMDEwMw=="}, "originalCommit": {"oid": "8d8fd4e0342e293101b9a766039dfe2f328200cb"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTEwNzgwOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-23-primary-keys-for-tables.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozMTo1MVrOGB7GkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDowMzowOVrOGB8RHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MDA5Ng==", "bodyText": "nit: this could be seen as ambiguous w.r.t. composite keys. I'd say\nOnly syntax for a single field PRIMARY KEY.", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404670096", "createdAt": "2020-04-07T09:31:51Z", "author": {"login": "rmoff"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** In ksqlDB, Tables and Streams currently use the `KEY` keyword to identify columns that\n+come from the Kafka message key, rather than the value. We propose introducing a syntax only change\n+to use `PRIMARY KEY` for tables, rather than `KEY`, as this: is standard SQL syntax; the table's\n+`KEY` column _is a already_ its primary key; and the change will help highlight the difference in\n+semantics between stream and table keys.\n+           \n+## Background\n+\n+### KEY keyword\n+\n+A release or two ago ksqlDB introduced the `KEY` keyword to allow users to specify the type of the\n+`ROWKEY` column in their `CREATE TABLE` and `CREATE STREAM` statements. For example:\n+\n+```sql\n+-- table with BIGINT key\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME STRING, ID BIGINT) WITH (...);\n+\n+-- stream with string key\n+CREATE STREAM CLICKS (ROWKEY VARCHAR KEY, AGENT VARCHAR) WITH (...);\n+```\n+\n+### ksqlDB 'any key-name' enhancement\n+\n+There is currently [work afoot](https://github.com/confluentinc/ksql/issues/3536) to remove the\n+restriction that the key column must be named `ROWKEY`. This work is mostly complete, but is\n+currently disabled by a feature flag, waiting on reviews.\n+\n+With this change a table, or stream, can give any name to its key column. This effectively makes the\n+`WITH(KEY)` syntax redundant.  For example:\n+\n+```sql\n+-- old style statement (where the ID value column is an alias for ROWKEY)\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (KEY='ID', ...);\n+\n+-- new style statement:\n+CREATE TABLE USER (ID BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (...);\n+```\n+\n+Removal of the `WITH(KEY)` syntax is benefical as it removes the need for users to duplicate the key\n+into a value column, which can require pre-processing of data.\n+\n+## Motivation\n+\n+### SQL Tables have PRIMARY KEYs\n+\n+The existing `KEY` keyword can currently be used in `CREATE STREAM` and `CREATE TABLE` statements,\n+as shown above.\n+\n+The keyword informs ksqlDB that the column should be loaded from the Kafka message's key, rather\n+than its value.\n+\n+However, for tables, the key column is actually the PRIMARY KEY of the table. Hence we should use\n+the SQL standard `PRIMARY KEY` and not simply `KEY` when defining tables. For example,\n+\n+```sql\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Streams, which by definition do not have a primary key, should not use `PRIMARY KEY`.\n+\n+This change should also make it clearer to users that a table's `PRIMARY` KEY is not the same as a\n+stream's `KEY`. The semantics of how stream and tables keys are processed by ksqlDB are different:\n+\n+1. The SQL standard says the columns in a table's primary key must be NON NULL. Any NULL key is\n+dropped by ksqlDB. No such constraint exists for a stream's key column(s), which are treated much\n+like any value column.\n+\n+2. The SQL standard also says that the combination of the columns in the primary key must be unique.\n+This is why ksqlDB can use a table's primary key to 'upsert' a table's changelog into a materialized\n+table. KsqlDB does not materialize streams.\n+\n+## What is in scope\n+\n+* A syntax only change, requiring tables to be defined with `PRIMARY KEY`, instead of `KEY`.\n+* Only syntax for a single PRIMARY KEY.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e80a5485316c01b040e1f46c15b158f79465af0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4OTE4Mw==", "bodyText": "done.", "url": "https://github.com/confluentinc/ksql/pull/5008#discussion_r404689183", "createdAt": "2020-04-07T10:03:09Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-23-primary-keys-for-tables.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# KLIP 23 - Use PRIMARY KEYs for tables\n+\n+**Author**: @big-andy-coates |\n+**Release Target**: TBD |\n+**Status**: In Discussion |\n+**Discussion**: TBD\n+\n+**tl;dr:** In ksqlDB, Tables and Streams currently use the `KEY` keyword to identify columns that\n+come from the Kafka message key, rather than the value. We propose introducing a syntax only change\n+to use `PRIMARY KEY` for tables, rather than `KEY`, as this: is standard SQL syntax; the table's\n+`KEY` column _is a already_ its primary key; and the change will help highlight the difference in\n+semantics between stream and table keys.\n+           \n+## Background\n+\n+### KEY keyword\n+\n+A release or two ago ksqlDB introduced the `KEY` keyword to allow users to specify the type of the\n+`ROWKEY` column in their `CREATE TABLE` and `CREATE STREAM` statements. For example:\n+\n+```sql\n+-- table with BIGINT key\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME STRING, ID BIGINT) WITH (...);\n+\n+-- stream with string key\n+CREATE STREAM CLICKS (ROWKEY VARCHAR KEY, AGENT VARCHAR) WITH (...);\n+```\n+\n+### ksqlDB 'any key-name' enhancement\n+\n+There is currently [work afoot](https://github.com/confluentinc/ksql/issues/3536) to remove the\n+restriction that the key column must be named `ROWKEY`. This work is mostly complete, but is\n+currently disabled by a feature flag, waiting on reviews.\n+\n+With this change a table, or stream, can give any name to its key column. This effectively makes the\n+`WITH(KEY)` syntax redundant.  For example:\n+\n+```sql\n+-- old style statement (where the ID value column is an alias for ROWKEY)\n+CREATE TABLE USER (ROWKEY BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (KEY='ID', ...);\n+\n+-- new style statement:\n+CREATE TABLE USER (ID BIGINT KEY, NAME VARCHAR, ID BIGINT) WITH (...);\n+```\n+\n+Removal of the `WITH(KEY)` syntax is benefical as it removes the need for users to duplicate the key\n+into a value column, which can require pre-processing of data.\n+\n+## Motivation\n+\n+### SQL Tables have PRIMARY KEYs\n+\n+The existing `KEY` keyword can currently be used in `CREATE STREAM` and `CREATE TABLE` statements,\n+as shown above.\n+\n+The keyword informs ksqlDB that the column should be loaded from the Kafka message's key, rather\n+than its value.\n+\n+However, for tables, the key column is actually the PRIMARY KEY of the table. Hence we should use\n+the SQL standard `PRIMARY KEY` and not simply `KEY` when defining tables. For example,\n+\n+```sql\n+CREATE TABLE FOO (ID INT PRIMARY KEY, NAME STRING) ...\n+```\n+\n+Streams, which by definition do not have a primary key, should not use `PRIMARY KEY`.\n+\n+This change should also make it clearer to users that a table's `PRIMARY` KEY is not the same as a\n+stream's `KEY`. The semantics of how stream and tables keys are processed by ksqlDB are different:\n+\n+1. The SQL standard says the columns in a table's primary key must be NON NULL. Any NULL key is\n+dropped by ksqlDB. No such constraint exists for a stream's key column(s), which are treated much\n+like any value column.\n+\n+2. The SQL standard also says that the combination of the columns in the primary key must be unique.\n+This is why ksqlDB can use a table's primary key to 'upsert' a table's changelog into a materialized\n+table. KsqlDB does not materialize streams.\n+\n+## What is in scope\n+\n+* A syntax only change, requiring tables to be defined with `PRIMARY KEY`, instead of `KEY`.\n+* Only syntax for a single PRIMARY KEY.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MDA5Ng=="}, "originalCommit": {"oid": "2e80a5485316c01b040e1f46c15b158f79465af0"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}