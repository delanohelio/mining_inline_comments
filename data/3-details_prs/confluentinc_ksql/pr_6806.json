{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODU1MDUy", "number": 6806, "title": "feat: timestamp support - casting, comparisons and serde", "bodyText": "Description\nFirst pass at adding timestamp type support (#4148). This PR includes casting between strings and timestamps, comparisons and JSON/Avro/Delimited serde.\nIt looks like a lot of files, but most are tests or changes that involve adding timestamp to a list of types. All the other files can be broken down as follows:\nParsing\n\nSqlBase.g4: removed unused references to TIME(STAMP)_WITH_TIME_ZONE\nTimestampLiteral\nPartialStringToTimestampParser: reusing this helper for parsing strings to timestamp types\nSqlTimestamps: helper functions to convert between strings and timestamps\nTimestampType\nApiJsonMapper\n\nCasting\n\nDefaultSqlValueCoercer and CastEvaluator: logic for string/timestamp casting\nSqlBaseType\nGenericExpressionResolver: warning for casting incorrectly formed strings to timestamps\n\nComparisons\n\nSqlToJavaVisitor: enables timestamp comparisons and wraps strings being compared to timestamps with a timestamp parser\nComparisonUtil\n\nSerde\n\nConnectDataTranslator\nKsqlDelimitedDeserializer and KsqlDelimitedSerializer\nJsonSerdeUtils.java  and KsqlJsonDeserializer\n\nNot included in this PR:\n\nDocumentation (this will be in a separate PR)\nUDF/UDAF support\nArithmetic functions\nProtobuf support - KSQL can't create a new Protobuf topic unless google.protobuf.Timestamp is registered in Schema Registry.\nIntegration testing with Connect\n\nTesting done\nQTT and unit tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-12-19T01:30:35Z", "url": "https://github.com/confluentinc/ksql/pull/6806", "merged": true, "mergeCommit": {"oid": "a27df465040bf3aa409ca34509c0117fadf8982a"}, "closed": true, "closedAt": "2021-01-07T22:52:40Z", "author": {"login": "jzaralim"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnhRr6AH2gAyNTQyODU1MDUyOmMyNDZkMDMyN2ZiYzM2NDlmYTBhMDEwZTZiMjRjOTQ2NDI3ZDE4ZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdt5hIKAH2gAyNTQyODU1MDUyOmZlNGE4NGE1MWVjNTRjOTBlZTA5ZmQ1ZWViOTNjNjIzNTY5MTNjN2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c246d0327fbc3649fa0a010e6b24c946427d18ee", "author": {"user": {"login": "jzaralim", "name": "Zara Lim"}}, "url": "https://github.com/confluentinc/ksql/commit/c246d0327fbc3649fa0a010e6b24c946427d18ee", "committedDate": "2020-12-19T00:06:28Z", "message": "first pass at timestamps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392772260fe50742f6857fc3af1138890dc821d9", "author": {"user": {"login": "jzaralim", "name": "Zara Lim"}}, "url": "https://github.com/confluentinc/ksql/commit/392772260fe50742f6857fc3af1138890dc821d9", "committedDate": "2020-12-19T00:09:20Z", "message": "add functional test plans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716", "author": {"user": {"login": "jzaralim", "name": "Zara Lim"}}, "url": "https://github.com/confluentinc/ksql/commit/bf26747e6cf728710ddebda1e3149927fe831716", "committedDate": "2020-12-21T17:58:20Z", "message": "fix build failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjU5MjEz", "url": "https://github.com/confluentinc/ksql/pull/6806#pullrequestreview-561259213", "createdAt": "2021-01-04T18:51:38Z", "commit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODo1MTozOVrOIN89oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyOTowMFrOIOeGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwMTIxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Status**: Approved | \n          \n          \n            \n            **Status**: In development |", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551501217", "createdAt": "2021-01-04T18:51:39Z", "author": {"login": "spena"}, "path": "design-proposals/klip-43-timestamp-data-type-support.md", "diffHunk": "@@ -1,8 +1,8 @@\n # KLIP-43: TIMESTAMP Data Type Support\n \n **Author**: @jzaralim | \n-**Release Target**: 0.15, 0.16 | \n-**Status**: In Discussion | \n+**Release Target**: 0.16 | \n+**Status**: Approved | ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NDQ3Nw==", "bodyText": "Why is this hashcode?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551544477", "createdAt": "2021-01-04T20:16:43Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/function/types/TimestampType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.types;\n+\n+public final class TimestampType extends ObjectType {\n+  public static final TimestampType INSTANCE = new TimestampType();\n+\n+  private TimestampType() {\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTAzOQ==", "bodyText": "What is version 1?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551549039", "createdAt": "2021-01-04T20:24:41Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/schema/ksql/SchemaConvertersTest.java", "diffHunk": "@@ -62,13 +63,16 @@\n   private static final Schema CONNECT_BIGINT_SCHEMA = SchemaBuilder.int64().optional().build();\n   private static final Schema CONNECT_DOUBLE_SCHEMA = SchemaBuilder.float64().optional().build();\n   private static final Schema CONNECT_STRING_SCHEMA = SchemaBuilder.string().optional().build();\n+  private static final Schema CONNECT_TIMESTAMP_SCHEMA =\n+      SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MDE3OA==", "bodyText": "SQL double?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551550178", "createdAt": "2021-01-04T20:26:58Z", "author": {"login": "spena"}, "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MjU5MQ==", "bodyText": "parse is gonna parse strings with timezones if the string contains +0200 for instance. Isn't this going to cause an issue?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551552591", "createdAt": "2021-01-04T20:32:11Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParser.java", "diffHunk": "@@ -31,12 +32,16 @@\n   private static final String HELP_MESSAGE = System.lineSeparator()\n       + \"Required format is: \\\"\" + KsqlConstants.DATE_TIME_PATTERN + \"\\\", \"\n       + \"with an optional numeric 4-digit timezone, for example: \"\n-      + \"'2020-05-26T23.59.58.000' or with tz: '2020-05-26T23.59.58.000+0200'. \"\n+      + \"'2020-05-26T23:59:58.000' or with tz: '2020-05-26T23:59:58.000+0200'. \"\n       + \"Partials are also supported, for example \\\"2020-05-26\\\"\";\n \n   private static final StringToTimestampParser PARSER =\n       new StringToTimestampParser(KsqlConstants.DATE_TIME_PATTERN);\n \n+  public Timestamp parseToTimestamp(final String text) {\n+    return new Timestamp(parse(text));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzI0Ng==", "bodyText": "Add a test to parse a time without timezone. Btw, are we supporting this? or what is the behavior we discussed when using timezone values in the a string?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553246", "createdAt": "2021-01-04T20:33:38Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParserTest.java", "diffHunk": "@@ -129,6 +129,11 @@ public void shouldIncludeRequiredFormatInErrorMessage() {\n             + \"with an optional numeric 4-digit timezone\"));\n   }\n \n+  @Test\n+  public void shouldParseToTimestamp() {\n+    assertThat(parser.parseToTimestamp(\"2017-11-13T23:59:58.999-0100\").getTime(), is(1510621198999L));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzY5Nw==", "bodyText": "Can PartialStringToTimestampParser be a static field in the class? It will avoid re-creating this object every time we parse a timestamp.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553697", "createdAt": "2021-01-04T20:34:36Z", "author": {"login": "spena"}, "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.\n+   *\n+   * <p>Rejects {@code Infinity} and {@code Nan} as invalid.\n+   *\n+   * @param str the string to parse.\n+   * @return the double value.\n+   */\n+  public static Timestamp parseTimestamp(final String str) {\n+    return new PartialStringToTimestampParser().parseToTimestamp(str);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NTEwMw==", "bodyText": "Question: why is it removed? I did not understand what this condition does.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551555103", "createdAt": "2021-01-04T20:37:31Z", "author": {"login": "spena"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -1211,9 +1210,6 @@ public Node visitTypeConstructor(final SqlBaseParser.TypeConstructorContext cont\n       if (type.equals(\"TIME\")) {\n         return new TimeLiteral(location, value);\n       }\n-      if (type.equals(\"TIMESTAMP\")) {\n-        return new TimestampLiteral(location, value);\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjUxMw==", "bodyText": "Why not passing the long value instead of the Timestamp?\nI was going to ask why not storing the Timestamp object instead of the long, but I noticed Timestamp is mutable.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551556513", "createdAt": "2021-01-04T20:40:23Z", "author": {"login": "spena"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/expression/tree/TimestampLiteral.java", "diffHunk": "@@ -19,26 +19,27 @@\n \n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.sql.Timestamp;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class TimestampLiteral extends Literal {\n \n-  private final String value;\n+  private final long value;\n \n-  public TimestampLiteral(final String value) {\n+  public TimestampLiteral(final Timestamp value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxNDAxMg==", "bodyText": "Add another test that allows parsing a string timestamp.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552014012", "createdAt": "2021-01-05T15:43:50Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/generic/GenericExpressionResolverTest.java", "diffHunk": "@@ -90,5 +90,18 @@ public void shouldThrowIfCannotCoerce() {\n     assertThat(e.getMessage(), containsString(\"Expected type ARRAY<INTEGER> for field `FOO` but got INTEGER(1)\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfCannotParseTimestamp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDA2OA==", "bodyText": "All the types have the SqlBaseType. reference. Can we keep that consistent for the timestamp in all the code? (SqlBaseType.TIMESTAMP)", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552020068", "createdAt": "2021-01-05T15:52:57Z", "author": {"login": "spena"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/CastEvaluatorTest.java", "diffHunk": "@@ -732,19 +784,24 @@ static Object instanceFor(final SqlType type) {\n                 .add(SqlBaseType.DECIMAL)\n                 .add(SqlBaseType.DOUBLE)\n                 .add(SqlBaseType.STRING)\n+                .add(TIMESTAMP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNDA1MQ==", "bodyText": "Does it need changes in connectToSpec?\nI see this code in that method:\ncase INT64:\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n            return Timestamp.fromLogical(schema, (Date) data);\n          }", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552034051", "createdAt": "2021-01-05T16:13:54Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/serde/ConnectSerdeSupplier.java", "diffHunk": "@@ -125,10 +125,11 @@ private Object specToConnect(final Object spec, final Schema schema) {\n         case INT32:\n           return Integer.valueOf(spec.toString());\n         case INT64:\n+          final Long longVal = Long.valueOf(spec.toString());\n           if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n-            return Timestamp.toLogical(schema, (Long) spec);\n+            return new java.sql.Timestamp(longVal);\n           }\n-          return Long.valueOf(spec.toString());\n+          return longVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTcyNA==", "bodyText": "Don't you mean this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Parser dateParser(final SqlType sqlType) {\n          \n          \n            \n              private static Parser timestampParser(final SqlType sqlType) {", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552039724", "createdAt": "2021-01-05T16:22:25Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedDeserializer.java", "diffHunk": "@@ -126,6 +128,10 @@ private static Parser decimalParser(final SqlType sqlType) {\n     return v -> DecimalUtil.ensureFit(new BigDecimal(v), decimalType);\n   }\n \n+  private static Parser dateParser(final SqlType sqlType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NDA3NQ==", "bodyText": "Should we use the Timestamp.LOGICAL_NAME instead of hardcoding the name?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552044075", "createdAt": "2021-01-05T16:29:00Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/json/KsqlJsonSerializerTest.java", "diffHunk": "@@ -91,6 +93,7 @@\n           .optional()\n           .build())\n       .field(DECIMALCOL, Decimal.builder(5).optional().parameter(DecimalUtil.PRECISION_FIELD, \"10\").build())\n+      .field(TIMESTAMPCOL, SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add7efcb78aed40345307a8050a9a9338d7816af", "author": {"user": {"login": "jzaralim", "name": "Zara Lim"}}, "url": "https://github.com/confluentinc/ksql/commit/add7efcb78aed40345307a8050a9a9338d7816af", "committedDate": "2021-01-06T05:47:43Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNjE4MjU3", "url": "https://github.com/confluentinc/ksql/pull/6806#pullrequestreview-563618257", "createdAt": "2021-01-07T16:12:53Z", "commit": {"oid": "add7efcb78aed40345307a8050a9a9338d7816af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4a84a51ec54c90ee09fd5eeb93c62356913c7f", "author": {"user": {"login": "jzaralim", "name": "Zara Lim"}}, "url": "https://github.com/confluentinc/ksql/commit/fe4a84a51ec54c90ee09fd5eeb93c62356913c7f", "committedDate": "2021-01-07T19:44:36Z", "message": "update klip to include time zones in date strings"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4534, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}