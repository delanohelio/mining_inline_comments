{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mjc3MTE5", "number": 5865, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToxNjo1MVrOERLzQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDozMDowNFrOERNSYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDU0NTkzOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToxNjo1MVrOG1wrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0OToyN1rOG11epA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTI5OA==", "bodyText": "If they're not authorized, it returns false.  Was this the behavior of listTopicNames that it returned a list of only the topics for which they are authorized?", "url": "https://github.com/confluentinc/ksql/pull/5865#discussion_r459025298", "createdAt": "2020-07-22T19:16:51Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -161,7 +165,26 @@ private short getDefaultClusterReplication() {\n   @Override\n   public boolean isTopicExists(final String topic) {\n     LOG.trace(\"Checking for existence of topic '{}'\", topic);\n-    return listTopicNames().contains(topic);\n+    try {\n+      ExecutorUtil.executeWithRetries(\n+          () -> adminClient.get().describeTopics(\n+              ImmutableList.of(topic),\n+              new DescribeTopicsOptions().includeAuthorizedOperations(true)\n+          ).values().get(topic).get(),\n+          RetryBehaviour.ON_RETRYABLE\n+      );\n+      return true;\n+    } catch (final Exception e) {\n+      if (Throwables.getRootCause(e) instanceof UnknownTopicOrPartitionException) {\n+        return false;\n+      }\n+\n+      if (Throwables.getRootCause(e) instanceof TopicAuthorizationException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dde38f7882bc0654ff3a440ebbc2811f280ddcb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMzkwOA==", "bodyText": "that's what i assumed, but I've removed this because after local testing it looks like it will actually throw a UnknownTopicException if you don't have view access so I'll leave it to propegate the error in this case", "url": "https://github.com/confluentinc/ksql/pull/5865#discussion_r459103908", "createdAt": "2020-07-22T21:49:27Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -161,7 +165,26 @@ private short getDefaultClusterReplication() {\n   @Override\n   public boolean isTopicExists(final String topic) {\n     LOG.trace(\"Checking for existence of topic '{}'\", topic);\n-    return listTopicNames().contains(topic);\n+    try {\n+      ExecutorUtil.executeWithRetries(\n+          () -> adminClient.get().describeTopics(\n+              ImmutableList.of(topic),\n+              new DescribeTopicsOptions().includeAuthorizedOperations(true)\n+          ).values().get(topic).get(),\n+          RetryBehaviour.ON_RETRYABLE\n+      );\n+      return true;\n+    } catch (final Exception e) {\n+      if (Throwables.getRootCause(e) instanceof UnknownTopicOrPartitionException) {\n+        return false;\n+      }\n+\n+      if (Throwables.getRootCause(e) instanceof TopicAuthorizationException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTI5OA=="}, "originalCommit": {"oid": "8dde38f7882bc0654ff3a440ebbc2811f280ddcb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc4OTQ3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDozMDowNFrOG1zDkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo0MTowNlrOG11P-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDIwOQ==", "bodyText": "I'm not sure I understand the reasoning for returning false here. We don't know if the topic exists or not at this point right?", "url": "https://github.com/confluentinc/ksql/pull/5865#discussion_r459064209", "createdAt": "2020-07-22T20:30:04Z", "author": {"login": "rodesai"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -161,7 +165,26 @@ private short getDefaultClusterReplication() {\n   @Override\n   public boolean isTopicExists(final String topic) {\n     LOG.trace(\"Checking for existence of topic '{}'\", topic);\n-    return listTopicNames().contains(topic);\n+    try {\n+      ExecutorUtil.executeWithRetries(\n+          () -> adminClient.get().describeTopics(\n+              ImmutableList.of(topic),\n+              new DescribeTopicsOptions().includeAuthorizedOperations(true)\n+          ).values().get(topic).get(),\n+          RetryBehaviour.ON_RETRYABLE\n+      );\n+      return true;\n+    } catch (final Exception e) {\n+      if (Throwables.getRootCause(e) instanceof UnknownTopicOrPartitionException) {\n+        return false;\n+      }\n+\n+      if (Throwables.getRootCause(e) instanceof TopicAuthorizationException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dde38f7882bc0654ff3a440ebbc2811f280ddcb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MDk3OQ==", "bodyText": "I'll double check @AlanConfluent's comment, but my intuition was that if you're not authorized to describe a topic it's not going to show up on list topics. This is usually what I've seen in other services, I get a 404 if I'm not using the right credentials, not a 403.", "url": "https://github.com/confluentinc/ksql/pull/5865#discussion_r459070979", "createdAt": "2020-07-22T20:42:48Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -161,7 +165,26 @@ private short getDefaultClusterReplication() {\n   @Override\n   public boolean isTopicExists(final String topic) {\n     LOG.trace(\"Checking for existence of topic '{}'\", topic);\n-    return listTopicNames().contains(topic);\n+    try {\n+      ExecutorUtil.executeWithRetries(\n+          () -> adminClient.get().describeTopics(\n+              ImmutableList.of(topic),\n+              new DescribeTopicsOptions().includeAuthorizedOperations(true)\n+          ).values().get(topic).get(),\n+          RetryBehaviour.ON_RETRYABLE\n+      );\n+      return true;\n+    } catch (final Exception e) {\n+      if (Throwables.getRootCause(e) instanceof UnknownTopicOrPartitionException) {\n+        return false;\n+      }\n+\n+      if (Throwables.getRootCause(e) instanceof TopicAuthorizationException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDIwOQ=="}, "originalCommit": {"oid": "8dde38f7882bc0654ff3a440ebbc2811f280ddcb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMDE1Mw==", "bodyText": "After further inspection, I'll remove this check and just let it propegate. It looks like if you try to describe a topic you don't have permissions for it just throws the epxected UnknownTopicOrPartitionException", "url": "https://github.com/confluentinc/ksql/pull/5865#discussion_r459100153", "createdAt": "2020-07-22T21:41:06Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -161,7 +165,26 @@ private short getDefaultClusterReplication() {\n   @Override\n   public boolean isTopicExists(final String topic) {\n     LOG.trace(\"Checking for existence of topic '{}'\", topic);\n-    return listTopicNames().contains(topic);\n+    try {\n+      ExecutorUtil.executeWithRetries(\n+          () -> adminClient.get().describeTopics(\n+              ImmutableList.of(topic),\n+              new DescribeTopicsOptions().includeAuthorizedOperations(true)\n+          ).values().get(topic).get(),\n+          RetryBehaviour.ON_RETRYABLE\n+      );\n+      return true;\n+    } catch (final Exception e) {\n+      if (Throwables.getRootCause(e) instanceof UnknownTopicOrPartitionException) {\n+        return false;\n+      }\n+\n+      if (Throwables.getRootCause(e) instanceof TopicAuthorizationException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDIwOQ=="}, "originalCommit": {"oid": "8dde38f7882bc0654ff3a440ebbc2811f280ddcb"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2973, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}