{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzY3MjE2", "number": 5064, "title": "feat: support multi-way joins", "bodyText": "fixes #1891\nDescription\nThis PR wraps up the loose ends around supporting multiple joins, leaving as an extension #5062. A vast majority of this PR is just multi-joins.json which has somewhat extensive coverage on multi-joins - though a lot of it just depends on the correctness of joins which are covered in joins.json.\nTesting done\n\nmulti-joins.json and some more unit tests\nNOTE: there are no historical tests because I wrote all of these tests with ksql.any.key.name.enabled:true\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-14T19:19:02Z", "url": "https://github.com/confluentinc/ksql/pull/5064", "merged": true, "mergeCommit": {"oid": "64dd39ee77928221f08371d5e4424839d20c09f6"}, "closed": true, "closedAt": "2020-04-15T20:51:44Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX6lJ4gBqjMyMzYyNjg0MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX-bbmgH2gAyNDAzMzY3MjE2OjA3MDcwY2E2N2FkY2JmNDM2MzM1NWU5Zjg4NGZjOTkzMzdmNzIzODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee91d553ee5e4ac6d01f1f5f2ef3dc0540ca5326", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ee91d553ee5e4ac6d01f1f5f2ef3dc0540ca5326", "committedDate": "2020-04-14T19:10:59Z", "message": "feat: support multi-way joins"}, "afterCommit": {"oid": "84d95457e81f0c6c910a7e94419c7619a71511b4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/84d95457e81f0c6c910a7e94419c7619a71511b4", "committedDate": "2020-04-15T16:03:44Z", "message": "feat: support multi-way joins"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84d95457e81f0c6c910a7e94419c7619a71511b4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/84d95457e81f0c6c910a7e94419c7619a71511b4", "committedDate": "2020-04-15T16:03:44Z", "message": "feat: support multi-way joins"}, "afterCommit": {"oid": "b04f8e3a6fcabfdae30f9620a92f4ca1bf4d21f9", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/b04f8e3a6fcabfdae30f9620a92f4ca1bf4d21f9", "committedDate": "2020-04-15T16:41:30Z", "message": "feat: support multi-way joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/3ddff681aeaf28bd632df84c889a7a4c70d847ff", "committedDate": "2020-04-15T16:46:18Z", "message": "feat: support multi-way joins"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b04f8e3a6fcabfdae30f9620a92f4ca1bf4d21f9", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/b04f8e3a6fcabfdae30f9620a92f4ca1bf4d21f9", "committedDate": "2020-04-15T16:41:30Z", "message": "feat: support multi-way joins"}, "afterCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/3ddff681aeaf28bd632df84c889a7a4c70d847ff", "committedDate": "2020-04-15T16:46:18Z", "message": "feat: support multi-way joins"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDc3ODQ0", "url": "https://github.com/confluentinc/ksql/pull/5064#pullrequestreview-394077844", "createdAt": "2020-04-15T19:38:24Z", "commit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0MToyOFrOGGI1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0OTo0MVrOGGJF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4OTM3MA==", "bodyText": "suggestion: Feels like this whole method would be better being somewhere outside of LogicalPlanner.", "url": "https://github.com/confluentinc/ksql/pull/5064#discussion_r409089370", "createdAt": "2020-04-15T19:41:28Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -444,45 +443,42 @@ private PlanNode buildSourceNode() {\n           + analysis.getAllDataSources());\n     }\n \n-    return buildJoin((Join) tree);\n+    return buildJoin((Join) tree, \"\");\n   }\n \n-\n   /**\n-   * @param root  the root of the Join Tree\n+   * @param root    the root of the Join Tree\n+   * @param prefix  the prefix to uniquely identify the plan node\n    * @return the PlanNode representing this Join Tree\n    */\n-  private PlanNode buildJoin(final Join root) {\n+  private PlanNode buildJoin(final Join root, final String prefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDU5MA==", "bodyText": "This feels wrong - can we now rely on polymorphism here? i,.e. can we not simply call the source nodes and have then do the right thing, rather than having these instanceof conditionals?", "url": "https://github.com/confluentinc/ksql/pull/5064#discussion_r409090590", "createdAt": "2020-04-15T19:43:53Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java", "diffHunk": "@@ -116,9 +116,11 @@ protected int getPartitions(final KafkaTopicClient kafkaTopicClient) {\n   public Stream<ColumnName> resolveSelectStar(\n       final Optional<SourceName> sourceName, final boolean valueOnly\n   ) {\n-    return getSources().stream()\n-        .filter(s -> !sourceName.isPresent() || sourceName.equals(s.getSourceName()))\n-        .flatMap(s -> s.resolveSelectStar(sourceName, false));\n+    return getSources()\n+            .stream()\n+            .flatMap(s -> s instanceof JoinNode ? s.getSources().stream() : Stream.of(s))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjA5Mw==", "bodyText": "can we not search and replace STT with stream-table-table and II with inner-inner etc?  This would make the test name less cryptic IMHO...", "url": "https://github.com/confluentinc/ksql/pull/5064#discussion_r409092093", "createdAt": "2020-04-15T19:46:50Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/multi-joins.json", "diffHunk": "@@ -0,0 +1,782 @@\n+{\n+  \"comments\": [\n+    \"NOTE: these tests only attempt to cover multi-join scenarios; ensuring the validity of the \",\n+    \"sub-join topologies is delegated to joins.json\",\n+    \"\",\n+    \"The first part of the name is the join sequence - STT, for example, means STREAM-TABLE-TABLE \",\n+    \"The second part of the name is the type of join - II, for example, means INNER INNER \",\n+    \"The third part of the name is descriptive of any additional information, if present.\"\n+  ],\n+  \"tests\": [\n+    {\n+      \"name\": \"STT - II\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjQyMg==", "bodyText": "Given you have ksql.any.key.name.enabled enabled... why are all your keys named ROWKEY?", "url": "https://github.com/confluentinc/ksql/pull/5064#discussion_r409092422", "createdAt": "2020-04-15T19:47:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/multi-joins.json", "diffHunk": "@@ -0,0 +1,782 @@\n+{\n+  \"comments\": [\n+    \"NOTE: these tests only attempt to cover multi-join scenarios; ensuring the validity of the \",\n+    \"sub-join topologies is delegated to joins.json\",\n+    \"\",\n+    \"The first part of the name is the join sequence - STT, for example, means STREAM-TABLE-TABLE \",\n+    \"The second part of the name is the type of join - II, for example, means INNER INNER \",\n+    \"The third part of the name is descriptive of any additional information, if present.\"\n+  ],\n+  \"tests\": [\n+    {\n+      \"name\": \"STT - II\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MzYxMw==", "bodyText": "Boo: output should not include key columns  in the value :(", "url": "https://github.com/confluentinc/ksql/pull/5064#discussion_r409093613", "createdAt": "2020-04-15T19:49:41Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/multi-joins.json", "diffHunk": "@@ -0,0 +1,782 @@\n+{\n+  \"comments\": [\n+    \"NOTE: these tests only attempt to cover multi-join scenarios; ensuring the validity of the \",\n+    \"sub-join topologies is delegated to joins.json\",\n+    \"\",\n+    \"The first part of the name is the join sequence - STT, for example, means STREAM-TABLE-TABLE \",\n+    \"The second part of the name is the type of join - II, for example, means INNER INNER \",\n+    \"The third part of the name is descriptive of any additional information, if present.\"\n+  ],\n+  \"tests\": [\n+    {\n+      \"name\": \"STT - II\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 JOIN T2 ON S1.ROWKEY = T2.ROWKEY JOIN T3 ON S1.ROWKEY = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"right2\", \"key\": 0, \"value\": {\"id\": 3}, \"timestamp\": 10},\n+        {\"topic\": \"right\", \"key\": 0, \"value\": {\"id\": 2}, \"timestamp\": 11},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 12},\n+        {\"topic\": \"left\", \"key\": 1, \"value\": {\"id\": 1}, \"timestamp\": 14}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  12}\n+      ],\n+      \"post\": {\n+        \"topics\": {\"blacklist\": \".*-repartition\"},\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ROWKEY INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - LL\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 LEFT JOIN T2 ON S1.ROWKEY = T2.ROWKEY LEFT JOIN T3 ON S1.ROWKEY = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 9},\n+        {\"topic\": \"right\", \"key\": 0, \"value\": {\"id\": 2}, \"timestamp\": 10},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 11},\n+        {\"topic\": \"right2\", \"key\": 0, \"value\": {\"id\": 3}, \"timestamp\": 12},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 13}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": null, \"T3_ID\": null}, \"timestamp\":  9},\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": null}, \"timestamp\":  11},\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  13}\n+      ],\n+      \"post\": {\n+        \"topics\": {\"blacklist\": \".*-repartition\"},\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ROWKEY INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - LI\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 LEFT JOIN T2 ON S1.ROWKEY = T2.ROWKEY JOIN T3 ON S1.ROWKEY = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 9},\n+        {\"topic\": \"right\", \"key\": 0, \"value\": {\"id\": 2}, \"timestamp\": 10},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 11},\n+        {\"topic\": \"right2\", \"key\": 0, \"value\": {\"id\": 3}, \"timestamp\": 12},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 13}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  13}\n+      ],\n+      \"post\": {\n+        \"topics\": {\"blacklist\": \".*-repartition\"},\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ROWKEY INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - IL\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 JOIN T2 ON S1.ROWKEY = T2.ROWKEY LEFT JOIN T3 ON S1.ROWKEY = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 9},\n+        {\"topic\": \"right\", \"key\": 0, \"value\": {\"id\": 2}, \"timestamp\": 10},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 11},\n+        {\"topic\": \"right2\", \"key\": 0, \"value\": {\"id\": 3}, \"timestamp\": 12},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 13}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": null}, \"timestamp\":  11},\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  13}\n+      ],\n+      \"post\": {\n+        \"topics\": {\"blacklist\": \".*-repartition\"},\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ROWKEY INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - II - rekey\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, K INT, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 JOIN T2 ON S1.K = T2.ROWKEY JOIN T3 ON S1.K = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"right2\", \"key\": 1, \"value\": {\"id\": 3}, \"timestamp\": 10},\n+        {\"topic\": \"right\", \"key\": 1, \"value\": {\"id\": 2}, \"timestamp\": 11},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"k\": 1, \"id\": 1}, \"timestamp\": 12}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_OUTPUT_0-L_Join-repartition\", \"key\": 1, \"value\": {\"S1_K\": 1, \"S1_ID\": 1, \"S1_ROWTIME\": 12, \"S1_ROWKEY\": 0}, \"timestamp\": 12},\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  12}\n+      ],\n+      \"post\": {\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"K INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - II - rekey with expression\",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, K INT, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT s1.ID, t2.ID, t3.ID FROM S1 JOIN T2 ON S1.K + 1 = T2.ROWKEY JOIN T3 ON S1.K + 1 = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"right2\", \"key\": 1, \"value\": {\"id\": 3}, \"timestamp\": 10},\n+        {\"topic\": \"right\", \"key\": 1, \"value\": {\"id\": 2}, \"timestamp\": 11},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"k\": 0, \"id\": 1}, \"timestamp\": 12}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_OUTPUT_0-L_Join-repartition\", \"key\": 1, \"value\": {\"S1_K\": 0, \"S1_ID\": 1, \"S1_ROWTIME\": 12, \"S1_ROWKEY\": 0, \"S1_KSQL_COL_0\": 1}, \"timestamp\": 12},\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"S1_ID\": 1, \"T2_ID\": 2, \"T3_ID\": 3}, \"timestamp\":  12}\n+      ],\n+      \"post\": {\n+        \"sources\": [\n+          {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"KSQL_COL_0 INT KEY, S1_ID BIGINT, T2_ID BIGINT, T3_ID BIGINT\"}\n+        ]\n+      }\n+    },\n+    {\n+      \"name\": \"STT - II - select * \",\n+      \"statements\": [\n+        \"CREATE STREAM S1 (ROWKEY INT KEY, ID bigint) WITH (kafka_topic='left', value_format='JSON');\",\n+        \"CREATE TABLE T2 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right', value_format='JSON');\",\n+        \"CREATE TABLE T3 (ROWKEY INT PRIMARY KEY, ID bigint) WITH (kafka_topic='right2', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT as SELECT * FROM S1 JOIN T2 ON S1.ROWKEY = T2.ROWKEY JOIN T3 ON S1.ROWKEY = T3.ROWKEY;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"inputs\": [\n+        {\"topic\": \"right2\", \"key\": 0, \"value\": {\"id\": 3}, \"timestamp\": 10},\n+        {\"topic\": \"right\", \"key\": 0, \"value\": {\"id\": 2}, \"timestamp\": 11},\n+        {\"topic\": \"left\", \"key\": 0, \"value\": {\"id\": 1}, \"timestamp\": 12}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 0, \"value\": {\"S1_ROWTIME\": 12, \"S1_ROWKEY\": 0, \"S1_ID\": 1, \"T2_ROWTIME\": 12, \"T2_ROWKEY\": 0, \"T2_ID\": 2, \"T3_ROWTIME\": 12, \"T3_ROWKEY\": 0, \"T3_ID\": 3}, \"timestamp\":  12}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ddff681aeaf28bd632df84c889a7a4c70d847ff"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07070ca67adcbf4363355e9f884fc99337f72389", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/07070ca67adcbf4363355e9f884fc99337f72389", "committedDate": "2020-04-15T20:50:25Z", "message": "test: improve QTT test names for multijoins"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4837, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}