{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMjA3NjUx", "number": 6066, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNDowOFrOEawezg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNDozNlrOEawfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDkyNzUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/util/QueryMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNDowOFrOHEYRFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo0ODoxNVrOHFtsxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1Mzk0MQ==", "bodyText": "it seems like stop/start aren't going to do anything except call the close callback - can we just override them to do nothing except for call the close callback?\nalso note #6068 I refactor this class a bit to make the close/stop a little clearer.", "url": "https://github.com/confluentinc/ksql/pull/6066#discussion_r474353941", "createdAt": "2020-08-21T01:14:08Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/util/QueryMetadata.java", "diffHunk": "@@ -297,16 +309,16 @@ protected void doClose(final boolean cleanUp) {\n     closeKafkaStreams();\n \n     if (cleanUp) {\n-      kafkaStreams.cleanUp();\n+      cleanUpKafkaStreams();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b5e317febc08973f8cf72296d42f8bfdad421"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1MzY2OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6066#discussion_r475753669", "createdAt": "2020-08-24T16:48:15Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/util/QueryMetadata.java", "diffHunk": "@@ -297,16 +309,16 @@ protected void doClose(final boolean cleanUp) {\n     closeKafkaStreams();\n \n     if (cleanUp) {\n-      kafkaStreams.cleanUp();\n+      cleanUpKafkaStreams();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1Mzk0MQ=="}, "originalCommit": {"oid": "3a1b5e317febc08973f8cf72296d42f8bfdad421"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDkyODQ4OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxNDozNlrOHEYRog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo0OToyNFrOHFtvTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NDA4Mg==", "bodyText": "can we add test coverage here for what should/shouldn't happen? we have test coverage for the sandbox, but not that on validation we don't actually affect the KS app", "url": "https://github.com/confluentinc/ksql/pull/6066#discussion_r474354082", "createdAt": "2020-08-21T01:14:36Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineContext.java", "diffHunk": "@@ -111,7 +112,7 @@ EngineContext createSandbox(final ServiceContext serviceContext) {\n     persistentQueries.forEach((queryId, query) ->\n         sandBox.persistentQueries.put(\n             query.getQueryId(),\n-            query.copyWith(sandBox::unregisterQuery)));\n+            SandboxedPersistentQueryMetadata.of(query, sandBox::unregisterQuery)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b5e317febc08973f8cf72296d42f8bfdad421"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NDMxOA==", "bodyText": "Done.\nI added the cases in KsqlEngineTest. I didn't use the execute method in the tests because it wasn't allowing me to execute the terminate 'cause it is a not executable statement.", "url": "https://github.com/confluentinc/ksql/pull/6066#discussion_r475754318", "createdAt": "2020-08-24T16:49:24Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineContext.java", "diffHunk": "@@ -111,7 +112,7 @@ EngineContext createSandbox(final ServiceContext serviceContext) {\n     persistentQueries.forEach((queryId, query) ->\n         sandBox.persistentQueries.put(\n             query.getQueryId(),\n-            query.copyWith(sandBox::unregisterQuery)));\n+            SandboxedPersistentQueryMetadata.of(query, sandBox::unregisterQuery)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NDA4Mg=="}, "originalCommit": {"oid": "3a1b5e317febc08973f8cf72296d42f8bfdad421"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2918, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}