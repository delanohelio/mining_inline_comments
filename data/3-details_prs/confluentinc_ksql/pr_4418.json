{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODI3OTQ2", "number": 4418, "title": "fix: Make host status map entries in Heartbeat Handler immutable", "bodyText": "Description\nMade the key and value classes of the map immutable.\nTesting done\nNo new tests.", "createdAt": "2020-02-01T00:42:48Z", "url": "https://github.com/confluentinc/ksql/pull/4418", "merged": true, "mergeCommit": {"oid": "399c732c2eb1f0d55b60aa70e61a12d11a1279f7"}, "closed": true, "closedAt": "2020-02-03T21:57:14Z", "author": {"login": "vpapavas"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAdf2VgBqjMwMDAyNDEzMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAzW6YAFqTM1MjU1NjQzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa3ce56b03dca996e03f079f6a8289cc8ff0d8f3", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/aa3ce56b03dca996e03f079f6a8289cc8ff0d8f3", "committedDate": "2020-02-01T00:37:09Z", "message": "made concurrent map immutable, applied andy's and almog's comments"}, "afterCommit": {"oid": "ef5a27f5c6b3037bdeb05a0686f93cc7d0f31a0b", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/ef5a27f5c6b3037bdeb05a0686f93cc7d0f31a0b", "committedDate": "2020-02-01T01:28:32Z", "message": "made concurrent map immutable, applied andy's and almog's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDA5NTA5", "url": "https://github.com/confluentinc/ksql/pull/4418#pullrequestreview-352409509", "createdAt": "2020-02-03T16:58:18Z", "commit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1ODoxOFrOFk4now==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyMzoyMFrOFk5afw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMDcwNw==", "bodyText": "this should be failing the ImmutabilityTest because these aren't final - not sure why it's passing", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374220707", "createdAt": "2020-02-03T16:58:18Z", "author": {"login": "agavra"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/HostStatus.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.errorprone.annotations.Immutable;\n+\n+/**\n+ * Represent the status of a ksql host in the cluster as determined by the Heartbeat agent.\n+ * A host can alive or dead annotated with the timestamp of the last update in status.\n+ */\n+@Immutable\n+public class HostStatus {\n+\n+  private boolean hostAlive;\n+  private long lastStatusUpdateMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMDg1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public HostStatus setLastStatusUpdateMs(final long lastStatusUpdateMs) {\n          \n          \n            \n              public HostStatus withLastStatusUpdateMs(final long lastStatusUpdateMs) {", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374220857", "createdAt": "2020-02-03T16:58:32Z", "author": {"login": "agavra"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/HostStatus.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.errorprone.annotations.Immutable;\n+\n+/**\n+ * Represent the status of a ksql host in the cluster as determined by the Heartbeat agent.\n+ * A host can alive or dead annotated with the timestamp of the last update in status.\n+ */\n+@Immutable\n+public class HostStatus {\n+\n+  private boolean hostAlive;\n+  private long lastStatusUpdateMs;\n+\n+  public HostStatus(\n+      final boolean hostAlive,\n+      final long lastStatusUpdateMs\n+  ) {\n+    this.hostAlive = hostAlive;\n+    this.lastStatusUpdateMs = lastStatusUpdateMs;\n+  }\n+\n+  public HostStatus withHostAlive(final boolean hostAlive) {\n+    return new HostStatus(hostAlive, lastStatusUpdateMs);\n+  }\n+\n+  public HostStatus setLastStatusUpdateMs(final long lastStatusUpdateMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMTY2MQ==", "bodyText": "nit: we usually use regular String concatenation generated by IntelliJ (see most other POJOs as examples) - same goes for HostStatus", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374221661", "createdAt": "2020-02-03T16:59:57Z", "author": {"login": "agavra"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlHost.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.errorprone.annotations.Immutable;\n+\n+/**\n+ * Immutable representation of {@link org.apache.kafka.streams.state.HostInfo HostInfo}\n+ * from KStreams.\n+ */\n+@Immutable\n+public class KsqlHost {\n+\n+  private final String host;\n+  private final int port;\n+\n+  public KsqlHost(final String host, final int port) {\n+    this.host = host;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    final KsqlHost hostInfo = (KsqlHost) o;\n+    return port == hostInfo.port && host.equals(hostInfo.host);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = host.hashCode();\n+    result = 31 * result + port;\n+    return result;\n+  }\n+\n+  public String host() {\n+    return host;\n+  }\n+\n+  public int port() {\n+    return port;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMTg5Mw==", "bodyText": "nit: we usually use the Objects.hash(...) to generate hash codes", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374221893", "createdAt": "2020-02-03T17:00:21Z", "author": {"login": "agavra"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlHost.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.errorprone.annotations.Immutable;\n+\n+/**\n+ * Immutable representation of {@link org.apache.kafka.streams.state.HostInfo HostInfo}\n+ * from KStreams.\n+ */\n+@Immutable\n+public class KsqlHost {\n+\n+  private final String host;\n+  private final int port;\n+\n+  public KsqlHost(final String host, final int port) {\n+    this.host = host;\n+    this.port = port;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    final KsqlHost hostInfo = (KsqlHost) o;\n+    return port == hostInfo.port && host.equals(hostInfo.host);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = host.hashCode();\n+    result = 31 * result + port;\n+    return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMjA2Mg==", "bodyText": "nit: good to have hashCode and equals implemented on POJOs", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374222062", "createdAt": "2020-02-03T17:00:42Z", "author": {"login": "agavra"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/HostStatus.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.errorprone.annotations.Immutable;\n+\n+/**\n+ * Represent the status of a ksql host in the cluster as determined by the Heartbeat agent.\n+ * A host can alive or dead annotated with the timestamp of the last update in status.\n+ */\n+@Immutable\n+public class HostStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMzAzMA==", "bodyText": "to truly enforce immutability, it might (cc @big-andy-coates) make sense to make a class specifically wrapping ImmutableMap<KsqlHost, HostStatus> and mark it @Immutable. That way the ImmutableTester will make sure it is recursively immutable.\nAlso, wrapping this class could help us with handling the localhost in a cleaner way - you could initialize it passing in the local KsqlHost and handle it as an edge case in the get() method. Same goes for some other complicated logic that could be pushed into this class.\nThis can be done as a follow-up to unblock your other PRs.", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374223030", "createdAt": "2020-02-03T17:02:23Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -77,19 +75,19 @@\n   private static final int SERVICE_TIMEOUT_SEC = 2;\n   private static final int CHECK_HEARTBEAT_DELAY_MS = 1000;\n   private static final int SEND_HEARTBEAT_DELAY_MS = 100;\n+  private static final int DISCOVER_CLUSTER_DELAY_MS = 50;\n   private static final Logger LOG = LoggerFactory.getLogger(HeartbeatAgent.class);\n \n   private final KsqlEngine engine;\n   private final ServiceContext serviceContext;\n   private final HeartbeatConfig config;\n   private final List<HostStatusListener> hostStatusListeners;\n-  private final ConcurrentHashMap<String, TreeMap<Long, HeartbeatInfo>> receivedHeartbeats;\n-  private final ConcurrentHashMap<String, HostStatusEntity> hostsStatus;\n+  private final ConcurrentHashMap<KsqlHost, TreeMap<Long, HeartbeatInfo>> receivedHeartbeats;\n+  private final AtomicReference<ImmutableMap<KsqlHost, HostStatus>> hostsStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNjkzNw==", "bodyText": "If DiscoverClusterService runs and discovers a new host while this block is running, we will overwrite whatever changes happened there. This might be okay, as eventually the DisocverClusterService will \"rediscover\" whatever was overwritten, but this is something to point out - at a minimum we should comment acknowledging that, at best we may want to synchronize the two. Same goes for L258\nmore concerning is perhaps the other way - a concurrent DiscoverClusterService#runOneIteration will overwrite the processheartbeats result", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374226937", "createdAt": "2020-02-03T17:10:09Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -237,47 +216,55 @@ protected ScheduledExecutorService executor() {\n      * @param windowEnd the end time in ms of the current window\n      */\n     private void processHeartbeats(final long windowStart, final long windowEnd) {\n+\n+      final Map<KsqlHost, HostStatus> copyOnWrite = new HashMap<>(hostsStatus.get());\n       // No heartbeats received -> mark all hosts as dead\n       if (receivedHeartbeats.isEmpty()) {\n-        hostsStatus.replaceAll((host, status) -> {\n-          if (!host.equals(localHostString)) {\n-            return status.copyWithStatus(false);\n+        copyOnWrite.replaceAll((host, status) -> {\n+          if (!host.equals(localHost)) {\n+            return status.withHostAlive(false);\n           }\n           return status;\n         });\n+        hostsStatus.set(ImmutableMap.copyOf(copyOnWrite));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODYzMQ==", "bodyText": "nit - only needs one lookup:\ncopyOnWrite.computeIfPresent(ksqlHost, (host, status) -> status.withHostAlive(isAlive).setLastStatusUpdateMs(windowEnd));", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374228631", "createdAt": "2020-02-03T17:13:27Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -237,47 +216,55 @@ protected ScheduledExecutorService executor() {\n      * @param windowEnd the end time in ms of the current window\n      */\n     private void processHeartbeats(final long windowStart, final long windowEnd) {\n+\n+      final Map<KsqlHost, HostStatus> copyOnWrite = new HashMap<>(hostsStatus.get());\n       // No heartbeats received -> mark all hosts as dead\n       if (receivedHeartbeats.isEmpty()) {\n-        hostsStatus.replaceAll((host, status) -> {\n-          if (!host.equals(localHostString)) {\n-            return status.copyWithStatus(false);\n+        copyOnWrite.replaceAll((host, status) -> {\n+          if (!host.equals(localHost)) {\n+            return status.withHostAlive(false);\n           }\n           return status;\n         });\n+        hostsStatus.set(ImmutableMap.copyOf(copyOnWrite));\n+        return;\n       }\n \n-      for (String host : hostsStatus.keySet()) {\n-        if (host.equals(localHostString)) {\n+      for (Entry<KsqlHost, HostStatus> hostEntry: copyOnWrite.entrySet()) {\n+        final KsqlHost ksqlHost = hostEntry.getKey();\n+        final HostStatus hostStatus = hostEntry.getValue();\n+        if (ksqlHost.equals(localHost)) {\n           continue;\n         }\n-        final TreeMap<Long, HeartbeatInfo> heartbeats = receivedHeartbeats.get(host);\n+        final TreeMap<Long, HeartbeatInfo> heartbeats = receivedHeartbeats.get(ksqlHost);\n         //For previously discovered hosts, if they have not received any heartbeats, mark them dead\n         if (heartbeats == null || heartbeats.isEmpty()) {\n-          hostsStatus.computeIfPresent(host, (h, s) -> s.copyWithStatus(false));\n+          copyOnWrite.computeIfPresent(ksqlHost, (host, status) -> status.withHostAlive(false));\n         } else {\n           final TreeMap<Long, HeartbeatInfo> copy;\n           synchronized (heartbeats) {\n-            LOG.debug(\"Process heartbeats: {} of host: {}\", heartbeats, host);\n+            LOG.debug(\"Process heartbeats: {} of host: {}\", heartbeats, ksqlHost);\n             // 1. remove heartbeats older than window\n             heartbeats.headMap(windowStart).clear();\n             copy = new TreeMap<>(heartbeats.subMap(windowStart, true, windowEnd, true));\n           }\n           // 2. count consecutive missed heartbeats and mark as alive or dead\n-          final  boolean isAlive = decideStatus(host, windowStart, windowEnd, copy);\n-          hostsStatus.computeIfPresent(host,\n-              (h, s) -> new HostStatusEntity(s.getHostInfoEntity(), isAlive, windowEnd));\n+          final  boolean isAlive = decideStatus(ksqlHost, windowStart, windowEnd, copy);\n+          copyOnWrite.computeIfPresent(ksqlHost, (host, status) -> status.withHostAlive(isAlive));\n+          copyOnWrite.computeIfPresent(ksqlHost, (host, status) ->\n+              status.setLastStatusUpdateMs(windowEnd));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTAwNw==", "bodyText": "what do you think about info logging this if missedCount > 0?", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374229007", "createdAt": "2020-02-03T17:14:13Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -306,7 +293,7 @@ private boolean decideStatus(final String host, final long windowStart, final lo\n         missedCount = (windowEnd - prev - 1) / config.heartbeatSendIntervalMs;\n       }\n \n-      LOG.debug(\"Host: {} has {} missing heartbeats\", host, missedCount);\n+      LOG.debug(\"Host: {} has {} missing heartbeats\", ksqlHost, missedCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMDU0OQ==", "bodyText": "nit: we shouldn't have println in prod code :)", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374230549", "createdAt": "2020-02-03T17:17:08Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -323,22 +310,23 @@ private boolean decideStatus(final String host, final long windowStart, final lo\n \n     @Override\n     protected void runOneIteration() {\n-      for (Entry<String, HostStatusEntity> hostStatusEntry: hostsStatus.entrySet()) {\n-        final String host = hostStatusEntry.getKey();\n-        final HostStatusEntity status = hostStatusEntry.getValue();\n+      for (Entry<KsqlHost, HostStatus> hostStatusEntry: hostsStatus.get().entrySet()) {\n+        final KsqlHost remoteHost = hostStatusEntry.getKey();\n         try {\n-          if (!host.equals(localHostString)) {\n-            final URI remoteUri = buildLocation(localURL, status.getHostInfoEntity().getHost(),\n-                                          status.getHostInfoEntity().getPort());\n-            LOG.debug(\"Send heartbeat to host {} at {}\", status.getHostInfoEntity().getHost(),\n-                      clock.millis());\n-            serviceContext.getKsqlClient().makeAsyncHeartbeatRequest(remoteUri, localHostInfo,\n-                                                                     clock.millis());\n+          if (!remoteHost.equals(localHost)) {\n+            final URI remoteUri = ServerUtil.buildRemoteUri(\n+                localURL, remoteHost.host(), remoteHost.port());\n+            System.out.println(localHost + \" Send heartbeat to host \" + remoteHost\n+                                   + \" at timestamp \" + System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMDgxOA==", "bodyText": "ditto - please make sure to do a find-and-replace throughout the changed files to see if any others slipped through", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374230818", "createdAt": "2020-02-03T17:17:39Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/HeartbeatAgent.java", "diffHunk": "@@ -323,22 +310,23 @@ private boolean decideStatus(final String host, final long windowStart, final lo\n \n     @Override\n     protected void runOneIteration() {\n-      for (Entry<String, HostStatusEntity> hostStatusEntry: hostsStatus.entrySet()) {\n-        final String host = hostStatusEntry.getKey();\n-        final HostStatusEntity status = hostStatusEntry.getValue();\n+      for (Entry<KsqlHost, HostStatus> hostStatusEntry: hostsStatus.get().entrySet()) {\n+        final KsqlHost remoteHost = hostStatusEntry.getKey();\n         try {\n-          if (!host.equals(localHostString)) {\n-            final URI remoteUri = buildLocation(localURL, status.getHostInfoEntity().getHost(),\n-                                          status.getHostInfoEntity().getPort());\n-            LOG.debug(\"Send heartbeat to host {} at {}\", status.getHostInfoEntity().getHost(),\n-                      clock.millis());\n-            serviceContext.getKsqlClient().makeAsyncHeartbeatRequest(remoteUri, localHostInfo,\n-                                                                     clock.millis());\n+          if (!remoteHost.equals(localHost)) {\n+            final URI remoteUri = ServerUtil.buildRemoteUri(\n+                localURL, remoteHost.host(), remoteHost.port());\n+            System.out.println(localHost + \" Send heartbeat to host \" + remoteHost\n+                                   + \" at timestamp \" + System.currentTimeMillis());\n+            LOG.debug(\"Send heartbeat to host {} at {}\", remoteHost, clock.millis());\n+            serviceContext.getKsqlClient().makeAsyncHeartbeatRequest(\n+                remoteUri, localHost, clock.millis());\n           }\n         } catch (Throwable t) {\n-          LOG.error(\"Request to server: \" + status.getHostInfoEntity().getHost() + \":\"\n-                        + status.getHostInfoEntity().getPort()\n-                        + \" failed with exception: \" + t.getMessage(), t);\n+          System.out.println(localHost + \" FAILED to Send heartbeat to host \" + remoteHost\n+                                 + \" at timestamp \" + System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMzQ4OA==", "bodyText": "nit: let's use the standard pattern here as well", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374233488", "createdAt": "2020-02-03T17:22:53Z", "author": {"login": "agavra"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/HostStatusEntity.java", "diffHunk": "@@ -67,17 +63,18 @@ public boolean equals(final Object o) {\n     }\n \n     final HostStatusEntity that = (HostStatusEntity) o;\n-    return Objects.equals(hostInfoEntity, that.hostInfoEntity)\n-        && hostAlive == that.hostAlive && lastStatusUpdateMs == that.lastStatusUpdateMs;\n+    return hostAlive == that.hostAlive\n+        && lastStatusUpdateMs == that.lastStatusUpdateMs\n+        && Objects.equals(hostStoreLags, that.hostStoreLags);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(hostInfoEntity, hostAlive, lastStatusUpdateMs);\n+    return Objects.hash(hostAlive, lastStatusUpdateMs, hostStoreLags);\n   }\n \n   @Override\n   public String toString() {\n-    return hostInfoEntity + \",\" + hostAlive + \",\" + lastStatusUpdateMs;\n+    return hostAlive + \",\" + lastStatusUpdateMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMzcyNw==", "bodyText": "nit: let's use the standard pattern here as well", "url": "https://github.com/confluentinc/ksql/pull/4418#discussion_r374233727", "createdAt": "2020-02-03T17:23:20Z", "author": {"login": "agavra"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/LagReportingMessage.java", "diffHunk": "@@ -56,17 +56,17 @@ public boolean equals(final Object o) {\n     }\n \n     final LagReportingMessage that = (LagReportingMessage) o;\n-    return Objects.equals(hostInfo, that.hostInfo)\n+    return Objects.equals(ksqlHost, that.ksqlHost)\n         && Objects.equals(hostStoreLags, that.hostStoreLags);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(hostInfo, hostStoreLags);\n+    return Objects.hash(ksqlHost, hostStoreLags);\n   }\n \n   @Override\n   public String toString() {\n-    return hostInfo + \",\" + hostStoreLags;\n+    return ksqlHost + \",\" + hostStoreLags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b8f6d605cf9f27141342940238e64d2a0ddd61", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/a4b8f6d605cf9f27141342940238e64d2a0ddd61", "committedDate": "2020-02-03T19:34:07Z", "message": "heartbeat agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7f04166fe75d67eb2693a2814e7f408ad1859f", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/2a7f04166fe75d67eb2693a2814e7f408ad1859f", "committedDate": "2020-02-03T19:34:07Z", "message": "made concurrent map immutable, applied andy's and almog's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5749132819ef396076e230f1e09fcb60e60d2911", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/5749132819ef396076e230f1e09fcb60e60d2911", "committedDate": "2020-02-03T19:34:08Z", "message": "fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "346a96cf946ede6b2c6a2c5a9d3814dd95359443", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/346a96cf946ede6b2c6a2c5a9d3814dd95359443", "committedDate": "2020-02-03T19:34:08Z", "message": "applied almog's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c1b1068ba1a0349e770f987130e4486b5ca193f", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/6c1b1068ba1a0349e770f987130e4486b5ca193f", "committedDate": "2020-02-03T19:39:34Z", "message": "nit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/ff4579f22d53a51c65439bd26d2eb6b1a6ba22dc", "committedDate": "2020-02-02T19:31:22Z", "message": "fixed tests"}, "afterCommit": {"oid": "6c1b1068ba1a0349e770f987130e4486b5ca193f", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/6c1b1068ba1a0349e770f987130e4486b5ca193f", "committedDate": "2020-02-03T19:39:34Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "659ed3dbbed195db314b29a0dcd5732d5d5600c5", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/659ed3dbbed195db314b29a0dcd5732d5d5600c5", "committedDate": "2020-02-03T20:41:34Z", "message": "fixed toString"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTU2NDM2", "url": "https://github.com/confluentinc/ksql/pull/4418#pullrequestreview-352556436", "createdAt": "2020-02-03T20:56:16Z", "commit": {"oid": "659ed3dbbed195db314b29a0dcd5732d5d5600c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 177, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}