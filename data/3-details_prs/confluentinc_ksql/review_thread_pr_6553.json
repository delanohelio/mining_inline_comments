{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjU5MDM4", "number": 6553, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMzoxMVrOEz8eiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxNDo1OVrOE1A_Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAzNjkxOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMzoxMVrOHrerLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNjo1NVrOHtDp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MzM4OA==", "bodyText": "I chose ID as the best name for this property. However, if it is confusing with the ID keyword in the schema (i.e. ID id int), then we can consider these options.\nwith (id = 'my_id')\nwith (query_id = 'my_id')\nwith (name = 'my_id')\nwith (alias = 'my_id')", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r515353388", "createdAt": "2020-10-30T20:13:11Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties.with;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+\n+/**\n+ * 'With Clause' properties for 'INSERT INTO' statements.\n+ */\n+public final class InsertIntoConfigs {\n+  public static final String QUERY_ID_PROPERTY = \"ID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f2f6eaa7f811dcd6b86fcb3ea11938906835b6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzgzMw==", "bodyText": "I think originally I liked id, but now my preference is query_id \ud83d\ude02 it gives a little bit more clarity into what exactly it is. cc @colinhicks", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517007833", "createdAt": "2020-11-03T23:06:55Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties.with;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+\n+/**\n+ * 'With Clause' properties for 'INSERT INTO' statements.\n+ */\n+public final class InsertIntoConfigs {\n+  public static final String QUERY_ID_PROPERTY = \"ID\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MzM4OA=="}, "originalCommit": {"oid": "e2f2f6eaa7f811dcd6b86fcb3ea11938906835b6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI0Mjk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNzoxOFrOHtDqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyNDowMFrOHtoZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzk3Mg==", "bodyText": "let's have some more detailed documentation here. What is it used for? what happens if it isn't supplied? what are valid values? is it case insensitive?", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517007972", "createdAt": "2020-11-03T23:07:18Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties.with;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+\n+/**\n+ * 'With Clause' properties for 'INSERT INTO' statements.\n+ */\n+public final class InsertIntoConfigs {\n+  public static final String QUERY_ID_PROPERTY = \"ID\";\n+\n+  private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+      .define(\n+          QUERY_ID_PROPERTY,\n+          ConfigDef.Type.STRING,\n+          null,\n+          ConfigDef.Importance.LOW,\n+          \"Custom query ID to use for INSERT INTO queries\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTc5OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517609799", "createdAt": "2020-11-04T20:24:00Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/with/InsertIntoConfigs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties.with;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+\n+/**\n+ * 'With Clause' properties for 'INSERT INTO' statements.\n+ */\n+public final class InsertIntoConfigs {\n+  public static final String QUERY_ID_PROPERTY = \"ID\";\n+\n+  private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+      .define(\n+          QUERY_ID_PROPERTY,\n+          ConfigDef.Type.STRING,\n+          null,\n+          ConfigDef.Importance.LOW,\n+          \"Custom query ID to use for INSERT INTO queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzk3Mg=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI0NTE5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowODowOVrOHtDrow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0ODoxMFrOHtpJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODI5MQ==", "bodyText": "we should make this a ConfigDef.Validator and validate it as part of the config def", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517008291", "createdAt": "2020-11-03T23:08:09Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -24,18 +24,62 @@\n import io.confluent.ksql.query.QueryId;\n import io.confluent.ksql.query.id.QueryIdGenerator;\n import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ThreadLocalRandom;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n /**\n  * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n  * easy access to unit testing.\n  */\n-final class QueryIdUtil {\n+public final class QueryIdUtil {\n+  private static final Pattern VALID_QUERY_ID = Pattern.compile(\"[A-Za-z0-9_]+\");\n+  private static final ReservedQueryIdsPrefixes[] PREFIXES = ReservedQueryIdsPrefixes.values();\n+\n+  public enum ReservedQueryIdsPrefixes {\n+    INSERT(\"INSERTQUERY_\"),\n+    CTAS(\"CTAS_\"),\n+    CSAS(\"CSAS_\");\n+\n+    private final String prefix;\n+    ReservedQueryIdsPrefixes(final String prefix) {\n+      this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return prefix;\n+    }\n+  }\n \n   private QueryIdUtil() {\n   }\n \n+  private static void validateWithQueryId(final String queryId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTAzMA==", "bodyText": "I initially thought of this, but I decided to do the validation in the QueryIdUtil to make sure that whoever wants to use that class, then they pass the right QueryID string. I don't think nobody else will use it, but I think is a better design as the buildId is the one will check IDs are correct.\nUnless you have another reason to use the Validator?", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517609030", "createdAt": "2020-11-04T20:22:29Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -24,18 +24,62 @@\n import io.confluent.ksql.query.QueryId;\n import io.confluent.ksql.query.id.QueryIdGenerator;\n import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ThreadLocalRandom;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n /**\n  * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n  * easy access to unit testing.\n  */\n-final class QueryIdUtil {\n+public final class QueryIdUtil {\n+  private static final Pattern VALID_QUERY_ID = Pattern.compile(\"[A-Za-z0-9_]+\");\n+  private static final ReservedQueryIdsPrefixes[] PREFIXES = ReservedQueryIdsPrefixes.values();\n+\n+  public enum ReservedQueryIdsPrefixes {\n+    INSERT(\"INSERTQUERY_\"),\n+    CTAS(\"CTAS_\"),\n+    CSAS(\"CSAS_\");\n+\n+    private final String prefix;\n+    ReservedQueryIdsPrefixes(final String prefix) {\n+      this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return prefix;\n+    }\n+  }\n \n   private QueryIdUtil() {\n   }\n \n+  private static void validateWithQueryId(final String queryId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODI5MQ=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjI0MQ==", "bodyText": "yeah that makes sense", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517622241", "createdAt": "2020-11-04T20:48:10Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -24,18 +24,62 @@\n import io.confluent.ksql.query.QueryId;\n import io.confluent.ksql.query.id.QueryIdGenerator;\n import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ThreadLocalRandom;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n /**\n  * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n  * easy access to unit testing.\n  */\n-final class QueryIdUtil {\n+public final class QueryIdUtil {\n+  private static final Pattern VALID_QUERY_ID = Pattern.compile(\"[A-Za-z0-9_]+\");\n+  private static final ReservedQueryIdsPrefixes[] PREFIXES = ReservedQueryIdsPrefixes.values();\n+\n+  public enum ReservedQueryIdsPrefixes {\n+    INSERT(\"INSERTQUERY_\"),\n+    CTAS(\"CTAS_\"),\n+    CSAS(\"CSAS_\");\n+\n+    private final String prefix;\n+    ReservedQueryIdsPrefixes(final String prefix) {\n+      this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return prefix;\n+    }\n+  }\n \n   private QueryIdUtil() {\n   }\n \n+  private static void validateWithQueryId(final String queryId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODI5MQ=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI1NTgwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxMjo0MVrOHtDxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzoxNVrOHtoXyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwOTgzMg==", "bodyText": "should we also validate to make sure they don't register the same queryID twice? (please add a test for this)", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517009832", "createdAt": "2020-11-03T23:12:41Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -49,14 +93,21 @@ static QueryId buildId(\n       final MetaStore metaStore,\n       final QueryIdGenerator idGenerator,\n       final OutputNode outputNode,\n-      final boolean createOrReplaceEnabled) {\n+      final boolean createOrReplaceEnabled,\n+      final Optional<String> withQueryId) {\n+    if (withQueryId.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTQxNw==", "bodyText": "Done. I added the validation in the EngineExecutor 'cause is the one that knows about IDs by calling the engineContext.getPersistentQuery.", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517609417", "createdAt": "2020-11-04T20:23:15Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -49,14 +93,21 @@ static QueryId buildId(\n       final MetaStore metaStore,\n       final QueryIdGenerator idGenerator,\n       final OutputNode outputNode,\n-      final boolean createOrReplaceEnabled) {\n+      final boolean createOrReplaceEnabled,\n+      final Optional<String> withQueryId) {\n+    if (withQueryId.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwOTgzMg=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI1ODcwOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxNDowM1rOHtDzUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzo1MVrOHtoZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMDI1Nw==", "bodyText": "let's specify here that this is only intended to be used by INSERT INTO - that way we can remove it when we remove INSERT INTO", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517010257", "createdAt": "2020-11-03T23:14:03Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/QueryContainer.java", "diffHunk": "@@ -33,4 +35,11 @@\n    * @return the sink info.\n    */\n   Sink getSink();\n+\n+  /**\n+   * Return an optional query ID if specified by the user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTcyOQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517609729", "createdAt": "2020-11-04T20:23:51Z", "author": {"login": "spena"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/QueryContainer.java", "diffHunk": "@@ -33,4 +35,11 @@\n    * @return the sink info.\n    */\n   Sink getSink();\n+\n+  /**\n+   * Return an optional query ID if specified by the user", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMDI1Nw=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI2MTE4OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxNDo1OVrOHtD0vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzoyMFrOHtoYAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMDYyMw==", "bodyText": "Can we add a test in RecoveryTest to make sure we can recover create/terminate with custom query IDs?", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517010623", "createdAt": "2020-11-03T23:14:59Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -347,6 +347,31 @@ public void shouldThrowWhenInsertIntoSchemaDoesNotMatch() {\n         is(\"insert into bar select orderTime, itemid from orders;\")));\n   }\n \n+  @Test\n+  public void shouldExecuteInsertIntoWithCustomQueryId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTQ3NA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6553#discussion_r517609474", "createdAt": "2020-11-04T20:23:20Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -347,6 +347,31 @@ public void shouldThrowWhenInsertIntoSchemaDoesNotMatch() {\n         is(\"insert into bar select orderTime, itemid from orders;\")));\n   }\n \n+  @Test\n+  public void shouldExecuteInsertIntoWithCustomQueryId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMDYyMw=="}, "originalCommit": {"oid": "0c24324cac724808277d04779ec1b3c1d3802df3"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2604, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}