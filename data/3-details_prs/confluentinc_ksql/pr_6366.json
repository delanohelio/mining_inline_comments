{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODM2MzUz", "number": 6366, "title": "Topic info cache", "bodyText": "Description\nThe TopicInfoCache is used by QTT to retrieve info about the topics being used by the test case. Specifically, its used to get at the schema, key and value formats of the topic, and potentially use this information to build appropriate serde.\nThe implementation wasn't correctly handling internal topics. When building information about internal topics it was using the key and value formats of the sink topic. This is often incorrect.  For example, consider a windowed group by where the source needs to be repartitioned, i.e. the GROUP BY is not on the key. In such a situation the repartition topic doesn't have a windowed key, which the sink topic does.\nTo get the correct key format, the TopicInfoCache now gets the information from the query itself. Mainly the QuerySchemas, which holds the logical schema plus the key and value formats used when creating the serde passed to Kafka Streams.\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-06T21:08:22Z", "url": "https://github.com/confluentinc/ksql/pull/6366", "merged": true, "mergeCommit": {"oid": "b96d9ed61f7cffc84e0558d7720cc41a8a714d84"}, "closed": true, "closedAt": "2020-10-08T08:20:28Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP-9scAH2gAyNDk4ODM2MzUzOjVmYjFiZTVjOTcxZmNmNWQ1MjJkOTQ4YjliNzlhNzdhNDkwZWQxZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQdLtyAH2gAyNDk4ODM2MzUzOjY3OWJlNGRmNzcwNjQ3YTk0YTdmZGQwM2I2YWE3ODQxM2NkZWJiNzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5fb1be5c971fcf5d522d948b9b79a77a490ed1dc", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5fb1be5c971fcf5d522d948b9b79a77a490ed1dc", "committedDate": "2020-10-06T21:07:36Z", "message": "chore: fix topic info cache\nThe `TopicInfoCache` is used by QTT to retrieve info about the topics being used by the test case. Specifically, its used to get at the schema, key and value formats of the topic, and potentially use this information to build appropriate serde.\n\nThe implementation wasn't correctly handling internal topics. When building information about internal topics it was using the key and value formats of the sink topic. This is often incorrect.  For example, consider a windowed group by where the source needs to be repartitioned, i.e. the `GROUP BY` is not on the key. In such a situation the repartition topic doesn't have a windowed key, which the sink topic does.\n\nTo get the correct key format, the `TopicInfoCache` now gets the information from the query itself. Mainly the `QuerySchemas`, which holds the logical schema plus the key and value formats used when creating the serde passed to Kafka Streams."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e65cb6312bdbdfba42b019f2400bd6ec23ac0efa", "committedDate": "2020-10-06T21:07:49Z", "message": "test: historical plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzYxOTIy", "url": "https://github.com/confluentinc/ksql/pull/6366#pullrequestreview-503361922", "createdAt": "2020-10-06T21:11:23Z", "commit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMToyM1rOHdaGDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMToyM1rOHdaGDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5ODI4NA==", "bodyText": "Changes in this file are related to review comment in #6365", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r500598284", "createdAt": "2020-10-06T21:11:23Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/builder/KsqlQueryBuilderTest.java", "diffHunk": "@@ -281,4 +282,60 @@ public void shouldTrackValueSchemasUsed() {\n             SerdeFeatures.of(SerdeFeature.WRAP_SINGLES)))\n     )));\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzYyMDU3", "url": "https://github.com/confluentinc/ksql/pull/6366#pullrequestreview-503362057", "createdAt": "2020-10-06T21:11:35Z", "commit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMTozNVrOHdaGiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMTozNVrOHdaGiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5ODQwOQ==", "bodyText": "Changes in this file are related to review comment in #6365", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r500598409", "createdAt": "2020-10-06T21:11:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/model/SchemaNodeTest.java", "diffHunk": "@@ -49,12 +49,12 @@ public void shouldRoundTrip() {\n   }\n \n   @Test\n-  public void shouldRoundNoKeyFormat() {\n+  public void shouldRoundTripNoKeyFormat() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzYyNDYw", "url": "https://github.com/confluentinc/ksql/pull/6366#pullrequestreview-503362460", "createdAt": "2020-10-06T21:12:14Z", "commit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMjoxNFrOHdaHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxMjoxNFrOHdaHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5ODcwNQ==", "bodyText": "This is the bad code. It was getting the internal topic's key and value format from the sink topic... which just ain't right ;)", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r500598705", "createdAt": "2020-10-06T21:12:14Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TopicInfoCache.java", "diffHunk": "@@ -87,28 +155,34 @@ public void clear() {\n \n   private TopicInfo load(final String topicName) {\n     try {\n-      final java.util.regex.Matcher matcher = INTERNAL_TOPIC_PATTERN.matcher(topicName);\n-      if (matcher.matches()) {\n+      final Optional<InternalTopic> internalTopic = INTERNAL_TOPIC_PATTERNS.stream()\n+          .map(p -> p.match(topicName))\n+          .filter(Optional::isPresent)\n+          .map(Optional::get)\n+          .findFirst();\n+\n+      if (internalTopic.isPresent()) {\n         // Internal topic:\n-        final QueryId queryId = new QueryId(matcher.group(1));\n         final PersistentQueryMetadata query = ksqlEngine\n-            .getPersistentQuery(queryId)\n+            .getPersistentQuery(internalTopic.get().queryId())\n             .orElseThrow(() -> new TestFrameworkException(\"Unknown queryId for internal topic: \"\n-                + queryId));\n+                + internalTopic.get().queryId())\n+            );\n \n         final java.util.regex.Matcher windowedJoinMatcher = WINDOWED_JOIN_PATTERN\n             .matcher(query.getStatementString());\n \n         final OptionalLong changeLogWindowSize = topicName.endsWith(\"-changelog\")\n             && windowedJoinMatcher.matches()\n-            ? OptionalLong.of(DurationParser.parse(windowedJoinMatcher.group(1)).toMillis())\n+            ? OptionalLong\n+            .of(DurationParser.parse(windowedJoinMatcher.group(\"duration\")).toMillis())\n             : OptionalLong.empty();\n \n         return new TopicInfo(\n             topicName,\n             query.getLogicalSchema(),\n-            query.getResultTopic().getKeyFormat(),\n-            query.getResultTopic().getValueFormat(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNTE0MjQ4", "url": "https://github.com/confluentinc/ksql/pull/6366#pullrequestreview-503514248", "createdAt": "2020-10-07T04:21:39Z", "commit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyMTozOVrOHdiD1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyMTozOVrOHdiD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyODc5MQ==", "bodyText": "this class seems super fragile... we're extracting information from internal topic naming conventions, mapping that to logger names, which we use to extract the serde info that we pass to Kafka Streams, and then magically deduce from that what the actual serde should be based on what we know Kafka Streams does. I'm sure that coding this up you had a bad feeling in your stomach, this just doesn't sit right! Can we do something else?\nWhat we need is a mapping from topic name to logger prefix. We could have the LoggingSerializer aware of the prefix that it's using, and register this mapping whenever it (de)serializes anything (and it's easy to pass in the prefix there, we have it in GenericSerdeFactory). Since we probably don't want to maintain this mapping in PROD as it might have real perf implications to do this per-message, we could do the evil thing of having a static map that is populated and cleared just for tests.\nI don't love that solution either, but maybe it'll get the brain juices flowing and I think it's a lot more robust (even if it breaks some encapsulation) than what's here.", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r500728791", "createdAt": "2020-10-07T04:21:39Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TopicInfoCache.java", "diffHunk": "@@ -26,36 +26,104 @@\n import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig;\n import io.confluent.ksql.KsqlExecutionContext;\n+import io.confluent.ksql.model.WindowType;\n import io.confluent.ksql.parser.DurationParser;\n import io.confluent.ksql.query.QueryId;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.query.QuerySchemas.SchemaInfo;\n import io.confluent.ksql.serde.FormatFactory;\n import io.confluent.ksql.serde.KeyFormat;\n import io.confluent.ksql.serde.ValueFormat;\n+import io.confluent.ksql.serde.WindowInfo;\n import io.confluent.ksql.test.TestFrameworkException;\n import io.confluent.ksql.test.serde.SerdeSupplier;\n import io.confluent.ksql.test.utils.SerdeUtil;\n import io.confluent.ksql.util.PersistentQueryMetadata;\n+import java.time.Duration;\n import java.util.List;\n+import java.util.Optional;\n import java.util.OptionalLong;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import org.apache.kafka.common.serialization.Deserializer;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.apache.kafka.streams.TopologyDescription;\n+import org.apache.kafka.streams.TopologyDescription.Processor;\n import org.apache.kafka.streams.kstream.TimeWindowedDeserializer;\n \n /**\n  * Cache of info known about topics in use in the test.\n+ *\n+ * <p>Info for source and sink topics is obtained by finding a {@link\n+ * io.confluent.ksql.metastore.model.DataSource} with a matching source topic name in the {@link\n+ * io.confluent.ksql.metastore.MetaStore}.\n+ *\n+ * <p>Info for internal topics is obtained from the {@link PersistentQueryMetadata#getSchemas()}.\n+ * This is a map of {@code loggerNamePrefix} to {@link SchemaInfo}. This map is populated as a query\n+ * is built, so presents the <i>actual</i> schema and formats used. This class uses pattern matching\n+ * against the topic name to determine the correct {@code loggerNamePrefix} to look up and any\n+ * additional logic needded.\n  */\n public class TopicInfoCache {\n \n-  private static final Pattern INTERNAL_TOPIC_PATTERN = Pattern\n-      .compile(\"_confluent.*query_(.*_\\\\d+)-.*-(changelog|repartition)\");\n+  private static final String TOPIC_PATTERN_PREFIX = \"_confluent.*query_(?<queryId>.*_\\\\d+)-\";\n+\n+  private static final List<InternalTopicPattern> INTERNAL_TOPIC_PATTERNS = ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65cb6312bdbdfba42b019f2400bd6ec23ac0efa"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e1f2209f604e4c05e2b1189acf77150bffa4e36", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6e1f2209f604e4c05e2b1189acf77150bffa4e36", "committedDate": "2020-10-07T19:43:43Z", "message": "Merge branch 'master' into topic_info_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec", "committedDate": "2020-10-07T19:47:28Z", "message": "chore: almog's stubborn!"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzMwNzUw", "url": "https://github.com/confluentinc/ksql/pull/6366#pullrequestreview-504330750", "createdAt": "2020-10-07T23:15:24Z", "commit": {"oid": "eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzoxNToyNFrOHeIurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzoyNToyN1rOHeI7xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2MjM0OQ==", "bodyText": "\ud83d\ude02 seems like overkill for a Map but we can refactor that another time", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r501362349", "createdAt": "2020-10-07T23:15:24Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/schema/query/QuerySchemas.java", "diffHunk": "@@ -17,39 +17,147 @@\n \n import static java.util.Objects.requireNonNull;\n \n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n import io.confluent.ksql.serde.KeyFormat;\n import io.confluent.ksql.serde.ValueFormat;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n+import java.util.Set;\n \n /**\n- * Pojo for holding data about the physical schemas in use at the different stages within a topology\n- * of a query.\n+ * Pojo for holding data about the schemas and formats in use at the different stages within a\n+ * topology of a query.\n  *\n- * <p>Contains an ordered mapping of 'logger name prefix' to the schema used,\n- * where the logger name prefix can be used to map the schema to a stage in the topology.\n+ * <p>Contains an map of 'logger name prefix' to the schema and formats used when creating a serde.\n+ *\n+ * <p>If {@link io.confluent.ksql.execution.builder.KsqlQueryBuilder#KSQL_TEST_TRACK_SERDE_TOPICS}\n+ * system property set the class will also track the 'logger name prefix' used when creating a serde\n+ * to the topic name the serde is asked to handle data for.\n+ *\n+ * <p>These two combined can determine the schema and formats per topic.\n  *\n  * <p>This class is predominately used in the {@code QueryTranslationTest} in the\n  * ksql-functional-tests module to ensure the schemas of data persisted to topics doesn't change\n  * between releases.\n  */\n-@Immutable\n public final class QuerySchemas {\n \n-  private final ImmutableMap<String, SchemaInfo> schemas;\n+  // Maps logger name prefixes -> Schema Info\n+  private final LinkedHashMap<String, SchemaInfo> loggerToSchemas = new LinkedHashMap<>();\n+\n+  // Maps topic name -> (map of key/value flag -> set of logger name prefixes)\n+  private final Map<String, Map<Boolean, Set<String>>> topicsToLoggers = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2NDQ3Mg==", "bodyText": "nit: worth checking equality to true in case people think they can just flip it from \"true\"/\"false\"", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r501364472", "createdAt": "2020-10-07T23:21:41Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/builder/KsqlQueryBuilder.java", "diffHunk": "@@ -207,7 +217,18 @@ public KsqlQueryBuilder withKsqlConfig(final KsqlConfig newConfig) {\n         ksqlConfig,\n         serviceContext.getSchemaRegistryClientFactory(),\n         loggerNamePrefix,\n-        processingLogContext\n+        processingLogContext,\n+        getSerdeTracker(loggerNamePrefix)\n+    );\n+  }\n+\n+  private Optional<TrackedCallback> getSerdeTracker(final String loggerNamePrefix) {\n+    if (System.getProperty(KSQL_TEST_TRACK_SERDE_TOPICS) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2NTcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * double-wrapped in {@link org.apache.kafka.streams.kstream.Windowed}. This can be represented\n          \n          \n            \n                 * double-wrapped in {@link org.apache.kafka.streams.kstream.Windowed}. This can't be represented", "url": "https://github.com/confluentinc/ksql/pull/6366#discussion_r501365703", "createdAt": "2020-10-07T23:25:27Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TopicInfoCache.java", "diffHunk": "@@ -138,6 +168,151 @@ private TopicInfo load(final String topicName) {\n     }\n   }\n \n+  private static class InternalTopic {\n+\n+    private final QueryId queryId;\n+\n+    InternalTopic(final Matcher matcher) {\n+      this.queryId = new QueryId(matcher.group(\"queryId\"));\n+    }\n+\n+    QueryId queryId() {\n+      return queryId;\n+    }\n+\n+    /**\n+     * Gives the pattern a chance to adjust the key format\n+     */\n+    KeyFormat keyFormat(final KeyFormat baseFormat, final PersistentQueryMetadata query) {\n+      return baseFormat;\n+    }\n+\n+    /**\n+     * Used by stream-stream join changelogs of windowed stream, where the statestore key is\n+     * double-wrapped in {@link org.apache.kafka.streams.kstream.Windowed}. This can be represented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf7f1f124498ab0fec639bb8a0dfe0b204de9ec"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679be4df770647a94a7fdd03b6aa78413cdebb75", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/679be4df770647a94a7fdd03b6aa78413cdebb75", "committedDate": "2020-10-08T08:20:04Z", "message": "Update ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TopicInfoCache.java\n\nCo-authored-by: Almog Gavra <almog@confluent.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4623, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}