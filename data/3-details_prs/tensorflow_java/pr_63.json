{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTM5Mjk3", "number": 63, "title": "Recycle objects when iterating an element sequence", "bodyText": "The main addition of this PR is the creation on a DataBufferWindow interface, that allows a user to view partially the content of a given buffer and to move (or \"slide\") it across the memory segment so that the same window instance can reused to present different chunk of data.\nThis is particularly useful when visiting all values (or elements of a given dimension) of a NdArray in a given sequence (e.g. ndArray.elements(0) or ndArray.scalars()) and performance gains are substantial for large tensors (in the order of 5x faster).", "createdAt": "2020-05-27T22:11:16Z", "url": "https://github.com/tensorflow/java/pull/63", "merged": true, "mergeCommit": {"oid": "f056482d29a97e67c167e8446bd845d402dc5647"}, "closed": true, "closedAt": "2020-06-09T03:23:39Z", "author": {"login": "karllessard"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclg8R4gH2gAyNDI0MTM5Mjk3OjQ0MmQ2NWQ1NDZkYjQ3MDQ0MjJlNmY5OGM3YjljNDE3MmZlY2FiZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpaa3NgFqTQyNjcyMDQ4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "442d65d546db4704422e6f98c7b9c4172fecabef", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/442d65d546db4704422e6f98c7b9c4172fecabef", "committedDate": "2020-05-27T22:24:05Z", "message": "Recycle objects when iterating an element sequence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97b96c0cacadff86e5bf65fcf2357cd11a66480e", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/97b96c0cacadff86e5bf65fcf2357cd11a66480e", "committedDate": "2020-05-27T21:25:03Z", "message": "Recycle objects when iterating an element sequence"}, "afterCommit": {"oid": "442d65d546db4704422e6f98c7b9c4172fecabef", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/442d65d546db4704422e6f98c7b9c4172fecabef", "committedDate": "2020-05-27T22:24:05Z", "message": "Recycle objects when iterating an element sequence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDgyNTAz", "url": "https://github.com/tensorflow/java/pull/63#pullrequestreview-422082503", "createdAt": "2020-06-01T18:31:37Z", "commit": {"oid": "442d65d546db4704422e6f98c7b9c4172fecabef"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMTozN1rOGdVcbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozNzowMVrOGdVnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzIyOA==", "bodyText": "Unnecessary imports?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r433413228", "createdAt": "2020-06-01T18:31:37Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/sequence/CoordinatesIncrementor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+\n+package org.tensorflow.tools.ndarray.impl.sequence;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.tensorflow.tools.ndarray.impl.dimension.DimensionalSpace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442d65d546db4704422e6f98c7b9c4172fecabef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNjA4MA==", "bodyText": "What's with all the default methods returning null? I didn't see null checks elsewhere in the code to deal with it not being overridden?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r433416080", "createdAt": "2020-06-01T18:37:01Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DoubleDataBuffer.java", "diffHunk": "@@ -157,4 +157,9 @@ default DoubleDataBuffer narrow(long size) {\n \n   @Override\n   DoubleDataBuffer slice(long index, long size);\n+\n+  @Override\n+  default DataBufferWindow<DoubleDataBuffer> window(long size) {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442d65d546db4704422e6f98c7b9c4172fecabef"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/9ffa5b02709427ff50d1ed35d965ac685ffc14cd", "committedDate": "2020-06-03T04:58:24Z", "message": "Throw exception if buffer does not support windows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69d2a93783df47bc0e664c4fa794cfa516f153d5", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/69d2a93783df47bc0e664c4fa794cfa516f153d5", "committedDate": "2020-06-03T04:48:35Z", "message": "Throw exception when buffer windows are not supported"}, "afterCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/9ffa5b02709427ff50d1ed35d965ac685ffc14cd", "committedDate": "2020-06-03T04:58:24Z", "message": "Throw exception if buffer does not support windows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDI2NzY5", "url": "https://github.com/tensorflow/java/pull/63#pullrequestreview-425426769", "createdAt": "2020-06-05T15:57:07Z", "commit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo1NzowOFrOGf0Ngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNjoyMFrOGf6bwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNDQ2Nw==", "bodyText": "Can be \"slid\"? Seems like \"slide\" is the wrong tense. Maybe \"and can slide along\"?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436014467", "createdAt": "2020-06-05T15:57:08Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBuffer.java", "diffHunk": "@@ -247,6 +247,38 @@\n    */\n   DataBuffer<T> slice(long index, long size);\n \n+  /**\n+   * Creates a {@link DataBufferWindow} that provides a partial view of this buffer.\n+   *\n+   * <p>The created window has a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNDU1NQ==", "bodyText": "performances -> performance", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436014555", "createdAt": "2020-06-05T15:57:18Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBuffer.java", "diffHunk": "@@ -247,6 +247,38 @@\n    */\n   DataBuffer<T> slice(long index, long size);\n \n+  /**\n+   * Creates a {@link DataBufferWindow} that provides a partial view of this buffer.\n+   *\n+   * <p>The created window has a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+   * across this buffer at different offsets to provide different views of the data without allocating\n+   * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjU1Mg==", "bodyText": "\"for viewing part of a DataBuffer\"", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436016552", "createdAt": "2020-06-05T16:00:48Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzA3MA==", "bodyText": "Same tense issue as in DataBuffer.window().", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436017070", "createdAt": "2020-06-05T16:01:40Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzQ2OA==", "bodyText": "performances -> performance.", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436017468", "createdAt": "2020-06-05T16:02:25Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+ * across a buffer at different offsets to provide different views of the data without allocating\n+ * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODk0NQ==", "bodyText": "Maybe slideAlong rather than slideOf?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436018945", "createdAt": "2020-06-05T16:05:04Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+ * across a buffer at different offsets to provide different views of the data without allocating\n+ * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when\n+ * this operation is repeated frequently. For example:\n+ *\n+ * <pre>{@code\n+ * IntDataBuffer bufferA = DataBuffers.ofInts(1024);\n+ * // ... init buffer data\n+ * IntDataBuffer bufferB = DataBuffers.ofInts(1, 2, 3, 4);\n+ *\n+ * // Return the index of the first occurrence of bufferB in bufferA using a sliding window\n+ * DataBufferWindow<IntDataBuffer> windowA = bufferA.window(4);\n+ * for (int i = 0; i < bufferA.size() - bufferB.size(); ++i) {\n+ *     if (windowA.slideTo(i).buffer().equals(bufferB)) {\n+ *         return i;\n+ *     }\n+ * }\n+ * }</pre>>\n+ *\n+ * <p>{@code DataBufferWindow} instances are stateful and not thread-safe.\n+ *\n+ * @param <B> the type of buffer being viewed\n+ */\n+public interface DataBufferWindow<B extends DataBuffer<?>> {\n+\n+  /**\n+   * Returns the current offset of this window in the underlying buffer.\n+   */\n+  long offset();\n+\n+  /**\n+   * Returns the size of this buffer window.\n+   */\n+  long size();\n+\n+  /**\n+   * Moves the window at the given position in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code index}, so that\n+   * accessing the value of {@link #buffer()} at index {@code x} will return the value at\n+   * {@code index + x} in the underlying buffer.\n+   *\n+   * @param index new offset for this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if index is beyond the underlying buffer limits\n+   */\n+  DataBufferWindow<B> slideTo(long index);\n+\n+  /**\n+   * Moves the window of {@code step} elements in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code offset() + step}.\n+   * If {@code step} is positive, then the window will slide forward. If it is negative, it will\n+   * slide backward.\n+   *\n+   * @param step value to add to the current offset of this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if the resulting offset goes beyond the underlying buffer limits\n+   */\n+  DataBufferWindow<B> slideOf(long step);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxOTUxNA==", "bodyText": "\"offset is set to\". I feel reset is a bit strange here, as it's not reverting to a particular value.", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436019514", "createdAt": "2020-06-05T16:06:03Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+ * across a buffer at different offsets to provide different views of the data without allocating\n+ * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when\n+ * this operation is repeated frequently. For example:\n+ *\n+ * <pre>{@code\n+ * IntDataBuffer bufferA = DataBuffers.ofInts(1024);\n+ * // ... init buffer data\n+ * IntDataBuffer bufferB = DataBuffers.ofInts(1, 2, 3, 4);\n+ *\n+ * // Return the index of the first occurrence of bufferB in bufferA using a sliding window\n+ * DataBufferWindow<IntDataBuffer> windowA = bufferA.window(4);\n+ * for (int i = 0; i < bufferA.size() - bufferB.size(); ++i) {\n+ *     if (windowA.slideTo(i).buffer().equals(bufferB)) {\n+ *         return i;\n+ *     }\n+ * }\n+ * }</pre>>\n+ *\n+ * <p>{@code DataBufferWindow} instances are stateful and not thread-safe.\n+ *\n+ * @param <B> the type of buffer being viewed\n+ */\n+public interface DataBufferWindow<B extends DataBuffer<?>> {\n+\n+  /**\n+   * Returns the current offset of this window in the underlying buffer.\n+   */\n+  long offset();\n+\n+  /**\n+   * Returns the size of this buffer window.\n+   */\n+  long size();\n+\n+  /**\n+   * Moves the window at the given position in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code index}, so that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMDA3NA==", "bodyText": "Presumably it throws IOOBE if any portion of the window is outside the underlying buffer? If so this language should be tightened up, and if it doesn't then I'm a little confused. Ditto for the throws clause on slideTo.", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436020074", "createdAt": "2020-06-05T16:07:08Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+ * across a buffer at different offsets to provide different views of the data without allocating\n+ * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when\n+ * this operation is repeated frequently. For example:\n+ *\n+ * <pre>{@code\n+ * IntDataBuffer bufferA = DataBuffers.ofInts(1024);\n+ * // ... init buffer data\n+ * IntDataBuffer bufferB = DataBuffers.ofInts(1, 2, 3, 4);\n+ *\n+ * // Return the index of the first occurrence of bufferB in bufferA using a sliding window\n+ * DataBufferWindow<IntDataBuffer> windowA = bufferA.window(4);\n+ * for (int i = 0; i < bufferA.size() - bufferB.size(); ++i) {\n+ *     if (windowA.slideTo(i).buffer().equals(bufferB)) {\n+ *         return i;\n+ *     }\n+ * }\n+ * }</pre>>\n+ *\n+ * <p>{@code DataBufferWindow} instances are stateful and not thread-safe.\n+ *\n+ * @param <B> the type of buffer being viewed\n+ */\n+public interface DataBufferWindow<B extends DataBuffer<?>> {\n+\n+  /**\n+   * Returns the current offset of this window in the underlying buffer.\n+   */\n+  long offset();\n+\n+  /**\n+   * Returns the size of this buffer window.\n+   */\n+  long size();\n+\n+  /**\n+   * Moves the window at the given position in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code index}, so that\n+   * accessing the value of {@link #buffer()} at index {@code x} will return the value at\n+   * {@code index + x} in the underlying buffer.\n+   *\n+   * @param index new offset for this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if index is beyond the underlying buffer limits\n+   */\n+  DataBufferWindow<B> slideTo(long index);\n+\n+  /**\n+   * Moves the window of {@code step} elements in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code offset() + step}.\n+   * If {@code step} is positive, then the window will slide forward. If it is negative, it will\n+   * slide backward.\n+   *\n+   * @param step value to add to the current offset of this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if the resulting offset goes beyond the underlying buffer limits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDk2OQ==", "bodyText": "Is it always the underlying buffer? If so can we just say that?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436030969", "createdAt": "2020-06-05T16:27:24Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.tensorflow.tools.buffer;\n+\n+/**\n+ * A mutable container for viewing partially a {@link DataBuffer}.\n+ *\n+ * <p>Data buffer windows have a fixed size and can be {@link DataBufferWindow#slideTo(long) \"slide\"}\n+ * across a buffer at different offsets to provide different views of the data without allocating\n+ * a new buffer instance, like {@link #offset(long)} does. This improves overall performances when\n+ * this operation is repeated frequently. For example:\n+ *\n+ * <pre>{@code\n+ * IntDataBuffer bufferA = DataBuffers.ofInts(1024);\n+ * // ... init buffer data\n+ * IntDataBuffer bufferB = DataBuffers.ofInts(1, 2, 3, 4);\n+ *\n+ * // Return the index of the first occurrence of bufferB in bufferA using a sliding window\n+ * DataBufferWindow<IntDataBuffer> windowA = bufferA.window(4);\n+ * for (int i = 0; i < bufferA.size() - bufferB.size(); ++i) {\n+ *     if (windowA.slideTo(i).buffer().equals(bufferB)) {\n+ *         return i;\n+ *     }\n+ * }\n+ * }</pre>>\n+ *\n+ * <p>{@code DataBufferWindow} instances are stateful and not thread-safe.\n+ *\n+ * @param <B> the type of buffer being viewed\n+ */\n+public interface DataBufferWindow<B extends DataBuffer<?>> {\n+\n+  /**\n+   * Returns the current offset of this window in the underlying buffer.\n+   */\n+  long offset();\n+\n+  /**\n+   * Returns the size of this buffer window.\n+   */\n+  long size();\n+\n+  /**\n+   * Moves the window at the given position in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code index}, so that\n+   * accessing the value of {@link #buffer()} at index {@code x} will return the value at\n+   * {@code index + x} in the underlying buffer.\n+   *\n+   * @param index new offset for this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if index is beyond the underlying buffer limits\n+   */\n+  DataBufferWindow<B> slideTo(long index);\n+\n+  /**\n+   * Moves the window of {@code step} elements in the underlying buffer.\n+   *\n+   * <p>The size of the window remains the same and its offset is reset to {@code offset() + step}.\n+   * If {@code step} is positive, then the window will slide forward. If it is negative, it will\n+   * slide backward.\n+   *\n+   * @param step value to add to the current offset of this window\n+   * @return this instance\n+   * @throws IndexOutOfBoundsException if the resulting offset goes beyond the underlying buffer limits\n+   */\n+  DataBufferWindow<B> slideOf(long step);\n+\n+  /**\n+   * Returns a buffer presenting the data currently viewed by this window.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNzM2Mw==", "bodyText": "performances -> performance", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436107363", "createdAt": "2020-06-05T18:55:43Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/NdArraySequence.java", "diffHunk": "@@ -35,4 +42,27 @@\n    * @param consumer method to invoke for each elements\n    */\n   void forEachIndexed(BiConsumer<long[], T> consumer);\n+\n+  /**\n+   * Returns each element as a new slice.\n+   *\n+   * <p>Unlike conventional Java collections, elements of a {@code NdArraySequence} are transient, i.e. new {@code NdArray}\n+   * instances are allocated for each iteration. To improve performances, the same instance can be recycled to view", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNzkwMA==", "bodyText": "\"disable such optimizations to ensure that each element returned\"", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436107900", "createdAt": "2020-06-05T18:56:53Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/NdArraySequence.java", "diffHunk": "@@ -35,4 +42,27 @@\n    * @param consumer method to invoke for each elements\n    */\n   void forEachIndexed(BiConsumer<long[], T> consumer);\n+\n+  /**\n+   * Returns each element as a new slice.\n+   *\n+   * <p>Unlike conventional Java collections, elements of a {@code NdArraySequence} are transient, i.e. new {@code NdArray}\n+   * instances are allocated for each iteration. To improve performances, the same instance can be recycled to view\n+   * all elements of this sequence, using a {@link org.tensorflow.tools.buffer.DataBufferWindow}.\n+   *\n+   * <p>In some cases though, it might be preferable to disable such optimization to ensure that each elements returned is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwODUxMQ==", "bodyText": "Should we emit a logger message at FINE saying it fell back to the slow path?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436108511", "createdAt": "2020-06-05T18:58:14Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/dense/AbstractDenseNdArray.java", "diffHunk": "@@ -17,16 +17,40 @@\n package org.tensorflow.tools.ndarray.impl.dense;\n \n import org.tensorflow.tools.buffer.DataBuffer;\n-import org.tensorflow.tools.ndarray.IllegalRankException;\n+import org.tensorflow.tools.buffer.DataBufferWindow;\n import org.tensorflow.tools.ndarray.NdArray;\n+import org.tensorflow.tools.ndarray.NdArraySequence;\n import org.tensorflow.tools.ndarray.impl.AbstractNdArray;\n import org.tensorflow.tools.ndarray.impl.dimension.DimensionalSpace;\n import org.tensorflow.tools.ndarray.impl.dimension.RelativeDimensionalSpace;\n+import org.tensorflow.tools.ndarray.impl.sequence.SlicingElementSequence;\n+import org.tensorflow.tools.ndarray.impl.sequence.SingleElementSequence;\n+import org.tensorflow.tools.ndarray.impl.sequence.FastElementSequence;\n import org.tensorflow.tools.ndarray.index.Index;\n \n @SuppressWarnings(\"unchecked\")\n public abstract class AbstractDenseNdArray<T, U extends NdArray<T>> extends AbstractNdArray<T, U> {\n \n+  @Override\n+  public NdArraySequence<U> elements(int dimensionIdx) {\n+    if (dimensionIdx >= shape().numDimensions()) {\n+      throw new IllegalArgumentException(\"Cannot iterate elements in dimension '\" + dimensionIdx +\n+          \"' of array with shape \" + shape());\n+    }\n+    if (rank() == 0 && dimensionIdx < 0) {\n+      return new SingleElementSequence<>(this);\n+    }\n+    DimensionalSpace elemDims = dimensions().from(dimensionIdx + 1);\n+    try {\n+      DataBufferWindow<? extends DataBuffer<T>> elemWindow = buffer().window(elemDims.physicalSize());\n+      U element = instantiate(elemWindow.buffer(), elemDims);\n+      return new FastElementSequence(this, dimensionIdx, element, elemWindow);\n+    } catch (UnsupportedOperationException e) {\n+      // If buffer windows are not supported, fallback to slicing (and slower) sequence", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwODg2NA==", "bodyText": "What's the extra type variable for?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436108864", "createdAt": "2020-06-05T18:59:02Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/dense/AbstractDenseNdArray.java", "diffHunk": "@@ -112,21 +136,16 @@ protected AbstractDenseNdArray(DimensionalSpace dimensions) {\n     super(dimensions);\n   }\n \n-  abstract protected DataBuffer<T> buffer();\n+  abstract protected <P> DataBuffer<T> buffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwOTI2Ng==", "bodyText": "Class level javadoc?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436109266", "createdAt": "2020-06-05T18:59:53Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/sequence/FastElementSequence.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+\n+package org.tensorflow.tools.ndarray.impl.sequence;\n+\n+import java.util.Iterator;\n+import java.util.function.BiConsumer;\n+\n+import org.tensorflow.tools.buffer.DataBufferWindow;\n+import org.tensorflow.tools.ndarray.NdArray;\n+import org.tensorflow.tools.ndarray.NdArraySequence;\n+import org.tensorflow.tools.ndarray.impl.AbstractNdArray;\n+\n+public final class FastElementSequence<T, U extends NdArray<T>> implements NdArraySequence<U> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwOTM2Ng==", "bodyText": "Copyright year 2020?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436109366", "createdAt": "2020-06-05T19:00:06Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/sequence/FastElementSequence.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 2019 The TensorFlow Authors. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTA4NA==", "bodyText": "Class level javadoc, now it's public? Or is this something we'd exclude using modules if we were on Java 9?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436111084", "createdAt": "2020-06-05T19:03:55Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/ndarray/impl/sequence/SingleElementSequence.java", "diffHunk": "@@ -24,7 +24,11 @@\n import org.tensorflow.tools.ndarray.NdArraySequence;\n import org.tensorflow.tools.ndarray.impl.AbstractNdArray;\n \n-class SingleElementSequence<T, U extends NdArray<T>> implements NdArraySequence<U> {\n+public final class SingleElementSequence<T, U extends NdArray<T>> implements NdArraySequence<U> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMjk5MQ==", "bodyText": "Do we still need to suppress warnings here? It looks like it's all properly typed?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436112991", "createdAt": "2020-06-05T19:08:15Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/test/java/org/tensorflow/tools/ndarray/impl/sequence/ElementSequenceTest.java", "diffHunk": "@@ -37,8 +41,7 @@ public void iterateVectorsWithIndex() {\n     IntNdArray array = NdArrays.ofInts(Shape.of(2, 3, 2));\n \n     @SuppressWarnings(\"unchecked\")\n-    NdArraySequence<IntNdArray> sequence = ElementSequence\n-        .create((AbstractNdArray<Integer, IntNdArray>)array, 1);\n+    NdArraySequence<IntNdArray> sequence = new SlicingElementSequence((AbstractNdArray<Integer, IntNdArray>)array, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMzA4NQ==", "bodyText": "SuppressWarnings?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436113085", "createdAt": "2020-06-05T19:08:29Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/test/java/org/tensorflow/tools/ndarray/impl/sequence/ElementSequenceTest.java", "diffHunk": "@@ -56,7 +59,7 @@ public void iterateScalarsWithIndex() {\n     IntNdArray array = NdArrays.ofInts(Shape.of(2, 3, 2));\n \n     @SuppressWarnings(\"unchecked\")\n-    NdArraySequence<IntNdArray> cursor = ElementSequence.create((AbstractNdArray<Integer, IntNdArray>)array, 2);\n+    NdArraySequence<IntNdArray> cursor = new SlicingElementSequence((AbstractNdArray<Integer, IntNdArray>)array, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMzM3Mg==", "bodyText": "SuppressWarnings?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436113372", "createdAt": "2020-06-05T19:09:12Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/test/java/org/tensorflow/tools/ndarray/impl/sequence/ElementSequenceTest.java", "diffHunk": "@@ -74,4 +77,71 @@ public void iterateScalarsWithIndex() {\n     assertArrayEquals(new long[] {1, 2, 0}, coords.get(10));\n     assertArrayEquals(new long[] {1, 2, 1}, coords.get(11));\n   }\n+\n+  @Test\n+  public void slicingElementSequenceReturnsUniqueInstances() {\n+    IntNdArray array = NdArrays.ofInts(Shape.of(2, 3, 2));\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMzQzOQ==", "bodyText": "SuppressWarnings?", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436113439", "createdAt": "2020-06-05T19:09:21Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/test/java/org/tensorflow/tools/ndarray/impl/sequence/ElementSequenceTest.java", "diffHunk": "@@ -74,4 +77,71 @@ public void iterateScalarsWithIndex() {\n     assertArrayEquals(new long[] {1, 2, 0}, coords.get(10));\n     assertArrayEquals(new long[] {1, 2, 1}, coords.get(11));\n   }\n+\n+  @Test\n+  public void slicingElementSequenceReturnsUniqueInstances() {\n+    IntNdArray array = NdArrays.ofInts(Shape.of(2, 3, 2));\n+    @SuppressWarnings(\"unchecked\")\n+    NdArraySequence<IntNdArray> sequence = new SlicingElementSequence(\n+        (AbstractNdArray<Integer, IntNdArray>) array, 1);\n+    List<IntNdArray> elements = new ArrayList<>();\n+    sequence.forEach(e -> {\n+      elements.forEach(tmp -> {\n+        if (tmp == e) {\n+          fail();\n+        }\n+      });\n+      elements.add(e);\n+    });\n+  }\n+\n+  @Test\n+  public void fastElementSequenceReturnsSameInstance() {\n+    IntNdArray array = NdArrays.ofInts(Shape.of(2, 3, 2));\n+    IntNdArray element = array.get(0);\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExNjQxOA==", "bodyText": "This is the crucial change right? Making this class no longer completely immutable so it can walk down an allocated block of memory.", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436116418", "createdAt": "2020-06-05T19:16:20Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/impl/raw/UnsafeMemoryHandle.java", "diffHunk": "@@ -138,39 +142,47 @@ int arrayOffset(Class<?> arrayClass) {\n   }\n \n   ByteBuffer toArrayByteBuffer() {\n-    return ByteBuffer.wrap((byte[])object, (int)byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(byte[].class), (int)size());\n+    return ByteBuffer.wrap((byte[])object, (int) byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(byte[].class), (int)size);\n   }\n \n   ShortBuffer toArrayShortBuffer() {\n-    return ShortBuffer.wrap((short[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(short[].class)) / scale), (int)size());\n+    return ShortBuffer.wrap((short[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(short[].class)) / scale), (int)size);\n   }\n \n   IntBuffer toArrayIntBuffer() {\n-    return IntBuffer.wrap((int[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(int[].class)) / scale), (int)size());\n+    return IntBuffer.wrap((int[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(int[].class)) / scale), (int)size);\n   }\n \n   LongBuffer toArrayLongBuffer() {\n-    return LongBuffer.wrap((long[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(long[].class)) / scale), (int)size());\n+    return LongBuffer.wrap((long[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(long[].class)) / scale), (int)size);\n   }\n \n   FloatBuffer toArrayFloatBuffer() {\n-    return FloatBuffer.wrap((float[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(float[].class)) / scale), (int)size());\n+    return FloatBuffer.wrap((float[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(float[].class)) / scale), (int)size);\n   }\n \n   DoubleBuffer toArrayDoubleBuffer() {\n-    return DoubleBuffer.wrap((double[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(double[].class)) / scale), (int)size());\n+    return DoubleBuffer.wrap((double[])object, (int)((byteOffset - UnsafeReference.UNSAFE.arrayBaseOffset(double[].class)) / scale), (int)size);\n   }\n \n   final Object object;\n-  final long byteOffset;\n+  final long baseOffset;\n+  long byteOffset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffa5b02709427ff50d1ed35d965ac685ffc14cd"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023eaeaf7c2fc691037c560e91cbb116acaee899", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/023eaeaf7c2fc691037c560e91cbb116acaee899", "committedDate": "2020-06-06T03:34:05Z", "message": "Improve javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzU0NTkx", "url": "https://github.com/tensorflow/java/pull/63#pullrequestreview-425754591", "createdAt": "2020-06-06T17:07:35Z", "commit": {"oid": "023eaeaf7c2fc691037c560e91cbb116acaee899"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNzowNzozNVrOGgEsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNzowNzozNVrOGgEsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4NDQ0Mg==", "bodyText": "\"for viewing\"", "url": "https://github.com/tensorflow/java/pull/63#discussion_r436284442", "createdAt": "2020-06-06T17:07:35Z", "author": {"login": "Craigacp"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/buffer/DataBufferWindow.java", "diffHunk": "@@ -1,12 +1,12 @@\n package org.tensorflow.tools.buffer;\n \n /**\n- * A mutable container for viewing partially a {@link DataBuffer}.\n+ * A mutable container for view part of a {@link DataBuffer}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023eaeaf7c2fc691037c560e91cbb116acaee899"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e13247da8f6489a0150bbb1590a7a9863974b0", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/08e13247da8f6489a0150bbb1590a7a9863974b0", "committedDate": "2020-06-08T14:06:53Z", "message": "More javadoc fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzIwNDg5", "url": "https://github.com/tensorflow/java/pull/63#pullrequestreview-426720489", "createdAt": "2020-06-09T01:03:52Z", "commit": {"oid": "08e13247da8f6489a0150bbb1590a7a9863974b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3443, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}