{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjM5Mzcx", "number": 129, "reviewThreads": {"totalCount": 70, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo1NDo0MVrOEsNOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowNjoyNFrOE4uaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg5MzgwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo1NDo0MVrOHfZh9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxMDoyM1rOHfjD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NjE5Ng==", "bodyText": "perhaps \"of the predictions and result\"?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502686196", "createdAt": "2020-10-09T21:54:41Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjM0MA==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502842340", "createdAt": "2020-10-10T23:10:23Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NjE5Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkwMDAxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/Tuple.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo1OTozN1rOHfZl4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxMjo0NVrOHfjEog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NzIwMw==", "bodyText": "The Tuple class name is uncomfortably vanilla for me. Perhaps LossTuple?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502687203", "createdAt": "2020-10-09T21:59:37Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/Tuple.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * A helper class for loss methods to return multiple labels, target, and sampleWeights\n+ *\n+ * @param <T> the data type of the Tuple entries.\n+ */\n+public class Tuple<T extends TNumber> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjUzMA==", "bodyText": "This object will also be used in Metrics as many metrics are built using loss classes or Losses methods. I have changed it to LossTuple.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502842530", "createdAt": "2020-10-10T23:12:45Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/Tuple.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * A helper class for loss methods to return multiple labels, target, and sampleWeights\n+ *\n+ * @param <T> the data type of the Tuple entries.\n+ */\n+public class Tuple<T extends TNumber> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NzIwMw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkwNTIyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjowMzo0NFrOHfZpEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoyNDoxN1rOHfjHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODAxOA==", "bodyText": "The Javadocs in this file are still partly in markdown.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502688018", "createdAt": "2020-10-09T22:03:44Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMyNw==", "bodyText": "OK, I thought I caught them all, I will fix.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502843327", "createdAt": "2020-10-10T23:24:17Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODAxOA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkxMDQzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjowNzoyMFrOHfZsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoyNzoyOFrOHfjIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODc5Ng==", "bodyText": "For this method, the returned sampleWeight is always null.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502688796", "createdAt": "2020-10-09T22:07:20Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NDQwOQ==", "bodyText": "That is not always the case when we do Metrics.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502784409", "createdAt": "2020-10-10T12:15:30Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODc5Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgyMzc5MA==", "bodyText": "I'm just thinking our documentation for this method might take into account that the returned sampleWeight is always null.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502823790", "createdAt": "2020-10-10T19:27:15Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODc5Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzU3OQ==", "bodyText": "Now I see what you  are talking about. I added a comment in the @return that sampleWeight will be null for this particular method signature.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502843579", "createdAt": "2020-10-10T23:27:28Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4ODc5Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkxMjIxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjowODozNlrOHfZtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMTo0NDo0N1rOHn8x6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA==", "bodyText": "Is \"match\" the right way to describe the precondition relationship between predictions and labels?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502689064", "createdAt": "2020-10-09T22:08:36Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDYyNw==", "bodyText": "It is definitely not the same Shape.  I was thinking of compatible, but that has specific meaning in Shape.isCompatibleWIth.  The description is saying the ranks must be equal or differ by one. I am not sure of one word that describes that.  match was the word used in the Python version of this method.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502844627", "createdAt": "2020-10-10T23:43:29Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNTYwMA==", "bodyText": "Hmm, here's a suggestion:\n\nWe could decide what we want the convention to be, in terms of squeeze-or-expand plus maybe broadcasting.\nWrite this up carefully in the class javadoc for either Loss or Losses.\nMention that documentation in the class javadoc for every other loss class.\nAlso mention it in Loss#call.\nAnd be silent about it in the individual methods of Losses and LossesImpl.\nPerhaps?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502915600", "createdAt": "2020-10-11T13:26:19Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyMDQ2Nw==", "bodyText": "That said, it just occurred to me that we have another gap, and that filling that gap might help this issue.\nWe don't specify the behavior of these methods when labels and predictions don't have a permitted shape relationship. Nor do we make sure our behavior is consistent in that case.\nPerhaps we should\n\nspell out that there's an IllegalArgumentException for that in the statically-known-dimensions case,\nrename squeezeOrExpandDimensions into something like validateAndAdjustLossDimensions,\nhave that method throw IllegalArgumentException when appropriate,\nand then link to a fuller explanation in the documentation of the IllegalArgumentException?\n\nAlthough I have never been in the habit of subclassing IllegalArgumentException, I see Oracle does that sometimes. That could be an alternative way of pointing people to the fuller explanation.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502920467", "createdAt": "2020-10-11T14:09:55Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMzc4OQ==", "bodyText": "match must mean that the shapes of the input operands are capable of being molded into the relationships defined for the result of this method. Again LossesImpl is intended to be marked as module private (JDK 11) and only should be accessible from the losses or metrics package. It is not intended to be a general use API.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502933789", "createdAt": "2020-10-11T15:59:12Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMDUxMg==", "bodyText": "We should probably note in the javadoc for the class that this is an internal implementation class and subject to change (and being locked off under the module system).", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511500512", "createdAt": "2020-10-24T18:29:49Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1MjMzMQ==", "bodyText": "Added this comment for the LossesImpl class\n/**\n * These are helper methods for Losses and will be module private when\n * Java modularity is applied to TensorFlow Java.\n * These methods should not be used outside of the Loss package.\n */", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511652331", "createdAt": "2020-10-25T21:44:47Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTA2NA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkxNTU1OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjoxMTowN1rOHfZvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowMTowNFrOHfoNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTU4OQ==", "bodyText": "For consistency, labelsRank.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502689589", "createdAt": "2020-10-09T22:11:07Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjc4OQ==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502926789", "createdAt": "2020-10-11T15:01:04Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTU4OQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU4MTI2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDo0MDo1MVrOHffBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjozMzoyMlrOHfi4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NjI2MQ==", "bodyText": "Extraneous *", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502776261", "createdAt": "2020-10-10T10:40:51Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ *\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link * Reduction#AUTO}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzOTQxOA==", "bodyText": "Deleted", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502839418", "createdAt": "2020-10-10T22:33:22Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ *\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link * Reduction#AUTO}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NjI2MQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODY2ODg4OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjo0MjoxNVrOHffqjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjozODoxOVrOHfi6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NjcwMQ==", "bodyText": "Extraneous *", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502786701", "createdAt": "2020-10-10T12:42:15Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and an axis of {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzOTgyNQ==", "bodyText": "Removed all Extraneous @link *", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502839825", "createdAt": "2020-10-10T22:38:19Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and an axis of {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NjcwMQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODY3MTI0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjo0NTozMFrOHffrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMTo0NzowNVrOHn8zCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAwNg==", "bodyText": ". . . , or null to use {@link Class#getSimpleName()}", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502787006", "createdAt": "2020-10-10T12:45:30Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMzk2OA==", "bodyText": "Why would someone want to pass null, when there are other CTORs that handle that condition?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502933968", "createdAt": "2020-10-11T16:00:29Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAwNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1OTYyOA==", "bodyText": "For APIs that will get enough use to be worth some polish, I tend toward carefully documenting edge cases. I don't know whether we want to invest in that now.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503259628", "createdAt": "2020-10-12T12:25:53Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAwNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjIxNg==", "bodyText": "I think it's worth documenting it in case users build their own losses.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511492216", "createdAt": "2020-10-24T16:59:23Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAwNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1MjYxOA==", "bodyText": "OK, added this to name param, if null the name will be {@link Class#getSimpleName()}.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511652618", "createdAt": "2020-10-25T21:47:05Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAwNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODY3MTQ3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjo0NTo0NlrOHffr2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMTo0Nzo1NFrOHn8zWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAzNQ==", "bodyText": ". . . , or null to use {@link Class#getSimpleName()}", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502787035", "createdAt": "2020-10-10T12:45:46Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1MjY5OA==", "bodyText": "OK, added this to all  name param, if null the name will be {@link Class#getSimpleName()}.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511652698", "createdAt": "2020-10-25T21:47:54Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzAzNQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODY3MTg2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjo0NjoyN1rOHffsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzowMzozMlrOHfjB0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzA4Ng==", "bodyText": "Actually, there's a separate <U> for the labels.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502787086", "createdAt": "2020-10-10T12:46:27Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MTgwOA==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502841808", "createdAt": "2020-10-10T23:03:32Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4NzA4Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg0NjM3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjozNToyNVrOHfg-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0MjoyNlrOHyA0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg==", "bodyText": "How would you feel about mnemonic/indicative type names like L for labels? Or even LabelsT?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502808082", "createdAt": "2020-10-10T16:35:25Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjE3OA==", "bodyText": "The standard convention is:\n\nE - Element (used extensively by the Java Collections Framework)\nK - Key\nN - Number\nT - Type\nV - Value\nS,U,V etc. - 2nd, 3rd, 4th types\n\nGeneric Types", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502842178", "createdAt": "2020-10-10T23:08:00Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzU0Mg==", "bodyText": "I don't think of that list as being especially prescriptive. In the Oracle documentation you link above, the list is introduced as \"The most commonly used type parameter names are: ...\".\nGoogle's Java style guide says:\n\nEach type variable is named in one of two styles:\n\nA single capital letter, optionally followed by a single numeral (such as E, T, X, T2)\nA name in the form used for classes (see Section 5.2.2, Class names), followed by the capital letter T (examples: RequestT, FooBarT).\n\n\nPersonally, I'd lean toward using some of our own single-letter conventions for situations that are common in our own code, including L as the labels type.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503263542", "createdAt": "2020-10-12T12:33:08Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjUxOQ==", "bodyText": "My vote would be to stick to the Java conventions Jim described.\nI particularly dislike the Google style form where the type name is a word that isn't all caps, but I tend to find type variables that are longer than a single character tricky to read anyway.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511492519", "createdAt": "2020-10-24T17:02:34Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMjg4OA==", "bodyText": "Personally, I'd lean toward using some of our own single-letter conventions for situations that are common in our own code, including L as the labels type.\n\nThis may be hard to follow consistently once several letters have been used e.g. 'L' might be needed for something other than label type. Seems a tad more confusing than the standard type names", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521102888", "createdAt": "2020-11-11T04:20:21Z", "author": {"login": "KartikChugh"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNDIyMg==", "bodyText": "Ok, sticking with the original plan! Resolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522204222", "createdAt": "2020-11-12T15:42:26Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Loss.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+public abstract class Loss {\n+  protected final Ops tf;\n+  protected final Reduction reduction;\n+\n+  /**\n+   * Creates a Loss using {@link Class#getSimpleName()}  as the name and a Loss Reduction of {@link\n+   * Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  protected Loss(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this Loss\n+   */\n+  protected Loss(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  protected Loss(Ops tf, String name, Reduction reduction) {\n+    this.tf = name != null ? tf.withSubScope(name) : tf.withSubScope(getClass().getSimpleName());\n+    this.reduction = reduction;\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param <T> The data type of the labels, predictions and loss.\n+   * @return the loss\n+   */\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(Operand<U> labels, Operand<T> predictions) {\n+    return call(labels, predictions, null);\n+  }\n+\n+  /**\n+   * Calculates the loss\n+   *\n+   * @param labels the truth values or labels\n+   * @param predictions the predictions\n+   * @param sampleWeights Optional sample_weight acts as a coefficient for the loss. If a scalar is\n+   *     provided, then the loss is simply scaled by the given value. If sample_weight is a tensor\n+   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by the\n+   *     corresponding element in the sample_weight vector. If the shape of sample_weight is\n+   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element of\n+   *     predictions is scaled by the corresponding value of sample_weight. (Note on dN-1: all loss\n+   *     functions reduce by 1 dimension, usually axis=-1.)\n+   * @param <T> The data type of the predictions, sampleWeights and loss.\n+   * @param <U> The data type of the labels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODA4Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg1MTMwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjo0MjozM1rOHfhAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjozNDo1MVrOHfi48A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODY5OA==", "bodyText": "Inconsistency between accessing the superclass's tf directly and accessing its reduction via getReduction.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502808698", "createdAt": "2020-10-10T16:42:33Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ *\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link * Reduction#AUTO}\n+   *\n+   *\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public BinaryCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, and {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT}, a reduction of {@link #REDUCTION_DEFAULT},\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT} a\n+   * reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * and a reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using a reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(\n+          Ops tf,  boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+      this(tf, null, fromLogits, labelSmoothing, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(\n+      Ops tf, String name, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    super(tf, name, reduction);\n+    this.fromLogits = fromLogits;\n+    this.labelSmoothing = labelSmoothing;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(\n+      Operand<U> labels, Operand<T> predictions, Operand<T> sampleWeights) {\n+    Operand<T> losses =\n+        Losses.binaryCrossentropy(tf, labels, predictions, fromLogits, labelSmoothing);\n+    return LossesImpl.computeWeightedLoss(tf, losses, getReduction(), sampleWeights);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzOTUzNg==", "bodyText": "Changed to getTF()", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502839536", "createdAt": "2020-10-10T22:34:51Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ *\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link * Reduction#AUTO}\n+   *\n+   *\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public BinaryCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, and {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT}, a reduction of {@link #REDUCTION_DEFAULT},\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT} a\n+   * reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * and a reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using a reduction of {@link #REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(\n+          Ops tf,  boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+      this(tf, null, fromLogits, labelSmoothing, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing\n+   *     correspond to heavier smoothing.\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(\n+      Ops tf, String name, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    super(tf, name, reduction);\n+    this.fromLogits = fromLogits;\n+    this.labelSmoothing = labelSmoothing;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(\n+      Operand<U> labels, Operand<T> predictions, Operand<T> sampleWeights) {\n+    Operand<T> losses =\n+        Losses.binaryCrossentropy(tf, labels, predictions, fromLogits, labelSmoothing);\n+    return LossesImpl.computeWeightedLoss(tf, losses, getReduction(), sampleWeights);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODY5OA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg1MjE3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjo0Mzo1NlrOHfhA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjozOToxNlrOHfi6TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODgwNw==", "bodyText": "tf versus getReduction (but I'll stop mentioning these)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502808807", "createdAt": "2020-10-10T16:43:56Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link *\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link *\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link * Reduction#AUTO}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link * Reduction#AUTO},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    this(tf, null, fromLogits, labelSmoothing, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   * @param axis The channels axis. <code>axis=-1</code> corresponds to data format `Channels Last'\n+   *     and <code>axis=1</code> corresponds to data format 'Channels First'.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf,\n+      String name,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      Reduction reduction,\n+      int axis) {\n+    super(tf, name, reduction);\n+    this.fromLogits = fromLogits;\n+    this.labelSmoothing = labelSmoothing;\n+    this.axis = axis;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(\n+          Operand<U> labels, Operand<T> predictions, Operand<T> sampleWeights) {\n+    Operand<T> losses =\n+        Losses.categoricalCrossentropy(tf, labels, predictions, fromLogits, labelSmoothing, axis);\n+    return LossesImpl.computeWeightedLoss(tf, losses, getReduction(), sampleWeights);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzOTg4NA==", "bodyText": "Changed to getTF()", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502839884", "createdAt": "2020-10-10T22:39:16Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link *\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link *\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link * Reduction#AUTO}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link * Reduction#AUTO}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link * Reduction#AUTO},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    this(tf, null, fromLogits, labelSmoothing, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   * @param axis The channels axis. <code>axis=-1</code> corresponds to data format `Channels Last'\n+   *     and <code>axis=1</code> corresponds to data format 'Channels First'.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf,\n+      String name,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      Reduction reduction,\n+      int axis) {\n+    super(tf, name, reduction);\n+    this.fromLogits = fromLogits;\n+    this.labelSmoothing = labelSmoothing;\n+    this.axis = axis;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override\n+  public <T extends TNumber, U extends TNumber> Operand<T> call(\n+          Operand<U> labels, Operand<T> predictions, Operand<T> sampleWeights) {\n+    Operand<T> losses =\n+        Losses.categoricalCrossentropy(tf, labels, predictions, fromLogits, labelSmoothing, axis);\n+    return LossesImpl.computeWeightedLoss(tf, losses, getReduction(), sampleWeights);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwODgwNw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg2MTkzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjo1NjoxMVrOHfhFdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTozNVrOHyA-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwOTk3Mg==", "bodyText": "How would you feel about a line break after the whole tf.math.abs(...), to make it easier to scan the parameters of tf.math.mean?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502809972", "createdAt": "2020-10-10T16:56:11Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjc1Mw==", "bodyText": "minor -- we'll call it Resolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522206753", "createdAt": "2020-11-12T15:45:35Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwOTk3Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg3MzcwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/Tuple.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMjo0NVrOHfhK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoxMjo0NVrOHfhK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTM4Ng==", "bodyText": "In current invocations of these constructors, the target argument always comes from a variable called predictions.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502811386", "createdAt": "2020-10-10T17:12:45Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/Tuple.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * A helper class for loss methods to return multiple labels, target, and sampleWeights\n+ *\n+ * @param <T> the data type of the Tuple entries.\n+ */\n+public class Tuple<T extends TNumber> {\n+  private final Operand<T> labels;\n+  private final Operand<T> target;\n+  private final Operand<T> sampleWeights;\n+\n+  /**\n+   * Creates a Tuple of Operands for labels, target, and sampleWeights\n+   *\n+   * @param labels the labels\n+   * @param target the losses or target\n+   */\n+  public Tuple(Operand<T> labels, Operand<T> target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg4MTEzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoyMjo0MlrOHfhOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTo1MlrOHyA_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMjI0MA==", "bodyText": "This is the first of these methods where we used (target, output) instead of (labels, predictions).", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502812240", "createdAt": "2020-10-10T17:22:42Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjk3Ng==", "bodyText": "minor -- we'll call it Resolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522206976", "createdAt": "2020-11-12T15:45:52Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMjI0MA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg4MzY0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzoyNTo0NVrOHfhPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTowNVrOHyA8jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMjUzMw==", "bodyText": "sub will do broadcasting if needed. Do we feel good about applying squeezeOrExpandDimensions and then subsequent broadcasting? If so, is there a succinct description we could provide for overall treatment of dimensions?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502812533", "createdAt": "2020-10-10T17:25:45Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjM0OA==", "bodyText": "We can return to the \"squeezeOrExpandDimensions followed by broadcasting\" topic when I work on #130 .\nResolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522206348", "createdAt": "2020-11-12T15:45:05Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMjUzMw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg4OTM1OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzozNDowMlrOHfhSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NDo0M1rOHyA7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMzIzMw==", "bodyText": "Seems like we should document the required relationships between labels and predictions and the resulting transformations? (Given our use of squeezeOrExpandDimensions followed by broadcasting.)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502813233", "createdAt": "2020-10-10T17:34:02Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNTk5OQ==", "bodyText": "We can return to the \"squeezeOrExpandDimensions followed by broadcasting\" topic when I work on #130 .\nResolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522205999", "createdAt": "2020-11-12T15:44:43Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMzIzMw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg5MDcyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzozNTo1NFrOHfhS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NjowNFrOHyA_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMzQwNg==", "bodyText": "This is the first case in Losses where we haven't followed squeezeOrExpandDimensions with broadcasting. Do we want to add broadcasting here for consistency, or document the difference?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502813406", "createdAt": "2020-10-10T17:35:54Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzE0Ng==", "bodyText": "We can return to the \"squeezeOrExpandDimensions followed by broadcasting\" topic when I work on #130 .\nResolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522207146", "createdAt": "2020-11-12T15:46:04Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMzQwNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODkwNDcxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzo1Mzo1OVrOHfhZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NjoxOFrOHyBAXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTA2Nw==", "bodyText": "Although the documentation of softmaxCrossEntropyWithLogits doesn't specify, I imagine it doesn't do broadcasting. So this would be another method in Losses that does squeezeOrExpandDimensions but does not broadcast.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502815067", "createdAt": "2020-10-10T17:53:59Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzMyNw==", "bodyText": "We can return to the \"squeezeOrExpandDimensions followed by broadcasting\" topic when I work on #130 .\nResolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522207327", "createdAt": "2020-11-12T15:46:18Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTA2Nw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODkwNzQxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzo1NzoyMVrOHfhamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NjozMFrOHyBBCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTM4NQ==", "bodyText": "Although in this internal case of this method, we do broadcast. I'll stop commenting on this issue.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502815385", "createdAt": "2020-10-10T17:57:21Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzQ5Ng==", "bodyText": "We can return to the \"squeezeOrExpandDimensions followed by broadcasting\" topic when I work on #130 .\nResolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522207496", "createdAt": "2020-11-12T15:46:30Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTM4NQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODkxMTMwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODowMzozNlrOHfhceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMzoyOFrOHqgN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng==", "bodyText": "Do we want to avoid this cast in the case where labels already has the same data type?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502815866", "createdAt": "2020-10-10T18:03:36Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNDEzNg==", "bodyText": "I guess the question is what is the overhead of casting onto oneself vs the overhead of checking?  I would hope that tf.dtypes.cast already handles this, but I could be mistaken.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502934136", "createdAt": "2020-10-11T16:02:07Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MTM0OA==", "bodyText": "The code for checking could be something like this:\n@SuppressWarnings(\"unchecked\")\nprivate static <T extends TNumber, U extends TNumber> Operand<T> castIfNecessary(\n    Operand<U> value, DataType<T> requiredType) {\n  return (value.asOutput().dataType() == requiredType) \n      ? (Operand<T>) value\n      : tf.dtypes.cast(value, requiredType);\n}\nSo the overhead of checking would be the function call plus value.asOutput().dataType() == requiredType.\nLooking at the code for tf.dtypes.cast, unless we think a cast is almost always needed, it would be cheaper to do the check to sometimes avoid it.\n  public <U extends TType, T extends TType> Cast<U> cast(Operand<T> x, DataType<U> DstT,\n      Cast.Options... options) {\n    return Cast.create(scope, x, DstT, options);\n  }\n\n  @Endpoint(describeByClass = true)\n  public static <U extends TType, T extends TType> Cast<U> create(Scope scope, Operand<T> x, DataType<U> DstT, Options... options) {\n    OperationBuilder opBuilder = scope.env().opBuilder(\"Cast\", scope.makeOpName(\"Cast\"));\n    opBuilder.addInput(x.asOutput());\n    opBuilder = scope.applyControlDependencies(opBuilder);\n    opBuilder.setAttr(\"DstT\", DstT);\n    if (options != null) {\n      for (Options opts : options) {\n        if (opts.Truncate != null) {\n          opBuilder.setAttr(\"Truncate\", opts.Truncate);\n        }\n      }\n    }\n    return new Cast<U>(opBuilder.build());\n  }", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503271348", "createdAt": "2020-10-12T12:46:37Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Mjc2Ng==", "bodyText": "In graph construction mode the overhead is probably irrelevant because it's only called once during construction. In eager mode it could be faster as it could sidestep a JNI call in each step, but I suspect we've got other issues to get speed in eager mode.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511492766", "createdAt": "2020-10-24T17:05:09Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1MzE1MQ==", "bodyText": "I like castIfNecessary as a general util method. It would be used almost everywhere, so it would be a huge change.\nPerhaps create a new PR for castIfNecessary, then once that is merged we can start retrofitting all packages under framework.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511653151", "createdAt": "2020-10-25T21:51:38Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg5MjYyNw==", "bodyText": "In graph construction mode, an unnecessary call to cast creates an unnecessary graph operation.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511892627", "createdAt": "2020-10-26T11:31:05Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NDcxNA==", "bodyText": "shrug it'll be a no-op most of the time and compiled away if we get XLA working. Given the relative size of the computation around it I suspect it won't be an issue.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512074714", "createdAt": "2020-10-26T15:59:04Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2Mzc0OQ==", "bodyText": "I also vote for a explicit check in the code to avoid adding an extra operation to the graph when it is not required", "url": "https://github.com/tensorflow/java/pull/129#discussion_r513863749", "createdAt": "2020-10-29T01:34:21Z", "author": {"login": "karllessard"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNzY3OQ==", "bodyText": "OK, I will add a helper class in org.tensorflow.framework.utils, then retrofit the Loss classes.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r514317679", "createdAt": "2020-10-29T14:48:11Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMDA2Nw==", "bodyText": "Just a comment on @deansher proposed method here, the datatypes for <U> and <T> should not be restricted to TNumber because it is valid to cast to/from TNumber and TBool .", "url": "https://github.com/tensorflow/java/pull/129#discussion_r514330067", "createdAt": "2020-10-29T15:03:28Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNTg2Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODkxMzgxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODowNjo1N1rOHfhdxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjowMjoxOFrOHfoqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNjE5Nw==", "bodyText": "Can just use dataType.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502816197", "createdAt": "2020-10-10T18:06:57Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNDE0OQ==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502934149", "createdAt": "2020-10-11T16:02:18Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxNjE5Nw=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODkzMzc0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODozMTo1NFrOHfhnOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozMDowOFrOHgx7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODYxNg==", "bodyText": "I tripped over this private method having the usual naming of a loss method, since I didn't notice that it was private and so expected it to follow the conventions of public loss methods, such as invoking squeezeOrExpandDimensions.  Also (if I'm navigating accurately through unfamiliar territory), this method doesn't compute a binaryCrossentropy since it depends on its caller to compute the mean at the end.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502818616", "createdAt": "2020-10-10T18:31:54Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MTM4Ng==", "bodyText": "This method does the grunt work for the binaryCrossentropy after the operands have had their shapes and types manipulated and after smoothing the labels. Perhaps a new name would remove some of the confusion.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502951386", "createdAt": "2020-10-11T18:45:33Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODYxNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MTg0NQ==", "bodyText": "Yes, I wonder if we want to call it something like binaryCrossentropyHelper?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503271845", "createdAt": "2020-10-12T12:47:30Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODYxNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDQ5Mw==", "bodyText": "OK, Changed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r504134493", "createdAt": "2020-10-13T17:30:08Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropy(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Compute binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropy(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxODYxNg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODk0MjM2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxODo0MzowNVrOHfhrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0OTowMlrOHyXmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTcwMA==", "bodyText": "Should we follow the Python in documenting that labels are expected to be 0 or 1?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502819700", "createdAt": "2020-10-10T18:43:05Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MDk5OQ==", "bodyText": "Yes, The Python CategporicalHinge class does not mention that at all, but it is mentioned in the categorical_hinge method.\nI have added an entry to the class JavaDoc and to the Losses.categoricalHinge method.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502840999", "createdAt": "2020-10-10T22:53:11Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTcwMA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyODgxOQ==", "bodyText": "Actually the values can be [-1, 0, 1]. [0,1] is converted to [-1,1]. I have added a value check to make sure the values are wholly contained in the allowed values set  [-1, 0, 1]. This will either throw TFInvalidArgumentException if run in Graph mode via a control dependency, and throw IllegalArgumentException if created in Eager mode with the call method.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512728819", "createdAt": "2020-10-27T14:15:48Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTcwMA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMTYxMA==", "bodyText": "Cool -- Resolved.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522201610", "createdAt": "2020-11-12T15:39:11Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTcwMA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3NzUwNA==", "bodyText": "What does it do if there are all three of [-1 0 1] present? That's probably an invalid input, does it throw?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522577504", "createdAt": "2020-11-13T02:49:02Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxOTcwMA=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTc2NjQ4OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzo1MDozOVrOHfnslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0ODoxOFrOHfpu3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxODI5Mg==", "bodyText": "Could just use dataType. I'll stop mentioning this.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502918292", "createdAt": "2020-10-11T13:50:39Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MTY0NA==", "bodyText": "Fixed, hopefully I have fixed them all.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502951644", "createdAt": "2020-10-11T18:48:18Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxODI5Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTc2NzczOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzo1MjowNlrOHfntNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODo0OTo0MVrOHfpvcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxODQ1Mg==", "bodyText": "I think \"percentage\" is extraneous here.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502918452", "createdAt": "2020-10-11T13:52:06Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MTc5Mw==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502951793", "createdAt": "2020-10-11T18:49:41Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,683 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.Tuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    Tuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic percentage error between labels and predictions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxODQ1Mg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgxNTQxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo0Mjo1NlrOHfoE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxOTowNjowM1rOHfp2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNDUyNQ==", "bodyText": "If the rank is unknown, then the size of the last dimension is guaranteed to be unknown, so isCompatible is guaranteed true. (But there may be some idiomatic reason for writing it this way, of which I am blissfully unaware.)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502924525", "createdAt": "2020-10-11T14:42:56Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1MzUxMQ==", "bodyText": "Correct, it should have been or not and.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502953511", "createdAt": "2020-10-11T19:06:03Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNDUyNQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzMjAxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1OTo1M1rOHfoNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzoxMlrOHgyKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjYwMQ==", "bodyText": "I'm pretty sure this logic is wrong. Perhaps either\n\ndocument preconditions of removeSqueezableDimensions and check exactly those,\nor (my leaning) just invoke removeSqueezableDimensions and make it however smart it needs to be.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502926601", "createdAt": "2020-10-11T14:59:53Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODMyOA==", "bodyText": "This logic is checking to see if both objects ranks are known (not Shape.unknown()). If both ranks are known, then it checks to see if the shapes are already in the right relationship or not. If not in the right relationship, then call removeSqueezableDimensions. It is basically an optimization to avoid doing the work in removeSqueezableDimensions if it does not need to be done.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r504138328", "createdAt": "2020-10-13T17:37:12Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjYwMQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzNTk2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowMzoyOFrOHfoPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowMzoyOFrOHfoPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzEwOQ==", "bodyText": "Specify dimension -1L. Also, I'd advocate doing our own check that the last dimension of sampleWeight has size 1. The Python documentation for tf.squeeze says that, if axes are specified, then \"it is an error to squeeze a dimension that is not 1.\"", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502927109", "createdAt": "2020-10-11T15:03:28Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg0MTU1OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowOToxOFrOHfoR1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowOToxOFrOHfoR1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzgzMA==", "bodyText": "Do we also have to go dynamic in the case where the ranks are both known but the size of the last weight dimension is unknown?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502927830", "createdAt": "2020-10-11T15:09:18Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg0NDQ2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxMTo1NVrOHfoTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxMTo1NVrOHfoTOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyODE4NA==", "bodyText": "What, if anything, do we want to do with the possibility that the last dimension of sampleWeight may not have size 1? (The Python documention for tf.squeeze says that if axes are provided, is an error to squeeze a dimension that is not 1.)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502928184", "createdAt": "2020-10-11T15:11:55Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg0NzIyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNTowMlrOHfoUlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNTowMlrOHfoUlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyODUzNQ==", "bodyText": "Need to specify squeezed axis -1L. But in that case:\nWhat, if anything, do we want to do with the possibility that the last dimension of predictions may not have size 1? (The Python documention for tf.squeeze says that if axes are provided, is an error to squeeze a dimension that is not 1.)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502928535", "createdAt": "2020-10-11T15:15:02Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg0NzkwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNToyNlrOHfoU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNToyNlrOHfoU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyODYwOQ==", "bodyText": "Same comments as for predictions above.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502928609", "createdAt": "2020-10-11T15:15:26Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg1MDIzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNzoxN1rOHfoWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxNzoxN1rOHfoWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyODg5OQ==", "bodyText": "Do we need to also go fully dynamic in the case where the size of a last dimension is unknown?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502928899", "createdAt": "2020-10-11T15:17:17Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg1MjQzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxOTo1NFrOHfoXLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToxOTo1NFrOHfoXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyOTE5Ng==", "bodyText": "We do have to verify tf.math.equal(tf.constant(expectedRankDiff+1), rankDiff), right?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502929196", "createdAt": "2020-10-11T15:19:54Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg1NDAwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToyMTowMVrOHfoX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToyMTowMVrOHfoX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyOTM4MQ==", "bodyText": "What, if anything, do we want to do with the possibility that the last dimension of predictions may not have size 1?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502929381", "createdAt": "2020-10-11T15:21:01Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg1NDI5OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToyMToyNFrOHfoYCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNToyMToyNFrOHfoYCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyOTQxOA==", "bodyText": "Same comments as above for predictions.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502929418", "createdAt": "2020-10-11T15:21:24Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTkyNDI2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjo0MDozNFrOHfo6XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjo0MDozNFrOHfo6XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzODIwNA==", "bodyText": "To use squeezeOrExpandDimensions here, we might want to generalize that method so it doesn't think in terms of predictions when here we instead pass loss.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502938204", "createdAt": "2020-10-11T16:40:34Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(\n+      Ops tf, Operand<T> loss, Reduction reduction, Operand<T> sampleWeight) {\n+    DataType<T> dataType = loss.asOutput().dataType();\n+    if (sampleWeight == null) {\n+      sampleWeight = tf.dtypes.cast(tf.constant(1), dataType);\n+    }\n+    Tuple<T> result = squeezeOrExpandDimensions(tf, null, loss, sampleWeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk0MTY3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzowMToxNVrOHfpCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzowMToxNVrOHfpCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MDM0Ng==", "bodyText": "This is another case where the combination of squeezeOrExpandDimensions and broadcasting yields a complex relationship between shapes of sampleWeight, loss, and the return value. In particular, due to broadcasting in mul, in the case of reduction == NONE and a surprising shape of sampleWeight, the return value may have a very different shape than loss.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502940346", "createdAt": "2020-10-11T17:01:15Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk1MTUyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzoxMjo0NFrOHfpHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxODozNVrOHg1zig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MTU2OQ==", "bodyText": "rank could be -1 at this point.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502941569", "createdAt": "2020-10-11T17:12:44Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(\n+      Ops tf, Operand<T> loss, Reduction reduction, Operand<T> sampleWeight) {\n+    DataType<T> dataType = loss.asOutput().dataType();\n+    if (sampleWeight == null) {\n+      sampleWeight = tf.dtypes.cast(tf.constant(1), dataType);\n+    }\n+    Tuple<T> result = squeezeOrExpandDimensions(tf, null, loss, sampleWeight);\n+    loss = result.getTarget();\n+    sampleWeight = result.getSampleWeights();\n+\n+    Operand<T> weighted_losses = tf.math.mul(loss, tf.dtypes.cast(sampleWeight, dataType));\n+    loss = reduceWeightedLoss(tf, weighted_losses, reduction);\n+    return tf.dtypes.cast(loss, dataType);\n+  }\n+\n+  /**\n+   * Reduces the weighted loss based on the reduction type\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param weightedLoss the weighted loss\n+   * @param reduction the type of reduction\n+   * @param <T> the data type of the weighted loss\n+   * @return the reduced weighted loss\n+   */\n+  private static <T extends TNumber> Operand<T> reduceWeightedLoss(\n+      Ops tf, Operand<T> weightedLoss, Reduction reduction) {\n+    Operand<T> loss;\n+    if (reduction == Reduction.NONE) {\n+      loss = weightedLoss;\n+    } else {\n+      loss =\n+          tf.reduceSum(weightedLoss, allAxis(tf, weightedLoss), ReduceSum.keepDims(Boolean.FALSE));\n+      if (reduction == Reduction.AUTO || reduction == Reduction.SUM_OVER_BATCH_SIZE) {\n+        loss = safeMean(tf, loss, weightedLoss.asOutput().shape().size());\n+      }\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes a safe mean of the losses.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param losses </code>Operand</code> whose elements contain individual loss measurements.\n+   * @param numElements The number of measurable elements in <code>losses</code>.\n+   * @param <T> the data type of the losses\n+   * @return A scalar representing the mean of <code>losses</code>. If <code>numElements</code> is\n+   *     zero, then zero is returned.\n+   */\n+  public static <T extends TNumber> Operand<T> safeMean(\n+      Ops tf, Operand<T> losses, long numElements) {\n+    Operand<T> totalLoss = tf.reduceSum(losses, allAxis(tf, losses));\n+    return tf.math.divNoNan(\n+        totalLoss, tf.dtypes.cast(tf.constant(numElements), losses.asOutput().dataType()));\n+  }\n+\n+  /**\n+   * Gets a Constant integer array representing all the axes of the operand.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param op the TensorFlow Ops\n+   * @param <T> the type of Operand\n+   * @return a Constant that represents all the axes of the operand.\n+   */\n+  public static <T extends TNumber> Operand<TInt32> allAxis(Ops tf, Operand<T> op) {\n+    int[] ranks = allAxis(op);\n+    return tf.constant(ranks);\n+  }\n+\n+  /**\n+   * Gets an integer array representing all the axes of the operand.\n+   *\n+   * @param op the Operand\n+   * @param <T> the type of Operand\n+   * @return the integer array representing all the axes of the operand.\n+   */\n+  private static <T extends TNumber> int[] allAxis(Operand<T> op) {\n+    int rank = op.asOutput().shape().numDimensions();\n+    int[] axes = new int[rank];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5ODAyNg==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r504198026", "createdAt": "2020-10-13T19:18:35Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(\n+      Ops tf, Operand<T> loss, Reduction reduction, Operand<T> sampleWeight) {\n+    DataType<T> dataType = loss.asOutput().dataType();\n+    if (sampleWeight == null) {\n+      sampleWeight = tf.dtypes.cast(tf.constant(1), dataType);\n+    }\n+    Tuple<T> result = squeezeOrExpandDimensions(tf, null, loss, sampleWeight);\n+    loss = result.getTarget();\n+    sampleWeight = result.getSampleWeights();\n+\n+    Operand<T> weighted_losses = tf.math.mul(loss, tf.dtypes.cast(sampleWeight, dataType));\n+    loss = reduceWeightedLoss(tf, weighted_losses, reduction);\n+    return tf.dtypes.cast(loss, dataType);\n+  }\n+\n+  /**\n+   * Reduces the weighted loss based on the reduction type\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param weightedLoss the weighted loss\n+   * @param reduction the type of reduction\n+   * @param <T> the data type of the weighted loss\n+   * @return the reduced weighted loss\n+   */\n+  private static <T extends TNumber> Operand<T> reduceWeightedLoss(\n+      Ops tf, Operand<T> weightedLoss, Reduction reduction) {\n+    Operand<T> loss;\n+    if (reduction == Reduction.NONE) {\n+      loss = weightedLoss;\n+    } else {\n+      loss =\n+          tf.reduceSum(weightedLoss, allAxis(tf, weightedLoss), ReduceSum.keepDims(Boolean.FALSE));\n+      if (reduction == Reduction.AUTO || reduction == Reduction.SUM_OVER_BATCH_SIZE) {\n+        loss = safeMean(tf, loss, weightedLoss.asOutput().shape().size());\n+      }\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes a safe mean of the losses.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param losses </code>Operand</code> whose elements contain individual loss measurements.\n+   * @param numElements The number of measurable elements in <code>losses</code>.\n+   * @param <T> the data type of the losses\n+   * @return A scalar representing the mean of <code>losses</code>. If <code>numElements</code> is\n+   *     zero, then zero is returned.\n+   */\n+  public static <T extends TNumber> Operand<T> safeMean(\n+      Ops tf, Operand<T> losses, long numElements) {\n+    Operand<T> totalLoss = tf.reduceSum(losses, allAxis(tf, losses));\n+    return tf.math.divNoNan(\n+        totalLoss, tf.dtypes.cast(tf.constant(numElements), losses.asOutput().dataType()));\n+  }\n+\n+  /**\n+   * Gets a Constant integer array representing all the axes of the operand.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param op the TensorFlow Ops\n+   * @param <T> the type of Operand\n+   * @return a Constant that represents all the axes of the operand.\n+   */\n+  public static <T extends TNumber> Operand<TInt32> allAxis(Ops tf, Operand<T> op) {\n+    int[] ranks = allAxis(op);\n+    return tf.constant(ranks);\n+  }\n+\n+  /**\n+   * Gets an integer array representing all the axes of the operand.\n+   *\n+   * @param op the Operand\n+   * @param <T> the type of Operand\n+   * @return the integer array representing all the axes of the operand.\n+   */\n+  private static <T extends TNumber> int[] allAxis(Operand<T> op) {\n+    int rank = op.asOutput().shape().numDimensions();\n+    int[] axes = new int[rank];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MTU2OQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk1Mjc3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzoxNDowNlrOHfpIGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxOTozNzoyMFrOHfqC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MTcyMQ==", "bodyText": "allAxes?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502941721", "createdAt": "2020-10-11T17:14:06Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(\n+      Ops tf, Operand<T> loss, Reduction reduction, Operand<T> sampleWeight) {\n+    DataType<T> dataType = loss.asOutput().dataType();\n+    if (sampleWeight == null) {\n+      sampleWeight = tf.dtypes.cast(tf.constant(1), dataType);\n+    }\n+    Tuple<T> result = squeezeOrExpandDimensions(tf, null, loss, sampleWeight);\n+    loss = result.getTarget();\n+    sampleWeight = result.getSampleWeights();\n+\n+    Operand<T> weighted_losses = tf.math.mul(loss, tf.dtypes.cast(sampleWeight, dataType));\n+    loss = reduceWeightedLoss(tf, weighted_losses, reduction);\n+    return tf.dtypes.cast(loss, dataType);\n+  }\n+\n+  /**\n+   * Reduces the weighted loss based on the reduction type\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param weightedLoss the weighted loss\n+   * @param reduction the type of reduction\n+   * @param <T> the data type of the weighted loss\n+   * @return the reduced weighted loss\n+   */\n+  private static <T extends TNumber> Operand<T> reduceWeightedLoss(\n+      Ops tf, Operand<T> weightedLoss, Reduction reduction) {\n+    Operand<T> loss;\n+    if (reduction == Reduction.NONE) {\n+      loss = weightedLoss;\n+    } else {\n+      loss =\n+          tf.reduceSum(weightedLoss, allAxis(tf, weightedLoss), ReduceSum.keepDims(Boolean.FALSE));\n+      if (reduction == Reduction.AUTO || reduction == Reduction.SUM_OVER_BATCH_SIZE) {\n+        loss = safeMean(tf, loss, weightedLoss.asOutput().shape().size());\n+      }\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes a safe mean of the losses.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param losses </code>Operand</code> whose elements contain individual loss measurements.\n+   * @param numElements The number of measurable elements in <code>losses</code>.\n+   * @param <T> the data type of the losses\n+   * @return A scalar representing the mean of <code>losses</code>. If <code>numElements</code> is\n+   *     zero, then zero is returned.\n+   */\n+  public static <T extends TNumber> Operand<T> safeMean(\n+      Ops tf, Operand<T> losses, long numElements) {\n+    Operand<T> totalLoss = tf.reduceSum(losses, allAxis(tf, losses));\n+    return tf.math.divNoNan(\n+        totalLoss, tf.dtypes.cast(tf.constant(numElements), losses.asOutput().dataType()));\n+  }\n+\n+  /**\n+   * Gets a Constant integer array representing all the axes of the operand.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param op the TensorFlow Ops\n+   * @param <T> the type of Operand\n+   * @return a Constant that represents all the axes of the operand.\n+   */\n+  public static <T extends TNumber> Operand<TInt32> allAxis(Ops tf, Operand<T> op) {\n+    int[] ranks = allAxis(op);\n+    return tf.constant(ranks);\n+  }\n+\n+  /**\n+   * Gets an integer array representing all the axes of the operand.\n+   *\n+   * @param op the Operand\n+   * @param <T> the type of Operand\n+   * @return the integer array representing all the axes of the operand.\n+   */\n+  private static <T extends TNumber> int[] allAxis(Operand<T> op) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1Njc1NQ==", "bodyText": "Changed name to allAxes", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502956755", "createdAt": "2020-10-11T19:37:20Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {\n+        sampleWeight = tf.squeeze(sampleWeight);\n+      } else if (predictionsRank - weightsRank == 1) {\n+        sampleWeight = tf.expandDims(sampleWeight, tf.constant(-1L));\n+      }\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+    // Use dynamic rank.\n+    Operand<TInt32> weightsRankTensor = tf.rank(sampleWeight);\n+    Operand<TInt32> rankDiff = tf.math.sub(weightsRankTensor, tf.rank(predictions));\n+    sampleWeight =\n+        tf.select(\n+            tf.math.equal(weightsRankTensor, tf.constant(0)),\n+            sampleWeight,\n+            maybeAdjustWeights(tf, sampleWeight, rankDiff));\n+    return new Tuple<>(labels, predictions, sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze or expand the sampleWeight based on the rank difference\n+   *\n+   * <p>If the rank difference is +1, squeeze the last dimension of sampleWeight, If the rank\n+   * difference is -1, expand the last dimension of sampleWeight. Otherwise, leave the shape of\n+   * sampleWeight as is.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeAdjustWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(1)),\n+        tf.squeeze(sampleWeight, Squeeze.axis(Collections.singletonList(-1L))),\n+        maybeExpandWeights(tf, sampleWeight, rankDiff));\n+  }\n+\n+  /**\n+   * Expand the last dimension of sampleWeight. if the rank difference is -1.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param sampleWeight the sample weights\n+   * @param rankDiff the difference in rank\n+   * @param <T> the data type for the Operands.\n+   * @return the adjusted sampleWeight\n+   */\n+  private static <T extends TNumber> Operand<T> maybeExpandWeights(\n+      Ops tf, Operand<T> sampleWeight, Operand<TInt32> rankDiff) {\n+    return tf.select(\n+        tf.math.equal(rankDiff, tf.constant(-1)),\n+        tf.expandDims(sampleWeight, tf.constant(-1)),\n+        sampleWeight);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return removeSqueezableDimensions(tf, labels, predictions, 0);\n+  }\n+\n+  /**\n+   * Squeeze last dim if ranks differ from expected by exactly 1.\n+   *\n+   * @param tf the TensorFlowOps\n+   * @param labels Label values, a `Tensor` whose dimensions match `predictions`.\n+   * @param predictions Predicted values, a `Tensor` of arbitrary dimensions.\n+   * @param expectedRankDiff Expected result of `rank(predictions) - rank(labels)`.\n+   * @return `labels` and `predictions`, possibly with last dim squeezed.\n+   */\n+  public static <T extends TNumber> Tuple<T> removeSqueezableDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, int expectedRankDiff) {\n+\n+    tf = tf.withSubScope(\"removeSqueezableDimensions\");\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && labelsRank != Shape.UNKNOWN_SIZE) {\n+      // Use static rank.\n+      int rankDiff = predictionsRank - labelsRank;\n+      if (rankDiff == expectedRankDiff + 1 && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+        predictions = tf.squeeze(predictions);\n+      } else if (rankDiff == expectedRankDiff - 1 && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+        labels = tf.squeeze(labels);\n+      }\n+      return new Tuple<>(labels, predictions);\n+    }\n+    // Use dynamic rank.\n+\n+    // TODO Operand<TInt32> rankDiff = tf.math.sub(tf.rank(predictions), tf.rank(labels));\n+    if (predictionsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(predictionsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation, but for now do the tf.squeeze\n+       * predictions = tf.select( tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ),\n+       * tf.squeeze(predictions, Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      predictions = tf.squeeze(predictions, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    if (labelsRank == Shape.UNKNOWN_SIZE && Shape.isCompatible(labelsShape.size(-1), 1)) {\n+      /*\n+       * TODO, if we ever get a select that does lazy evaluation labels = tf.select(\n+       * tf.math.equal(tf.constant(expectedRankDiff+1),rankDiff ), tf.squeeze(labels,\n+       * Squeeze.axis(Arrays.asList(-1L))), predictions ); *\n+       */\n+      labels = tf.squeeze(labels, Squeeze.axis(Collections.singletonList(-1L)));\n+    }\n+    return new Tuple<>(labels, predictions);\n+  }\n+\n+  /**\n+   * Computes the weighted loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param loss the unweighted loss\n+   * @param reduction the type of reduction\n+   * @param sampleWeight the sample weight, if null then this defaults to one.\n+   * @param <T> the data type of the loss\n+   * @return the weighted loss\n+   */\n+  public static <T extends TNumber> Operand<T> computeWeightedLoss(\n+      Ops tf, Operand<T> loss, Reduction reduction, Operand<T> sampleWeight) {\n+    DataType<T> dataType = loss.asOutput().dataType();\n+    if (sampleWeight == null) {\n+      sampleWeight = tf.dtypes.cast(tf.constant(1), dataType);\n+    }\n+    Tuple<T> result = squeezeOrExpandDimensions(tf, null, loss, sampleWeight);\n+    loss = result.getTarget();\n+    sampleWeight = result.getSampleWeights();\n+\n+    Operand<T> weighted_losses = tf.math.mul(loss, tf.dtypes.cast(sampleWeight, dataType));\n+    loss = reduceWeightedLoss(tf, weighted_losses, reduction);\n+    return tf.dtypes.cast(loss, dataType);\n+  }\n+\n+  /**\n+   * Reduces the weighted loss based on the reduction type\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param weightedLoss the weighted loss\n+   * @param reduction the type of reduction\n+   * @param <T> the data type of the weighted loss\n+   * @return the reduced weighted loss\n+   */\n+  private static <T extends TNumber> Operand<T> reduceWeightedLoss(\n+      Ops tf, Operand<T> weightedLoss, Reduction reduction) {\n+    Operand<T> loss;\n+    if (reduction == Reduction.NONE) {\n+      loss = weightedLoss;\n+    } else {\n+      loss =\n+          tf.reduceSum(weightedLoss, allAxis(tf, weightedLoss), ReduceSum.keepDims(Boolean.FALSE));\n+      if (reduction == Reduction.AUTO || reduction == Reduction.SUM_OVER_BATCH_SIZE) {\n+        loss = safeMean(tf, loss, weightedLoss.asOutput().shape().size());\n+      }\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes a safe mean of the losses.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param losses </code>Operand</code> whose elements contain individual loss measurements.\n+   * @param numElements The number of measurable elements in <code>losses</code>.\n+   * @param <T> the data type of the losses\n+   * @return A scalar representing the mean of <code>losses</code>. If <code>numElements</code> is\n+   *     zero, then zero is returned.\n+   */\n+  public static <T extends TNumber> Operand<T> safeMean(\n+      Ops tf, Operand<T> losses, long numElements) {\n+    Operand<T> totalLoss = tf.reduceSum(losses, allAxis(tf, losses));\n+    return tf.math.divNoNan(\n+        totalLoss, tf.dtypes.cast(tf.constant(numElements), losses.asOutput().dataType()));\n+  }\n+\n+  /**\n+   * Gets a Constant integer array representing all the axes of the operand.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param op the TensorFlow Ops\n+   * @param <T> the type of Operand\n+   * @return a Constant that represents all the axes of the operand.\n+   */\n+  public static <T extends TNumber> Operand<TInt32> allAxis(Ops tf, Operand<T> op) {\n+    int[] ranks = allAxis(op);\n+    return tf.constant(ranks);\n+  }\n+\n+  /**\n+   * Gets an integer array representing all the axes of the operand.\n+   *\n+   * @param op the Operand\n+   * @param <T> the type of Operand\n+   * @return the integer array representing all the axes of the operand.\n+   */\n+  private static <T extends TNumber> int[] allAxis(Operand<T> op) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MTcyMQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk2OTY3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzozMjo0MVrOHfpQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMTo1MlrOHf9y_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0Mzc5MQ==", "bodyText": "What should happen if weightsRank is UNKNOWN?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502943791", "createdAt": "2020-10-11T17:32:41Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1Njk5Nw==", "bodyText": "It falls through and executes the last part of the method after the // Use dynamic rank. comment.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502956997", "createdAt": "2020-10-11T19:40:04Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0Mzc5MQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MDM4Mw==", "bodyText": ":-) Oh yeah, that.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503280383", "createdAt": "2020-10-12T13:01:52Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0Mzc5MQ=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk3MjYxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzozNTo0NVrOHfpRhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToyMToxMlrOHg15pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDEzMg==", "bodyText": "Here we are working with the original predictionsRank, when we wanted to be working with the new rank.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502944132", "createdAt": "2020-10-11T17:35:45Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1NzgxNw==", "bodyText": "This matches the original Python code, but when you think about it, the predictions rank would never change from UNKNOWN to KNOWN and vice versa in a static context.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502957817", "createdAt": "2020-10-11T19:47:51Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDEzMg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NTc1NA==", "bodyText": "I was thinking perhaps predictions changed rank through our squeezing it to match labels earlier in the method. But I think there's a more pernicious problem. Here's an elided version of some of the method's code. Notice that we may squeeze predictions, but we only store the result in tuple. If we then also work with sampleWeight, we neither reference the squeezed version of predictions nor return it.\n    if (labels != null) {\n        . . . \n        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n          tuple = removeSqueezableDimensions(tf, labels, predictions);\n        }\n      } else { // use dynamic rank\n        tuple = removeSqueezableDimensions(tf, labels, predictions);\n      }\n    }\n    . . .\n    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n\n      if (weightsRank - predictionsRank == 1) {\n        sampleWeight = tf.squeeze(sampleWeight);\n        . . .\n      }\n      return new Tuple<>(labels, predictions, sampleWeight);\n    }", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503285754", "createdAt": "2020-10-12T13:11:06Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDEzMg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5OTU5MQ==", "bodyText": "Yes, we should probably fetch the labels and predictions from tuple first. I'll fix it.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r504199591", "createdAt": "2020-10-13T19:21:12Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions, Operand<T> sampleWeight) {\n+    Tuple<T> tuple = new Tuple<>(labels, predictions);\n+\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    long predictionsRank = predictionsShape.numDimensions();\n+\n+    if (labels != null) {\n+      Shape labelsShape = labels.asOutput().shape();\n+      long labelRank = labelsShape.numDimensions();\n+      if (labelRank != Shape.UNKNOWN_SIZE && predictionsRank != Shape.UNKNOWN_SIZE) {\n+        // Use static rank for `label` and `prediction`.\n+        if (predictionsRank - labelRank != 1 || predictionsShape.size(-1) == 1) {\n+          // label, prediction = confusion_matrix.remove_squeezable_dimensions(label, prediction)\n+          tuple = removeSqueezableDimensions(tf, labels, predictions);\n+        }\n+      } else { // use dynamic rank\n+        tuple = removeSqueezableDimensions(tf, labels, predictions);\n+      }\n+    }\n+    if (sampleWeight == null) {\n+      return tuple;\n+    }\n+    Shape weightsShape = sampleWeight.asOutput().shape();\n+    long weightsRank = weightsShape.numDimensions();\n+    if (weightsRank == 0) { // scalar\n+      return new Tuple<>(labels, predictions, sampleWeight);\n+    }\n+\n+    if (predictionsRank != Shape.UNKNOWN_SIZE && weightsRank != Shape.UNKNOWN_SIZE) {\n+\n+      if (weightsRank - predictionsRank == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDEzMg=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTk3MzcwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNzozNzoyNVrOHfpSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMjoyNFrOHf-K3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDI3Ng==", "bodyText": "This method has a myriad of complex cases, so I think it deserves its own direct unit test.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502944276", "createdAt": "2020-10-11T17:37:25Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk1ODUxNg==", "bodyText": "I could not find direct test cases for this method in Python. It's defined in tensorflow/tensorflow/python/ops/losses/utils.py. You want to take a stab at it?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r502958516", "createdAt": "2020-10-11T19:54:03Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDI3Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NjQ5NQ==", "bodyText": ":-) Totally. I want to do some work on #92 first, so I'll open an issue for myself.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r503286495", "createdAt": "2020-10-12T13:12:24Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+\n+public class LossesImpl {\n+\n+  /**\n+   * Squeeze or expand last dimension if needed with a sampleWeights of one.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of <code>predictions</code> or <code>labels</code> if their rank differs by 1 (using\n+   *       {@link #removeSqueezableDimensions}).\n+   *   <li>Squeezes or expands last dim of <code>sampleWeight` if its rank differs by 1 from the new\n+   *       rank of <code>predictions`. If <code>sampleWeight` is scalar, it is kept scalar./li>\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>. Each of them possibly has the last\n+   *     dimension squeezed, <code>sampleWeight</code> could be extended by one dimension. If <code>sampleWeight</code>\n+   *     is null, (prediction, label) is returned.\n+   */\n+  public static <T extends TNumber> Tuple<T> squeezeOrExpandDimensions(\n+      Ops tf, Operand<T> labels, Operand<T> predictions) {\n+    return squeezeOrExpandDimensions(tf, labels, predictions, null);\n+  }\n+\n+  /**\n+   * Squeeze or expand last dimension if needed.\n+   *\n+   * <ol type=\"1\">\n+   *   <li>Squeezes last dim of `predictions` or `labels` if their rank differs by 1 (using *\n+   *       `confusion_matrix.remove_squeezable_dimensions`). *\n+   *   <li>Squeezes or expands last dim of `sampleWeight` if its rank differs by 1 from the new *\n+   *       rank of `predictions`. If `sampleWeight` is scalar, it is kept scalar./li> *\n+   * </ol>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param predictions Predicted values, a <code>Operand</code> of arbitrary dimensions.\n+   * @param labels Optional label <code>Operand</code> whose dimensions match <code>prediction\n+   *     </code>.\n+   * @param sampleWeight Optional sample weight(s) <code>Operand</code> whose dimensions match<code>\n+   *     prediction</code>.\n+   * @return Tuple of <code>prediction</code>, <code>label</code> and <code>sampleWeight</code>.\n+   *     Each of them possibly has the last dimension squeezed, <code>sampleWeight</code> could be\n+   *     extended by one dimension. If <code>sampleWeight</code> is null, (prediction, label) is\n+   *     returned.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDI3Ng=="}, "originalCommit": {"oid": "17e96b5ab78ec7d4d87f24b0f8f97a54c3e9e882"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDE5MDc5OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo0NToxOFrOHny7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjowNTozNVrOHn87FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDkzNA==", "bodyText": "This javadoc can get out of date as it links to Reduction#AUTO rather than REDUCTION_DEFAULT. If REDUCTION_DEFAULT changed we'd need to update all the docs.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511490934", "createdAt": "2020-10-24T16:45:18Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and an axis of {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NDY3Nw==", "bodyText": "I fixed all instances across all classes  to use Loss#REDUCTION_DEFAULT  which is set to Reduction.AUTO in the Loss class.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511654677", "createdAt": "2020-10-25T22:05:35Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and an axis of {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDkzNA=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDE5Mzg3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo0OToxN1rOHny89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjoxNDowMFrOHn8-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTMxNg==", "bodyText": "Does labelSmoothing = 1.0 mean the true label distribution is set to 1/n? I'm not sure what \"squeezing the values towards 0.5\" means, because it would only be 0.5 in a binary problem.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511491316", "createdAt": "2020-10-24T16:49:17Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Reduction#AUTO}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NTYzNg==", "bodyText": "Actually this is the comment for BinaryCrossentropy. It should be:\nFloat in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\nconfidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\nvalue of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n\nI'll fix it.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511655636", "createdAt": "2020-10-25T22:14:00Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Reduction#AUTO}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Reduction#AUTO}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Reduction#AUTO}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTMxNg=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDE5NjA2OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo1MTo1NlrOHny9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTowNzoxOFrOHrTS1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTU4MQ==", "bodyText": "What happens if multiple classes are set to 1.0? Does it throw some exception, or compute a different function? If it's the former we should document that.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511491581", "createdAt": "2020-10-24T16:51:56Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.\n+ *\n+ * <p><code>loss = maximum(neg - pos + 1, 0)</code> where <code>neg=maximum((1-labels)*predictions)\n+ * </code> and <code>pos=sum(labels*predictions)</code>\n+ *\n+ * <p><code>labels</code> values are expected to be 0 or 1.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2NjkzMw==", "bodyText": "It doesn't throw an exception and the Python test case uses multiple values set to one. There is a doc discrepancy between the documentation for CategorialHinge and the method for categorical_hinge wrt to expecting the values to be either 0 and 1, in both PythonTF and standalone Keras.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515166933", "createdAt": "2020-10-30T15:07:18Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalHinge.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the categorical hinge loss between labels and predictions.\n+ *\n+ * <p><code>loss = maximum(neg - pos + 1, 0)</code> where <code>neg=maximum((1-labels)*predictions)\n+ * </code> and <code>pos=sum(labels*predictions)</code>\n+ *\n+ * <p><code>labels</code> values are expected to be 0 or 1.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTU4MQ=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDIwMDU5OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/LogCosh.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo1ODozOVrOHnzALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjoxOTo1M1rOHn9BlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjE0MA==", "bodyText": "Doc says KL when it should say logcosh.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511492140", "createdAt": "2020-10-24T16:58:39Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/LogCosh.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes Computes the logarithm of the hyperbolic cosine of the prediction error.\n+ *\n+ * <p><code>logcosh = log((exp(x) + exp(-x))/2)</code>, where <code>x</code> is the error <code>\n+ * predictions - y_true</code>.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{1.f, 1.f}, {0.f, 0.f}});\n+ *    LogCosh logcosh = new LogCosh(tf);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces 0.108\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.8f, 0.2f});\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions, sampleWeight);\n+ *    // produces 0.087f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    LogCosh logcosh = new LogCosh(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces 0.217f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    LogCosh logcosh = new LogCosh(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces [0.217f, 0f]\n+ * </pre>\n+ */\n+public class LogCosh extends Loss {\n+\n+  /**\n+   * Creates a LogCosh Loss using {@link Class#getSimpleName()} as the loss name and a Loss\n+   * Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public LogCosh(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a LogCosh Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public LogCosh(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a LogCosh Loss using {@link Class#getSimpleName()} as the loss name\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public LogCosh(Ops tf, Reduction reduction) {\n+    this(tf, null, reduction);\n+  }\n+\n+  /**\n+   * Creates a Kullback Leibler Divergence Loss", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1NjM0MA==", "bodyText": "Copy & paste error, I fixed it.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511656340", "createdAt": "2020-10-25T22:19:53Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/LogCosh.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes Computes the logarithm of the hyperbolic cosine of the prediction error.\n+ *\n+ * <p><code>logcosh = log((exp(x) + exp(-x))/2)</code>, where <code>x</code> is the error <code>\n+ * predictions - y_true</code>.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{1.f, 1.f}, {0.f, 0.f}});\n+ *    LogCosh logcosh = new LogCosh(tf);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces 0.108\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.8f, 0.2f});\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions, sampleWeight);\n+ *    // produces 0.087f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    LogCosh logcosh = new LogCosh(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces 0.217f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    LogCosh logcosh = new LogCosh(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = logcosh.call(labels, predictions);\n+ *    // produces [0.217f, 0f]\n+ * </pre>\n+ */\n+public class LogCosh extends Loss {\n+\n+  /**\n+   * Creates a LogCosh Loss using {@link Class#getSimpleName()} as the loss name and a Loss\n+   * Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public LogCosh(Ops tf) {\n+    this(tf, null, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a LogCosh Loss using a Loss Reduction of {@link Reduction#AUTO}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public LogCosh(Ops tf, String name) {\n+    this(tf, name, Reduction.AUTO);\n+  }\n+\n+  /**\n+   * Creates a LogCosh Loss using {@link Class#getSimpleName()} as the loss name\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public LogCosh(Ops tf, Reduction reduction) {\n+    this(tf, null, reduction);\n+  }\n+\n+  /**\n+   * Creates a Kullback Leibler Divergence Loss", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjE0MA=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDIxNzQyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzoyMDo1NlrOHnzISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMjozNDozM1rOHn9IPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDIxOQ==", "bodyText": "This mentions smoothing the labels towards 0.5, but I think it's really towards 1/n.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511494219", "createdAt": "2020-10-24T17:20:56Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY1ODA0Nw==", "bodyText": "Actually this documentation belongs to BinaryCrossentropy,\nHere is what it should be:\nFloat in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\nconfidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\nvalue of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n\nI'll fix it.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511658047", "createdAt": "2020-10-25T22:34:33Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDIxOQ=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDIyMTQzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzoyNjozN1rOHnzKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoyMzoxM1rOHog7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDcyMw==", "bodyText": "Is this properly backtracking? It looks like it's going to pull out the softmax output not the input.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511494723", "createdAt": "2020-10-24T17:26:37Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY2MDU2OQ==", "bodyText": "This was a TODO and the output() what just  a holder until I figured out how to get the inputs to the\nSoftMax operation. If you don't have a suggestion, maybe remove this logic for now.\nHere is the logic from Python.\n    # When softmax activation function is used for output operation, we\n    # use logits from the softmax function directly to compute loss in order\n    # to prevent collapsing zero when training.\n    # See b/117284466\n    assert len(output.op.inputs) == 1\n    output = output.op.inputs[0]\n    return nn.softmax_cross_entropy_with_logits_v2(\n        labels=target, logits=output, axis=axis)", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511660569", "createdAt": "2020-10-25T22:55:54Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDcyMw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NDYzOQ==", "bodyText": "I commented out this code and marked it as a TODO.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512244639", "createdAt": "2020-10-26T20:23:13Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDcyMw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDIzOTIxOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzo0OToyNlrOHnzSng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowODowMFrOHyYEKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Njg2Mg==", "bodyText": "The CosineSimilarity doesn't mention that the value can be positive, and doesn't seem to restrict the output of this function so it is non-positive.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511496862", "createdAt": "2020-10-24T17:49:26Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MTgyMQ==", "bodyText": "The JavaDoc on the class should have matched the JavaDoc on Losses.cosineSimilarity method which returns values between -1 and 1. I have fixed the JavaDoc on the class CosineSimilarity to match the method JavaDoc.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512251821", "createdAt": "2020-10-26T20:36:14Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Njg2Mg=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMDA4NQ==", "bodyText": "There is a discrepancy between the Python doc for CosineSimilarity  and the loss function cosine_similarity. Though the doc on CosineSimilarity indicates a value in the range of [-1 to  0], the actual method indicates a range of [-1 to  1].\nThere is nothing in the code between the two, that acts differently as CosineSimilarity just calls cosine_similarity.\nThe original Keras documentation on CosineSimilarity, agrees with the [-1  to  1] range. I am guessing the TensorFlow CosineSimilarity documentation is wrong.\nAnother weirdness creeps in in metrics.CosineSimilarity, which ends up calling another function called cosine_proximity. While the two different functions are in a similar category, they actually compute differently.\nWe'll address that issue in the metrics PR, as perhaps the metrics class should be renamed to CosineProximity.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512320085", "createdAt": "2020-10-26T23:02:41Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Njg2Mg=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1ODE2Nw==", "bodyText": "We should probably open an issue on the main TF repo flagging the docs issue, but that can wait.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515358167", "createdAt": "2020-10-30T20:24:48Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Njg2Mg=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NTEyOQ==", "bodyText": "This javadoc is better, but I think it should mention that this function is inverted from the regular cosine similarity, as that's 1 when the values are most similar and -1 when they point in opposite directions. It makes sense that it is inverted because then you can minimise it sensibly, but it is confusing if you're just browsing through.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522585129", "createdAt": "2020-11-13T03:08:00Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5Njg2Mg=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI1ODE4OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoxNDozMVrOHnzbhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoyMjo0N1rOHog6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTE0Mw==", "bodyText": "But it didn't extract the logits, so won't this perform the wrong calculation?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511499143", "createdAt": "2020-10-24T18:14:31Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MDkzNQ==", "bodyText": "Correct, I really need the inputs to the Softmax Operation. This is the same issue as mentioned before,\nbut I correctly marked these as TODO's", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511940935", "createdAt": "2020-10-26T13:01:19Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTE0Mw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MjQ2Nw==", "bodyText": "Yeah, but I think it would be best to just remove all this and leave the TODO comment in, rather than half put it in and have it break in the common case.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512072467", "createdAt": "2020-10-26T15:56:09Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTE0Mw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NDQzMA==", "bodyText": "I commented out this code and marked it as a TODO.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512244430", "createdAt": "2020-10-26T20:22:47Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTE0Mw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 507}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI2MDMzOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoxNzozNFrOHnzclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMzowMDoyNlrOHn9UIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTQxMw==", "bodyText": "The doc is wrong here, it scales towards 1/n.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511499413", "createdAt": "2020-10-24T18:17:34Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+    }\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = tf.dtypes.cast(labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank-1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+  // private methods\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(\n+      Ops tf, Operand<T> labels, float labelSmoothing) {\n+    DataType<T> dataType = labels.asOutput().dataType();\n+    Operand<T> oneMinusSmoothing = tf.dtypes.cast(tf.constant(1.f - labelSmoothing), dataType);\n+    Operand<T> halfSmoothing = tf.dtypes.cast(tf.constant(0.5F * labelSmoothing), dataType);\n+    return tf.math.add(tf.math.mul(labels, oneMinusSmoothing), halfSmoothing);\n+  }\n+\n+  /**\n+   * Smooths categorical labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 609}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY2MTA4OA==", "bodyText": "Fixed the doc to:\n* @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n  *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n  *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511661088", "createdAt": "2020-10-25T23:00:26Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,685 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Variable;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Sigmoid;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.op.nn.Softmax;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = tf.dtypes.cast(labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels,dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), tf.dtypes.cast(tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        tf.dtypes.cast(tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits) {\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+    }\n+\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work, cannot walk back, work around is only go back 1.\n+      // output = backtrackIdentity(output);\n+      if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+        if (output.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        output = output.op().output(0);\n+        return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      }\n+    }\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When &gt; 0, compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing correspond to\n+   *     heavier smoothing.\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> ops = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets,  values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = tf.dtypes.cast(tf.constant(delta), dataType);\n+    Operand<T> point5 = tf.dtypes.cast(tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = tf.dtypes.cast(tf.constant(-2), dataType);\n+    Operand<T> two = tf.dtypes.cast(tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = tf.dtypes.cast(tf.constant(EPSILON), dataType);\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+    }\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = tf.dtypes.cast(labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank-1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = tf.dtypes.cast(labels, dataType);\n+    LossTuple<T> lossTuple = LossesImpl.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = tf.dtypes.cast(tf.constant(1), dataType);\n+    Operand<T> zero = tf.dtypes.cast(tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+  // private methods\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(\n+      Ops tf, Operand<T> labels, float labelSmoothing) {\n+    DataType<T> dataType = labels.asOutput().dataType();\n+    Operand<T> oneMinusSmoothing = tf.dtypes.cast(tf.constant(1.f - labelSmoothing), dataType);\n+    Operand<T> halfSmoothing = tf.dtypes.cast(tf.constant(0.5F * labelSmoothing), dataType);\n+    return tf.math.add(tf.math.mul(labels, oneMinusSmoothing), halfSmoothing);\n+  }\n+\n+  /**\n+   * Smooths categorical labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTQxMw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 609}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI2NDY3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/SparseCategoricalCrossentropy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyMzo0OVrOHnzesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQyMzowMDozN1rOHn9UOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTk1NA==", "bodyText": "This links to Reduction#AUTO instead of REDUCTION_DEFAULT.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511499954", "createdAt": "2020-10-24T18:23:49Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/SparseCategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. The labels are\n+ * expected to be provided as integers. If you want to provide labels using <code>one-hot</code>\n+ * representation, please use {@link CategoricalCrossentropy} loss. There should be <code># classes\n+ * </code> floating point values per feature for <code>predictions</code> and a single floating\n+ * point value per feature for <code>label</code>.\n+ *\n+ * <p>In the snippet below, there is a single floating point value per example for <code>labels\n+ * </code> and <code># classes</code> floating pointing values per example for <code>predictions\n+ * </code>. The shape of <code>labels</code> is <code>[batch_size]</code> and the shape of <code>\n+ * predictions</code> is <code>[batch_size, num_classes]</code>.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[] {1, 2});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces 1.177f\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class SparseCategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final int AXIS_DEFAULT = -1;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final int axis;\n+\n+  /**\n+   * Creates a SparseCategoricalCrossentropy loss using {@link Class#getSimpleName()} as the loss\n+   * name, a Loss Reduction of {@link Reduction#AUTO}, and fromLogits={@link #FROM_LOGITS_DEFAULT}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY2MTExNQ==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511661115", "createdAt": "2020-10-25T23:00:37Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/SparseCategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+/**\n+ * Computes the crossentropy loss between labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. The labels are\n+ * expected to be provided as integers. If you want to provide labels using <code>one-hot</code>\n+ * representation, please use {@link CategoricalCrossentropy} loss. There should be <code># classes\n+ * </code> floating point values per feature for <code>predictions</code> and a single floating\n+ * point value per feature for <code>label</code>.\n+ *\n+ * <p>In the snippet below, there is a single floating point value per example for <code>labels\n+ * </code> and <code># classes</code> floating pointing values per example for <code>predictions\n+ * </code>. The shape of <code>labels</code> is <code>[batch_size]</code> and the shape of <code>\n+ * predictions</code> is <code>[batch_size, num_classes]</code>.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[] {1, 2});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces 1.177f\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    SparseCategoricalCrossentropy sparseCCE = new SparseCategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = sparseCCE.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class SparseCategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final int AXIS_DEFAULT = -1;\n+  public static final Reduction REDUCTION_DEFAULT = Reduction.AUTO;\n+\n+  private final boolean fromLogits;\n+  private final int axis;\n+\n+  /**\n+   * Creates a SparseCategoricalCrossentropy loss using {@link Class#getSimpleName()} as the loss\n+   * name, a Loss Reduction of {@link Reduction#AUTO}, and fromLogits={@link #FROM_LOGITS_DEFAULT}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTk1NA=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI3MTczOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/test/java/org/tensorflow/framework/losses/CategoricalCrossentropyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODozMjo1NVrOHnzh-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoyMjowNlrOHog5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMDc5Mw==", "bodyText": "The last f is in caps. Is that intentional? It's not consistent throughout the file if so.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r511500793", "createdAt": "2020-10-24T18:32:55Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/test/java/org/tensorflow/framework/losses/CategoricalCrossentropyTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.junit.jupiter.api.Test;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.TestSession;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+\n+public class CategoricalCrossentropyTest {\n+\n+  private final TestSession.Mode[] tfModes = {TestSession.Mode.EAGER, TestSession.Mode.GRAPH};\n+\n+  /** Test of call method, of class CategoricalCrossentropy. */\n+  @Test\n+  public void testAllCorrectUnweighted() {\n+    for (TestSession.Mode tfMode : tfModes)\n+      try (TestSession testSession = TestSession.createTestSession(tfMode)) {\n+        Ops tf = testSession.getTF();\n+\n+        long[] trueArray = {\n+          1L, 0L, 0L,\n+          0L, 1L, 0L,\n+          0L, 0L, 1L\n+        };\n+        float[] predArray = {\n+          1.f, 0.f, 0.f,\n+          0.f, 1.f, 0.f,\n+          0.f, 0.f, 1.F", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NDA5OA==", "bodyText": "Changed all to F", "url": "https://github.com/tensorflow/java/pull/129#discussion_r512244098", "createdAt": "2020-10-26T20:22:06Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/test/java/org/tensorflow/framework/losses/CategoricalCrossentropyTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.junit.jupiter.api.Test;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.utils.TestSession;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+\n+public class CategoricalCrossentropyTest {\n+\n+  private final TestSession.Mode[] tfModes = {TestSession.Mode.EAGER, TestSession.Mode.GRAPH};\n+\n+  /** Test of call method, of class CategoricalCrossentropy. */\n+  @Test\n+  public void testAllCorrectUnweighted() {\n+    for (TestSession.Mode tfMode : tfModes)\n+      try (TestSession testSession = TestSession.createTestSession(tfMode)) {\n+        Ops tf = testSession.getTF();\n+\n+        long[] trueArray = {\n+          1L, 0L, 0L,\n+          0L, 1L, 0L,\n+          0L, 0L, 1L\n+        };\n+        float[] predArray = {\n+          1.f, 0.f, 0.f,\n+          0.f, 1.f, 0.f,\n+          0.f, 0.f, 1.F", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMDc5Mw=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg0MTg4OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NDowMlrOHqEBIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTo0Nzo1OFrOHrhXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODA2Nw==", "bodyText": "What is the reason for having a seperate Losses class that implements all individual loss algorithms instead of implementing them directly in their respective class?\nI guess is to offer the choice to the user to choose an object-oriented API or a functional one? Then if we offer this, should we do the same for all other concepts in the framework?\nI wondering if we shouldn't take that decision for our users and only present a single API to accomplish a given task, for simplicity and consistency. I personally have a preference for the OO approach.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r513868067", "createdAt": "2020-10-29T01:44:02Z", "author": {"login": "karllessard"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,711 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNTUyMw==", "bodyText": "Metrics class will have to call these methods directly. The handling of the reduction is different in metrics from losses.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515105523", "createdAt": "2020-10-30T13:42:01Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,711 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODA2Nw=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MzI5OQ==", "bodyText": "Also, the methods in Losses, do not apply a reduction. Loss and Metric handle the reduction differently, so the raw loss needs to be fetched first. If we didn't have the loss methods , the the metric classes would have to duplicate that functionality. Also, I can only assume that Keras has this method split from the class for some reason. Of course, we could move the static method to its corresponding class and leave it static so that it can be still invoked independent of any reduction logic.\nIt is worth noting, that not all Metrics are based on Loss algorithms, such as AUC (Area under the curve).\nAlso, there is one class,\nCosineSimilarity, that uses a different algorithm between the Loss class (uses cosineSimilarity) as opposed to the corresponding Metric class (uses cosineProximity). While these two methods are in the same category, they do not compute the exact same result. I tried to reasearch why there is a difference, maybe @Craigacp can shed some light on this. One of the questions in Metrics is should the metric class be renamed to CosineProximity.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515383299", "createdAt": "2020-10-30T21:07:08Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,711 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODA2Nw=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzUwMg==", "bodyText": "That's because the losses version of cosine similarity isn't actually cosine similarity, it's the negative of it. Because the cosine of 0 is 1, but here when the two vectors are pointing in the same direction it emits -1. The metrics one actually computes cosine similarity.\nI assume it's to make the minimize function work consistently.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515397502", "createdAt": "2020-10-30T21:47:58Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,711 @@\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesImpl;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+/** Built-in loss functions. */\n+public class Losses {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODA2Nw=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg1OTY0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1MToyMlrOHqEMYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDozMTozMVrOHw9xLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDk0Ng==", "bodyText": "For me, a *Impl should be the implementation of an interface, this one looks more like a LossesHelper with all its static methods (and the class should probably be final).\nI did not went through the whole thing but it looks like these helpers could also be moved directly to Loss as protected methods?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r513870946", "createdAt": "2020-10-29T01:51:22Z", "author": {"login": "karllessard"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,402 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.AssertThat;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.SetDiff1d;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+/**\n+ * These are helper methods for Losses and will be module private when Java modularity is applied to\n+ * TensorFlow Java. These methods should not be used outside of the Loss package.\n+ */\n+public class LossesImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwOTQxNg==", "bodyText": "The split really comes for module visibility. Losses should be publicly accessible, while LossesImpl should be module private. Some LossesImpl methods may be used by metrics. Whether we call it LossesImpl of LossesHelper is a matter of preference. The current methods in LossesImpl should not be restricted to Loss classes as metrics classes may also make use of them, therefore protected is not the right semantic, .", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515109416", "createdAt": "2020-10-30T13:48:12Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,402 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.AssertThat;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.SetDiff1d;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+/**\n+ * These are helper methods for Losses and will be module private when Java modularity is applied to\n+ * TensorFlow Java. These methods should not be used outside of the Loss package.\n+ */\n+public class LossesImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDk0Ng=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNDI0MQ==", "bodyText": "It feels uncomfortable to me that we plan to use the LossesImpl methods from other parts of our framework while restricting them from public use. When a system's built-ins rely on privileged capabilities that aren't available to 3rd-party code, I think it is commonly a big problem for the system's extensibility. In this case, I do see room to argue that these methods aren't \"capabilities\", but are just \"implementation\" which can safely be hidden. But given that it is important to us to reuse them for our own metrics, I lean toward thinking of them as capabilities that we should expose.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r515224241", "createdAt": "2020-10-30T16:30:39Z", "author": {"login": "deansher"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,402 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.AssertThat;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.SetDiff1d;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+/**\n+ * These are helper methods for Losses and will be module private when Java modularity is applied to\n+ * TensorFlow Java. These methods should not be used outside of the Loss package.\n+ */\n+public class LossesImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDk0Ng=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDA3Mg==", "bodyText": "There is a tight symmetry between Losses and Metrics as many (but not all) metrics rely on the methods in Losses.\nDon't think other packages will have this close of a relationship.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r520014072", "createdAt": "2020-11-09T18:06:41Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,402 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.AssertThat;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.SetDiff1d;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+/**\n+ * These are helper methods for Losses and will be module private when Java modularity is applied to\n+ * TensorFlow Java. These methods should not be used outside of the Loss package.\n+ */\n+public class LossesImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDk0Ng=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNTcxMQ==", "bodyText": "Is there a potential use case justifying exposing these to the public? Seeing as they are utilities needed to implement Losses/Metrics.\nAgree with a rename to LossesHelper or LossesUtility to differentiate from interface implementation, however.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521105711", "createdAt": "2020-11-11T04:31:31Z", "author": {"login": "KartikChugh"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,402 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.AssertThat;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.SetDiff1d;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+/**\n+ * These are helper methods for Losses and will be module private when Java modularity is applied to\n+ * TensorFlow Java. These methods should not be used outside of the Loss package.\n+ */\n+public class LossesImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDk0Ng=="}, "originalCommit": {"oid": "951443b6cba9e42911ca2cfae05bee920d5ff229"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgzNTE3OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDozMjowMlrOHw9xxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODoyNTo0NVrOHxZMxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNTg2MA==", "bodyText": "Class should have Javadoc description, no?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521105860", "createdAt": "2020-11-11T04:32:02Z", "author": {"login": "KartikChugh"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwODAxMg==", "bodyText": "I have changed the class name to LossesHelper.\nI don't understand your comment on Class JavaDoc. This is what I have in my copy.\n/**\n * These are helper methods for Losses and Metrics and will be module private when Java modularity is applied to\n * TensorFlow Java. These methods should not be used outside of the losses and metrics packages.\n */\n\nThe basic comment was put in a while a ago, and I just updated it to mention metrics.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521508012", "createdAt": "2020-11-11T17:08:52Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNTg2MA=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTE0Mg==", "bodyText": "Rendering issue I think. Looks good, thanks.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521555142", "createdAt": "2020-11-11T18:25:45Z", "author": {"login": "KartikChugh"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/impl/LossesImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.tensorflow.framework.losses.impl;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.Reduction;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.core.Squeeze;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+\n+import java.util.Collections;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNTg2MA=="}, "originalCommit": {"oid": "928ef066f8d250b4ae41799eea40ab03fe3ecd23"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTI0NTc0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyMDowMVrOHxnzdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyNzo0NVrOHyAGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5NDQyMw==", "bodyText": "Can we remove this commented-out documentation?", "url": "https://github.com/tensorflow/java/pull/129#discussion_r521794423", "createdAt": "2020-11-12T03:20:01Z", "author": {"login": "karllessard"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,728 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+  // private methods/**\n+  //   * Calculates the loss\n+  //   *\n+  //   * @param labels the truth values or labels\n+  //   * @param predictions the predictions\n+  //   * @param sampleWeights Optional SampleWeights acts as a coefficient for the loss. If a scalar\n+  // is\n+  //   *     provided, then the loss is simply scaled by the given value. If SampleWeights is a\n+  // tensor\n+  //   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by\n+  // the\n+  //   *     corresponding element in the SampleWeights vector. If the shape of SampleWeights is\n+  //   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element\n+  // of\n+  //   *     predictions is scaled by the corresponding value of SampleWeights. (Note on dN-1: all\n+  // loss\n+  //   *     functions reduce by 1 dimension, usually axis=-1.)\n+  //   * @param <T> The data type of the predictions, sampleWeights and loss.\n+  //   * @param <U> The data type of the labels.\n+  //   * @return the loss\n+  //   *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf49fe3203eb5f810ea09e0322fd36b6945856c"}, "originalPosition": 624}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5MjQyOQ==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522192429", "createdAt": "2020-11-12T15:27:45Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,728 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+  // private methods/**\n+  //   * Calculates the loss\n+  //   *\n+  //   * @param labels the truth values or labels\n+  //   * @param predictions the predictions\n+  //   * @param sampleWeights Optional SampleWeights acts as a coefficient for the loss. If a scalar\n+  // is\n+  //   *     provided, then the loss is simply scaled by the given value. If SampleWeights is a\n+  // tensor\n+  //   *     of size [batch_size], then the total loss for each sample of the batch is rescaled by\n+  // the\n+  //   *     corresponding element in the SampleWeights vector. If the shape of SampleWeights is\n+  //   *     [batch_size, d0, .. dN-1] (or can be broadcasted to this shape), then each loss element\n+  // of\n+  //   *     predictions is scaled by the corresponding value of SampleWeights. (Note on dN-1: all\n+  // loss\n+  //   *     functions reduce by 1 dimension, usually axis=-1.)\n+  //   * @param <T> The data type of the predictions, sampleWeights and loss.\n+  //   * @param <U> The data type of the labels.\n+  //   * @return the loss\n+  //   *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5NDQyMw=="}, "originalCommit": {"oid": "0bf49fe3203eb5f810ea09e0322fd36b6945856c"}, "originalPosition": 624}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI1MTkyOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/CastHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo1NToxMlrOHyXs9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTo0NTowNlrOHyzebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3OTE5MA==", "bodyText": "We should open an issue to track inserting these cast checks into the optimizers for uniformity.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522579190", "createdAt": "2020-11-13T02:55:12Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/CastHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TType;\n+\n+/** A helper class for casting an Operand */\n+public class CastHelper {\n+\n+  /**\n+   * Casts an operand to the desired type.\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param value the value to be cast\n+   * @param requiredType the required data type\n+   * @param <T> the required data type\n+   * @param <U> the original data type of the value\n+   * @return the value cast to the required data type.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T extends TType, U extends TType> Operand<T> cast(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NjkxMg==", "bodyText": "I could do it in the #106  Learning Rate PR if that works.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522976912", "createdAt": "2020-11-13T14:17:00Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/CastHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TType;\n+\n+/** A helper class for casting an Operand */\n+public class CastHelper {\n+\n+  /**\n+   * Casts an operand to the desired type.\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param value the value to be cast\n+   * @param requiredType the required data type\n+   * @param <T> the required data type\n+   * @param <U> the original data type of the value\n+   * @return the value cast to the required data type.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T extends TType, U extends TType> Operand<T> cast(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3OTE5MA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNDIyMg==", "bodyText": "No, let's not hold anything up for it, it's just something to clean up later.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r523034222", "createdAt": "2020-11-13T15:45:06Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/utils/CastHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.utils;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TType;\n+\n+/** A helper class for casting an Operand */\n+public class CastHelper {\n+\n+  /**\n+   * Casts an operand to the desired type.\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param value the value to be cast\n+   * @param requiredType the required data type\n+   * @param <T> the required data type\n+   * @param <U> the original data type of the value\n+   * @return the value cast to the required data type.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T extends TType, U extends TType> Operand<T> cast(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3OTE5MA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI2MzI0OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMToyOFrOHyXzxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoxODowNFrOHywA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MDkzNA==", "bodyText": "label_smoothing -> labelSmoothing, here and elsewhere in this file.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522580934", "createdAt": "2020-11-13T03:01:28Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link Loss#REDUCTION_DEFAULT}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public BinaryCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, and {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT}, a reduction of {@link\n+   * Loss#REDUCTION_DEFAULT},\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT} a\n+   * reduction of {@link Loss#REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * and a reduction of {@link Loss#REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NzUxNQ==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522977515", "createdAt": "2020-11-13T14:18:04Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/BinaryCrossentropy.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the cross-entropy loss between true labels and predicted labels.\n+ *\n+ * <p>Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For\n+ * each example, there should be a single floating-point value per prediction.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0.f, 1.f}, {0.f, 0.f}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.6f, 0.4f}, {0.4f, 0.6f}});\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 0.815\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {1.f, 0.f});\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.458f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces 1.630f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    BinaryCrossentropy bce = new BinaryCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = bce.call(labels, predictions);\n+ *    // produces [0.916f, 0.714f]\n+ * </pre>\n+ */\n+public class BinaryCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+\n+  /**\n+   * Creates a Binary Crossentropy Loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing and a\n+   * Loss Reduction of {@link Loss#REDUCTION_DEFAULT}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public BinaryCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using {@link Class#getSimpleName()} as the loss name, {@link\n+   * #FROM_LOGITS_DEFAULT} for fromLogits, and {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to the loss.\n+   */\n+  public BinaryCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT}, a reduction of {@link\n+   * Loss#REDUCTION_DEFAULT},\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using labelSmoothing of {@link #LABEL_SMOOTHING_DEFAULT} a\n+   * reduction of {@link Loss#REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of the loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public BinaryCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT);\n+  }\n+\n+  /**\n+   * Creates a Binary Crossentropy loss using using {@link Class#getSimpleName()} as the loss name,\n+   * and a reduction of {@link Loss#REDUCTION_DEFAULT}.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range, [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of label_smoothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MDkzNA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI2NjQwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMzoyMFrOHyX1mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyOTowN1rOHywcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQwMA==", "bodyText": "This one's still got the doc from BinaryCrossEntropy wrt label_smoothing. And it's snake_case.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522581400", "createdAt": "2020-11-13T03:03:20Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NDUyOA==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522984528", "createdAt": "2020-11-13T14:29:07Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQwMA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI2NjYwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMzozMFrOHyX1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyOTozN1rOHywdhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQyOA==", "bodyText": "Incorrect doc.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522581428", "createdAt": "2020-11-13T03:03:30Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NDgzNg==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522984836", "createdAt": "2020-11-13T14:29:37Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQyOA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI2Njk1OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzowMzozOVrOHyX13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMToyMVrOHywiIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQ3MA==", "bodyText": "Incorrect doc.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522581470", "createdAt": "2020-11-13T03:03:39Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    this(tf, null, fromLogits, labelSmoothing, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjAxNg==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522986016", "createdAt": "2020-11-13T14:31:21Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TNumber;\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/**\n+ * Computes the crossentropy loss between the labels and predictions.\n+ *\n+ * <p>Use this crossentropy loss function when there are two or more label classes. We expect labels\n+ * to be provided in a one_hot representation. If you want to provide labels as integers, please use\n+ * {@link SparseCategoricalCrossentropy} loss. There should be <code># classes</code> floating point\n+ * values per feature.\n+ *\n+ * <p>Standalone usage:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; labels =\n+ *        tf.constant(new float[][] {{0, 1, 0}, {0, 0, 1}});\n+ *    Operand&lt;TFloat32&gt; predictions =\n+ *        tf.constant(new float[][] {{0.05f, 0.95f, 0f}, {0.1f, 0.8f, 0.1f}});\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 1.177\n+ * </pre>\n+ *\n+ * <p>Calling with sample weight:\n+ *\n+ * <pre>\n+ *    Operand&lt;TFloat32&gt; sampleWeight = tf.constant(new float[] {0.3f, 0.7f});\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions, sampleWeight);\n+ *    // produces 0.814f\n+ * </pre>\n+ *\n+ * <p>Using <code>SUM</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce = new CategoricalCrossentropy(tf, Reduction.SUM);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces 2.354f\n+ * </pre>\n+ *\n+ * <p>Using <code>NONE</code> reduction type:\n+ *\n+ * <pre>\n+ *    CategoricalCrossentropy cce =\n+ *        new CategoricalCrossentropy(tf, Reduction.NONE);\n+ *    Operand&lt;TFloat32&gt; result = cce.call(labels, predictions);\n+ *    // produces [0.0513f, 2.303f]\n+ * </pre>\n+ */\n+public class CategoricalCrossentropy extends Loss {\n+  public static final boolean FROM_LOGITS_DEFAULT = false;\n+  public static final float LABEL_SMOOTHING_DEFAULT = 0.0f;\n+  public static final int DEFAULT_AXIS = -1;\n+\n+  private final boolean fromLogits;\n+  private final float labelSmoothing;\n+  private final int axis;\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and an axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   */\n+  public CategoricalCrossentropy(Ops tf) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #FROM_LOGITS_DEFAULT} for fromLogits,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, Reduction reduction) {\n+    this(tf, null, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss {@link #FROM_LOGITS_DEFAULT} for fromLogits, {@link\n+   * #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, Reduction reduction) {\n+    this(tf, name, FROM_LOGITS_DEFAULT, LABEL_SMOOTHING_DEFAULT, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * {@link #LABEL_SMOOTHING_DEFAULT} for labelSmoothing, a Loss Reduction of {@link\n+   * Loss#REDUCTION_DEFAULT}, and an axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits) {\n+    this(tf, null, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link #LABEL_SMOOTHING_DEFAULT} for\n+   * labelSmoothing, a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link\n+   * #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits) {\n+    this(tf, name, fromLogits, LABEL_SMOOTHING_DEFAULT, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name,\n+   * a Loss Reduction of {@link Loss#REDUCTION_DEFAULT}, and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   */\n+  public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing) {\n+    this(tf, null, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using a Loss Reduction of {@link Loss#REDUCTION_DEFAULT},\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   */\n+  public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float labelSmoothing) {\n+    this(tf, name, fromLogits, labelSmoothing, REDUCTION_DEFAULT, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss using {@link Class#getSimpleName()} as the loss name\n+   * and a channel axis of {@link #DEFAULT_AXIS}\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n+   *     heavier smoothing.\n+   * @param reduction Type of Reduction to apply to loss.\n+   */\n+  public CategoricalCrossentropy(\n+      Ops tf, boolean fromLogits, float labelSmoothing, Reduction reduction) {\n+    this(tf, null, fromLogits, labelSmoothing, reduction, DEFAULT_AXIS);\n+  }\n+\n+  /**\n+   * Creates a categorical cross entropy Loss\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param name the name of this loss\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n+   *     loss between the predicted labels and a smoothed version of the true labels, where the\n+   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MTQ3MA=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI5NzMwOnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzoxMTowOFrOHyYJvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo1MToxMVrOHyxT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjU1OQ==", "bodyText": "I think this would be better called smoothBinaryLabels as it's not specific to the binary cross entropy as far as I can tell. But it's a private method so it's not too much of an issue.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522586559", "createdAt": "2020-11-13T03:11:08Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,707 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 617}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5ODc4Mg==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522998782", "createdAt": "2020-11-13T14:51:11Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,707 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjU1OQ=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 617}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjI5Nzk1OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzoxMToyNlrOHyYKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo1MTozM1rOHyxVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjY0Nw==", "bodyText": "Similar comment to above, but smoothCategoricalLabels. Also I think the doc should explicitly state that it's smoothing the labels towards 1/n where n is the number of classes.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522586647", "createdAt": "2020-11-13T03:11:26Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,707 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(\n+      Ops tf, Operand<T> labels, float labelSmoothing) {\n+    DataType<T> dataType = labels.asOutput().dataType();\n+    Operand<T> oneMinusSmoothing = cast(tf,  tf.constant(1.f - labelSmoothing), dataType);\n+    Operand<T> halfSmoothing = cast(tf,  tf.constant(0.5F * labelSmoothing), dataType);\n+    return tf.math.add(tf.math.mul(labels, oneMinusSmoothing), halfSmoothing);\n+  }\n+\n+  /**\n+   * Smooths categorical labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param <T> the data type of the labels\n+   * @return the smoothed categorical labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsCatX(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 636}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5OTA2MA==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r522999060", "createdAt": "2020-11-13T14:51:33Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Losses.java", "diffHunk": "@@ -0,0 +1,707 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.tensorflow.framework.losses;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.framework.losses.impl.LossTuple;\n+import org.tensorflow.framework.losses.impl.LossesHelper;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Ops;\n+import org.tensorflow.op.core.ReduceAll;\n+import org.tensorflow.op.core.ReduceMax;\n+import org.tensorflow.op.core.ReduceSum;\n+import org.tensorflow.op.math.Mean;\n+import org.tensorflow.op.math.Softplus;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.family.TNumber;\n+\n+import static org.tensorflow.framework.utils.CastHelper.cast;\n+\n+/** Built-in loss functions. */\n+public class Losses {\n+\n+  /** Default Fuzz factor. */\n+  public static final float EPSILON = 1e-7f;\n+\n+  /**\n+   * Calculates the mean absolute error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(abs(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsoluteError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(\n+        tf.math.abs(tf.math.sub(tLabels, predictions)), tf.constant(-1), Mean.keepDims(false));\n+  }\n+\n+  /**\n+   * Computes the mean squared error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(labels - predictions))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    Operand<T> tLabels = cast(tf,  labels, predictions.asOutput().dataType());\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    return tf.math.mean(tf.math.squaredDifference(predictions, tLabels), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Calculates the mean absolute percentage error between labels and predictions.\n+   *\n+   * <p><code>loss = 100 * reduceMean(abs((labels - predictions) / labels))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean absolute percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanAbsolutePercentageError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+    Operand<T> diff =\n+        tf.math.abs(\n+            tf.math.div(\n+                tf.math.sub(tLabels, predictions),\n+                tf.math.maximum(\n+                    tf.math.abs(tLabels), cast(tf,  tf.constant(EPSILON), dataType))));\n+    return tf.math.mul(\n+        cast(tf,  tf.constant(100), dataType), tf.math.mean(diff, tf.constant(-1)));\n+  }\n+\n+  /**\n+   * Calculates the mean squared logarithmic error between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(log(labels + 1) - log(predictions + 1)))</code>\n+   *\n+   * @param tf The TensorFlow Ops\n+   * @param labels the labels\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and result\n+   * @param <U> the data type of the labels\n+   * @return the mean squared logarithmic percentage error\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> meanSquaredLogarithmicError(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+\n+    Operand<T> firstLog = tf.math.log(tf.math.add(tf.math.maximum(predictions, epsilonConst), one));\n+    Operand<T> secondLog = tf.math.log(tf.math.add(tf.math.maximum(tLabels, epsilonConst), one));\n+\n+    return tf.math.mean(tf.math.squaredDifference(firstLog, secondLog), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the binary crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the binary crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> binaryCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, float labelSmoothing) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsBinaryX(tf, tLabels, labelSmoothing);\n+    }\n+    Operand<T> bce = binaryCrossentropyHelper(tf, tLabels, predictions, fromLogits);\n+    return tf.math.mean(bce, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the unreduced crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param target the target Operand\n+   * @param output the output, either logits or a probability distribution\n+   * @param fromLogits whether `output` is expected to be a logits tensor. By default, we consider\n+   *     that `output` encodes a probability distribution.\n+   * @param <T> the data type of the Operands\n+   * @return the binary crossentropy loss.\n+   */\n+  private static <T extends TNumber> Operand<T> binaryCrossentropyHelper(\n+      Ops tf, Operand<T> target, Operand<T> output, boolean fromLogits) {\n+    if (fromLogits)\n+      return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+\n+\n+    /* TODO - skip this loggic for now. It requires walking back the inputs which is not yet possible\n+    if (!(output instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO - this does not work\n+      // TODO output = backtrackIdentity(output);\n+      // TODO if (output.op().type().equals(Sigmoid.OP_NAME)) {\n+      // TODO   if (output.op().numInputess() != 1)\n+      // TODO     throw new IllegalArgumentException(\"output can only have 1 output\");\n+      // TODO   output = output.op().inout(0);\n+       // TODO   return tf.nn.sigmoidCrossEntropyWithLogits(target, output);\n+      // TODO}\n+    }\n+    */\n+\n+    DataType<T> dataType = output.asOutput().dataType();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    output = tf.clipByValue(output, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> bce = tf.math.mul(target, tf.math.log(tf.math.add(output, epsilonConst)));\n+    bce =\n+        tf.math.add(\n+            bce,\n+            tf.math.mul(\n+                tf.math.sub(one, target),\n+                tf.math.log(tf.math.add(tf.math.sub(one, output), epsilonConst))));\n+    return tf.math.neg(bce);\n+  }\n+\n+  /**\n+   * Computes the categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether to interpret predictions as a tensor of logit values\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *     confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *     value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param axis the\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical crossentropy loss.\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalCrossentropy(\n+      Ops tf,\n+      Operand<U> labels,\n+      Operand<T> predictions,\n+      boolean fromLogits,\n+      float labelSmoothing,\n+      int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> ops = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = ops.getTarget();\n+    tLabels = ops.getLabels();\n+\n+    if (labelSmoothing != 0.0f) {\n+      tLabels = smoothLabelsCatX(tf, tLabels, labelSmoothing);\n+    }\n+    if (fromLogits) {\n+      return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+    }\n+    /* TODO\n+    if (!(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      if (predictions.op().type().equals(\"Softmax\")) {\n+        if (predictions.op().numOutputs() != 1)\n+          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        predictions = predictions.op().output(0);\n+        return tf.nn.softmaxCrossEntropyWithLogits(tLabels, predictions, -1);\n+      }\n+    }\n+    */\n+\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+    predictions =\n+        tf.math.div(\n+            predictions, tf.reduceSum(predictions, tf.constant(axis), ReduceSum.keepDims(true)));\n+    predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+\n+    // Compute cross entropy from probabilities.\n+    Operand<T> cce =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, tf.math.log(predictions)),\n+            tf.constant(axis),\n+            ReduceSum.keepDims(false));\n+    return tf.math.neg(cce);\n+  }\n+\n+  /**\n+   * Computes the categorical hinge loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be 0 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the categorical hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> categoricalHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    Operand<T> pos =\n+        tf.reduceSum(\n+            tf.math.mul(tLabels, predictions), tf.constant(-1), ReduceSum.keepDims(Boolean.FALSE));\n+    Operand<T> neg =\n+        tf.reduceMax(\n+            tf.math.mul(tf.math.sub(one, tLabels), predictions),\n+            tf.constant(-1),\n+            ReduceMax.keepDims(Boolean.FALSE));\n+    Operand<T> sub = tf.math.sub(neg, pos);\n+    Operand<T> add = tf.math.add(sub, one);\n+    return tf.math.maximum(zero, add);\n+  }\n+\n+  /**\n+   * Computes the cosine similarity loss between labels and predictions.\n+   *\n+   * <p>Note that it is a number between -1 and 1. When it is a negative number between -1 and 0, 0\n+   * indicates orthogonality and values closer to -1 indicate greater similarity. The values closer\n+   * to 1 indicate greater dissimilarity. This makes it usable as a loss function in a setting where\n+   * you try to maximize the proximity between predictions and targets. If either labels or\n+   * predictions is a zero vector, cosine similarity will be 0 regardless of the proximity between\n+   * predictions and targets.\n+   *\n+   * <p><code>loss = -sum(l2Norm(labels) * l2Norm(predictions))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param axis Axis along which to determine similarity.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the cosine similarity loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> cosineSimilarity(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    tLabels = l2Normalize(tf, tLabels, axis);\n+    predictions = l2Normalize(tf, predictions, axis);\n+    Operand<T> mathMul = tf.math.mul(tLabels, predictions);\n+    Operand<T> sum = tf.reduceSum(mathMul, tf.constant(axis), ReduceSum.keepDims(Boolean.FALSE));\n+    return tf.math.neg(sum);\n+  }\n+\n+  /**\n+   * Computes the hinge loss between labels and predictions\n+   *\n+   * <p><code>loss = reduceMean(maximum(1 - labels * predictions, 0))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> hinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+\n+    return tf.math.mean(\n+        tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Huber loss between labels and predictions.\n+   *\n+   * <p>For each value x in error = labels - predictions:\n+   *\n+   * <pre>\n+   *     loss = 0.5 * x^2                  if |x| &lt;= d\n+   *     loss = 0.5 * d^2 + d * (|x| - d)  if |x| &gt; d\n+   * </pre>\n+   *\n+   * <p>where d is delta.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param delta the point where the Huber loss function changes from quadratic to linear.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Huber loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> huber(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, float delta) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+\n+    Operand<T> error = tf.math.sub(predictions, tLabels);\n+    Operand<T> deltaConst = cast(tf,  tf.constant(delta), dataType);\n+    Operand<T> point5 = cast(tf,  tf.constant(0.5), dataType);\n+    Operand<T> absError = tf.math.abs(error);\n+    Operand<T> quadratic = tf.math.minimum(absError, deltaConst);\n+    Operand<T> linear = tf.math.sub(absError, quadratic);\n+    Operand<T> q2Point5 = tf.math.mul(point5, tf.math.mul(quadratic, quadratic));\n+    Operand<T> deltaLinear = tf.math.mul(deltaConst, linear);\n+    Operand<T> loss = tf.math.add(q2Point5, deltaLinear);\n+    return tf.math.mean(loss, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Kullback-Leibler divergence loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Kullback-Leibler divergence loss\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Kullback?Leibler_divergence\">Kullback?Leibler\n+   *     divergence</a>\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> kullbackLeiblerDivergence(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    tLabels = tf.clipByValue(tLabels, epsilonConst, one);\n+    predictions = tf.clipByValue(predictions, epsilonConst, one);\n+    return tf.reduceSum(\n+        tf.math.mul(tLabels, tf.math.log(tf.math.div(tLabels, predictions))), tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the hyperbolic cosine loss between labels and predictions.\n+   *\n+   * <p><code>log(cosh(x))</code> is approximately equal to <code>(x ** 2) / 2</code> for small\n+   * <code>x</code> and to <code>abs(x) - log(2)</code> for large <code>x</code>. This means that\n+   * 'logCosh' works mostly like the mean squared error, but will not be so strongly affected by the\n+   * occasional wildly incorrect prediction.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the hyperbolic cosine divergence loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> logCosh(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> minusTwo = cast(tf,  tf.constant(-2), dataType);\n+    Operand<T> two = cast(tf,  tf.constant(2), dataType);\n+\n+    Operand<T> diff = tf.math.sub(predictions, tLabels);\n+    Softplus<T> softplus = tf.math.softplus(tf.math.mul(minusTwo, diff));\n+    Operand<T> logcosh = tf.math.sub(tf.math.add(diff, softplus), tf.math.log(two));\n+    return tf.math.mean(logcosh, tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the Poisson loss between labels and predictions.\n+   *\n+   * <p>The Poisson loss is the mean of the elements of the Tensor <code>\n+   * predictions - labels * log(predictions)</code>.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the Poisson loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> poisson(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+\n+    return tf.math.mean(\n+        tf.math.sub(\n+            predictions, tf.math.mul(tLabels, tf.math.log(tf.math.add(predictions, epsilonConst)))),\n+        tf.constant(-1));\n+  }\n+\n+  /**\n+   * Computes the sparse categorical crossentropy loss between labels and predictions.\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param predictions the predictions\n+   * @param fromLogits Whether predictions is expected to be logits. By default, it is assumed that\n+   *     predictions encodes a probability distribution.\n+   * @param axis The dimension along which the entropy is computed.\n+   * @param <T> the data type of the predictions and labels\n+   * @return the sparse categorical crossentropy loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> sparseCategoricalCrossentropy(\n+      Ops tf, Operand<U> labels, Operand<T> predictions, boolean fromLogits, int axis) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> epsilonConst = cast(tf,  tf.constant(EPSILON), dataType);\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> oneMinusEpsilonConst = tf.math.sub(one, epsilonConst);\n+\n+    /* TODO need ability to walk back inputs\n+    if (!fromLogits && !(predictions instanceof Variable) && (!tf.scope().env().isEager())) {\n+      // TODO output = backtrackIdentity(output); doesn't seem to work with Java version.\n+      /* TODO\n+      if (predictions.op().type().equals(Softmax.OP_NAME)) {\n+        // When softmax activation function is used for output operation, we\n+        // use logits from the softmax function directly to compute loss in order\n+        // to prevent collapsing zero when training.\n+        // TODO  if( output.op().numOutputs() != 1)\n+        //          throw new IllegalArgumentException(\"output can only have 1 output\");\n+        // TODO output = output.op.inputs[0]\n+        fromLogits = true;\n+      }\n+\n+    }\n+     */\n+    if (!fromLogits) {\n+\n+      predictions = tf.clipByValue(predictions, epsilonConst, oneMinusEpsilonConst);\n+      predictions = tf.math.log(predictions);\n+    }\n+    Shape predictionsShape = predictions.asOutput().shape();\n+    int predictionsRank = predictionsShape.numDimensions();\n+    axis %= predictionsRank;\n+    if (axis < 0) {\n+      axis += predictionsRank;\n+    }\n+    if (axis != predictionsRank - 1) {\n+      int[] axisNew = moveAxisToEnd(axis, predictionsRank);\n+      predictions = tf.linalg.transpose(predictions, tf.constant(axisNew));\n+    }\n+\n+    Operand<TInt64> iLabels = cast(tf,  labels, TInt64.DTYPE);\n+\n+    // Try to adjust the shape so that rank of labels = rank of logits - 1.\n+    Shape labelsShape = labels.asOutput().shape();\n+    int labelsRank = labelsShape.numDimensions();\n+\n+    boolean updateShape = labelsRank != predictionsRank - 1;\n+    if (updateShape) { // TODO check to see if this is right\n+      Shape newShape = labelsShape.take(labelsRank - 1);\n+      iLabels = tf.reshape(iLabels, tf.constant(newShape)); // flatten one dimension\n+      predictions =\n+          tf.reshape(\n+              predictions,\n+              tf.constant(\n+                  new long[] {-1L, predictionsShape.size(predictionsShape.numDimensions() - 1)}));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Operand<T> loss = tf.nn.sparseSoftmaxCrossEntropyWithLogits(iLabels, predictions);\n+    if (updateShape && predictionsRank >= 3) {\n+      Shape newShape = predictionsShape.take(predictionsShape.numDimensions() - 1);\n+      loss = tf.reshape(loss, tf.constant(newShape));\n+    }\n+    return loss;\n+  }\n+\n+  /**\n+   * Computes the squared hinge loss between labels and predictions.\n+   *\n+   * <p><code>loss = reduceMean(square(maximum(1 - labels * predictions, 0)))</code>\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets, values are expected to be -1 or 1. If binary (0 or 1) labels are *\n+   *     provided, they will be converted to -1 or 1.\n+   * @param predictions the predictions\n+   * @param <T> the data type of the predictions and labels\n+   * @return the squared hinge loss\n+   */\n+  public static <T extends TNumber, U extends TNumber> Operand<T> squaredHinge(\n+      Ops tf, Operand<U> labels, Operand<T> predictions) {\n+    DataType<T> dataType = predictions.asOutput().dataType();\n+    Operand<T> tLabels = cast(tf,  labels, dataType);\n+    LossTuple<T> lossTuple = LossesHelper.squeezeOrExpandDimensions(tf, tLabels, predictions, null);\n+    predictions = lossTuple.getTarget();\n+    tLabels = lossTuple.getLabels();\n+    Operand<T> one = cast(tf,  tf.constant(1), dataType);\n+    Operand<T> zero = cast(tf,  tf.constant(0), dataType);\n+\n+    tLabels = maybeConvertLabels(tf, tLabels);\n+    return tf.math.mean(\n+        tf.math.square(tf.math.maximum(tf.math.sub(one, tf.math.mul(tLabels, predictions)), zero)),\n+        tf.constant(-1));\n+  }\n+\n+\n+  /**\n+   * Smooths binary labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing A number in the range [0, 1]. When 0, no smoothing occurs. When &gt; 0,\n+   *     compute the loss between the predicted labels and a smoothed version of the true labels,\n+   *     where the smoothing squeezes the labels towards 0.5. Larger values of labelSmoothing\n+   *     correspond to heavier smoothing.\n+   * @param <T> the data type of the labels\n+   * @return the smoothed binary labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsBinaryX(\n+      Ops tf, Operand<T> labels, float labelSmoothing) {\n+    DataType<T> dataType = labels.asOutput().dataType();\n+    Operand<T> oneMinusSmoothing = cast(tf,  tf.constant(1.f - labelSmoothing), dataType);\n+    Operand<T> halfSmoothing = cast(tf,  tf.constant(0.5F * labelSmoothing), dataType);\n+    return tf.math.add(tf.math.mul(labels, oneMinusSmoothing), halfSmoothing);\n+  }\n+\n+  /**\n+   * Smooths categorical labels\n+   *\n+   * @param tf the TensorFlow Ops\n+   * @param labels true targets\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    value of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>\n+   * @param <T> the data type of the labels\n+   * @return the smoothed categorical labels\n+   */\n+  private static <T extends TNumber> Operand<T> smoothLabelsCatX(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjY0Nw=="}, "originalCommit": {"oid": "0eae9ee1b2ae6aaccf6c9216bbb90f8bcda0a9a6"}, "originalPosition": 636}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTE1OTA4OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowNTo1MlrOHy0SVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowODo1OVrOHy5imA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NzUxMA==", "bodyText": "alue -> value", "url": "https://github.com/tensorflow/java/pull/129#discussion_r523047510", "createdAt": "2020-11-13T16:05:52Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -184,10 +184,9 @@ public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float la\n    *\n    * @param tf the TensorFlow Ops\n    * @param fromLogits Whether to interpret predictions as a tensor of logit values\n-   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n-   *     loss between the predicted labels and a smoothed version of the true labels, where the\n-   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n-   *     heavier smoothing.\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    alue of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eefbb7f197c731a7d304d055fd242d1acd9835f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMzU5Mg==", "bodyText": "OK", "url": "https://github.com/tensorflow/java/pull/129#discussion_r523133592", "createdAt": "2020-11-13T18:08:59Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -184,10 +184,9 @@ public CategoricalCrossentropy(Ops tf, String name, boolean fromLogits, float la\n    *\n    * @param tf the TensorFlow Ops\n    * @param fromLogits Whether to interpret predictions as a tensor of logit values\n-   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n-   *     loss between the predicted labels and a smoothed version of the true labels, where the\n-   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n-   *     heavier smoothing.\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a\n+   *    alue of </code>0.1<code> for label </code>0<code> and </code>0.9<code> for label </code>1<code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NzUxMA=="}, "originalCommit": {"oid": "7eefbb7f197c731a7d304d055fd242d1acd9835f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTE2MTE5OnYy", "diffSide": "RIGHT", "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowNjoyNFrOHy0Tng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoxMDoxN1rOHy5lDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NzgzOA==", "bodyText": "label_smoothing -> labelSmoothing, and in the docs below.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r523047838", "createdAt": "2020-11-13T16:06:24Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -169,10 +170,9 @@ public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing)\n    * @param tf the TensorFlow Ops\n    * @param name the name of this loss\n    * @param fromLogits Whether to interpret predictions as a tensor of logit values\n-   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n-   *     loss between the predicted labels and a smoothed version of the true labels, where the\n-   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n-   *     heavier smoothing.\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eefbb7f197c731a7d304d055fd242d1acd9835f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNDIyMQ==", "bodyText": "Ugh, I thought I got them all. I just did a global replace across the package.", "url": "https://github.com/tensorflow/java/pull/129#discussion_r523134221", "createdAt": "2020-11-13T18:10:17Z", "author": {"login": "JimClarke5"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/CategoricalCrossentropy.java", "diffHunk": "@@ -169,10 +170,9 @@ public CategoricalCrossentropy(Ops tf, boolean fromLogits, float labelSmoothing)\n    * @param tf the TensorFlow Ops\n    * @param name the name of this loss\n    * @param fromLogits Whether to interpret predictions as a tensor of logit values\n-   * @param labelSmoothing Float in [0, 1]. When 0, no smoothing occurs. When > 0, we compute the\n-   *     loss between the predicted labels and a smoothed version of the true labels, where the\n-   *     smoothing squeezes the labels towards 0.5. Larger values of label_smoothing correspond to\n-   *     heavier smoothing.\n+   * @param labelSmoothing Float in <code>[0, 1]</code>. When <code>&gt; 0</code>, label values are smoothed, meaning the\n+   *    confidence on label values are relaxed. e.g. <code>label_smoothing=0.2<code> means that we will use a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NzgzOA=="}, "originalCommit": {"oid": "7eefbb7f197c731a7d304d055fd242d1acd9835f"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1644, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}