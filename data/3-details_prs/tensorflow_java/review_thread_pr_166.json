{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDAzNDc5", "number": 166, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyMTowMFrOFCrbDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjoxMTo1MlrOFSZH5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzUyOTA5OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/gen/annotations/org/tensorflow/op/Ops.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyMTowMFrOIB9zFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjo1NTowMlrOIB_50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTk4OA==", "bodyText": "We don't have this kind of overloading in Java, so does it make sense to describe it here in the Java Ops?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538931988", "createdAt": "2020-12-09T01:21:00Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/annotations/org/tensorflow/op/Ops.java", "diffHunk": "@@ -5899,6 +5900,61 @@ public StageSize stageSize(List<DataType<?>> dtypes, StageSize.Options... option\n     return StopGradient.create(scope, input);\n   }\n \n+  /**\n+   * Return a strided slice from `input`.\n+   *   <p>\n+   *   The goal of this op is to produce a new tensor with a subset of\n+   *   the elements from the `n` dimensional `input` tensor. The subset is chosen using\n+   *   a sequence of `m` sparse range specifications encoded into the arguments\n+   *   of this function. Note, in some cases\n+   *   `m` could be equal to `n`, but this need not be the case. Each\n+   *   range specification entry can be one of the following:\n+   *   <p>\n+   *   - An ellipsis (...) using {@link Index#ellipses()}. Ellipses are used to imply zero or more\n+   *     dimensions of full-dimension selection and are produced using\n+   *     `ellipsis_mask`. For example, `foo[...]` is the identity slice.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NjQ4Mg==", "bodyText": "I copied most of this from the stridedSlice docs and tried to keep it as close as possible.  I talk enough about the Python and Java equivalents that I think it's understood to be stridedSlice(foo, Index.ellipsis()).  I'm kind of using it as a generic \"slice notation\" rather than specifically referencing the Python syntax.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538966482", "createdAt": "2020-12-09T02:55:02Z", "author": {"login": "rnett"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/annotations/org/tensorflow/op/Ops.java", "diffHunk": "@@ -5899,6 +5900,61 @@ public StageSize stageSize(List<DataType<?>> dtypes, StageSize.Options... option\n     return StopGradient.create(scope, input);\n   }\n \n+  /**\n+   * Return a strided slice from `input`.\n+   *   <p>\n+   *   The goal of this op is to produce a new tensor with a subset of\n+   *   the elements from the `n` dimensional `input` tensor. The subset is chosen using\n+   *   a sequence of `m` sparse range specifications encoded into the arguments\n+   *   of this function. Note, in some cases\n+   *   `m` could be equal to `n`, but this need not be the case. Each\n+   *   range specification entry can be one of the following:\n+   *   <p>\n+   *   - An ellipsis (...) using {@link Index#ellipses()}. Ellipses are used to imply zero or more\n+   *     dimensions of full-dimension selection and are produced using\n+   *     `ellipsis_mask`. For example, `foo[...]` is the identity slice.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTk4OA=="}, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzU0MjkxOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/Indexing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyNTo1NlrOIB96lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjo0ODo1MVrOIB_xBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMzkwOQ==", "bodyText": "Does this need to be public? Can't it be package private?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538933909", "createdAt": "2020-12-09T01:25:56Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/Indexing.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Index;\n+import org.tensorflow.op.Index.Singular;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see Index\n+ */\n+@Operator\n+public class Indexing {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    public StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NDIzMA==", "bodyText": "Yeah, it should private.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538964230", "createdAt": "2020-12-09T02:48:51Z", "author": {"login": "rnett"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/Indexing.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Index;\n+import org.tensorflow.op.Index.Singular;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see Index\n+ */\n+@Operator\n+public class Indexing {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    public StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMzkwOQ=="}, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTA4MzE3OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzozMjo0M1rOIPd8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMTo1ODoyOVrOIZSIwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDE3Mg==", "bodyText": "This method is quite critical on the performance path when it comes to access data inside an nd array. With all these additions in it, could you please run the benchmark for NdArray, especially those testing the indexation like this one, and compare the results?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553090172", "createdAt": "2021-01-07T03:32:43Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY5NjU3NQ==", "bodyText": "I ran with @Fork(value = 1) since 0 gave warnings, should I push that?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553696575", "createdAt": "2021-01-08T01:55:36Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDE3Mg=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcyMTAwOA==", "bodyText": "There's a tiny bit of slowdown, but it's marginal:\nOriginal:\nBenchmark                                                  Mode  Cnt   Score   Error  Units\nNdArrayBenchmark.getElementAtIndex                         avgt    5   0.097 \u00b1 0.017   s/op\nNdArrayBenchmark.readingAllPixelsChannelsByIndex           avgt    5  10.035 \u00b1 0.023   s/op\nNdArrayBenchmark.readingAllPixelsChannelsBySequence        avgt    5   0.033 \u00b1 0.002   s/op\nNdArrayBenchmark.readingAllPixelsChannelsBySequenceSlices  avgt    5   0.166 \u00b1 0.011   s/op\nNdArrayBenchmark.slicing                                   avgt    5   0.222 \u00b1 0.049   s/op\nNdArrayBenchmark.writeAllBatchChannels                     avgt    5   0.335 \u00b1 0.048   s/op\nNdArrayBenchmark.writeAllPixelsByIndex                     avgt    5   5.870 \u00b1 0.817   s/op\nNdArrayBenchmark.writeAllPixelsBySlicing                   avgt    5  29.603 \u00b1 1.304   s/op\nNdArrayBenchmark.writeFirstBatchChannels                   avgt    5   0.349 \u00b1 0.102   s/op\nNdArrayBenchmark.writeOnePixelBySlicing                    avgt    5   0.705 \u00b1 0.082   s/op\nNdArrayBenchmark.writeOnePixelsByIndex                     avgt    5   0.131 \u00b1 0.036   s/op\nMine:\nBenchmark                                                  Mode  Cnt   Score    Error  Units\nNdArrayBenchmark.getElementAtIndex                         avgt    5   0.104 \u00b1  0.020   s/op\nNdArrayBenchmark.readingAllPixelsChannelsByIndex           avgt    5  10.037 \u00b1  0.063   s/op\nNdArrayBenchmark.readingAllPixelsChannelsBySequence        avgt    5   0.033 \u00b1  0.001   s/op\nNdArrayBenchmark.readingAllPixelsChannelsBySequenceSlices  avgt    5   0.174 \u00b1  0.009   s/op\nNdArrayBenchmark.slicing                                   avgt    5   0.208 \u00b1  0.001   s/op\nNdArrayBenchmark.writeAllBatchChannels                     avgt    5   0.316 \u00b1  0.061   s/op\nNdArrayBenchmark.writeAllPixelsByIndex                     avgt    5   5.555 \u00b1  0.137   s/op\nNdArrayBenchmark.writeAllPixelsBySlicing                   avgt    5  30.081 \u00b1  3.360   s/op\nNdArrayBenchmark.writeFirstBatchChannels                   avgt    5   0.351 \u00b1  0.099   s/op\nNdArrayBenchmark.writeOnePixelBySlicing                    avgt    5   0.777 \u00b1  0.347   s/op\nNdArrayBenchmark.writeOnePixelsByIndex                     avgt    5   0.122 \u00b1  0.004   s/op", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553721008", "createdAt": "2021-01-08T03:27:34Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDE3Mg=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM4MjQ2NA==", "bodyText": "So as we've discussed, the difference between both implementation is negligible.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563382464", "createdAt": "2021-01-24T21:58:29Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDE3Mg=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTA4NjUzOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzozNDo1M1rOIPd-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzozNDo1M1rOIPd-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDY1OA==", "bodyText": "Nit : please add a space after your clauses, like if or for and before opening braces in your code, as recommended by the Google Java Style Guide", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553090658", "createdAt": "2021-01-07T03:34:53Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {\n-    if (dimensions == null || indices.length > dimensions.length) {\n+    if (dimensions == null) {\n       throw new ArrayIndexOutOfBoundsException();\n     }\n     int dimIdx = 0;\n+    int indexIdx = 0;\n     int newDimIdx = 0;\n     int segmentationIdx = -1;\n     long initialOffset = 0;\n \n-    Dimension[] newDimensions = new Dimension[dimensions.length];\n-    while (dimIdx < indices.length) {\n+    int newAxes = 0;\n+    boolean seenEllipsis = false;\n+    for(Index idx : indices){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTA5NzU4OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzo0MToxMVrOIPeEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzo0MToxMVrOIPeEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjE5NQ==", "bodyText": "I don't understand that TODO anymore, can you please remove it since we are changing the expected behaviour anyway?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092195", "createdAt": "2021-01-07T03:41:11Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "diffHunk": "@@ -27,22 +28,53 @@ public long numElements(Dimension dim) {\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n+    long coord = this.coord >= 0 ? this.coord : dim.numElements() + this.coord;\n     return dim.positionOf(coord); // TODO validate coordinate is 0?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTA5OTI4OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzo0MjozOVrOIPeFdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzo0MjozOVrOIPeFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjQ3MA==", "bodyText": "Nit: reversing the condition makes it more clear, i.e.\nif (!keepDim) {\n    throw ...\n}\nreturn dim.withIndex(this);", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092470", "createdAt": "2021-01-07T03:42:39Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "diffHunk": "@@ -27,22 +28,53 @@ public long numElements(Dimension dim) {\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n+    long coord = this.coord >= 0 ? this.coord : dim.numElements() + this.coord;\n     return dim.positionOf(coord); // TODO validate coordinate is 0?\n   }\n \n   @Override\n   public Dimension apply(Dimension dim) {\n-    throw new IllegalStateException(); // FIXME?\n+    if(keepDim){\n+      return dim.withIndex(this);\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTEwMjIwOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/TensorIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzo0NDo0NlrOIPeHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo0NDo1OFrOIQBpwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjkyMw==", "bodyText": "This class is missing documentation\nAlso, the notion of Tensor is deliberately not being used in the ndarray library. A Tensor is a NdArray allocated by TensorFlow, but the ndarray is agnostic of TensorFlow (it will even be moved eventually to a separate repository) so we shouldn't mix concepts.\nDo we really need to distinguish them with \"standard\" indices? What about adding all these methods directly to Index and throw an exception if they are being called on Hyperslab or Sequence?\nI understand that having TensorIndex allows us to enforce at compile time that only these instances can be passed to index a Tensor in TF but I don't think these two indices are used very often and it could be fine doing it.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092923", "createdAt": "2021-01-07T03:44:46Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/TensorIndex.java", "diffHunk": "@@ -12,29 +12,39 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n-import org.tensorflow.ndarray.impl.dimension.Dimension;\n+public interface TensorIndex extends Index{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3NTIwMA==", "bodyText": "I like that better.  For now, I've implemented it as a tensorSupport method, since the other methods have useful defaults and I don't like \"override a method if it doesn't work\", it's too easy to miss when adding indices.  The javadocs of those methods mention tensors too.  Do you think it would be better to call it non-DimensionalSpace or non-NDArray usage, instead of Tensor usage?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553675200", "createdAt": "2021-01-08T00:44:58Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/TensorIndex.java", "diffHunk": "@@ -12,29 +12,39 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n-import org.tensorflow.ndarray.impl.dimension.Dimension;\n+public interface TensorIndex extends Index{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjkyMw=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTEyOTkwOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDowMjo1MVrOIPeWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDowMjo1MVrOIPeWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NjgzMw==", "bodyText": "I don't think IllegalStateException is the right exception to be thrown here, since there is no state involve. What about UnsupportedOperationException?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553096833", "createdAt": "2021-01-07T04:02:51Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "diffHunk": "@@ -12,26 +12,43 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n+import java.util.StringJoiner;\n import org.tensorflow.ndarray.impl.dimension.Dimension;\n \n-final class Even implements Index {\n+final class Ellipsis implements TensorIndex{\n \n-  static final Even INSTANCE = new Even();\n+  static final Ellipsis INSTANCE = new Ellipsis();\n+\n+  private Ellipsis(){\n+\n+  }\n \n   @Override\n   public long numElements(Dimension dim) {\n-    return (dim.numElements() >> 1) + (dim.numElements() % 2);\n+    throw new IllegalStateException();\n   }\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n-    return coordinate << 1;\n+    throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTEzMzE2OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDowNTowMVrOIPeYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDowNTowMVrOIPeYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NzMxNw==", "bodyText": "in Hyperslab, you use the getClass().getSimpleName() to return that string, should we do it everywhere?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553097317", "createdAt": "2021-01-07T04:05:01Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "diffHunk": "@@ -12,26 +12,43 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n+import java.util.StringJoiner;\n import org.tensorflow.ndarray.impl.dimension.Dimension;\n \n-final class Even implements Index {\n+final class Ellipsis implements TensorIndex{\n \n-  static final Even INSTANCE = new Even();\n+  static final Ellipsis INSTANCE = new Ellipsis();\n+\n+  private Ellipsis(){\n+\n+  }\n \n   @Override\n   public long numElements(Dimension dim) {\n-    return (dim.numElements() >> 1) + (dim.numElements() % 2);\n+    throw new IllegalStateException();\n   }\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n-    return coordinate << 1;\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override\n+  public boolean isEllipsis() {\n+    return true;\n   }\n \n-  private Even() {\n+  @Override\n+  public boolean ellipsisMask() {\n+    return true;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"Ellipsis()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTEzOTczOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDowOTowOFrOIPecHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozNTozM1rOIQBf5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODI2OQ==", "bodyText": "why having both expand() and ellipsis() if they are the same?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553098269", "createdAt": "2021-01-07T04:09:08Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3MjY3OA==", "bodyText": "Because it really should be called \"expand\" or similar, but anyone coming from Python will be looking for ellipsis.  I could go with just one.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553672678", "createdAt": "2021-01-08T00:35:33Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODI2OQ=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE0NDM2OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoxMjozNFrOIPee4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMTozNjoyNlrOIQCoHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODk3OQ==", "bodyText": "instead of having all those variants with nullable boxed type and primitive long, could we just rename the methods differently so they accept only parameters that matters?\ne.g.\nslice(Long, long) -> sliceTo(long)\nslice(long, Long) -> sliceFrom(long)\nslice(Long, Long) -> do we really need this one, as it just returns all() ultimately?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553098979", "createdAt": "2021-01-07T04:12:34Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){\n+    return ellipsis();\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, long end){\n+    return slice(start, end, 1);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3NjE4NA==", "bodyText": "We already have to and from, I'll change them to sliceTo and sliceFrom and add overloads w/ stride.\nThe reason I included the nullable versions there is for calling with maybe-null data (like say from the Kotlin API).  Otherwise the caller would have to decide which one to use based on there parameters, so I think it's worth having a method that does that disambiguation.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553676184", "createdAt": "2021-01-08T00:48:07Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){\n+    return ellipsis();\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, long end){\n+    return slice(start, end, 1);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODk3OQ=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY5MTE2Ng==", "bodyText": "Either way I can reduce the overloads though, they were for literal conversions which won't be an issue any more.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553691166", "createdAt": "2021-01-08T01:36:26Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){\n+    return ellipsis();\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, long end){\n+    return slice(start, end, 1);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODk3OQ=="}, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE0ODA3OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoxNDo1NFrOIPeg5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoxNDo1NFrOIPeg5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5OTQ5NA==", "bodyText": "Nit: no need of else clauses when you return unconditionally in your previous if blocks, I find it improves readability\nAlso not required, most of the code in TF Java follow a reversed order of the elements of a class, where elements with a higher visibility (public) are at the top of the class while those at the bottom has the lower one.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553099494", "createdAt": "2021-01-07T04:14:54Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ ==============================================================================\n+ */\n+package org.tensorflow.ndarray.index;\n+\n+import java.util.StringJoiner;\n+import org.tensorflow.ndarray.impl.dimension.Dimension;\n+\n+final class Slice implements TensorIndex {\n+\n+  private final Long start;\n+  private final Long end;\n+  private final long stride;\n+\n+  private long start(Dimension dim){\n+    if(start == null){\n+      if(stride > 0){\n+        return 0;\n+      } else {\n+        return dim.numElements() - 1; // it's inclusive\n+      }\n+    } else if(start < 0){\n+      return dim.numElements() + start;\n+    } else {\n+      return start;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE1NjE3OnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoxOTozMVrOIPelRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoxOTozMVrOIPelRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMDYxNA==", "bodyText": "If we take the sliceTo/sliceFrom route, having distinct implementation of Index (i.e. SliceTo and SliceFrom) could reduce the complexity/cost of each case and avoid the boxed type conversion. There is not much gain having them all implemented by a single class.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553100614", "createdAt": "2021-01-07T04:19:31Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ ==============================================================================\n+ */\n+package org.tensorflow.ndarray.index;\n+\n+import java.util.StringJoiner;\n+import org.tensorflow.ndarray.impl.dimension.Dimension;\n+\n+final class Slice implements TensorIndex {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE2NDk2OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyNTowNFrOIPeqLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyNTowNFrOIPeqLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMTg3MQ==", "bodyText": "Nit: add a space here", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553101871", "createdAt": "2021-01-07T04:25:04Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");\n+\n+      end[i] = (int) idx.end();\n+      if(end[i] != idx.end())\n+        throw new IllegalArgumentException(\"Can't convert long end value to int for index \" + idx + \": Out of bounds\");\n+\n+      strides[i] = (int) idx.stride();\n+      if(strides[i] != idx.stride())\n+        throw new IllegalArgumentException(\"Can't convert long stride value to int for index \" + idx + \": Out of bounds\");\n+\n+      if (idx.beginMask()) {\n+        beginMask |= 1L << i;\n+      }\n+\n+      if (idx.endMask()) {\n+        endMask |= 1L << i;\n+      }\n+\n+      if (idx.ellipsisMask()) {\n+        if(ellipsisMask != 0)\n+          throw new IllegalArgumentException(\"Can not have two ellipsis in a slice\");\n+        ellipsisMask |= 1L << i;\n+      }\n+\n+      if (idx.newAxisMask()) {\n+        newAxisMask |= 1L << i;\n+      }\n+\n+      if (idx.shrinkAxisMask()) {\n+        shrinkAxisMask |= 1L << i;\n+      }\n+    }\n+\n+    return new StridedSliceArgs(begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE2NjY3OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyNTo1OFrOIPerFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyNTo1OFrOIPerFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMjEwMg==", "bodyText": "Documentation in non-generated classes should be converted from Python to Java, meaning that foo[-2::-1] and other examples like that must be converted to their Java equivalent.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553102102", "createdAt": "2021-01-07T04:25:58Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");\n+\n+      end[i] = (int) idx.end();\n+      if(end[i] != idx.end())\n+        throw new IllegalArgumentException(\"Can't convert long end value to int for index \" + idx + \": Out of bounds\");\n+\n+      strides[i] = (int) idx.stride();\n+      if(strides[i] != idx.stride())\n+        throw new IllegalArgumentException(\"Can't convert long stride value to int for index \" + idx + \": Out of bounds\");\n+\n+      if (idx.beginMask()) {\n+        beginMask |= 1L << i;\n+      }\n+\n+      if (idx.endMask()) {\n+        endMask |= 1L << i;\n+      }\n+\n+      if (idx.ellipsisMask()) {\n+        if(ellipsisMask != 0)\n+          throw new IllegalArgumentException(\"Can not have two ellipsis in a slice\");\n+        ellipsisMask |= 1L << i;\n+      }\n+\n+      if (idx.newAxisMask()) {\n+        newAxisMask |= 1L << i;\n+      }\n+\n+      if (idx.shrinkAxisMask()) {\n+        shrinkAxisMask |= 1L << i;\n+      }\n+    }\n+\n+    return new StridedSliceArgs(begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n+  }\n+  /**\n+   * Return a strided slice from `input`.\n+   *  <p>\n+   *  The goal of this op is to produce a new tensor with a subset of\n+   *  the elements from the `n` dimensional `input` tensor. The subset is chosen using\n+   *  a sequence of `m` sparse range specifications encoded into the arguments\n+   *  of this function. Note, in some cases\n+   *  `m` could be equal to `n`, but this need not be the case. Each\n+   *  range specification entry can be one of the following:\n+   *  <p>\n+   *  - An ellipsis (...) using {@link Indices#ellipsis()}. Ellipses are used to imply zero or more\n+   *    dimensions of full-dimension selection and are produced using\n+   *    `ellipsis_mask`. For example, `foo[...]` is the identity slice.\n+   *  <p>\n+   *  - A new axis using {@link Indices#newAxis()}. This is used to insert a new shape=1 dimension and is\n+   *    produced using `new_axis_mask`. For example, `foo[:, ...]` where\n+   *    `foo` is shape `(3, 4)` produces a `(1, 3, 4)` tensor.\n+   *  <p>\n+   *  - A range `begin:end:stride` using {@link Indices#slice(Long, Long, long)}  Index.slice()}. This is used to specify how much to choose from\n+   *    a given dimension. `stride` can be any integer but 0.  `begin` is an integer\n+   *    which represents the index of the first value to select while `end` represents\n+   *    the index of the last value to select. The number of values selected in each\n+   *    dimension is `end - begin` if `stride > 0` and `begin - end` if `stride < 0`.\n+   *    `begin` and `end` can be negative where `-1` is the last element, `-2` is\n+   *    the second to last. `begin_mask` controls whether to replace the explicitly\n+   *    given `begin` with an implicit effective value of `0` if `stride > 0` and\n+   *    `-1` if `stride < 0`. `end_mask` is analogous but produces the number\n+   *    required to create the largest open interval. For example, given a shape\n+   *    `(3,)` tensor `foo[:]`, the effective `begin` and `end` are `0` and `3`. Do\n+   *    not assume this is equivalent to `foo[0:-1]` which has an effective `begin`\n+   *    and `end` of `0` and `2`. Another example is `foo[-2::-1]` which reverses the\n+   *    first dimension of a tensor while dropping the last two (in the original\n+   *    order elements). For example `foo = [1,2,3,4]; foo[-2::-1]` is `[4,3]`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE3MDYxOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyODozMlrOIPetTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyODozMlrOIPetTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMjY2OA==", "bodyText": "Please add braces around single-line statements", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553102668", "createdAt": "2021-01-07T04:28:32Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0ODI4ODAzOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Index.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjowODoxM1rOIZSnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMzozNjo1OFrOIZTZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MDMxMg==", "bodyText": "I don't think we need to mention for Tensor conversion in the methods below, as long as the documentation says what the method returns, it can be of any use after that.\nNow for tensorSupport(), what about something more generic like hasBoundaries()?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563390312", "createdAt": "2021-01-24T22:08:13Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Index.java", "diffHunk": "@@ -74,4 +70,61 @@ default Dimension apply(Dimension dim) {\n   default boolean isPoint() {\n     return false;\n   }\n+\n+  /**\n+   * Returns true if this index is a new axis, adding a dimension of size 1\n+   */\n+  default boolean isNewAxis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if this index is an ellipsis, expanding to take as many dimensions as possible (and applying all() to\n+   * them)\n+   */\n+  default boolean isEllipsis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Get whether the Index supports Tensor conversion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5NzI4Mg==", "bodyText": "Agreed in theory, but I don't like hasBoundaries, because to me that sounds like it would exclude all and sliceTo, etc.  The only things that are excluded are Hyperslab and Sequence.  I went with tensorSupport because I couldn't think of anything better.\nMaybe use \"strided slice conversion\" rather than \"tensor conversion\"?  In theory, it would apply to any library that uses strided slicing.  Or specifiesBoundaries.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563397282", "createdAt": "2021-01-24T22:48:04Z", "author": {"login": "rnett"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Index.java", "diffHunk": "@@ -74,4 +70,61 @@ default Dimension apply(Dimension dim) {\n   default boolean isPoint() {\n     return false;\n   }\n+\n+  /**\n+   * Returns true if this index is a new axis, adding a dimension of size 1\n+   */\n+  default boolean isNewAxis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if this index is an ellipsis, expanding to take as many dimensions as possible (and applying all() to\n+   * them)\n+   */\n+  default boolean isEllipsis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Get whether the Index supports Tensor conversion.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MDMxMg=="}, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQwMzA3MQ==", "bodyText": "ok, so let's call it \"strided slice conversion\" and name this method isStridedSlicingCompliant()?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563403071", "createdAt": "2021-01-24T23:36:58Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Index.java", "diffHunk": "@@ -74,4 +70,61 @@ default Dimension apply(Dimension dim) {\n   default boolean isPoint() {\n     return false;\n   }\n+\n+  /**\n+   * Returns true if this index is a new axis, adding a dimension of size 1\n+   */\n+  default boolean isNewAxis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if this index is an ellipsis, expanding to take as many dimensions as possible (and applying all() to\n+   * them)\n+   */\n+  default boolean isEllipsis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Get whether the Index supports Tensor conversion.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MDMxMg=="}, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0ODMwMzExOnYy", "diffSide": "RIGHT", "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjoxMTo1MlrOIZSyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjoxMTo1MlrOIZSyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MzEwMQ==", "bodyText": "Like we've discussed, we probably just want to go with one name, I'm ok with any (we don't need to be too strict to follow what the names in Python so expand is fine if that's what you prefer).", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563393101", "createdAt": "2021-01-24T22:11:52Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -199,21 +265,109 @@ public static Index range(long start, long end) {\n    * @return index\n    */\n   public static Index flip() {\n-    return Flip.INSTANCE;\n+    return slice(null, null, -1);\n   }\n-  \n+\n   /**\n-   * An index that returns elements according to an hyperslab defined by {@code start},\n-   * {@code stride}, {@code count}, {@code block}. See {@link Hyperslab}.\n-   * \n+   * An index that returns elements according to an hyperslab defined by {@code start}, {@code stride}, {@code count},\n+   * {@code block}. See {@link Hyperslab}.\n+   *\n    * @param start Starting location for the hyperslab.\n    * @param stride The number of elements to separate each element or block to be selected.\n    * @param count The number of elements or blocks to select along the dimension.\n    * @param block The size of the block selected from the dimension.\n-   * \n    * @return index\n    */\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static Index newAxis() {\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions. Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   * @see #expand()\n+   */\n+  public static Index ellipsis() {\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions. Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static Index expand() {\n+    return ellipsis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1658, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}