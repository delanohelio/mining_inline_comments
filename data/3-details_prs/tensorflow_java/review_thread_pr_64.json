{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTU5OTc4", "number": 64, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTozMDo1N1rOEAukOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo1MTo1MFrOEAuvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTk4MzkzOnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTozMDo1N1rOGcL_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyMDoyMlrOGcVQpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTc1Ng==", "bodyText": "Funny, I never realized that Shape was missing that much documentation... thanks!\nCan you please reformat it to follow Google Java Style guide? \"Defines the..\" should start on a separate line, preceded by a blank line plus a <p> tag, like here. This should be applied to all other javadoc blocks as well.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432209756", "createdAt": "2020-05-29T01:30:57Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -19,16 +19,29 @@\n \n import java.util.Arrays;\n \n+/**\n+ * The shape of a Tensor or {@link org.tensorflow.tools.ndarray.NdArray}. Defines the size along\n+ * its axis. May contain an unknown size for one of the axis or may be totally unknown, in which\n+ * case not even the number of axis is known.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MTYzNg==", "bodyText": "Sure! Sorry for not checking the styleguide first.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432361636", "createdAt": "2020-05-29T09:20:22Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -19,16 +19,29 @@\n \n import java.util.Arrays;\n \n+/**\n+ * The shape of a Tensor or {@link org.tensorflow.tools.ndarray.NdArray}. Defines the size along\n+ * its axis. May contain an unknown size for one of the axis or may be totally unknown, in which\n+ * case not even the number of axis is known.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTc1Ng=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTk4OTgwOnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTozNTowNVrOGcMDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyMDo0MlrOGcVRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMDczOQ==", "bodyText": "Here, the guide suggest to enter a newline after /** (same thing, should be applied to all javadoc blocks added)", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432210739", "createdAt": "2020-05-29T01:35:05Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -19,16 +19,29 @@\n \n import java.util.Arrays;\n \n+/**\n+ * The shape of a Tensor or {@link org.tensorflow.tools.ndarray.NdArray}. Defines the size along\n+ * its axis. May contain an unknown size for one of the axis or may be totally unknown, in which\n+ * case not even the number of axis is known.\n+ */\n public final class Shape {\n \n+  /**\n+   * Size reported for shapes for which the total size cannot be computed, either because their\n+   * number of dimensions is unknown or one or more of their dimensions have an unknown size.\n+   */\n   public static long UNKNOWN_SIZE = -1L;\n \n-  /** Create a Shape representing an unknown number of dimensions. */\n+  /** Create a Shape representing an unknown number of dimensions.\n+   * @return a Shape for which {@link Shape#isUnknown()} is true.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MTgyMQ==", "bodyText": "Done!", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432361821", "createdAt": "2020-05-29T09:20:42Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -19,16 +19,29 @@\n \n import java.util.Arrays;\n \n+/**\n+ * The shape of a Tensor or {@link org.tensorflow.tools.ndarray.NdArray}. Defines the size along\n+ * its axis. May contain an unknown size for one of the axis or may be totally unknown, in which\n+ * case not even the number of axis is known.\n+ */\n public final class Shape {\n \n+  /**\n+   * Size reported for shapes for which the total size cannot be computed, either because their\n+   * number of dimensions is unknown or one or more of their dimensions have an unknown size.\n+   */\n   public static long UNKNOWN_SIZE = -1L;\n \n-  /** Create a Shape representing an unknown number of dimensions. */\n+  /** Create a Shape representing an unknown number of dimensions.\n+   * @return a Shape for which {@link Shape#isUnknown()} is true.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMDczOQ=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAwMTQ0OnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo0MzoxNlrOGcMKVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyMToyNlrOGcVS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMjU2NQ==", "bodyText": "again according to the guide, you should omit the @return tag. Same for other block below.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432212565", "createdAt": "2020-05-29T01:43:16Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -61,21 +74,57 @@ public static Shape of(long... dimensionSizes) {\n     return new Shape(dimensionSizes);\n   }\n \n+  /**\n+   * Returns the total number of elements a Tensor with this shape would have. If this\n+   * {@link Shape#isUnknown()} is true or {@link Shape#hasUnknownDimension()}  is true,\n+   * {@link Shape#UNKNOWN_SIZE} is returned.\n+   *\n+   * @return the total number of elements a Tensor with this shape would have if it can be\n+   * calculated, else {@link Shape#UNKNOWN_SIZE}.\n+   */\n   public long size() {\n     if (size == null) {\n       size = computeSize(dimensionSizes);\n     }\n     return size;\n   }\n \n+  /**\n+   * The size of the dimension with the given index. If {@link Shape#isUnknown()} is true or\n+   * the size of the dimension with the given index has an unknown size, {@link Shape#UNKNOWN_SIZE}\n+   * is returned.\n+   * @param i the index of the dimension to get the size for. If this Shape has a known number of\n+   *          dimensions, it must be < {@link Shape#numDimensions()}. The index may be negative,\n+   *          in which case the position is counted from the end of the shape. E.g.\n+   *          {@code size(-1) returns the size of the last dimension, size(-2) the size of the\n+   *          second to last dimension etc.}\n+   * @return The size of the dimension with the given index if known, {@link Shape#UNKNOWN_SIZE}\n+   *         otherwise.\n+   */\n   public long size(int i) {\n-    return dimensionSizes != null ? dimensionSizes[i] : UNKNOWN_SIZE;\n+    if (dimensionSizes == null) {\n+      return UNKNOWN_SIZE;\n+    } else if (i >= 0) {\n+      return dimensionSizes[i];\n+    } else {\n+      return dimensionSizes[dimensionSizes.length + i];\n+    }\n   }\n \n+  /**\n+   * Returns the number of dimensions of this shape. -1 if unknown, 0 for a scalar, 1 for a vector,\n+   * 2 for a matrix etc.\n+   * @return the number of dimensions of this shape. -1 if unknown, 0 for a scalar, 1 for a vector,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MjIxOA==", "bodyText": "I prefer that anyway, should have removed all of them now.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432362218", "createdAt": "2020-05-29T09:21:26Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -61,21 +74,57 @@ public static Shape of(long... dimensionSizes) {\n     return new Shape(dimensionSizes);\n   }\n \n+  /**\n+   * Returns the total number of elements a Tensor with this shape would have. If this\n+   * {@link Shape#isUnknown()} is true or {@link Shape#hasUnknownDimension()}  is true,\n+   * {@link Shape#UNKNOWN_SIZE} is returned.\n+   *\n+   * @return the total number of elements a Tensor with this shape would have if it can be\n+   * calculated, else {@link Shape#UNKNOWN_SIZE}.\n+   */\n   public long size() {\n     if (size == null) {\n       size = computeSize(dimensionSizes);\n     }\n     return size;\n   }\n \n+  /**\n+   * The size of the dimension with the given index. If {@link Shape#isUnknown()} is true or\n+   * the size of the dimension with the given index has an unknown size, {@link Shape#UNKNOWN_SIZE}\n+   * is returned.\n+   * @param i the index of the dimension to get the size for. If this Shape has a known number of\n+   *          dimensions, it must be < {@link Shape#numDimensions()}. The index may be negative,\n+   *          in which case the position is counted from the end of the shape. E.g.\n+   *          {@code size(-1) returns the size of the last dimension, size(-2) the size of the\n+   *          second to last dimension etc.}\n+   * @return The size of the dimension with the given index if known, {@link Shape#UNKNOWN_SIZE}\n+   *         otherwise.\n+   */\n   public long size(int i) {\n-    return dimensionSizes != null ? dimensionSizes[i] : UNKNOWN_SIZE;\n+    if (dimensionSizes == null) {\n+      return UNKNOWN_SIZE;\n+    } else if (i >= 0) {\n+      return dimensionSizes[i];\n+    } else {\n+      return dimensionSizes[dimensionSizes.length + i];\n+    }\n   }\n \n+  /**\n+   * Returns the number of dimensions of this shape. -1 if unknown, 0 for a scalar, 1 for a vector,\n+   * 2 for a matrix etc.\n+   * @return the number of dimensions of this shape. -1 if unknown, 0 for a scalar, 1 for a vector,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMjU2NQ=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAwNjQwOnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo0Njo1MFrOGcMNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyMzowNlrOGcVWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzQyMQ==", "bodyText": "maybe add doc to this one as well? :)\nMight be worth mentioning that changing the values in the returned array will affect the actual shape (or even better, change the code to return a copy of the array, it might be less performant but it is safer).", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432213421", "createdAt": "2020-05-29T01:46:50Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -88,6 +137,38 @@ public boolean hasUnknownDimension() {\n     return false;\n   }\n \n+  /**\n+   * Returns whether this shape represents a scalar.\n+   * @return whether this shape represents a scalar.\n+   */\n+  public boolean isScalar() {\n+    return dimensionSizes != null && dimensionSizes.length == 0;\n+  }\n+\n+  /**\n+   * Returns whether this shape is the shape of a vector.\n+   * @return whether this shape is the shape of a vector.\n+   */\n+  public boolean isVector() {\n+    return dimensionSizes != null && dimensionSizes.length == 1;\n+  }\n+\n+  /**\n+   * Returns whether this shape is the shape of a matrix\n+   * @return whether this shape is the shape of a matrix\n+   */\n+  public boolean isMatrix() {\n+    return dimensionSizes != null && dimensionSizes.length == 2;\n+  }\n+\n+  /**\n+   * Returns whether the number of dimensions of this shape is unknown.\n+   * @return whether the number of dimensions of this shape is unknown.\n+   */\n+  public boolean isUnknown() {\n+    return dimensionSizes == null;\n+  }\n+\n   public long[] asArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MzE0MA==", "bodyText": "When I had a look at this, I thought about changing it to return a defensive copy, as the way it was seem like an oversight. But it was used in many places, so I did not feel I confident I knew enough about the inner workings to make such a change. This is why I didn't comment it: I wasn't sure about the intention. As per your suggestion, I changed the method to return a defensive copy and added the appropriate comment & test.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432363140", "createdAt": "2020-05-29T09:23:06Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -88,6 +137,38 @@ public boolean hasUnknownDimension() {\n     return false;\n   }\n \n+  /**\n+   * Returns whether this shape represents a scalar.\n+   * @return whether this shape represents a scalar.\n+   */\n+  public boolean isScalar() {\n+    return dimensionSizes != null && dimensionSizes.length == 0;\n+  }\n+\n+  /**\n+   * Returns whether this shape is the shape of a vector.\n+   * @return whether this shape is the shape of a vector.\n+   */\n+  public boolean isVector() {\n+    return dimensionSizes != null && dimensionSizes.length == 1;\n+  }\n+\n+  /**\n+   * Returns whether this shape is the shape of a matrix\n+   * @return whether this shape is the shape of a matrix\n+   */\n+  public boolean isMatrix() {\n+    return dimensionSizes != null && dimensionSizes.length == 2;\n+  }\n+\n+  /**\n+   * Returns whether the number of dimensions of this shape is unknown.\n+   * @return whether the number of dimensions of this shape is unknown.\n+   */\n+  public boolean isUnknown() {\n+    return dimensionSizes == null;\n+  }\n+\n   public long[] asArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzQyMQ=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAwNzI5OnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo0NzoyNlrOGcMOQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyNTowNFrOGcVabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzU3MQ==", "bodyText": "typo in eqaul", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432213571", "createdAt": "2020-05-29T01:47:26Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -97,6 +178,17 @@ public int hashCode() {\n     return dimensionSizes != null ? Arrays.hashCode(dimensionSizes) : super.hashCode();\n   }\n \n+  /**\n+   * Equals implementation for shapes. Two shapes are considered equal iff:\n+   * <p><ul>\n+   * <li>the number of dimensions is defined and equal for both\n+   * <li>the size of each dimension is defined and eqaul for both", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NDE0MQ==", "bodyText": "Fixed", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432364141", "createdAt": "2020-05-29T09:25:04Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -97,6 +178,17 @@ public int hashCode() {\n     return dimensionSizes != null ? Arrays.hashCode(dimensionSizes) : super.hashCode();\n   }\n \n+  /**\n+   * Equals implementation for shapes. Two shapes are considered equal iff:\n+   * <p><ul>\n+   * <li>the number of dimensions is defined and equal for both\n+   * <li>the size of each dimension is defined and eqaul for both", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzU3MQ=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAwODg0OnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo0ODoyOFrOGcMPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyNTozOFrOGcVbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzgzNQ==", "bodyText": "event it is... you meant even if it is?", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432213835", "createdAt": "2020-05-29T01:48:28Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -97,6 +178,17 @@ public int hashCode() {\n     return dimensionSizes != null ? Arrays.hashCode(dimensionSizes) : super.hashCode();\n   }\n \n+  /**\n+   * Equals implementation for shapes. Two shapes are considered equal iff:\n+   * <p><ul>\n+   * <li>the number of dimensions is defined and equal for both\n+   * <li>the size of each dimension is defined and eqaul for both\n+   * </ul><p>\n+   * If either shape has an unknown dimension (even if it is the same in both) or if either\n+   * shape has an unknown number of dimensions (even if both return {@code true} for\n+   * {@link Shape#isUnknown()}), they are not considered equal. However, a shape will always\n+   * equal itself, event it is unknown or contains unknown dimensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NDQ3Mg==", "bodyText": "Yup, that's what I meant. Fixed it.", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432364472", "createdAt": "2020-05-29T09:25:38Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -97,6 +178,17 @@ public int hashCode() {\n     return dimensionSizes != null ? Arrays.hashCode(dimensionSizes) : super.hashCode();\n   }\n \n+  /**\n+   * Equals implementation for shapes. Two shapes are considered equal iff:\n+   * <p><ul>\n+   * <li>the number of dimensions is defined and equal for both\n+   * <li>the size of each dimension is defined and eqaul for both\n+   * </ul><p>\n+   * If either shape has an unknown dimension (even if it is the same in both) or if either\n+   * shape has an unknown number of dimensions (even if both return {@code true} for\n+   * {@link Shape#isUnknown()}), they are not considered equal. However, a shape will always\n+   * equal itself, event it is unknown or contains unknown dimensions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMzgzNQ=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAxMzQyOnYy", "diffSide": "RIGHT", "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTo1MTo1MFrOGcMSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOToyNjowOVrOGcVc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxNDYxNA==", "bodyText": "shape's? same thing for append(Shape)", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432214614", "createdAt": "2020-05-29T01:51:50Z", "author": {"login": "karllessard"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -148,6 +278,51 @@ public Shape prepend(long firstDimension) {\n     return Shape.of(newDimensions);\n   }\n \n+  /** Returns a new shape, with a new last dimension added. In order for this call to succeed,\n+   * {@link Shape#isUnknown()} must be {@code false}.\n+   * @param lastDimension the dimension to append\n+   * @return a new shape with this shape's dimensions followed by the given dimension\n+   */\n+  public Shape append(long lastDimension) {\n+    long[] newDimensions = new long[dimensionSizes.length + 1];\n+    newDimensions[newDimensions.length - 1] = lastDimension;\n+    System.arraycopy(dimensionSizes, 0, newDimensions, 0, dimensionSizes.length);\n+\n+    return Shape.of(newDimensions);\n+  }\n+\n+  /** Returns a new shape, with another shapes' dimensions prepended.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NDc1Mw==", "bodyText": "I Really should have proof-read before committing...", "url": "https://github.com/tensorflow/java/pull/64#discussion_r432364753", "createdAt": "2020-05-29T09:26:09Z", "author": {"login": "chenkelmann"}, "path": "tensorflow-tools/src/main/java/org/tensorflow/tools/Shape.java", "diffHunk": "@@ -148,6 +278,51 @@ public Shape prepend(long firstDimension) {\n     return Shape.of(newDimensions);\n   }\n \n+  /** Returns a new shape, with a new last dimension added. In order for this call to succeed,\n+   * {@link Shape#isUnknown()} must be {@code false}.\n+   * @param lastDimension the dimension to append\n+   * @return a new shape with this shape's dimensions followed by the given dimension\n+   */\n+  public Shape append(long lastDimension) {\n+    long[] newDimensions = new long[dimensionSizes.length + 1];\n+    newDimensions[newDimensions.length - 1] = lastDimension;\n+    System.arraycopy(dimensionSizes, 0, newDimensions, 0, dimensionSizes.length);\n+\n+    return Shape.of(newDimensions);\n+  }\n+\n+  /** Returns a new shape, with another shapes' dimensions prepended.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxNDYxNA=="}, "originalCommit": {"oid": "48db7b8f36426d023b21b65cb8268256dc60d34b"}, "originalPosition": 225}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}