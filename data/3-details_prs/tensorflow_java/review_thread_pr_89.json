{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTExMjg4", "number": 89, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxMDo0M1rOETyjsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxMDo0M1rOETyjsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTg2NzM4OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxMDo0M1rOG5uUBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMDowNjo0MVrOHBOY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDgwNQ==", "bodyText": "Read through this change, and I believe the following API design would be both cleaner and more intuitive to use.  Wdyt?\n\nUpdate Loader and add withSignature(String... signatures).\nUpdate Loader.load() to also construct TfFunctions corresponding to the specified signatures.\nSignatureToNodeName can become private and not exposed to end user, preferrably living inside TfFunction as private.\nTfFunction should not have a reference to the session. Let SavedModelBundle manage the session (which it already does).  TfFunction can become a pure data class.\nAdd SavedModelBundle.call(String signature, Map<String, Tensor<?>> inputs, Map<String, Tensor<?>> outputs) to SavedModelBundle.   TfFunction can become private and not exposed to end user as well.\n\nWhat do you think about the above proposed API design?", "url": "https://github.com/tensorflow/java/pull/89#discussion_r463180805", "createdAt": "2020-07-30T18:10:43Z", "author": {"login": "yzhuang"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "diffHunk": "@@ -94,6 +98,101 @@ private Loader(String exportDir) {\n     private RunOptions runOptions = null;\n   }\n \n+  /**\n+   * SignatureToNodeName finds the node names in the {@link Graph} corresponding to the\n+   * input / output parameters of a <a\n+   * href=\"https://www.tensorflow.org/api_docs/python/tf/function\">tf.function</a>\n+   */\n+  public static final class SignatureToNodeName {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f243f3edf46fde83687de1cb426608e77dea3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMTY1MQ==", "bodyText": "Not exposing SignatureToNodeName (3) sounds good\nTtFunction not having reference to session (4) is good as well\nRegarding (5), it is desirable to have a way to do repeated call to the same function. Having a TfFuction class allows for this. I am also thinking removing runtime check currently done with each call in the Tensor call(Tensor) method and do that once.", "url": "https://github.com/tensorflow/java/pull/89#discussion_r463211651", "createdAt": "2020-07-30T19:08:44Z", "author": {"login": "Shajan"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "diffHunk": "@@ -94,6 +98,101 @@ private Loader(String exportDir) {\n     private RunOptions runOptions = null;\n   }\n \n+  /**\n+   * SignatureToNodeName finds the node names in the {@link Graph} corresponding to the\n+   * input / output parameters of a <a\n+   * href=\"https://www.tensorflow.org/api_docs/python/tf/function\">tf.function</a>\n+   */\n+  public static final class SignatureToNodeName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDgwNQ=="}, "originalCommit": {"oid": "59f243f3edf46fde83687de1cb426608e77dea3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4Mzk0MA==", "bodyText": "Thanks for your proposal @yzhuang , some thoughts on it:\n\nSignatureToNodeName can become private and not exposed to end user, preferrably living inside TfFunction as private.\n\nLooking at it, getSignatureToNodeName() can already be private in SavedModelBundle and SignatureToNodeName could be restricted at the default-package level.  I don't think it should be in TfFunction though as it maps all signatures while an instance of TfFunction is only mapped to one of them.\n\nTfFunction should not have a reference to the session. Let SavedModelBundle manage the session (which it already does). TfFunction can become a pure data class.\n\nThat would prevent though to just invoke function.call(tensor) to run the graph, which I personally like. While I understand that data classes have their lot of advantages, I'm not sure there is real gains for having TfFunction as one of them, especially that Session instances are thread-safe.\n\nAdd SavedModelBundle.call(String signature, Map<String, Tensor> inputs, Map> outputs) to SavedModelBundle. TfFunction can become private and not exposed to end user as well.\n\nAgain, I personally like the OO approach of letting users manipulating callable entities instead of having SavedModelBundle acting as a \"service\". Is the intention here is just to hide the TfFunction at the user level? Note that I was planning to reuse the same object to add new signatures to a model when exporting it (but I could also do it just with SavedModelBundle if we decide to take that direction).", "url": "https://github.com/tensorflow/java/pull/89#discussion_r463683940", "createdAt": "2020-07-31T15:38:15Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "diffHunk": "@@ -94,6 +98,101 @@ private Loader(String exportDir) {\n     private RunOptions runOptions = null;\n   }\n \n+  /**\n+   * SignatureToNodeName finds the node names in the {@link Graph} corresponding to the\n+   * input / output parameters of a <a\n+   * href=\"https://www.tensorflow.org/api_docs/python/tf/function\">tf.function</a>\n+   */\n+  public static final class SignatureToNodeName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDgwNQ=="}, "originalCommit": {"oid": "59f243f3edf46fde83687de1cb426608e77dea3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjg3OA==", "bodyText": "Hi Karl and Shajan,\nI have been busy with traveling, and didn't have time to follow up on this thread. Please feel free to take whatever you find helpful from my suggestions, and discard the rest. Thank you for taking time to go through my comments!", "url": "https://github.com/tensorflow/java/pull/89#discussion_r470916878", "createdAt": "2020-08-15T00:49:57Z", "author": {"login": "yzhuang"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "diffHunk": "@@ -94,6 +98,101 @@ private Loader(String exportDir) {\n     private RunOptions runOptions = null;\n   }\n \n+  /**\n+   * SignatureToNodeName finds the node names in the {@link Graph} corresponding to the\n+   * input / output parameters of a <a\n+   * href=\"https://www.tensorflow.org/api_docs/python/tf/function\">tf.function</a>\n+   */\n+  public static final class SignatureToNodeName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDgwNQ=="}, "originalCommit": {"oid": "59f243f3edf46fde83687de1cb426608e77dea3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NjM2MA==", "bodyText": "Hi @karllessard and @Shajan ,\nSorry for the late reply on your comment\u2014just landed in Hong Kong :)\nMy suggestion to let SavedModel manage the session is not about thread safety, but about resource ownership. SavedModel currently \u201cowns\u201d the session and is responsible for closing the resource to avoid memory leaks.  If we create TFFunction objects holding references to the session, it complicate the resource ownership mental model.  For example, we will need to do things such as the below:\n\nPerform reference counting on the session, and have the last \u201cuser\u201d of the session close it.  This is user friendly, but introduces complexity and room for bugs.  OR\nContinue to let SavedModel own the session, but TFFunction objects need to anticipate that it\u2019s underlying resource (the session) can become defunct at anytime.   This can be counterintuitive to users as users likely need to surround their call with a try/catch.\n\n\nIs the intention here is just to hide the TfFunction at the user level?\n\nMy intention was to not have to think about the resource ownership problem, and keep the resource ownership unchanged. The API of having TFFunctions be callable and exposed to users sounds great to me, and we need to think about the above 1 & 2 though.  This is not a contrived scenario: we already do model hot swapping at Twitter in our prediction servers, and SavedModels are hot swapped without restarting the JVM.\nThank you Karl and Shajan!", "url": "https://github.com/tensorflow/java/pull/89#discussion_r471046360", "createdAt": "2020-08-16T00:06:41Z", "author": {"login": "yzhuang"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/SavedModelBundle.java", "diffHunk": "@@ -94,6 +98,101 @@ private Loader(String exportDir) {\n     private RunOptions runOptions = null;\n   }\n \n+  /**\n+   * SignatureToNodeName finds the node names in the {@link Graph} corresponding to the\n+   * input / output parameters of a <a\n+   * href=\"https://www.tensorflow.org/api_docs/python/tf/function\">tf.function</a>\n+   */\n+  public static final class SignatureToNodeName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDgwNQ=="}, "originalCommit": {"oid": "59f243f3edf46fde83687de1cb426608e77dea3d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1621, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}