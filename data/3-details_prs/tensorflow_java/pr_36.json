{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTcyOTU5", "number": 36, "title": "Various op-related changes", "bodyText": "Here is a summary for all changes applied in this PR:\n\nRename PrimitiveOp class to RawOp to match Python name\nRollback tf.val to tf.constant to match Python name\nMove PrimitiveOp.op() at the Op interface level, which converts an op to a single Operation\nChange training optimizers and initializers to accept and return instances of Op instead of Operand\nExtend Op from Operand\nAdd new methods in Session for executing graph initializers in one call (runInitializers())\nAdd Init operator (see comment)\n\nCC: @dhruvrajan , @Craigacp", "createdAt": "2020-03-28T23:59:46Z", "url": "https://github.com/tensorflow/java/pull/36", "merged": true, "mergeCommit": {"oid": "bd5114515b3de6e8b9af8f9ce17858322332dd57"}, "closed": true, "closedAt": "2020-04-03T20:00:38Z", "author": {"login": "karllessard"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRm98ngH2gAyMzk1MTcyOTU5OjlkZmZiZDA2YzdhOWEzNTJiNTIzYWRkMjIzOWIwMzJkZWFmMWFjMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUFkBHAFqTM4NzUwMzc1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9dffbd06c7a9a352b523add2239b032deaf1ac29", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/9dffbd06c7a9a352b523add2239b032deaf1ac29", "committedDate": "2020-03-27T02:06:51Z", "message": "Rollback operator 'val' to 'constant'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cdccbca0f81d1384cdf9f08534d83412f4af2d0", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/2cdccbca0f81d1384cdf9f08534d83412f4af2d0", "committedDate": "2020-03-28T22:00:10Z", "message": "Rename 'PrimitiveOp' to 'RawOp'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/13cdae07119869df0fd77d0b91b259465ae87313", "committedDate": "2020-03-29T15:44:26Z", "message": "Execute graph initializers in a single call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "519ff2a1cd5e457ead03ac4d208a666e21a8a6f3", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/519ff2a1cd5e457ead03ac4d208a666e21a8a6f3", "committedDate": "2020-03-28T23:52:10Z", "message": "Execute graph initializers in a single call"}, "afterCommit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/13cdae07119869df0fd77d0b91b259465ae87313", "committedDate": "2020-03-29T15:44:26Z", "message": "Execute graph initializers in a single call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDI5MjA4", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-383429208", "createdAt": "2020-03-29T16:26:39Z", "commit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjoyNjozOVrOF9THEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjoyNjozOVrOF9THEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMDU2MA==", "bodyText": "Nice!", "url": "https://github.com/tensorflow/java/pull/36#discussion_r399820560", "createdAt": "2020-03-29T16:26:39Z", "author": {"login": "dhruvrajan"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Graph.java", "diffHunk": "@@ -183,17 +180,10 @@ public synchronized void addInitializer(Op initializer) {\n   }\n \n   /**\n-   * Returns an op which initializers all the variables.\n-   * @return The initializer operation.\n+   * Returns all initializers added to the graph via {@link #addInitializer(Op)}\n    */\n-  public NoOp variablesInitializer() {\n-    return variablesInitializer(DEFAULT_INIT_NAME);\n-  }\n-\n-  public NoOp variablesInitializer(String name) {\n-    Scope scope = new Scope(this);\n-    scope = scope.withName(name).withControlDependencies(initializers);\n-    return NoOp.create(scope);\n+  public List<Op> initializers() {\n+    return Collections.unmodifiableList(initializers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98fb67b811249889d22d5dd47917206c0969bae5", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/98fb67b811249889d22d5dd47917206c0969bae5", "committedDate": "2020-03-29T21:08:29Z", "message": "Add an Op as a target"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDY5NzM2", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-383469736", "createdAt": "2020-03-29T23:37:17Z", "commit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMzozNzoxN1rOF9WMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMzozNzoxN1rOF9WMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3MDk4NA==", "bodyText": "Thanks for these changes Karl, I think these will be super helpful! Quick thought:\nSince the new Init class is a RawOp, do we gain anything by adding the runInit method, as opposed to running the RawOp in the normal fashion:\nsession.runner().addTarget(initOp).run()\n\nWe could even add additional run methods to Session that accept single Op/Operand/etc. arguments, and have them automatically added as targets, to achieve syntax like\nsession.run(initOp)\nTensorFlow Python (pre 2.0) has a standard syntax for the variable initializers (for both global and local variables)\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n \n    ...\n\nMaybe we could modify the Java API to match? It may not yet be on our roadmap to distinguish between global (shared across processes) variables and local (per-process) variables, but we could perhaps try for something like:\ntry (Graph graph = new Graph()) {\n  Ops tf = Ops.create(graph);\n\n  ...\n\n  try (Session session = new Session(graph)) {\n    session.addTarget(tf.variablesInitializer()).run(); // or session.run(tf.variablesInitializer)\n\n    ...\n\n  }\n}\n\ntf.variablesInitializer() can call Graph.initializers() that you added below. To make it even simpler, we could automatically add the Assign op to a graph when tf.variable is called with an initial value, so users don't need to keep track of adding each initialization to the initializers list.\nThe global vs. local variable distinction may be something we want to add later on though...\nWhat do you think?", "url": "https://github.com/tensorflow/java/pull/36#discussion_r399870984", "createdAt": "2020-03-29T23:37:17Z", "author": {"login": "dhruvrajan"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Session.java", "diffHunk": "@@ -432,6 +434,106 @@ public Runner runner() {\n     return new Runner();\n   }\n \n+  /**\n+   * Run all graph initializers.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training\n+   * loop using a session {@link Runner}.</p>\n+   *\n+   * <p>This method invokes {@link #runInit(String)} using the default name for the init\n+   * operation, which is {@link Init#DEFAULT_NAME}. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit();\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   */\n+  public void runInit() {\n+    runInit(Init.DEFAULT_NAME);\n+  }\n+\n+  /**\n+   * Run all graph initializers grouped under the {@code initOpName} operation.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training loop using a\n+   * session {@link Runner}.</p>\n+   *\n+   * <p>The {@code initOpName} is the name of a single operation already added to the\n+   * graph that executes all graph initializers at once. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.withName(\"initialize\").init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit(\"initialize\");\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   *\n+   * @param initOpName name of the initializer operation.\n+   */\n+  public void runInit(String initOpName) {\n+    Operation operation = graph.operation(initOpName);\n+    if (operation == null) {\n+      throw new IllegalArgumentException(\"Initializer operation named '\"\n+          + initOpName + \"' cannot be found in the graph\");\n+    }\n+    runner().addTarget(operation).run();\n+  }\n+\n+  /**\n+   * Run all graph initializers registered by the given {@code init} op.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training\n+   * loop using a session {@link Runner}.</p>\n+   *\n+   * <p>This method can be used if the graph is being built by the same program running the session.\n+   * For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   Init init = tf.withName(\"initialize\").init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit(init);\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   */\n+  public void runInit(Init initOp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODAzMjY4", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-384803268", "createdAt": "2020-03-31T14:41:25Z", "commit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo0MToyNVrOF-ZMdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo0MzoyNlrOF-ZS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2ODgyMw==", "bodyText": "Can we check the type of the operation too? If the user creates something that doesn't use the init mechanism but does have the name it might be nice to have some kind of warning.", "url": "https://github.com/tensorflow/java/pull/36#discussion_r400968823", "createdAt": "2020-03-31T14:41:25Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Session.java", "diffHunk": "@@ -432,6 +434,106 @@ public Runner runner() {\n     return new Runner();\n   }\n \n+  /**\n+   * Run all graph initializers.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training\n+   * loop using a session {@link Runner}.</p>\n+   *\n+   * <p>This method invokes {@link #runInit(String)} using the default name for the init\n+   * operation, which is {@link Init#DEFAULT_NAME}. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit();\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   */\n+  public void runInit() {\n+    runInit(Init.DEFAULT_NAME);\n+  }\n+\n+  /**\n+   * Run all graph initializers grouped under the {@code initOpName} operation.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training loop using a\n+   * session {@link Runner}.</p>\n+   *\n+   * <p>The {@code initOpName} is the name of a single operation already added to the\n+   * graph that executes all graph initializers at once. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.withName(\"initialize\").init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit(\"initialize\");\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   *\n+   * @param initOpName name of the initializer operation.\n+   */\n+  public void runInit(String initOpName) {\n+    Operation operation = graph.operation(initOpName);\n+    if (operation == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3MDQ4MA==", "bodyText": "That said, it might be an interop issue with graphs created in other TF languages if it warns every time you run a graph created in Python.", "url": "https://github.com/tensorflow/java/pull/36#discussion_r400970480", "createdAt": "2020-03-31T14:43:26Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Session.java", "diffHunk": "@@ -432,6 +434,106 @@ public Runner runner() {\n     return new Runner();\n   }\n \n+  /**\n+   * Run all graph initializers.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training\n+   * loop using a session {@link Runner}.</p>\n+   *\n+   * <p>This method invokes {@link #runInit(String)} using the default name for the init\n+   * operation, which is {@link Init#DEFAULT_NAME}. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit();\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   */\n+  public void runInit() {\n+    runInit(Init.DEFAULT_NAME);\n+  }\n+\n+  /**\n+   * Run all graph initializers grouped under the {@code initOpName} operation.\n+   *\n+   * <p>Initializers must be executed once before running the graph in a training loop using a\n+   * session {@link Runner}.</p>\n+   *\n+   * <p>The {@code initOpName} is the name of a single operation already added to the\n+   * graph that executes all graph initializers at once. For example:</p>\n+   * <pre>{@code\n+   * try (Graph g = new Graph()) {\n+   *   Ops tf = Ops.create(g);\n+   *\n+   *   Variable<TInt32> x = tf.variable(tf.constant(10));\n+   *   Variable<TInt32> y = tf.variable(tf.constant(20));\n+   *   Add<TInt32> z = tf.math.add(x, y);\n+   *   tf.withName(\"initialize\").init();\n+   *\n+   *   try (Session s = new Session(g)) {\n+   *     s.runInit(\"initialize\");\n+   *\n+   *     try (Tensor<TInt32> t = s.runner().fetch(z).run().get(0).expect(TInt32.DTYPE)) {\n+   *       assertEquals(30, t.data().getInt());\n+   *     }\n+   *   }\n+   * }\n+   * }</pre>\n+   *\n+   * @param initOpName name of the initializer operation.\n+   */\n+  public void runInit(String initOpName) {\n+    Operation operation = graph.operation(initOpName);\n+    if (operation == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2ODgyMw=="}, "originalCommit": {"oid": "13cdae07119869df0fd77d0b91b259465ae87313"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDg3MzM0", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-386087334", "createdAt": "2020-04-02T03:33:50Z", "commit": {"oid": "98fb67b811249889d22d5dd47917206c0969bae5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f48e827e03bbd04bbd3b365c44906b94eee6c2c", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/0f48e827e03bbd04bbd3b365c44906b94eee6c2c", "committedDate": "2020-04-03T03:58:20Z", "message": "Run any single op from session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be3139d9138b7e484bf4e536ddee5f00dbb9fa9", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/8be3139d9138b7e484bf4e536ddee5f00dbb9fa9", "committedDate": "2020-04-03T03:58:39Z", "message": "Remove traces"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzU2MTM1", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-387356135", "createdAt": "2020-04-03T15:24:13Z", "commit": {"oid": "0f48e827e03bbd04bbd3b365c44906b94eee6c2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyNDoxM1rOGAaR9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyNDoxM1rOGAaR9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4Mzc2Ng==", "bodyText": "This looks awesome!", "url": "https://github.com/tensorflow/java/pull/36#discussion_r403083766", "createdAt": "2020-04-03T15:24:13Z", "author": {"login": "dhruvrajan"}, "path": "tensorflow-core/tensorflow-core-api/src/test/java/org/tensorflow/SessionTest.java", "diffHunk": "@@ -173,31 +172,9 @@ public void runInit() {\n       tf.initAdd(tf.assign(var1, tf.constant(10)));\n       Variable<TInt32> var2 = tf.variable(tf.constant(20));\n       Add<TInt32> add = tf.math.add(var1, var2);\n-      tf.init();\n \n       try (Session s = new Session(g)) {\n-        s.runInit();\n-\n-        try (Tensor<TInt32> t = s.runner().fetch(add).run().get(0).expect(TInt32.DTYPE)) {\n-          assertEquals(30, t.data().getInt());\n-        }\n-      }\n-    }\n-  }\n-\n-  @Test\n-  public void runInitByVar() {\n-    try (Graph g = new Graph()) {\n-      Ops tf = Ops.create(g);\n-\n-      Variable<TInt32> var1 = tf.variable(Shape.scalar(), TInt32.DTYPE);\n-      tf.initAdd(tf.assign(var1, tf.constant(10)));\n-      Variable<TInt32> var2 = tf.variable(tf.constant(20));\n-      Add<TInt32> add = tf.math.add(var1, var2);\n-      Init init = tf.withName(\"initialize\").init();\n-\n-      try (Session s = new Session(g)) {\n-        s.runInit(init);\n+        s.run(tf.init());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f48e827e03bbd04bbd3b365c44906b94eee6c2c"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e27f0ee77a8f38b0c0cbd70db98e7165311c90", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/27e27f0ee77a8f38b0c0cbd70db98e7165311c90", "committedDate": "2020-04-03T16:40:17Z", "message": "Update exception message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTAzNzUz", "url": "https://github.com/tensorflow/java/pull/36#pullrequestreview-387503753", "createdAt": "2020-04-03T18:53:26Z", "commit": {"oid": "8be3139d9138b7e484bf4e536ddee5f00dbb9fa9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3439, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}