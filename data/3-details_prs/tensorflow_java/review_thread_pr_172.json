{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjU5MjMz", "number": 172, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzoyOTo0NVrOFHAMkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0MjoyNFrOFHAWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg3NTY5OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzoyOTo0NVrOIIRwRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMzowNzoyNlrOII4Thg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MDQwNA==", "bodyText": "We might want to have this in a different package as the module system operates on a package level (so when we go to 11 we could not export that package). Though it depends how the methods are used.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545550404", "createdAt": "2020-12-18T03:29:45Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.tensorflow;\n+\n+import org.tensorflow.internal.c_api.TF_Tensor;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Maps the native memory of a {@link RawTensor} to a n-dimensional typed data space\n+ * accessible from the JVM.\n+ *\n+ * <p>Usage of this class is reserved for internal purposes only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0MzE3OQ==", "bodyText": "One of the goal of this abstract class is to be able to access the native handle of the raw tensor from a TensorMapper subclass, this is done via nativeTensor(RawTensor) and it needs to reside in the org.tensorflow package.\nUnless we want to make RawTensor.nativeHandle() public (which I would prefer to avoid) or go back to the previous design where both RawTensor and TF_Tensor are passed to the mapper but that triggered a series of other concerns as discussed in my previous PR.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545843179", "createdAt": "2020-12-18T13:51:39Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.tensorflow;\n+\n+import org.tensorflow.internal.c_api.TF_Tensor;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Maps the native memory of a {@link RawTensor} to a n-dimensional typed data space\n+ * accessible from the JVM.\n+ *\n+ * <p>Usage of this class is reserved for internal purposes only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MDQwNA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NTAyNg==", "bodyText": "Ok. I definitely don't want the native handle method to be public. I feel like there is probably a way around this, but it might be more trouble than it's worth, so leaving it here is fine.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545965026", "createdAt": "2020-12-18T17:01:18Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.tensorflow;\n+\n+import org.tensorflow.internal.c_api.TF_Tensor;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Maps the native memory of a {@link RawTensor} to a n-dimensional typed data space\n+ * accessible from the JVM.\n+ *\n+ * <p>Usage of this class is reserved for internal purposes only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MDQwNA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NTI4Mw==", "bodyText": "Split packages are definitely something you want to avoid at all costs. These are going to be OSGi users complaining about this as well.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r546165283", "createdAt": "2020-12-19T00:56:00Z", "author": {"login": "saudet"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.tensorflow;\n+\n+import org.tensorflow.internal.c_api.TF_Tensor;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Maps the native memory of a {@link RawTensor} to a n-dimensional typed data space\n+ * accessible from the JVM.\n+ *\n+ * <p>Usage of this class is reserved for internal purposes only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MDQwNA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MjAyMg==", "bodyText": "Well we could reflectively access a private method as we'd be in the same module. But that's asking for trouble and sets a bad precedent. There's probably something we could do that's a bit tricksy with inner classes, but I can't currently see all the way through it, and again it's probably more trouble than it's worth.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r546182022", "createdAt": "2020-12-19T03:07:26Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/TensorMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.tensorflow;\n+\n+import org.tensorflow.internal.c_api.TF_Tensor;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Maps the native memory of a {@link RawTensor} to a n-dimensional typed data space\n+ * accessible from the JVM.\n+ *\n+ * <p>Usage of this class is reserved for internal purposes only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MDQwNA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg4MDMxOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/buffer/ByteSequencer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzozMjoxM1rOIIRyxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzowMjo0NFrOIIrHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MTA0NA==", "bodyText": "Maybe ByteArrayProducer? ByteSequencer sounds like it can change the sequence but my reading of the iterator is that the iteration order is fixed.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545551044", "createdAt": "2020-12-18T03:32:13Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/buffer/ByteSequencer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.internal.buffer;\n+\n+import java.util.Iterator;\n+import java.util.function.Function;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.NdArraySequence;\n+\n+/**\n+ * Produces sequence of bytes to be stored in a {@link ByteSequenceTensorBuffer}.\n+ *\n+ * @param <T> source of bytes (byte arrays or strings)\n+ */\n+public class ByteSequencer<T> implements Iterable<byte[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0NTA0Nw==", "bodyText": "Yeah, I wasn't sure about this one neither... I was hesitating between this and ByteSequenceProducer so sounds like the second choice would be a good trade off? (I prefer ByteSequence to ByteArray to preserve the symmetry with ByteSequenceTensorBuffer, or I rename the latter to ByteArrayTensorBuffer?).", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545845047", "createdAt": "2020-12-18T13:55:07Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/buffer/ByteSequencer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.internal.buffer;\n+\n+import java.util.Iterator;\n+import java.util.function.Function;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.NdArraySequence;\n+\n+/**\n+ * Produces sequence of bytes to be stored in a {@link ByteSequenceTensorBuffer}.\n+ *\n+ * @param <T> source of bytes (byte arrays or strings)\n+ */\n+public class ByteSequencer<T> implements Iterable<byte[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MTA0NA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NTgyNw==", "bodyText": "I think ByteSequenceProducer works.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545965827", "createdAt": "2020-12-18T17:02:44Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/buffer/ByteSequencer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.tensorflow.internal.buffer;\n+\n+import java.util.Iterator;\n+import java.util.function.Function;\n+import org.tensorflow.ndarray.NdArray;\n+import org.tensorflow.ndarray.NdArraySequence;\n+\n+/**\n+ * Produces sequence of bytes to be stored in a {@link ByteSequenceTensorBuffer}.\n+ *\n+ * @param <T> source of bytes (byte arrays or strings)\n+ */\n+public class ByteSequencer<T> implements Iterable<byte[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MTA0NA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg4MjU5OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TBfloat16Mapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzozMzoyOFrOIIR0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1NTo0MlrOIIjwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MTM2Nw==", "bodyText": "Did you mean to change the access level of mapDense here? It's protected in the super class and the other implementations.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545551367", "createdAt": "2020-12-18T03:33:28Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TBfloat16Mapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.tensorflow.internal.types;\n+\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.DataType;\n+import org.tensorflow.RawTensor;\n+import org.tensorflow.internal.buffer.TensorBuffers;\n+import org.tensorflow.ndarray.buffer.FloatDataBuffer;\n+import org.tensorflow.ndarray.buffer.layout.DataLayouts;\n+import org.tensorflow.ndarray.impl.dense.FloatDenseNdArray;\n+import org.tensorflow.types.TBfloat16;\n+\n+/**\n+ * Maps memory of {@link org.tensorflow.proto.framework.DataType#DT_BFLOAT16} tensors\n+ * to a n-dimensional data space.\n+ */\n+public class TBfloat16Mapper extends TensorMapper<TBfloat16> {\n+\n+  @Override\n+  public TBfloat16 mapDense(RawTensor tensor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0NTM5OA==", "bodyText": "ah true thanks, I'll keep it protected in subclasses as well, good catch!", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545845398", "createdAt": "2020-12-18T13:55:42Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TBfloat16Mapper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.tensorflow.internal.types;\n+\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.DataType;\n+import org.tensorflow.RawTensor;\n+import org.tensorflow.internal.buffer.TensorBuffers;\n+import org.tensorflow.ndarray.buffer.FloatDataBuffer;\n+import org.tensorflow.ndarray.buffer.layout.DataLayouts;\n+import org.tensorflow.ndarray.impl.dense.FloatDenseNdArray;\n+import org.tensorflow.types.TBfloat16;\n+\n+/**\n+ * Maps memory of {@link org.tensorflow.proto.framework.DataType#DT_BFLOAT16} tensors\n+ * to a n-dimensional data space.\n+ */\n+public class TBfloat16Mapper extends TensorMapper<TBfloat16> {\n+\n+  @Override\n+  public TBfloat16 mapDense(RawTensor tensor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MTM2Nw=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg4NzMyOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TInt64Mapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzozNTo0OFrOIIR2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1NjowN1rOIIjxfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MjAxMA==", "bodyText": "Should we make this final?", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545552010", "createdAt": "2020-12-18T03:35:48Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TInt64Mapper.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.tensorflow.internal.types;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.RawTensor;\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.internal.buffer.TensorBuffers;\n+import org.tensorflow.ndarray.buffer.LongDataBuffer;\n+import org.tensorflow.ndarray.impl.dense.LongDenseNdArray;\n+import org.tensorflow.types.TInt64;\n+\n+/**\n+ * Maps memory of {@link org.tensorflow.proto.framework.DataType#DT_INT64} tensors\n+ * to a n-dimensional data space.\n+ */\n+public class TInt64Mapper extends TensorMapper<TInt64> {\n+\n+  @Override\n+  protected TInt64 mapDense(RawTensor tensor) {\n+    LongDataBuffer buffer = TensorBuffers.toLongs(nativeHandle(tensor));\n+    return new DenseTInt64(tensor, buffer);\n+  }\n+\n+  private static class DenseTInt64 extends LongDenseNdArray implements TInt64 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0NTYyOA==", "bodyText": "We should yes, thanks", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545845628", "createdAt": "2020-12-18T13:56:07Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TInt64Mapper.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.tensorflow.internal.types;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.RawTensor;\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.internal.buffer.TensorBuffers;\n+import org.tensorflow.ndarray.buffer.LongDataBuffer;\n+import org.tensorflow.ndarray.impl.dense.LongDenseNdArray;\n+import org.tensorflow.types.TInt64;\n+\n+/**\n+ * Maps memory of {@link org.tensorflow.proto.framework.DataType#DT_INT64} tensors\n+ * to a n-dimensional data space.\n+ */\n+public class TInt64Mapper extends TensorMapper<TInt64> {\n+\n+  @Override\n+  protected TInt64 mapDense(RawTensor tensor) {\n+    LongDataBuffer buffer = TensorBuffers.toLongs(nativeHandle(tensor));\n+    return new DenseTInt64(tensor, buffer);\n+  }\n+\n+  private static class DenseTInt64 extends LongDenseNdArray implements TInt64 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MjAxMA=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg4Nzc5OnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TInt64Mapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzozNTo1OFrOIIR2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzozNTo1OFrOIIR2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MjA2OQ==", "bodyText": "Should these classes all be final?", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545552069", "createdAt": "2020-12-18T03:35:58Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/TInt64Mapper.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.tensorflow.internal.types;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.RawTensor;\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.internal.buffer.TensorBuffers;\n+import org.tensorflow.ndarray.buffer.LongDataBuffer;\n+import org.tensorflow.ndarray.impl.dense.LongDenseNdArray;\n+import org.tensorflow.types.TInt64;\n+\n+/**\n+ * Maps memory of {@link org.tensorflow.proto.framework.DataType#DT_INT64} tensors\n+ * to a n-dimensional data space.\n+ */\n+public class TInt64Mapper extends TensorMapper<TInt64> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg5OTcwOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBfloat16.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0MjowNlrOIIR9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzowMTo0OFrOIIrE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MzczMg==", "bodyText": "Should we explicitly put static final on here? The NAME field is marked as such, and I spent a while looking at this line before I remembered that fields are always static and final on interfaces.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545553732", "createdAt": "2020-12-18T03:42:06Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBfloat16.java", "diffHunk": "@@ -54,7 +50,7 @@\n   static final String NAME = \"BFLOAT16\";\n \n   /** Type metadata */\n-  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, TBfloat16Impl::mapTensor);\n+  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, new TBfloat16Mapper());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0NjI5Nw==", "bodyText": "We could but this DataType class is going to disappear in my next (and last?) PR about the tensor type refactoring so let's leave it as is for now.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545846297", "createdAt": "2020-12-18T13:57:19Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBfloat16.java", "diffHunk": "@@ -54,7 +50,7 @@\n   static final String NAME = \"BFLOAT16\";\n \n   /** Type metadata */\n-  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, TBfloat16Impl::mapTensor);\n+  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, new TBfloat16Mapper());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MzczMg=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NTI5OA==", "bodyText": "Sure.", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545965298", "createdAt": "2020-12-18T17:01:48Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBfloat16.java", "diffHunk": "@@ -54,7 +50,7 @@\n   static final String NAME = \"BFLOAT16\";\n \n   /** Type metadata */\n-  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, TBfloat16Impl::mapTensor);\n+  DataType<TBfloat16> DTYPE = DataType.create(NAME, 14, 2, new TBfloat16Mapper());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1MzczMg=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODkwMDEyOnYy", "diffSide": "RIGHT", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0MjoyNFrOIIR9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzo1Nzo1MVrOIIj1Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1Mzc5Ng==", "bodyText": "static final?", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545553796", "createdAt": "2020-12-18T03:42:24Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBool.java", "diffHunk": "@@ -45,7 +46,7 @@\n   static final String NAME = \"BOOL\";\n \n   /** Type metadata */\n-  DataType<TBool> DTYPE = DataType.create(NAME, 10, 1, TBoolImpl::mapTensor);\n+  DataType<TBool> DTYPE = DataType.create(NAME, 10, 1, new TBoolMapper());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0NjYxMQ==", "bodyText": "Idem as here", "url": "https://github.com/tensorflow/java/pull/172#discussion_r545846611", "createdAt": "2020-12-18T13:57:51Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/TBool.java", "diffHunk": "@@ -45,7 +46,7 @@\n   static final String NAME = \"BOOL\";\n \n   /** Type metadata */\n-  DataType<TBool> DTYPE = DataType.create(NAME, 10, 1, TBoolImpl::mapTensor);\n+  DataType<TBool> DTYPE = DataType.create(NAME, 10, 1, new TBoolMapper());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1Mzc5Ng=="}, "originalCommit": {"oid": "f4b6fe3fe53421e416b5dd9f130da862f3e6ca4f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1661, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}