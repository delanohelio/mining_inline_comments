{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzM5NzQz", "number": 132, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo1MTowMlrOEtvvbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo1MTowMlrOEtvvbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDAzNTY2OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo1MTowMlrOHht6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzozNDoxM1rOHi97ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExNzMxOA==", "bodyText": "What about adding a new README.md file under the tensorflow-framework module where we explain more in detail what is the nature of this library. And we can add a link to this page in the tensorflow-framework module item above.", "url": "https://github.com/tensorflow/java/pull/132#discussion_r505117318", "createdAt": "2020-10-15T01:51:02Z", "author": {"login": "karllessard"}, "path": "README.md", "diffHunk": "@@ -24,24 +24,33 @@ The following describes the layout of the repository and its different artifacts\n     TensorFlow and just want a thin layer to access the TensorFlow runtime from the JVM \n     \n * `tensorflow-framework`\n-  * Complete but fairly primitive API for building and training neural networks with TensorFlow\n-  * Intended audience: expert neural network developers who prefer to make explicit, detailed decisions \n-    about their models and training algorithms\n-    \n-* `tensorflow-keras` (early WIP; only defined in `dev` profile)\n-  * Partially covers the framework API to allow simpler definition of models and training algorithms\n-  * Intended to be familiar if you know the Python Keras API, but prioritizes clean, idiomatic Java \n-    over fidelity to Python\n-  * Provides defaults based on common best practices\n-  * Allows developers to selectively be more explicit by overriding defaults or dipping into the framework API\n-  * Intended audience: neural network developers across the spectrum from beginner to expert who prefer to\n-    rely mostly on best-practice defaults and then selectively fine-tune\n-  \n+  * Primary API for building and training neural networks with TensorFlow\n+  * Intended audience: neural network developers\n+     \n * `ndarray`\n   * Generic utility library for n-dimensional data I/O operations\n   * Used by TensorFlow but does not depend on TensorFlow\n   * Intended audience: any developer who needs a Java n-dimensional array implementation, whether or not they\n     use it with TensorFlow\n+    \n+More specifically, here are the goals for the framework API:\n+\n+* If either you know how to implement a model in the Python Keras API, or you are reimplementing an \n+  existing Python Keras model in Java, you should be able to cleanly and naturally follow the same \n+  high-level structure in the framework API.\n+\n+* Also, given some familiarity with patterns followed throughout the framework API, you should be \n+  able to easily translate every detail of a Python Keras implementation into the framework API.\n+\n+* However, the framework API is not intended to literally mimic the Python Keras API. Rather, it \n+  should expose the same capabilities in an API that feels natural and idiomatic to a Java \n+  programmer who does not know Keras. If we ever find ourselves unable to reconcile this goal with \n+  easy translation from Python Keras, we may split out a Keras layer.\n+\n+* Also, the framework API should support fine control over all aspects of modeling, training, and \n+  inference. Unlike with Python Keras, we want this to feel like staying in the same API rather \n+  than diving into a separate layer. But here again, if we are ever unable to reconcile this goal \n+  with easy translation from Python Keras, we may split the framework API into two layers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "630ac84cc4f99928a6faee25a73d1e9fee0bdc48"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyODM1NQ==", "bodyText": "Done.", "url": "https://github.com/tensorflow/java/pull/132#discussion_r506428355", "createdAt": "2020-10-16T13:34:13Z", "author": {"login": "deansher"}, "path": "README.md", "diffHunk": "@@ -24,24 +24,33 @@ The following describes the layout of the repository and its different artifacts\n     TensorFlow and just want a thin layer to access the TensorFlow runtime from the JVM \n     \n * `tensorflow-framework`\n-  * Complete but fairly primitive API for building and training neural networks with TensorFlow\n-  * Intended audience: expert neural network developers who prefer to make explicit, detailed decisions \n-    about their models and training algorithms\n-    \n-* `tensorflow-keras` (early WIP; only defined in `dev` profile)\n-  * Partially covers the framework API to allow simpler definition of models and training algorithms\n-  * Intended to be familiar if you know the Python Keras API, but prioritizes clean, idiomatic Java \n-    over fidelity to Python\n-  * Provides defaults based on common best practices\n-  * Allows developers to selectively be more explicit by overriding defaults or dipping into the framework API\n-  * Intended audience: neural network developers across the spectrum from beginner to expert who prefer to\n-    rely mostly on best-practice defaults and then selectively fine-tune\n-  \n+  * Primary API for building and training neural networks with TensorFlow\n+  * Intended audience: neural network developers\n+     \n * `ndarray`\n   * Generic utility library for n-dimensional data I/O operations\n   * Used by TensorFlow but does not depend on TensorFlow\n   * Intended audience: any developer who needs a Java n-dimensional array implementation, whether or not they\n     use it with TensorFlow\n+    \n+More specifically, here are the goals for the framework API:\n+\n+* If either you know how to implement a model in the Python Keras API, or you are reimplementing an \n+  existing Python Keras model in Java, you should be able to cleanly and naturally follow the same \n+  high-level structure in the framework API.\n+\n+* Also, given some familiarity with patterns followed throughout the framework API, you should be \n+  able to easily translate every detail of a Python Keras implementation into the framework API.\n+\n+* However, the framework API is not intended to literally mimic the Python Keras API. Rather, it \n+  should expose the same capabilities in an API that feels natural and idiomatic to a Java \n+  programmer who does not know Keras. If we ever find ourselves unable to reconcile this goal with \n+  easy translation from Python Keras, we may split out a Keras layer.\n+\n+* Also, the framework API should support fine control over all aspects of modeling, training, and \n+  inference. Unlike with Python Keras, we want this to feel like staying in the same API rather \n+  than diving into a separate layer. But here again, if we are ever unable to reconcile this goal \n+  with easy translation from Python Keras, we may split the framework API into two layers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExNzMxOA=="}, "originalCommit": {"oid": "630ac84cc4f99928a6faee25a73d1e9fee0bdc48"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1645, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}