{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODM5MTA0", "number": 174, "title": "[Type Refactor] Use Java type system instead of custom one for typing tensors", "bodyText": "This PR is the last of importance in the tensor type refactoring currently in progress and it has a lot of backward incompatible changes.\nWe drop the current DataType custom class to leverage the standard Java type system instead, using .class. So now, each of the tensor types (i.e. subinterfaces of TType, like TFloat) carries itself the information required for allocating and mapping tensors of this type, via the annotation @TensorType.\nAll reference to the static variable DTYPE of the different tensor types can now be replaced by .class. For example:\n// Before\nOperand<TFloat32> x = tf.dtypes.cast(tf.constant(1), TFloat32.DTYPE);\nassertSame(x.dataType(), TFloat32.DTYPE);\nif (x.dataType() == TFloat32.DTYPE || x.dataType() == TFloat64.DTYPE) {\n    // floating-point only computations...\n}\n\n// After\nOperand<TFloat32> x = tf.dtypes.cast(tf.constant(1), TFloat32.class); \nassertSame(x.type(), TFloat32.class);\nif (TFloating.class.isAssignableFrom(x.type()) {\n    // floating-point only computations...\n}\nIn most places where the custom DataType class has been dropped, it has been replaced with its protobuf equivalent of the same name which consists of a simple enum. This provides type information at low level from the runtime library directly, and the API of the Op framework will naturally guide the users to favor the usage of the tensor type classes (e.g. TFloat32.class) instead.\nTFloat32 t = TFloat32.scalarOf(1.0f);\nassertSame(t.type(), TFloat32.class);\nassertSame(t.dataType(), DataType.DT_FLOAT);\nIn a nut shell, the PR consists of:\n\nDropping custom DataType and DataTypes classes to use Java Class instead\nAdding annotation and other utilities to register the tensor type classes (subinterfaces of TType)\nReplace all reference to T*.DTYPE by T*.class\nReshuffle a little bit some functions of the framework to leverage the new type system\nA lot of changes in generated files that could be skipped during the review (everything under tensorflow-core/tensorflow-core-api/src/gen)\n\nIt is important to note that after this PR has been merged, the ongoing work from @rnett (Kotlin) and @JimClarke5 (Framework) could be resumed.\nCC\\ @deansher , @Craigacp", "createdAt": "2020-12-22T03:16:56Z", "url": "https://github.com/tensorflow/java/pull/174", "merged": true, "mergeCommit": {"oid": "f85623ed366d903cfddb75177725dc276f359b15"}, "closed": true, "closedAt": "2020-12-30T22:13:25Z", "author": {"login": "karllessard"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdosPFHAH2gAyNTQzODM5MTA0OmJhM2Q0NzFkZDljM2QwMTc0ZDkyZmQwYjEzNWMwNGVjYjc1YTg0OGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrVDwIgFqTU2MDE4Mjg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/ba3d471dd9c3d0174d92fd0b135c04ecb75a848e", "committedDate": "2020-12-22T15:26:30Z", "message": "Leverage the Java type system for typing tensors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a24e5d4e44738d49996c142099f3d9e08ad0fdc", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/2a24e5d4e44738d49996c142099f3d9e08ad0fdc", "committedDate": "2020-12-22T02:52:15Z", "message": "Leverage the Java type system for typing tensors"}, "afterCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/ba3d471dd9c3d0174d92fd0b135c04ecb75a848e", "committedDate": "2020-12-22T15:26:30Z", "message": "Leverage the Java type system for typing tensors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTQ2NTk1", "url": "https://github.com/tensorflow/java/pull/174#pullrequestreview-557146595", "createdAt": "2020-12-22T15:06:20Z", "commit": {"oid": "2a24e5d4e44738d49996c142099f3d9e08ad0fdc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjoyMVrOIJ-TsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyOTo1MlrOIKBJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODk0NA==", "bodyText": "Was the generator overgenerating the imports? This removal doesn't involve any other code change.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547328944", "createdAt": "2020-12-22T15:06:21Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/java/org/tensorflow/op/bitwise/BitwiseOr.java", "diffHunk": "@@ -26,7 +26,6 @@\n import org.tensorflow.op.annotation.Endpoint;\n import org.tensorflow.op.annotation.Operator;\n import org.tensorflow.types.family.TNumber;\n-import org.tensorflow.types.family.TType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a24e5d4e44738d49996c142099f3d9e08ad0fdc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNDIwOA==", "bodyText": "Looks like this import is unnecessary?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547334208", "createdAt": "2020-12-22T15:15:45Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/java/org/tensorflow/op/collective/BroadcastRecv.java", "diffHunk": "@@ -17,16 +17,17 @@\n \n package org.tensorflow.op.collective;\n \n-import org.tensorflow.DataType;\n import org.tensorflow.Operand;\n import org.tensorflow.Operation;\n import org.tensorflow.OperationBuilder;\n import org.tensorflow.Output;\n import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.op.Operands;\n import org.tensorflow.op.RawOp;\n import org.tensorflow.op.Scope;\n import org.tensorflow.op.annotation.Endpoint;\n import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.proto.framework.DataType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a24e5d4e44738d49996c142099f3d9e08ad0fdc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTUwNg==", "bodyText": "These seem to be the same as the classes in org.tensorflow.op.data?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547339506", "createdAt": "2020-12-22T15:25:22Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/java/org/tensorflow/op/data/experimental/AssertCardinalityDataset.java", "diffHunk": "@@ -46,16 +47,12 @@\n    * @return a new instance of AssertCardinalityDataset\n    */\n   @Endpoint(describeByClass = true)\n-  public static AssertCardinalityDataset create(Scope scope, Operand<?> inputDataset, Operand<TInt64> cardinality, List<DataType<?>> outputTypes, List<Shape> outputShapes) {\n+  public static AssertCardinalityDataset create(Scope scope, Operand<?> inputDataset, Operand<TInt64> cardinality, List<Class<? extends TType>> outputTypes, List<Shape> outputShapes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a24e5d4e44738d49996c142099f3d9e08ad0fdc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzIzMA==", "bodyText": "These methods became package private?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547353230", "createdAt": "2020-12-22T15:49:20Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/EagerOperation.java", "diffHunk": "@@ -83,12 +84,12 @@ public int inputListLength(final String name) {\n   }\n \n   @Override\n-  public TFE_TensorHandle getUnsafeNativeHandle(int outputIndex) {\n+  TFE_TensorHandle getUnsafeNativeHandle(int outputIndex) {\n     return outputHandles[outputIndex];\n   }\n \n   @Override\n-  public Shape shape(int outputIndex) {\n+  Shape shape(int outputIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NTI2OQ==", "bodyText": "Do we care about classes coming from different class loaders, as they will fail this check?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547355269", "createdAt": "2020-12-22T15:53:14Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Output.java", "diffHunk": "@@ -39,23 +41,30 @@ public int index() {\n \n   /** Returns the DataType of the tensor referred to by this Output. */\n   @SuppressWarnings(\"unchecked\")\n-  public DataType<T> dataType() {\n-    return (DataType<T>)operation.dtype(index);\n+  public DataType dataType() {\n+    return operation.dtype(index);\n+  }\n+\n+  /** Returns the type of the tensor referred to by this Output. */\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public Class<T> type() {\n+    return (Class<T>)TensorTypeRegistry.find(dataType()).typeClass();\n   }\n \n   /**\n    * Returns this Output object with the type {@code Output<U>}. This method is useful when given a\n    * value of type {@code Output<?>}.\n    *\n-   * @param dt any supported tensor data type\n+   * @param type any supported tensor type\n    * @throws IllegalArgumentException if the actual data type of this object does not match the type\n    *     {@code U}.\n    */\n   @SuppressWarnings(\"unchecked\")\n-  public <U extends TType> Output<U> expect(DataType<U> dt) {\n-    if (!dt.equals(this.dataType())) {\n+  public <U extends TType> Output<U> expect(Class<U> type) {\n+    if (type != type()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NTczOA==", "bodyText": "type.byteSize() isn't a thing anymore as type is a class literal.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547355738", "createdAt": "2020-12-22T15:54:02Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -84,33 +86,37 @@ public ByteDataBuffer data() {\n    */\n   @Override\n   public String toString() {\n-    return String.format(\"%s tensor with shape %s\", dtype.toString(), shape);\n+    return String.format(\"%s tensor with shape %s\", typeInfo.dataType(), shape);\n   }\n \n   /**\n    * Allocates a new tensor in native memory of the given type, shape and size.\n    *\n    * <p>The size of the tensor must be at least large enough to contain all scalars for the\n-   * given type and shape, i.e. <code>size >= dtype.byteSize() * shape.size()</code>. More memory\n+   * given type and shape, i.e. <code>size >= type.byteSize() * shape.size()</code>. More memory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NjUzMw==", "bodyText": "Does it actually throw ClassCastException? The type will be erased at runtime.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547356533", "createdAt": "2020-12-22T15:55:22Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -164,7 +171,7 @@ TF_Tensor nativeHandle() {\n    * @throws ClassCastException if {@code T} is not compatible type with {@link #dataType()}\n    */\n   <T extends TType> T asTypedTensor() {\n-    return (T)dtype.map(this);\n+    return (T)typeInfo.mapper().mapDense(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1ODE2OQ==", "bodyText": "I'm dubious of the benefits of special casing -1 here, though I suppose it has all the necessary information.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547358169", "createdAt": "2020-12-22T15:58:12Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -84,33 +86,37 @@ public ByteDataBuffer data() {\n    */\n   @Override\n   public String toString() {\n-    return String.format(\"%s tensor with shape %s\", dtype.toString(), shape);\n+    return String.format(\"%s tensor with shape %s\", typeInfo.dataType(), shape);\n   }\n \n   /**\n    * Allocates a new tensor in native memory of the given type, shape and size.\n    *\n    * <p>The size of the tensor must be at least large enough to contain all scalars for the\n-   * given type and shape, i.e. <code>size >= dtype.byteSize() * shape.size()</code>. More memory\n+   * given type and shape, i.e. <code>size >= type.byteSize() * shape.size()</code>. More memory\n    * can be allocated to store also metadata within the tensor itself, e.g. a lookup table\n    * in a string tensor.\n    *\n-   * @param dtype data type\n+   * @param type tensor type class\n    * @param shape shape of the tensor\n-   * @param size size of the tensor\n+   * @param size size in bytes of the tensor, or -1 to compute the size from the shape", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MzkyMA==", "bodyText": "What happens if typeInfo.byteSize() returns -1?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547363920", "createdAt": "2020-12-22T16:08:36Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -84,33 +86,37 @@ public ByteDataBuffer data() {\n    */\n   @Override\n   public String toString() {\n-    return String.format(\"%s tensor with shape %s\", dtype.toString(), shape);\n+    return String.format(\"%s tensor with shape %s\", typeInfo.dataType(), shape);\n   }\n \n   /**\n    * Allocates a new tensor in native memory of the given type, shape and size.\n    *\n    * <p>The size of the tensor must be at least large enough to contain all scalars for the\n-   * given type and shape, i.e. <code>size >= dtype.byteSize() * shape.size()</code>. More memory\n+   * given type and shape, i.e. <code>size >= type.byteSize() * shape.size()</code>. More memory\n    * can be allocated to store also metadata within the tensor itself, e.g. a lookup table\n    * in a string tensor.\n    *\n-   * @param dtype data type\n+   * @param type tensor type class\n    * @param shape shape of the tensor\n-   * @param size size of the tensor\n+   * @param size size in bytes of the tensor, or -1 to compute the size from the shape\n    * @return allocated tensor\n    */\n-  static RawTensor allocate(DataType<?> dtype, Shape shape, long size) {\n-    // Minimum requirements for datatypes of variable length cannot be verified in a relevant way so\n-    // we only validate them for fixed length datatypes\n-    if (!dtype.isVariableLength() && shape.size() * dtype.byteSize() > size) {\n+  static RawTensor allocate(Class<? extends TType> type, Shape shape, long size) {\n+    TensorTypeInfo<?> typeInfo = TensorTypeRegistry.find(type);\n+    long effectiveSize = size;\n+    if (effectiveSize < 0) {\n+      effectiveSize = shape.size() * typeInfo.byteSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2NTAzNw==", "bodyText": "This PR doesn't allow user registered classes though right? If so then it should probably say \"in the future we could allow\"", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547365037", "createdAt": "2020-12-22T16:10:43Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/registry/TensorTypeRegistry.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow.internal.types.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.proto.framework.DataType;\n+import org.tensorflow.types.TBfloat16;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TFloat16;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TFloat64;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TString;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.annotation.TensorType;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Repository of all registered tensor types.\n+ */\n+public final class TensorTypeRegistry {\n+\n+  /**\n+   * Find registered information about a tensor type from its equivalent data type\n+   *\n+   * @param dataType data type\n+   * @return type registered information\n+   * @throws IllegalArgumentException if no tensor type for this data type has been registered\n+   */\n+  public static <T extends TType> TensorTypeInfo<T> find(DataType dataType) {\n+    TensorTypeInfo<?> typeInfo = TYPES_BY_CODE.get(dataType.getNumber());\n+    if (typeInfo == null) {\n+      throw new IllegalArgumentException(\"No tensor type has been registered for data type \" + dataType);\n+    }\n+    return (TensorTypeInfo<T>)typeInfo;\n+  }\n+\n+  /**\n+   * Find registered information about a tensor type from its class\n+   *\n+   * @param type class implementing {@link TType}\n+   * @return type registered information\n+   * @throws IllegalArgumentException if the provided class has not been registered as a tensor type\n+   */\n+  public static <T extends TType> TensorTypeInfo<T> find(Class<T> type) {\n+    TensorTypeInfo<?> typeInfo = TYPES_BY_CLASS.get(type);\n+    if (typeInfo == null) {\n+      throw new IllegalArgumentException(\"Class \\\"\" + type.getName() + \"\\\" is not registered as a tensor type\");\n+    }\n+    return (TensorTypeInfo<T>)typeInfo;\n+  }\n+\n+  private static final Map<Integer, TensorTypeInfo<?>> TYPES_BY_CODE = new HashMap<>();\n+  private static final Map<Class<? extends TType>, TensorTypeInfo<?>> TYPES_BY_CLASS = new HashMap<>();\n+\n+  private static <T extends TType> void register(Class<T> type) {\n+    TensorType typeAnnot = type.getDeclaredAnnotation(TensorType.class);\n+    if (typeAnnot == null) {\n+      throw new IllegalArgumentException(\"Class \\\"\" + type.getName() + \"\\\" must be annotated \"\n+          + \"with @TensorType to be registered as a tensor type\");\n+    }\n+    TensorMapper<T> mapper;\n+    try {\n+      mapper = (TensorMapper<T>)typeAnnot.mapperClass().newInstance();\n+    } catch (ReflectiveOperationException e) {\n+      throw new IllegalArgumentException(\"Class \\\"\" + type.getName() + \"\\\" must have a public \"\n+          + \"parameter-less constructor to be used as a tensor mapper\");\n+    }\n+    TensorTypeInfo<T> typeInfo = new TensorTypeInfo<>(type, typeAnnot.dataType(), typeAnnot.byteSize(), mapper);\n+    TYPES_BY_CLASS.put(type, typeInfo);\n+\n+    // If more than one tensor type is mapped to a given native code, the last registered will\n+    // have priority. This way, we can allow user to register their own classes to map tensors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2NjAzMw==", "bodyText": "Unnecessary import of Iterator?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547366033", "createdAt": "2020-12-22T16:12:39Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/Operands.java", "diffHunk": "@@ -16,10 +16,16 @@\n package org.tensorflow.op;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2NjIzMw==", "bodyText": "Unnecessary import of Tensor?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547366233", "createdAt": "2020-12-22T16:13:03Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/Operands.java", "diffHunk": "@@ -16,10 +16,16 @@\n package org.tensorflow.op;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import org.tensorflow.Operand;\n import org.tensorflow.OperationBuilder;\n import org.tensorflow.Output;\n+import org.tensorflow.Tensor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2ODYyMA==", "bodyText": "Copyright header is missing the comment * before each line.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547368620", "createdAt": "2020-12-22T16:17:04Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/annotation/TensorType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2ODg3NQ==", "bodyText": "Is this actually plugged into anything yet?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547368875", "createdAt": "2020-12-22T16:17:37Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/types/family/TIntegral.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow.types.family;\n+\n+/**\n+ * Common interface for all integral numeric tensors.\n+ *\n+ * <p>Operations that only accepts integral values as some of their operands enforce that the tensor\n+ * types for these operands to be bound to this interface.\n+ */\n+public interface TIntegral extends TNumber {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTgyNg==", "bodyText": "This more restrictive, do we want that?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547371826", "createdAt": "2020-12-22T16:23:15Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/Identity.java", "diffHunk": "@@ -33,12 +33,12 @@\n  *     Identity&lt;TFloat32&gt; initializer =\n  *             new org.tensorflow.framework.initializers.Identity&lt;&gt;(tf);\n  *     Operand&lt;TFloat32&gt; values =\n- *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ *             initializer.call(tf.constant(Shape.of(2,2)), TFloat32.class);\n  * </pre>\n  *\n  * @param <T> The TType for the call operation\n  */\n-public class Identity<T extends TType> extends BaseInitializer<T> {\n+public class Identity<T extends TFloating> extends BaseInitializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MjMxNA==", "bodyText": "TNumber import is unnecessary now.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547372314", "createdAt": "2020-12-22T16:24:07Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/LeCun.java", "diffHunk": "@@ -15,6 +15,7 @@\n package org.tensorflow.framework.initializers;\n \n import org.tensorflow.op.Ops;\n+import org.tensorflow.types.family.TFloating;\n import org.tensorflow.types.family.TNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MzgwNQ==", "bodyText": "Shouldn't this be TFloating?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547373805", "createdAt": "2020-12-22T16:26:42Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/TruncatedNormal.java", "diffHunk": "@@ -31,13 +30,12 @@\n  *     TruncatedNormal&lt;TFloat32, TFloat32&gt; initializer =\n  *              new org.tensorflow.framework.initializers.TruncatedNormal&lt;&gt;(tf, seed);\n  *     Operand&lt;TFloat32&gt; values =\n- *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.class);\n  * </pre>\n  *\n  * @param <T> The TType for the call operation\n- * @param <U> The TNumber for the call operation\n  */\n-public class TruncatedNormal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+public class TruncatedNormal<T extends TNumber> extends BaseInitializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NDEwOA==", "bodyText": "TFloating?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547374108", "createdAt": "2020-12-22T16:27:16Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomUniform.java", "diffHunk": "@@ -32,13 +32,12 @@\n  *     RandomUniform&lt;TFloat32, TFloat32&gt; initializer =\n  *              new org.tensorflow.framework.initializers.RandomUniform&lt;&gt;(tf, seed);\n  *     Operand&lt;TFloat32&gt; values =\n- *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.class);\n  * </pre>\n  *\n  * @param <T> The TType for the call operation\n- * @param <U> The TNumber for the call operation\n  */\n-public class RandomUniform<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+public class RandomUniform<T extends TNumber> extends BaseInitializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NDE5OQ==", "bodyText": "TFloating?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547374199", "createdAt": "2020-12-22T16:27:27Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/initializers/RandomNormal.java", "diffHunk": "@@ -31,13 +30,12 @@\n  *     RandomNormal&lt;TFloat32, TFloat32&gt; initializer =\n  *              new org.tensorflow.framework.initializers.RandomNormal&lt;&gt;(tf, seed);\n  *     Operand&lt;TFloat32&gt; values =\n- *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.DTYPE);\n+ *              initializer.call(tf.constant(Shape.of(2,2)), TFloat32.class);\n  * </pre>\n  *\n  * @param <T> The TType for the call operation\n- * @param <U> The TNumber for the call operation\n  */\n-public class RandomNormal<T extends TType, U extends TNumber> extends BaseInitializer<T> {\n+public class RandomNormal<T extends TNumber> extends BaseInitializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NTQwNQ==", "bodyText": "U extends TFloating?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r547375405", "createdAt": "2020-12-22T16:29:52Z", "author": {"login": "Craigacp"}, "path": "tensorflow-framework/src/main/java/org/tensorflow/framework/losses/Hinge.java", "diffHunk": "@@ -124,16 +124,13 @@ public Hinge(Ops tf, String name, Reduction reduction) {\n   public <T extends TNumber, U extends TNumber> Operand<T> call(\n       Operand<U> labels, Operand<T> predictions, Operand<T> sampleWeights) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71bc78c3c70feaefbfc0b5f7f4736c1b15f6d76c", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/71bc78c3c70feaefbfc0b5f7f4736c1b15f6d76c", "committedDate": "2020-12-23T16:47:05Z", "message": "Cleanup some obsolete imports and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa", "committedDate": "2020-12-24T23:04:40Z", "message": "Restrict tensor types on some initializers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTczMzU1", "url": "https://github.com/tensorflow/java/pull/174#pullrequestreview-559573355", "createdAt": "2020-12-29T15:08:31Z", "commit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTowODozMVrOIMRZHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToyNjo0M1rOIMWakA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczODc4Mg==", "bodyText": "Augment this method to handle a shape of UNKNOWN_SIZE? (The previous version accidentally handled it.)", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549738782", "createdAt": "2020-12-29T15:08:31Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -84,33 +86,39 @@ public ByteDataBuffer data() {\n    */\n   @Override\n   public String toString() {\n-    return String.format(\"%s tensor with shape %s\", dtype.toString(), shape);\n+    return String.format(\"%s tensor with shape %s\", typeInfo.dataType(), shape);\n   }\n \n   /**\n    * Allocates a new tensor in native memory of the given type, shape and size.\n    *\n    * <p>The size of the tensor must be at least large enough to contain all scalars for the\n-   * given type and shape, i.e. <code>size >= dtype.byteSize() * shape.size()</code>. More memory\n-   * can be allocated to store also metadata within the tensor itself, e.g. a lookup table\n-   * in a string tensor.\n+   * given type and shape. More memory can also be allocated to store also metadata within the\n+   * tensor itself, e.g. a lookup table in a string tensor.\n    *\n-   * @param dtype data type\n+   * @param type tensor type class\n    * @param shape shape of the tensor\n-   * @param size size of the tensor\n+   * @param size size in bytes of the tensor, or -1 to compute the size from the shape\n    * @return allocated tensor\n    */\n-  static RawTensor allocate(DataType<?> dtype, Shape shape, long size) {\n-    // Minimum requirements for datatypes of variable length cannot be verified in a relevant way so\n-    // we only validate them for fixed length datatypes\n-    if (!dtype.isVariableLength() && shape.size() * dtype.byteSize() > size) {\n+  static RawTensor allocate(Class<? extends TType> type, Shape shape, long size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0NzczNQ==", "bodyText": "Document the behavior when shape has UNKNOWN_SIZE and -1 is passed for size?", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549747735", "createdAt": "2020-12-29T15:33:32Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Tensor.java", "diffHunk": "@@ -57,35 +49,35 @@\n    * <p>The amount of memory to allocate is derived from the datatype and the shape of the tensor,\n    * and is left uninitialized.\n    *\n-   * @param <T> the tensor element type\n-   * @param dtype datatype of the tensor\n+   * @param <T> the tensor type\n+   * @param type the tensor type class\n    * @param shape shape of the tensor\n    * @return an allocated but uninitialized tensor\n    * @throws IllegalStateException if tensor failed to be allocated\n    */\n-  static <T extends TType> T of(DataType<T> dtype, Shape shape) {\n-    return of(dtype, shape, shape.size() * dtype.byteSize());\n+  static <T extends TType> T of(Class<T> type, Shape shape) {\n+    return of(type, shape, -1);\n   }\n \n   /**\n    * Allocates a tensor of a given datatype, shape and size.\n    *\n-   * <p>This method is identical to {@link #of(DataType, Shape)}, except that the final size of the\n+   * <p>This method is identical to {@link #of(Class, Shape)}, except that the final size of the\n    * tensor is explicitly set instead of computing it from the datatype and shape, which could be\n    * larger than the actual space required to store the data but not smaller.\n    *\n-   * @param <T> the tensor element type\n-   * @param dtype datatype of the tensor\n+   * @param <T> the tensor type\n+   * @param type the tensor type class\n    * @param shape shape of the tensor\n-   * @param size size, in bytes, of the tensor\n+   * @param size size in bytes of the tensor or -1 to compute the size from the shape", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0ODUwOA==", "bodyText": "Given the new support for size of -1, perhaps change to \"can be explicitly set\".", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549748508", "createdAt": "2020-12-29T15:35:40Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/Tensor.java", "diffHunk": "@@ -103,47 +95,47 @@\n    *\n    * <pre>{@code\n    * FloatNdArray data = ...\n-   * try (TFloat32 t = Tensor.of(TFloat32.DTYPE, Shape.of(2, 2), data::copyTo)) {\n+   * try (TFloat32 t = Tensor.of(TFloat32.class, Shape.of(2, 2), data::copyTo)) {\n    *   ...\n    * }\n    * }</pre>\n    *\n    * <p>If {@code dataInitializer} fails and throws an exception, the allocated tensor will be\n    * automatically released before rethrowing the same exception.\n    *\n-   * @param <T> the tensor element type\n-   * @param dtype datatype of the tensor\n+   * @param <T> the tensor type\n+   * @param type the tensor type class\n    * @param shape shape of the tensor\n    * @param dataInitializer method receiving accessor to the allocated tensor data for initialization\n    * @return an allocated and initialized tensor\n    * @throws IllegalStateException if tensor failed to be allocated\n    */\n-  static <T extends TType> T of(DataType<T> dtype, Shape shape, Consumer<T> dataInitializer) {\n-    return of(dtype, shape, shape.size() * dtype.byteSize(), dataInitializer);\n+  static <T extends TType> T of(Class<T> type, Shape shape, Consumer<T> dataInitializer) {\n+    return of(type, shape, -1, dataInitializer);\n   }\n \n   /**\n    * Allocates a tensor of a given datatype, shape and size.\n    *\n-   * <p>This method is identical to {@link #of(DataType, Shape, Consumer)}, except that the final\n+   * <p>This method is identical to {@link #of(Class, Shape, Consumer)}, except that the final\n    * size for the tensor is explicitly set instead of being computed from the datatype and shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwODI1Mg==", "bodyText": "@Craigacp was right: the generic method can't throw ClassCastException, because at runtime the type is erased and no cast can occur. Rather, the test is flawed.\nHere's a version of the test that also passes, but exposes the real behavior:\n  @Test\n  public void rawToTypedTensor() {\n    RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), -1);\n    TFloat32 floatTensor = rawTensor.asTypedTensor();\n    assertSame(floatTensor.asRawTensor(), rawTensor);\n    Object objTensor = rawTensor.<TInt32>asTypedTensor();\n    try {\n      TInt32 intTensor = (TInt32) objTensor;\n      fail();\n    } catch (ClassCastException e) {\n      // ok\n    }\n  }", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549808252", "createdAt": "2020-12-29T18:40:31Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/RawTensor.java", "diffHunk": "@@ -164,7 +171,7 @@ TF_Tensor nativeHandle() {\n    * @throws ClassCastException if {@code T} is not compatible type with {@link #dataType()}\n    */\n   <T extends TType> T asTypedTensor() {\n-    return (T)dtype.map(this);\n+    return (T)typeInfo.mapper().mapDense(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NjUzMw=="}, "originalCommit": {"oid": "ba3d471dd9c3d0174d92fd0b135c04ecb75a848e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDg2OQ==", "bodyText": "Elsewhere (such as in Tensor), we simply call this type().  I do feel the emotional tug to be more explicit in this case, but I wonder if it will simply feel like inconsistency once we have lived with the new paradigm for a while.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549810869", "createdAt": "2020-12-29T18:49:45Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/registry/TensorTypeInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow.internal.types.registry;\n+\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.proto.framework.DataType;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Registered information about a tensor type.\n+ *\n+ * @param <T> the tensor type\n+ */\n+public final class TensorTypeInfo<T extends TType> {\n+\n+  /**\n+   * Returns the class of this tensor type\n+   */\n+  public Class<T> typeClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMjgyMw==", "bodyText": "dType -> type throughout this file", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549812823", "createdAt": "2020-12-29T18:56:26Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/Shapes.java", "diffHunk": "@@ -83,7 +79,7 @@\n    */\n   @Endpoint(name = \"flatten\")\n   public static <T extends TType, U extends TNumber> Operand<T> flatten(\n-      Scope scope, Operand<T> operand, DataType<U> dType) {\n+      Scope scope, Operand<T> operand, Class<U> dType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMzk0Mg==", "bodyText": "!= would be more consistent.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549813942", "createdAt": "2020-12-29T19:00:20Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/nn/SoftmaxCrossEntropyWithLogits.java", "diffHunk": "@@ -78,24 +77,20 @@\n       axis += logits.shape().numDimensions();\n     }\n \n-\n-    boolean convertToFloat32 =\n-        logits.asOutput().dataType() == TFloat16.DTYPE\n-            || logits.asOutput().dataType() == TBfloat16.DTYPE;\n-    if (convertToFloat32) {\n+    if (logits.asOutput().type() == TFloat16.class || logits.asOutput().type() == TBfloat16.class) {\n       Operand<TFloat32> result =  softmaxCrossEntropyWithLogits(scope,\n-              Cast.create(scope, labels, TFloat32.DTYPE),\n-              Cast.create(scope, logits, TFloat32.DTYPE),\n+              Cast.create(scope, labels, TFloat32.class),\n+              Cast.create(scope, logits, TFloat32.class),\n               axis);\n-      return Cast.create(scope, result, logits.asOutput().dataType());\n-    } else if(!logits.asOutput().dataType().equals(labels.asOutput().dataType())) {\n+      return Cast.create(scope, result, logits.asOutput().type());\n+    } else if(!logits.asOutput().type().equals(labels.asOutput().type())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNDI1OQ==", "bodyText": "rankDType -> rankType", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549814259", "createdAt": "2020-12-29T19:01:40Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/nn/SoftmaxCrossEntropyWithLogits.java", "diffHunk": "@@ -197,8 +192,8 @@\n    */\n   private static <T extends TNumber, U extends TNumber> Operand<T> moveDimToEnd(\n       Scope scope, Operand<T> input, int dimIndex, Operand<U> rank) {\n-    DataType<? extends TNumber> rankDType = rank.asOutput().dataType();\n-    Operand one = Cast.create(scope, Constant.scalarOf(scope, 1), rankDType);\n+    Class<U> rankDType = rank.asOutput().type();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMDE1Nw==", "bodyText": "This test code throws the expected exception because of the assignment to intTensor, rather than in asTypedTensor(). Here is alternative test code that also passes, but demonstrates that asTypedTensor() doesn't have its documented behavior:\n  @Test\n  public void rawToTypedTensor() {\n    RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), -1);\n    TFloat32 floatTensor = rawTensor.asTypedTensor();\n    assertSame(floatTensor.asRawTensor(), rawTensor);\n    Object objTensor = rawTensor.<TInt32>asTypedTensor();\n    try {\n      TInt32 intTensor = (TInt32) objTensor;\n      fail();\n    } catch (ClassCastException e) {\n      // ok\n    }\n  }", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549820157", "createdAt": "2020-12-29T19:23:32Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/test/java/org/tensorflow/RawTensorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TString;\n+\n+public class RawTensorTest {\n+\n+  @Test\n+  public void rawToTypedTensor() {\n+    RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), -1);\n+    TFloat32 floatTensor = rawTensor.asTypedTensor();\n+    assertSame(floatTensor.asRawTensor(), rawTensor);\n+    try {\n+      TInt32 intTensor = rawTensor.asTypedTensor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMTA3Mg==", "bodyText": "Add test to show intended behavior of shape with UNKNOWN_SIZE.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r549821072", "createdAt": "2020-12-29T19:26:43Z", "author": {"login": "deansher"}, "path": "tensorflow-core/tensorflow-core-api/src/test/java/org/tensorflow/RawTensorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import org.tensorflow.ndarray.Shape;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TString;\n+\n+public class RawTensorTest {\n+\n+  @Test\n+  public void rawToTypedTensor() {\n+    RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), -1);\n+    TFloat32 floatTensor = rawTensor.asTypedTensor();\n+    assertSame(floatTensor.asRawTensor(), rawTensor);\n+    try {\n+      TInt32 intTensor = rawTensor.asTypedTensor();\n+      fail();\n+    } catch (ClassCastException e) {\n+      // ok\n+    }\n+  }\n+\n+  @Test\n+  public void allocateTensorWithSize() {\n+    try (RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), 16)) {\n+      assertEquals(16, rawTensor.numBytes());\n+    }\n+    try (RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), 100)) {\n+      assertEquals(100, rawTensor.numBytes());\n+    }\n+    try (RawTensor rawTensor = RawTensor.allocate(TFloat32.class, Shape.of(2, 2), 10)) {\n+      fail();\n+    } catch (IllegalArgumentException e) {\n+      // ok\n+    }\n+    try (RawTensor rawTensor = RawTensor.allocate(TString.class, Shape.of(2, 2), 100)) {\n+      assertEquals(100, rawTensor.numBytes());\n+    }\n+  }\n+\n+  @Test\n+  public void allocateTensorWithoutSize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce9f9a63554cfa63b1fc8c8a4f128eb42696baa"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe", "author": {"user": {"login": "karllessard", "name": "Karl Lessard"}}, "url": "https://github.com/tensorflow/java/commit/b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe", "committedDate": "2020-12-30T16:48:56Z", "message": "Document a few exception cases and other cleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTM0MTAy", "url": "https://github.com/tensorflow/java/pull/174#pullrequestreview-560134102", "createdAt": "2020-12-30T17:18:21Z", "commit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTcxMTkx", "url": "https://github.com/tensorflow/java/pull/174#pullrequestreview-560171191", "createdAt": "2020-12-30T19:16:53Z", "commit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTgyODYw", "url": "https://github.com/tensorflow/java/pull/174#pullrequestreview-560182860", "createdAt": "2020-12-30T19:57:00Z", "commit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo1NzowMVrOIM0S7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDowNDo0NVrOIM0aVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMDYzOA==", "bodyText": "At some point we should fix the generator so it doesn't shadow the type name with a variable name, that's just confusing.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r550310638", "createdAt": "2020-12-30T19:57:01Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/java/org/tensorflow/op/collective/BroadcastRecv.java", "diffHunk": "@@ -77,10 +77,10 @@ private Options() {\n    * @return a new instance of BroadcastRecv\n    */\n   @Endpoint(describeByClass = true)\n-  public static <T extends TType> BroadcastRecv<T> create(Scope scope, DataType<T> T, Long groupSize, Long groupKey, Long instanceKey, Shape shape, Options... options) {\n+  public static <T extends TType> BroadcastRecv<T> create(Scope scope, Class<T> T, Long groupSize, Long groupKey, Long instanceKey, Shape shape, Options... options) {\n     OperationBuilder opBuilder = scope.env().opBuilder(\"CollectiveBcastRecv\", scope.makeOpName(\"BroadcastRecv\"));\n     opBuilder = scope.apply(opBuilder);\n-    opBuilder.setAttr(\"T\", T);\n+    opBuilder.setAttr(\"T\", Operands.toDataType(T));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMjUzMw==", "bodyText": "This is a place where it will infer the type bound from the calling context, and if that's wrong then we'll get a weird class cast error when people use it. It might be better to return the wildcard as at least the user will get a warning when they make the cast.", "url": "https://github.com/tensorflow/java/pull/174#discussion_r550312533", "createdAt": "2020-12-30T20:04:45Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/internal/types/registry/TensorTypeRegistry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  =======================================================================\n+ */\n+package org.tensorflow.internal.types.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.tensorflow.TensorMapper;\n+import org.tensorflow.proto.framework.DataType;\n+import org.tensorflow.types.TBfloat16;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TFloat16;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TFloat64;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+import org.tensorflow.types.TString;\n+import org.tensorflow.types.TUint8;\n+import org.tensorflow.types.annotation.TensorType;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Repository of all registered tensor types.\n+ */\n+public final class TensorTypeRegistry {\n+\n+  /**\n+   * Find registered information about a tensor type from its equivalent data type\n+   *\n+   * @param dataType data type\n+   * @return type registered information\n+   * @throws IllegalArgumentException if no tensor type for this data type has been registered\n+   */\n+  public static <T extends TType> TensorTypeInfo<T> find(DataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a54aa0a5365e54bce8aba65a92e83c33f6bfbe"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}