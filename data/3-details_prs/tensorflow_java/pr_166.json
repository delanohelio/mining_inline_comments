{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDAzNDc5", "number": 166, "title": "Indexing API", "bodyText": "Fixes #164.\nOne question: Should I also make endpoints named get and set?  It's more discoverable to people coming from Python (who usually use [] rather than the stridedSlice op).\nThere's examples in the Index javadoc.", "createdAt": "2020-12-07T23:05:18Z", "url": "https://github.com/tensorflow/java/pull/166", "merged": true, "mergeCommit": {"oid": "61b9165c33c5395edc4b2385c722fd37541153c1"}, "closed": true, "closedAt": "2021-02-11T04:27:19Z", "author": {"login": "rnett"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkUcQ-gFqTU0Nzc2NDkwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdzdhccgFqTU3NTAzMTUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzY0OTAw", "url": "https://github.com/tensorflow/java/pull/166#pullrequestreview-547764900", "createdAt": "2020-12-09T01:21:00Z", "commit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyMTowMFrOIB9zFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyNTo1NlrOIB96lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTk4OA==", "bodyText": "We don't have this kind of overloading in Java, so does it make sense to describe it here in the Java Ops?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538931988", "createdAt": "2020-12-09T01:21:00Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/gen/annotations/org/tensorflow/op/Ops.java", "diffHunk": "@@ -5899,6 +5900,61 @@ public StageSize stageSize(List<DataType<?>> dtypes, StageSize.Options... option\n     return StopGradient.create(scope, input);\n   }\n \n+  /**\n+   * Return a strided slice from `input`.\n+   *   <p>\n+   *   The goal of this op is to produce a new tensor with a subset of\n+   *   the elements from the `n` dimensional `input` tensor. The subset is chosen using\n+   *   a sequence of `m` sparse range specifications encoded into the arguments\n+   *   of this function. Note, in some cases\n+   *   `m` could be equal to `n`, but this need not be the case. Each\n+   *   range specification entry can be one of the following:\n+   *   <p>\n+   *   - An ellipsis (...) using {@link Index#ellipses()}. Ellipses are used to imply zero or more\n+   *     dimensions of full-dimension selection and are produced using\n+   *     `ellipsis_mask`. For example, `foo[...]` is the identity slice.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMzkwOQ==", "bodyText": "Does this need to be public? Can't it be package private?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r538933909", "createdAt": "2020-12-09T01:25:56Z", "author": {"login": "Craigacp"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/Indexing.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Index;\n+import org.tensorflow.op.Index.Singular;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see Index\n+ */\n+@Operator\n+public class Indexing {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    public StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dda060ae4a445d422ce5ff6ab27cb0fb031b7df"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac1f41832f098c2ffd81afe4bbafbd3e82a4f5f3", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/ac1f41832f098c2ffd81afe4bbafbd3e82a4f5f3", "committedDate": "2020-12-28T03:22:41Z", "message": "remove old Index class\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "ab6cb65062b040c4e6d1c0077d37084b50278c31", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/ab6cb65062b040c4e6d1c0077d37084b50278c31", "committedDate": "2020-12-28T03:23:02Z", "message": "remove old Index class\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "993735dce8bad32624e15d13892863e85dcd316a", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/993735dce8bad32624e15d13892863e85dcd316a", "committedDate": "2020-12-28T03:31:26Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "5a357124295077fa462d4f35185dd6ed95b50a2d", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/5a357124295077fa462d4f35185dd6ed95b50a2d", "committedDate": "2020-12-28T21:29:58Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a357124295077fa462d4f35185dd6ed95b50a2d", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/5a357124295077fa462d4f35185dd6ed95b50a2d", "committedDate": "2020-12-28T21:29:58Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "86056d280814e4ad3550f2bcac2ee75c0efcc5c8", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/86056d280814e4ad3550f2bcac2ee75c0efcc5c8", "committedDate": "2020-12-28T21:36:41Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86056d280814e4ad3550f2bcac2ee75c0efcc5c8", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/86056d280814e4ad3550f2bcac2ee75c0efcc5c8", "committedDate": "2020-12-28T21:36:41Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "62acf416bc91640667ff7bf54d6356d5540691a8", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/62acf416bc91640667ff7bf54d6356d5540691a8", "committedDate": "2020-12-30T22:56:00Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63f5562634d3738ad3839377bcf1e10fe667f162", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/63f5562634d3738ad3839377bcf1e10fe667f162", "committedDate": "2021-01-05T05:10:38Z", "message": "ToString methods\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/713fb4128e8cdae9daf59b1108086c284ab235af", "committedDate": "2021-01-05T05:10:59Z", "message": "ToString methods\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMTg5Mjk2", "url": "https://github.com/tensorflow/java/pull/166#pullrequestreview-563189296", "createdAt": "2021-01-07T03:32:43Z", "commit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzozMjo0M1rOIPd8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDoyODozMlrOIPetTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDE3Mg==", "bodyText": "This method is quite critical on the performance path when it comes to access data inside an nd array. With all these additions in it, could you please run the benchmark for NdArray, especially those testing the indexation like this one, and compare the results?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553090172", "createdAt": "2021-01-07T03:32:43Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MDY1OA==", "bodyText": "Nit : please add a space after your clauses, like if or for and before opening braces in your code, as recommended by the Google Java Style Guide", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553090658", "createdAt": "2021-01-07T03:34:53Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/impl/dimension/DimensionalSpace.java", "diffHunk": "@@ -35,24 +35,42 @@ public static DimensionalSpace create(Shape shape) {\n   }\n \n   public RelativeDimensionalSpace mapTo(Index[] indices) {\n-    if (dimensions == null || indices.length > dimensions.length) {\n+    if (dimensions == null) {\n       throw new ArrayIndexOutOfBoundsException();\n     }\n     int dimIdx = 0;\n+    int indexIdx = 0;\n     int newDimIdx = 0;\n     int segmentationIdx = -1;\n     long initialOffset = 0;\n \n-    Dimension[] newDimensions = new Dimension[dimensions.length];\n-    while (dimIdx < indices.length) {\n+    int newAxes = 0;\n+    boolean seenEllipsis = false;\n+    for(Index idx : indices){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjE5NQ==", "bodyText": "I don't understand that TODO anymore, can you please remove it since we are changing the expected behaviour anyway?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092195", "createdAt": "2021-01-07T03:41:11Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "diffHunk": "@@ -27,22 +28,53 @@ public long numElements(Dimension dim) {\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n+    long coord = this.coord >= 0 ? this.coord : dim.numElements() + this.coord;\n     return dim.positionOf(coord); // TODO validate coordinate is 0?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjQ3MA==", "bodyText": "Nit: reversing the condition makes it more clear, i.e.\nif (!keepDim) {\n    throw ...\n}\nreturn dim.withIndex(this);", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092470", "createdAt": "2021-01-07T03:42:39Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/At.java", "diffHunk": "@@ -27,22 +28,53 @@ public long numElements(Dimension dim) {\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n+    long coord = this.coord >= 0 ? this.coord : dim.numElements() + this.coord;\n     return dim.positionOf(coord); // TODO validate coordinate is 0?\n   }\n \n   @Override\n   public Dimension apply(Dimension dim) {\n-    throw new IllegalStateException(); // FIXME?\n+    if(keepDim){\n+      return dim.withIndex(this);\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5MjkyMw==", "bodyText": "This class is missing documentation\nAlso, the notion of Tensor is deliberately not being used in the ndarray library. A Tensor is a NdArray allocated by TensorFlow, but the ndarray is agnostic of TensorFlow (it will even be moved eventually to a separate repository) so we shouldn't mix concepts.\nDo we really need to distinguish them with \"standard\" indices? What about adding all these methods directly to Index and throw an exception if they are being called on Hyperslab or Sequence?\nI understand that having TensorIndex allows us to enforce at compile time that only these instances can be passed to index a Tensor in TF but I don't think these two indices are used very often and it could be fine doing it.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553092923", "createdAt": "2021-01-07T03:44:46Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/TensorIndex.java", "diffHunk": "@@ -12,29 +12,39 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n-import org.tensorflow.ndarray.impl.dimension.Dimension;\n+public interface TensorIndex extends Index{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NjgzMw==", "bodyText": "I don't think IllegalStateException is the right exception to be thrown here, since there is no state involve. What about UnsupportedOperationException?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553096833", "createdAt": "2021-01-07T04:02:51Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "diffHunk": "@@ -12,26 +12,43 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n+import java.util.StringJoiner;\n import org.tensorflow.ndarray.impl.dimension.Dimension;\n \n-final class Even implements Index {\n+final class Ellipsis implements TensorIndex{\n \n-  static final Even INSTANCE = new Even();\n+  static final Ellipsis INSTANCE = new Ellipsis();\n+\n+  private Ellipsis(){\n+\n+  }\n \n   @Override\n   public long numElements(Dimension dim) {\n-    return (dim.numElements() >> 1) + (dim.numElements() % 2);\n+    throw new IllegalStateException();\n   }\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n-    return coordinate << 1;\n+    throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NzMxNw==", "bodyText": "in Hyperslab, you use the getClass().getSimpleName() to return that string, should we do it everywhere?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553097317", "createdAt": "2021-01-07T04:05:01Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Ellipsis.java", "diffHunk": "@@ -12,26 +12,43 @@\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n- =======================================================================\n+ ==============================================================================\n  */\n package org.tensorflow.ndarray.index;\n \n+import java.util.StringJoiner;\n import org.tensorflow.ndarray.impl.dimension.Dimension;\n \n-final class Even implements Index {\n+final class Ellipsis implements TensorIndex{\n \n-  static final Even INSTANCE = new Even();\n+  static final Ellipsis INSTANCE = new Ellipsis();\n+\n+  private Ellipsis(){\n+\n+  }\n \n   @Override\n   public long numElements(Dimension dim) {\n-    return (dim.numElements() >> 1) + (dim.numElements() % 2);\n+    throw new IllegalStateException();\n   }\n \n   @Override\n   public long mapCoordinate(long coordinate, Dimension dim) {\n-    return coordinate << 1;\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override\n+  public boolean isEllipsis() {\n+    return true;\n   }\n \n-  private Even() {\n+  @Override\n+  public boolean ellipsisMask() {\n+    return true;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"Ellipsis()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODI2OQ==", "bodyText": "why having both expand() and ellipsis() if they are the same?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553098269", "createdAt": "2021-01-07T04:09:08Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODk3OQ==", "bodyText": "instead of having all those variants with nullable boxed type and primitive long, could we just rename the methods differently so they accept only parameters that matters?\ne.g.\nslice(Long, long) -> sliceTo(long)\nslice(long, Long) -> sliceFrom(long)\nslice(Long, Long) -> do we really need this one, as it just returns all() ultimately?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553098979", "createdAt": "2021-01-07T04:12:34Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -216,4 +255,129 @@ public static Index flip() {\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex newAxis(){\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   * @see #expand()\n+   * @return index\n+   */\n+  public static TensorIndex ellipsis(){\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions.\n+   * Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex expand(){\n+    return ellipsis();\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, Long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(Long start, long end){\n+    return slice(start, end, 1);\n+  }\n+\n+  /**\n+   * An index that returns elements between {@code start} and {@code end}.\n+   * If {@code start} or {@code end} is {@code null}, starts or ends at the beginning or the end, respectively.\n+   * <p>\n+   * Analogous to Python's {@code :} slice syntax.\n+   *\n+   * @return index\n+   */\n+  public static TensorIndex slice(long start, long end){\n+    return slice(start, end, 1);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5OTQ5NA==", "bodyText": "Nit: no need of else clauses when you return unconditionally in your previous if blocks, I find it improves readability\nAlso not required, most of the code in TF Java follow a reversed order of the elements of a class, where elements with a higher visibility (public) are at the top of the class while those at the bottom has the lower one.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553099494", "createdAt": "2021-01-07T04:14:54Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ ==============================================================================\n+ */\n+package org.tensorflow.ndarray.index;\n+\n+import java.util.StringJoiner;\n+import org.tensorflow.ndarray.impl.dimension.Dimension;\n+\n+final class Slice implements TensorIndex {\n+\n+  private final Long start;\n+  private final Long end;\n+  private final long stride;\n+\n+  private long start(Dimension dim){\n+    if(start == null){\n+      if(stride > 0){\n+        return 0;\n+      } else {\n+        return dim.numElements() - 1; // it's inclusive\n+      }\n+    } else if(start < 0){\n+      return dim.numElements() + start;\n+    } else {\n+      return start;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMDYxNA==", "bodyText": "If we take the sliceTo/sliceFrom route, having distinct implementation of Index (i.e. SliceTo and SliceFrom) could reduce the complexity/cost of each case and avoid the boxed type conversion. There is not much gain having them all implemented by a single class.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553100614", "createdAt": "2021-01-07T04:19:31Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Slice.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+  Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ ==============================================================================\n+ */\n+package org.tensorflow.ndarray.index;\n+\n+import java.util.StringJoiner;\n+import org.tensorflow.ndarray.impl.dimension.Dimension;\n+\n+final class Slice implements TensorIndex {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMTg3MQ==", "bodyText": "Nit: add a space here", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553101871", "createdAt": "2021-01-07T04:25:04Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");\n+\n+      end[i] = (int) idx.end();\n+      if(end[i] != idx.end())\n+        throw new IllegalArgumentException(\"Can't convert long end value to int for index \" + idx + \": Out of bounds\");\n+\n+      strides[i] = (int) idx.stride();\n+      if(strides[i] != idx.stride())\n+        throw new IllegalArgumentException(\"Can't convert long stride value to int for index \" + idx + \": Out of bounds\");\n+\n+      if (idx.beginMask()) {\n+        beginMask |= 1L << i;\n+      }\n+\n+      if (idx.endMask()) {\n+        endMask |= 1L << i;\n+      }\n+\n+      if (idx.ellipsisMask()) {\n+        if(ellipsisMask != 0)\n+          throw new IllegalArgumentException(\"Can not have two ellipsis in a slice\");\n+        ellipsisMask |= 1L << i;\n+      }\n+\n+      if (idx.newAxisMask()) {\n+        newAxisMask |= 1L << i;\n+      }\n+\n+      if (idx.shrinkAxisMask()) {\n+        shrinkAxisMask |= 1L << i;\n+      }\n+    }\n+\n+    return new StridedSliceArgs(begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMjEwMg==", "bodyText": "Documentation in non-generated classes should be converted from Python to Java, meaning that foo[-2::-1] and other examples like that must be converted to their Java equivalent.", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553102102", "createdAt": "2021-01-07T04:25:58Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");\n+\n+      end[i] = (int) idx.end();\n+      if(end[i] != idx.end())\n+        throw new IllegalArgumentException(\"Can't convert long end value to int for index \" + idx + \": Out of bounds\");\n+\n+      strides[i] = (int) idx.stride();\n+      if(strides[i] != idx.stride())\n+        throw new IllegalArgumentException(\"Can't convert long stride value to int for index \" + idx + \": Out of bounds\");\n+\n+      if (idx.beginMask()) {\n+        beginMask |= 1L << i;\n+      }\n+\n+      if (idx.endMask()) {\n+        endMask |= 1L << i;\n+      }\n+\n+      if (idx.ellipsisMask()) {\n+        if(ellipsisMask != 0)\n+          throw new IllegalArgumentException(\"Can not have two ellipsis in a slice\");\n+        ellipsisMask |= 1L << i;\n+      }\n+\n+      if (idx.newAxisMask()) {\n+        newAxisMask |= 1L << i;\n+      }\n+\n+      if (idx.shrinkAxisMask()) {\n+        shrinkAxisMask |= 1L << i;\n+      }\n+    }\n+\n+    return new StridedSliceArgs(begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n+  }\n+  /**\n+   * Return a strided slice from `input`.\n+   *  <p>\n+   *  The goal of this op is to produce a new tensor with a subset of\n+   *  the elements from the `n` dimensional `input` tensor. The subset is chosen using\n+   *  a sequence of `m` sparse range specifications encoded into the arguments\n+   *  of this function. Note, in some cases\n+   *  `m` could be equal to `n`, but this need not be the case. Each\n+   *  range specification entry can be one of the following:\n+   *  <p>\n+   *  - An ellipsis (...) using {@link Indices#ellipsis()}. Ellipses are used to imply zero or more\n+   *    dimensions of full-dimension selection and are produced using\n+   *    `ellipsis_mask`. For example, `foo[...]` is the identity slice.\n+   *  <p>\n+   *  - A new axis using {@link Indices#newAxis()}. This is used to insert a new shape=1 dimension and is\n+   *    produced using `new_axis_mask`. For example, `foo[:, ...]` where\n+   *    `foo` is shape `(3, 4)` produces a `(1, 3, 4)` tensor.\n+   *  <p>\n+   *  - A range `begin:end:stride` using {@link Indices#slice(Long, Long, long)}  Index.slice()}. This is used to specify how much to choose from\n+   *    a given dimension. `stride` can be any integer but 0.  `begin` is an integer\n+   *    which represents the index of the first value to select while `end` represents\n+   *    the index of the last value to select. The number of values selected in each\n+   *    dimension is `end - begin` if `stride > 0` and `begin - end` if `stride < 0`.\n+   *    `begin` and `end` can be negative where `-1` is the last element, `-2` is\n+   *    the second to last. `begin_mask` controls whether to replace the explicitly\n+   *    given `begin` with an implicit effective value of `0` if `stride > 0` and\n+   *    `-1` if `stride < 0`. `end_mask` is analogous but produces the number\n+   *    required to create the largest open interval. For example, given a shape\n+   *    `(3,)` tensor `foo[:]`, the effective `begin` and `end` are `0` and `3`. Do\n+   *    not assume this is equivalent to `foo[0:-1]` which has an effective `begin`\n+   *    and `end` of `0` and `2`. Another example is `foo[-2::-1]` which reverses the\n+   *    first dimension of a tensor while dropping the last two (in the original\n+   *    order elements). For example `foo = [1,2,3,4]; foo[-2::-1]` is `[4,3]`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMjY2OA==", "bodyText": "Please add braces around single-line statements", "url": "https://github.com/tensorflow/java/pull/166#discussion_r553102668", "createdAt": "2021-01-07T04:28:32Z", "author": {"login": "karllessard"}, "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/StridedSliceHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+package org.tensorflow.op.core;\n+\n+import org.tensorflow.Operand;\n+import org.tensorflow.ndarray.index.Indices;\n+import org.tensorflow.ndarray.index.TensorIndex;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * Helper endpoint methods for Python like indexing.\n+ *\n+ * @see org.tensorflow.ndarray.index.Indices\n+ */\n+@Operator\n+public abstract class StridedSliceHelper {\n+\n+  static class StridedSliceArgs {\n+\n+    final int[] begin;\n+    final int[] end;\n+    final int[] strides;\n+    final long beginMask;\n+    final long endMask;\n+    final long ellipsisMask;\n+    final long newAxisMask;\n+    final long shrinkAxisMask;\n+\n+    private StridedSliceArgs(int[] begin, int[] end, int[] strides, long beginMask, long endMask, long ellipsisMask,\n+        long newAxisMask, long shrinkAxisMask) {\n+      this.begin = begin;\n+      this.end = end;\n+      this.strides = strides;\n+      this.beginMask = beginMask;\n+      this.endMask = endMask;\n+      this.ellipsisMask = ellipsisMask;\n+      this.newAxisMask = newAxisMask;\n+      this.shrinkAxisMask = shrinkAxisMask;\n+    }\n+  }\n+\n+  static StridedSliceArgs mergeIndexes(TensorIndex[] indices) {\n+    int[] begin = new int[indices.length];\n+    int[] end = new int[indices.length];\n+    int[] strides = new int[indices.length];\n+    long beginMask = 0;\n+    long endMask = 0;\n+    long ellipsisMask = 0;\n+    long newAxisMask = 0;\n+    long shrinkAxisMask = 0;\n+\n+    for (int i = 0; i < indices.length; i++) {\n+      TensorIndex idx = indices[i];\n+      if (idx == null) {\n+        idx = Indices.all();\n+      }\n+\n+      begin[i] = (int) idx.begin();\n+      if(begin[i] != idx.begin())\n+        throw new IllegalArgumentException(\"Can't convert long begin value to int for index \" + idx + \": Out of bounds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713fb4128e8cdae9daf59b1108086c284ab235af"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ab52fe15c5a9f20969aff5dce0060f6831523d", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/a1ab52fe15c5a9f20969aff5dce0060f6831523d", "committedDate": "2021-01-08T22:10:35Z", "message": "Start of Indexing api\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74ba9b0f384f716989846bd993a831615cadba99", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/74ba9b0f384f716989846bd993a831615cadba99", "committedDate": "2021-01-08T22:10:35Z", "message": "Add javadoc\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c078ef324739f8b7c1f022e0b1f077ebdaa5afb", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/1c078ef324739f8b7c1f022e0b1f077ebdaa5afb", "committedDate": "2021-01-08T22:10:35Z", "message": "codegen\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3abac560a6b9c748547083b925d03b1eb692bed5", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/3abac560a6b9c748547083b925d03b1eb692bed5", "committedDate": "2021-01-08T22:10:35Z", "message": "op test\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "659fd686f6294c8a2ae6ece0988ef76a4f2b7476", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/659fd686f6294c8a2ae6ece0988ef76a4f2b7476", "committedDate": "2021-01-08T22:10:35Z", "message": "fix test\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e88905acae5e4819714c8af5541cb71d940a4a", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/73e88905acae5e4819714c8af5541cb71d940a4a", "committedDate": "2021-01-08T22:10:36Z", "message": "explain expected shape, fix slice input\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57dc61111ff6ffc3083ebc37bea6f323c7fc189c", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/57dc61111ff6ffc3083ebc37bea6f323c7fc189c", "committedDate": "2021-01-08T22:10:36Z", "message": "add a final\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5211dbd80b57f5b6498a786170b04ecde6eec6", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/0f5211dbd80b57f5b6498a786170b04ecde6eec6", "committedDate": "2021-01-08T22:10:36Z", "message": "fix constructor visibility\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c356152ae90e9aad1a00aabc67bc3682ef816ad", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/1c356152ae90e9aad1a00aabc67bc3682ef816ad", "committedDate": "2021-01-08T22:10:36Z", "message": "fix range check\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e446f3a1d1bdeb32b4643b8af8ecb237e546bee6", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/e446f3a1d1bdeb32b4643b8af8ecb237e546bee6", "committedDate": "2021-01-08T22:10:36Z", "message": "start of adapting ndarray indexing\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e7aa1768cc9257632cce52447869fd33612c0cf", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/0e7aa1768cc9257632cce52447869fd33612c0cf", "committedDate": "2021-01-08T22:10:37Z", "message": "remove old Index class\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6383df43874b029b77673d8a36707150e130e7e9", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/6383df43874b029b77673d8a36707150e130e7e9", "committedDate": "2021-01-08T22:10:37Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1da7713b0e5cf7740f0b755c6c9b41a3eec8fd", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/9b1da7713b0e5cf7740f0b755c6c9b41a3eec8fd", "committedDate": "2021-01-08T22:10:37Z", "message": "test fix for rebase\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2c49661e70122fdd2b90741575844d3743905b4", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/f2c49661e70122fdd2b90741575844d3743905b4", "committedDate": "2021-01-08T22:10:37Z", "message": "Out of bounds warnings\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b7aaaac789948465f1b63abd63544ae1523efd", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/35b7aaaac789948465f1b63abd63544ae1523efd", "committedDate": "2021-01-08T22:10:37Z", "message": "Remove extra classes, plus a few fixes\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f496aee8264120fa7f7cc5688f541bbb937caf6e", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/f496aee8264120fa7f7cc5688f541bbb937caf6e", "committedDate": "2021-01-08T22:10:38Z", "message": "Tests\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f58b193fa124b9d67a3d76c79633b6820f224a4", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/4f58b193fa124b9d67a3d76c79633b6820f224a4", "committedDate": "2021-01-08T22:10:38Z", "message": "ToString methods\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95909616d49f766ec66ef01f6fed8bb27f2cd508", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/95909616d49f766ec66ef01f6fed8bb27f2cd508", "committedDate": "2021-01-08T22:10:38Z", "message": "Cleanup and formatting\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "090cfb9c3a987426c5d641fc955cf19427442d87", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/090cfb9c3a987426c5d641fc955cf19427442d87", "committedDate": "2021-01-08T22:10:38Z", "message": "Cleanup and formatting\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e3c549fa6037f1ff934050feb6099b6f75772d", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/14e3c549fa6037f1ff934050feb6099b6f75772d", "committedDate": "2021-01-08T22:10:39Z", "message": "Javadocs cleanup, new names\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8636f90954e23139c0c69d31c296e34f94eaf9c6", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/8636f90954e23139c0c69d31c296e34f94eaf9c6", "committedDate": "2021-01-08T22:10:39Z", "message": "Split Slice into nullability cases\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe", "committedDate": "2021-01-08T22:10:39Z", "message": "Change benchmark to fork once by default\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4f14c8319877b17e3342d4876cb77a9462f7683", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/d4f14c8319877b17e3342d4876cb77a9462f7683", "committedDate": "2021-01-08T22:10:16Z", "message": "Change benchmark to fork once by default\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}, "afterCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe", "committedDate": "2021-01-08T22:10:39Z", "message": "Change benchmark to fork once by default\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0OTk1NTc1", "url": "https://github.com/tensorflow/java/pull/166#pullrequestreview-574995575", "createdAt": "2021-01-24T22:08:13Z", "commit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjowODoxM1rOIZSnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMjoxMTo1MlrOIZSyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MDMxMg==", "bodyText": "I don't think we need to mention for Tensor conversion in the methods below, as long as the documentation says what the method returns, it can be of any use after that.\nNow for tensorSupport(), what about something more generic like hasBoundaries()?", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563390312", "createdAt": "2021-01-24T22:08:13Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Index.java", "diffHunk": "@@ -74,4 +70,61 @@ default Dimension apply(Dimension dim) {\n   default boolean isPoint() {\n     return false;\n   }\n+\n+  /**\n+   * Returns true if this index is a new axis, adding a dimension of size 1\n+   */\n+  default boolean isNewAxis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if this index is an ellipsis, expanding to take as many dimensions as possible (and applying all() to\n+   * them)\n+   */\n+  default boolean isEllipsis() {\n+    return false;\n+  }\n+\n+  /**\n+   * Get whether the Index supports Tensor conversion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM5MzEwMQ==", "bodyText": "Like we've discussed, we probably just want to go with one name, I'm ok with any (we don't need to be too strict to follow what the names in Python so expand is fine if that's what you prefer).", "url": "https://github.com/tensorflow/java/pull/166#discussion_r563393101", "createdAt": "2021-01-24T22:11:52Z", "author": {"login": "karllessard"}, "path": "ndarray/src/main/java/org/tensorflow/ndarray/index/Indices.java", "diffHunk": "@@ -199,21 +265,109 @@ public static Index range(long start, long end) {\n    * @return index\n    */\n   public static Index flip() {\n-    return Flip.INSTANCE;\n+    return slice(null, null, -1);\n   }\n-  \n+\n   /**\n-   * An index that returns elements according to an hyperslab defined by {@code start},\n-   * {@code stride}, {@code count}, {@code block}. See {@link Hyperslab}.\n-   * \n+   * An index that returns elements according to an hyperslab defined by {@code start}, {@code stride}, {@code count},\n+   * {@code block}. See {@link Hyperslab}.\n+   *\n    * @param start Starting location for the hyperslab.\n    * @param stride The number of elements to separate each element or block to be selected.\n    * @param count The number of elements or blocks to select along the dimension.\n    * @param block The size of the block selected from the dimension.\n-   * \n    * @return index\n    */\n   public static Index hyperslab(long start, long stride, long count, long block) {\n     return new Hyperslab(start, stride, count, block);\n   }\n+\n+  /**\n+   * An index that inserts a new dimension of size 1 into the resulting array.\n+   *\n+   * @return index\n+   */\n+  public static Index newAxis() {\n+    return NewAxis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions. Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   * @see #expand()\n+   */\n+  public static Index ellipsis() {\n+    return Ellipsis.INSTANCE;\n+  }\n+\n+  /**\n+   * An index that expands to fill all available source dimensions. Works the same as Python's {@code ...}.\n+   *\n+   * @return index\n+   */\n+  public static Index expand() {\n+    return ellipsis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffdabdfd095a7a6e81afca9d066d1ba0c7eacfe"}, "originalPosition": 241}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6c2436f6cb152b9d569f64180e949f07d1120a", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/3d6c2436f6cb152b9d569f64180e949f07d1120a", "committedDate": "2021-01-24T22:49:58Z", "message": "Remove expand\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0e86fa7c5f068bb56f143f8fe7da2bfb0d2830", "author": {"user": {"login": "rnett", "name": "Ryan Nett"}}, "url": "https://github.com/tensorflow/java/commit/6e0e86fa7c5f068bb56f143f8fe7da2bfb0d2830", "committedDate": "2021-01-25T01:50:26Z", "message": "remove tensor references\n\nSigned-off-by: Ryan Nett <rnett@calpoly.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1MDMxNTM2", "url": "https://github.com/tensorflow/java/pull/166#pullrequestreview-575031536", "createdAt": "2021-01-25T02:31:09Z", "commit": {"oid": "6e0e86fa7c5f068bb56f143f8fe7da2bfb0d2830"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3469, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}