{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Njg2MDU0", "number": 1345, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozMVrOEQwXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MTo1NVrOEQxdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA1MDMxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozMVrOG1Fofg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNjo0NFrOG1F8ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // modify the CACHE property of the identity column\n          \n          \n            \n                    final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n          \n      \n    \n    \n  \n\nIf not supported, shouldn't this be removed?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458319998", "createdAt": "2020-07-21T18:57:31Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMTQ5OA==", "bodyText": "It's logged in the error so that we don't forget about it. We may need to consider something similar in the future for the other databases, but would need a completely different command.", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458321498", "createdAt": "2020-07-21T19:00:14Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTk5OA=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNTE1MA==", "bodyText": "makes sense", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458325150", "createdAt": "2020-07-21T19:06:44Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTk5OA=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA1MTQ1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1Nzo1M1rOG1FpSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxMTo0OVrOG1GG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nextra whitespace", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458320201", "createdAt": "2020-07-21T18:57:53Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in Derby: \" + ddl);\n+    }\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNzc4Nw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458327787", "createdAt": "2020-07-21T19:11:49Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in Derby: \" + ddl);\n+    }\n+\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDIwMQ=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA1Mjc3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1ODoyMFrOG1FqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxNTo1MlrOG1GPdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDQ1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nextra whitespace", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458320451", "createdAt": "2020-07-21T18:58:20Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -549,6 +549,21 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         runStatement(ddl);\n     }\n \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Check input strings are clean\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+        \n+        // so important, we log it\n+        logger.info(ddl);\n+        \n+        runStatement(ddl);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyOTk3NQ==", "bodyText": "Done", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458329975", "createdAt": "2020-07-21T19:15:52Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -549,6 +549,21 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         runStatement(ddl);\n     }\n \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Check input strings are clean\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+        \n+        // so important, we log it\n+        logger.info(ddl);\n+        \n+        runStatement(ddl);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDQ1MQ=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2MjkwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMToxNVrOG1Fwlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyNDowMFrOG1GgWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjA3MA==", "bodyText": "What do the above two methods do? Shouldn't these just be logged out?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458322070", "createdAt": "2020-07-21T19:01:15Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterTableIdentityCache extends BaseObject {\n+    private final String columnName;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param version\n+     * @param startWith\n+     * @param cache\n+     */\n+    public AlterTableIdentityCache(String schemaName, String tableName, String columnName, int cache, int version) {\n+        super(schemaName, tableName, DatabaseObjectType.SEQUENCE, version);\n+        this.columnName = columnName;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getTypeNameVersion() {\n+        // There's typically only one identity column on a table, but we still\n+        // want to qualify the name with the column just to make sure it's unique\n+        return getObjectType().name() + \":\" + getQualifiedName() + \".\" + this.columnName + \":\" + this.version;\n+        \n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterTableColumnIdentityCache(getSchemaName(), getObjectName(), this.columnName, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNDAzNg==", "bodyText": "Good catch. Needs to be fixed", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458324036", "createdAt": "2020-07-21T19:04:48Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterTableIdentityCache extends BaseObject {\n+    private final String columnName;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param version\n+     * @param startWith\n+     * @param cache\n+     */\n+    public AlterTableIdentityCache(String schemaName, String tableName, String columnName, int cache, int version) {\n+        super(schemaName, tableName, DatabaseObjectType.SEQUENCE, version);\n+        this.columnName = columnName;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getTypeNameVersion() {\n+        // There's typically only one identity column on a table, but we still\n+        // want to qualify the name with the column just to make sure it's unique\n+        return getObjectType().name() + \":\" + getQualifiedName() + \".\" + this.columnName + \":\" + this.version;\n+        \n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterTableColumnIdentityCache(getSchemaName(), getObjectName(), this.columnName, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjA3MA=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyOTgxOQ==", "bodyText": "Done", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458329819", "createdAt": "2020-07-21T19:15:35Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterTableIdentityCache extends BaseObject {\n+    private final String columnName;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param version\n+     * @param startWith\n+     * @param cache\n+     */\n+    public AlterTableIdentityCache(String schemaName, String tableName, String columnName, int cache, int version) {\n+        super(schemaName, tableName, DatabaseObjectType.SEQUENCE, version);\n+        this.columnName = columnName;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getTypeNameVersion() {\n+        // There's typically only one identity column on a table, but we still\n+        // want to qualify the name with the column just to make sure it's unique\n+        return getObjectType().name() + \":\" + getQualifiedName() + \".\" + this.columnName + \":\" + this.version;\n+        \n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterTableColumnIdentityCache(getSchemaName(), getObjectName(), this.columnName, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjA3MA=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNDI5OQ==", "bodyText": "Is there one more commit to come? not sure I follow what drop and grant mean here", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458334299", "createdAt": "2020-07-21T19:24:00Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterTableIdentityCache extends BaseObject {\n+    private final String columnName;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param version\n+     * @param startWith\n+     * @param cache\n+     */\n+    public AlterTableIdentityCache(String schemaName, String tableName, String columnName, int cache, int version) {\n+        super(schemaName, tableName, DatabaseObjectType.SEQUENCE, version);\n+        this.columnName = columnName;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getTypeNameVersion() {\n+        // There's typically only one identity column on a table, but we still\n+        // want to qualify the name with the column just to make sure it's unique\n+        return getObjectType().name() + \":\" + getQualifiedName() + \".\" + this.columnName + \":\" + this.version;\n+        \n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterTableColumnIdentityCache(getSchemaName(), getObjectName(), this.columnName, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjA3MA=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2NTI1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTo1OFrOG1FyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNjo1OFrOG1F9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjQ0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                    final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n          \n          \n            \n                    DataDefinitionUtil.assertValidName(columnName);\n          \n          \n            \n                    \n          \n          \n            \n                    // modify the CACHE property of the identity column\n          \n          \n            \n                    final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n          \n      \n    \n    \n  \n\nWhy generate the string?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458322445", "createdAt": "2020-07-21T19:01:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNDk4OA==", "bodyText": "Because the ddl gets logged once as a reminder for what we might need to do.", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458324988", "createdAt": "2020-07-21T19:06:30Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjQ0NQ=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNTI3NA==", "bodyText": "makes sense... per above", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458325274", "createdAt": "2020-07-21T19:06:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjQ0NQ=="}, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIzMDAxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MTo1NVrOG1HZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDowNzozM1rOG1H5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODg0Mg==", "bodyText": "is there a way to support it in PostgreSQL?\ndo we think we won't have the problem there?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458348842", "createdAt": "2020-07-21T19:51:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in PostgreSQL: \" + ddl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1NzAwMA==", "bodyText": "Right, I was thinking about this. We need to see if it's also a problem, but because it means having to fish through the catalog to find the sequence, it's going to be a fair bit of work. Now, I'd still like to migrate to the new schema design which eliminates the row_id identity completely, thus rendering this issue moot.", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458357000", "createdAt": "2020-07-21T20:07:33Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in PostgreSQL: \" + ddl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODg0Mg=="}, "originalCommit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4767, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}