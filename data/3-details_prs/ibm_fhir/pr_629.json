{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDk4MjA1", "number": 629, "title": "Incorporate and Improve test coverage in the build/site #248", "bodyText": "Add Examples to increase Test Coverage\n\nparameters-contactdetail.[json/xml]\nbasic-type.[json/xml]\n\n\nAdd coverage for get method tests\nUpdate fhir-parent to use the latest jacoco plugin\nIncrease code coverage of fhir-config\nUpdate fhir-model to remove unused FHIRUtil method\nAdd a switch to turn on/off codecov.io\n\nSigned-off-by: Paul Bastide pbastide@us.ibm.com", "createdAt": "2020-01-23T18:17:49Z", "url": "https://github.com/IBM/FHIR/pull/629", "merged": true, "mergeCommit": {"oid": "8fda86063a226806fda3ae8c6e89c5d353bb020b"}, "closed": true, "closedAt": "2020-01-25T01:30:18Z", "author": {"login": "prb112"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9OcALAH2gAyMzY2NDk4MjA1OmM2YWJjN2Q3ZWRhMDM0ODM5ZGU5YzEzMjA2ZGY5ZDU3N2Y2MjcwYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9o_irgH2gAyMzY2NDk4MjA1OjJhZWEyOGZlOWY1ODliODJhOTMzZThkMmI3MGVjNjRiMjQzMmUwOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6abc7d7eda034839de9c13206df9d577f6270bf", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/c6abc7d7eda034839de9c13206df9d577f6270bf", "committedDate": "2020-01-23T18:13:34Z", "message": "Incorporate and Improve test coverage in the build/site #248\n\n- Add Examples to increase Test Coverage\n\t- parameters-contactdetail.[json/xml]\n\t- basic-type.[json/xml]\n- Add coverage for get method tests\n- Update fhir-parent to use the latest jacoco plugin\n- Increase code coverage of fhir-config\n- Update fhir-model to remove unused FHIRUtil method\n- Add a switch to turn on/off codecov.io\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/456b782612cfa84e64d2286db7b1728dda849e70", "committedDate": "2020-01-23T19:24:24Z", "message": "Incorporate and Improve test coverage in the build/site #248\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc2MTU2", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347576156", "createdAt": "2020-01-23T20:10:53Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMDo1M1rOFhLLhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMDo1M1rOFhLLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMDUwMQ==", "bodyText": "Is this really useful?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370330501", "createdAt": "2020-01-23T20:10:53Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc3MTI1", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347577125", "createdAt": "2020-01-23T20:12:38Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMjozOFrOFhLOeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMjozOFrOFhLOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTI1Ng==", "bodyText": "do we really want to print them out always?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370331256", "createdAt": "2020-01-23T20:12:38Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"equals\")) {\n+                method.invoke(resource, resource);\n+                assertTrue(true);\n+\n+                String x = \"BAD\";\n+                method.invoke(resource, x);\n+                assertTrue(true);\n+                \n+                if (resource instanceof Resource) {\n+                    Resource r = (Resource) resource; \n+                    Resource r2 = r.toBuilder().build(); \n+                    assertTrue(r.equals(r2));\n+                }\n+            }\n+\n+            if (method.getName().equals(\"hasChildren\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+        }\n+    }\n+\n+    public void buildTestForUncoveredTypes() throws Exception {\n+        List<Extension> extensions = new ArrayList<>();\n+        extensions.add(buildBase64Binary());\n+        extensions.add(buildBooleanTrue());\n+        extensions.add(buildCanonical());\n+        extensions.add(buildId());\n+        extensions.add(buildContactDetail());\n+        extensions.add(buildCount());\n+        extensions.add(buildDistance());\n+        extensions.add(buildMoneyQuantity());\n+\n+        CodeableConcept code = CodeableConcept.builder().id(\"1-2-3-4\").text(string(\"Demo\")).build();\n+        Basic basic = Basic.builder().code(code).extension(extensions).build();\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.XML).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 236}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc3MzI5", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347577329", "createdAt": "2020-01-23T20:13:01Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzowMVrOFhLPBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzowMVrOFhLPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTM5OA==", "bodyText": "do we really want to print them out always?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370331398", "createdAt": "2020-01-23T20:13:01Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"equals\")) {\n+                method.invoke(resource, resource);\n+                assertTrue(true);\n+\n+                String x = \"BAD\";\n+                method.invoke(resource, x);\n+                assertTrue(true);\n+                \n+                if (resource instanceof Resource) {\n+                    Resource r = (Resource) resource; \n+                    Resource r2 = r.toBuilder().build(); \n+                    assertTrue(r.equals(r2));\n+                }\n+            }\n+\n+            if (method.getName().equals(\"hasChildren\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+        }\n+    }\n+\n+    public void buildTestForUncoveredTypes() throws Exception {\n+        List<Extension> extensions = new ArrayList<>();\n+        extensions.add(buildBase64Binary());\n+        extensions.add(buildBooleanTrue());\n+        extensions.add(buildCanonical());\n+        extensions.add(buildId());\n+        extensions.add(buildContactDetail());\n+        extensions.add(buildCount());\n+        extensions.add(buildDistance());\n+        extensions.add(buildMoneyQuantity());\n+\n+        CodeableConcept code = CodeableConcept.builder().id(\"1-2-3-4\").text(string(\"Demo\")).build();\n+        Basic basic = Basic.builder().code(code).extension(extensions).build();\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.XML).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);\n+\n+            try (ByteArrayInputStream in = new ByteArrayInputStream(out.getBytes())) {\n+                Basic basicParsed = FHIRParser.parser(Format.XML).parse(in).as(Basic.class);\n+                assertNotNull(basicParsed);\n+                assertTrue(true);\n+            }\n+        }\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.JSON).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc3ODUz", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347577853", "createdAt": "2020-01-23T20:14:02Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNDowM1rOFhLQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNDowM1rOFhLQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTgwOA==", "bodyText": "not sure why assertTrue(true) which is always pass here ...", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370331808", "createdAt": "2020-01-23T20:14:03Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"equals\")) {\n+                method.invoke(resource, resource);\n+                assertTrue(true);\n+\n+                String x = \"BAD\";\n+                method.invoke(resource, x);\n+                assertTrue(true);\n+                \n+                if (resource instanceof Resource) {\n+                    Resource r = (Resource) resource; \n+                    Resource r2 = r.toBuilder().build(); \n+                    assertTrue(r.equals(r2));\n+                }\n+            }\n+\n+            if (method.getName().equals(\"hasChildren\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+        }\n+    }\n+\n+    public void buildTestForUncoveredTypes() throws Exception {\n+        List<Extension> extensions = new ArrayList<>();\n+        extensions.add(buildBase64Binary());\n+        extensions.add(buildBooleanTrue());\n+        extensions.add(buildCanonical());\n+        extensions.add(buildId());\n+        extensions.add(buildContactDetail());\n+        extensions.add(buildCount());\n+        extensions.add(buildDistance());\n+        extensions.add(buildMoneyQuantity());\n+\n+        CodeableConcept code = CodeableConcept.builder().id(\"1-2-3-4\").text(string(\"Demo\")).build();\n+        Basic basic = Basic.builder().code(code).extension(extensions).build();\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.XML).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);\n+\n+            try (ByteArrayInputStream in = new ByteArrayInputStream(out.getBytes())) {\n+                Basic basicParsed = FHIRParser.parser(Format.XML).parse(in).as(Basic.class);\n+                assertNotNull(basicParsed);\n+                assertTrue(true);\n+            }\n+        }\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.JSON).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);\n+\n+            try (ByteArrayInputStream in = new ByteArrayInputStream(out.getBytes())) {\n+                Basic basicParsed = FHIRParser.parser(Format.JSON).parse(in).as(Basic.class);\n+                assertNotNull(basicParsed);\n+                assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 256}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc4MTgz", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347578183", "createdAt": "2020-01-23T20:14:40Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNDo0MVrOFhLRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNDo0MVrOFhLRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjA3NQ==", "bodyText": "does this always pass?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370332075", "createdAt": "2020-01-23T20:14:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"equals\")) {\n+                method.invoke(resource, resource);\n+                assertTrue(true);\n+\n+                String x = \"BAD\";\n+                method.invoke(resource, x);\n+                assertTrue(true);\n+                \n+                if (resource instanceof Resource) {\n+                    Resource r = (Resource) resource; \n+                    Resource r2 = r.toBuilder().build(); \n+                    assertTrue(r.equals(r2));\n+                }\n+            }\n+\n+            if (method.getName().equals(\"hasChildren\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+        }\n+    }\n+\n+    public void buildTestForUncoveredTypes() throws Exception {\n+        List<Extension> extensions = new ArrayList<>();\n+        extensions.add(buildBase64Binary());\n+        extensions.add(buildBooleanTrue());\n+        extensions.add(buildCanonical());\n+        extensions.add(buildId());\n+        extensions.add(buildContactDetail());\n+        extensions.add(buildCount());\n+        extensions.add(buildDistance());\n+        extensions.add(buildMoneyQuantity());\n+\n+        CodeableConcept code = CodeableConcept.builder().id(\"1-2-3-4\").text(string(\"Demo\")).build();\n+        Basic basic = Basic.builder().code(code).extension(extensions).build();\n+\n+        try (StringWriter writer = new StringWriter()) {\n+            FHIRGenerator.generator(Format.XML).generate(basic, writer);\n+\n+            String out = writer.toString();\n+            assertNotNull(out);\n+            assertFalse(out.isEmpty());\n+            System.out.println(out);\n+\n+            try (ByteArrayInputStream in = new ByteArrayInputStream(out.getBytes())) {\n+                Basic basicParsed = FHIRParser.parser(Format.XML).parse(in).as(Basic.class);\n+                assertNotNull(basicParsed);\n+                assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc5MDEy", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347579012", "createdAt": "2020-01-23T20:16:12Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNjoxMlrOFhLUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNjoxMlrOFhLUPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjczNQ==", "bodyText": "always true?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370332735", "createdAt": "2020-01-23T20:16:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc5MTI2", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347579126", "createdAt": "2020-01-23T20:16:25Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNjoyNVrOFhLUnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNjoyNVrOFhLUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjgzMQ==", "bodyText": "always true?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370332831", "createdAt": "2020-01-23T20:16:25Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc5NTIw", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347579520", "createdAt": "2020-01-23T20:17:04Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNzowNFrOFhLVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNzowNFrOFhLVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMzEyNQ==", "bodyText": "always true?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370333125", "createdAt": "2020-01-23T20:17:04Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTc5ODUy", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347579852", "createdAt": "2020-01-23T20:17:38Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNzozOFrOFhLWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNzozOFrOFhLWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMzM2OQ==", "bodyText": "always true?", "url": "https://github.com/IBM/FHIR/pull/629#discussion_r370333369", "createdAt": "2020-01-23T20:17:38Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/test/ResourceCoverageTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Count;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Distance;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.MoneyQuantity;\n+import com.ibm.fhir.model.type.code.ContactPointUse;\n+import com.ibm.fhir.model.type.code.QuantityComparator;\n+import com.ibm.fhir.model.type.code.ResourceType;\n+import com.ibm.fhir.model.type.code.ResourceType.ValueSet;\n+\n+/**\n+ * This class exercises the getters in the resource package.\n+ */\n+public class ResourceCoverageTest {\n+\n+    public static byte[] PAYLOAD = \"THIS IS A FAKE PAYLOAD\".getBytes();\n+\n+    public static Extension buildBooleanTrue() {\n+        return Extension.builder().url(\"https://extension-Boolean\")\n+                .value(com.ibm.fhir.model.type.Boolean.builder().value(\"TRUE\").build()).build();\n+    }\n+\n+    public static Extension buildBase64Binary() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildId() {\n+        return Extension.builder().url(\"https://extension-base64\")\n+                .value(Base64Binary.builder().value(PAYLOAD).build()).build();\n+    }\n+\n+    public static Extension buildCanonical() {\n+        return Extension.builder().url(\"https://extension-Canonical\")\n+                .value(com.ibm.fhir.model.type.Canonical.builder().value(\"https://mycanonical\").build())\n+                .build();\n+    }\n+\n+    public static Extension buildContactDetail() {\n+        return Extension.builder().url(\"https://extension-ContactDetail\")\n+                .value(ContactDetail.builder().name(string(\"Patient P\"))\n+                        .telecom(ContactPoint.builder().use(ContactPointUse.HOME)\n+                                .value(string(\"1-111-111-1111\")).build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static Extension buildCount() {\n+        Count count =\n+                Count.builder().comparator(QuantityComparator.GREATER_OR_EQUALS).value(Decimal.of(\"10.0\"))\n+                        .unit(string(\"kg\")).build();\n+        return Extension.builder().url(\"https://extension-Count\").value(count).build();\n+    }\n+\n+    private static Extension buildDistance() {\n+        Distance distance = Distance.builder().unit(string(\"km\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-Distance\")\n+                .value(distance).build();\n+    }\n+\n+    private static Extension buildMoneyQuantity() {\n+        MoneyQuantity moneyQuantity = MoneyQuantity.builder().unit(string(\"$\")).value(Decimal.of(\"10.0\")).build();\n+        return Extension.builder().url(\"https://extension-MoneyQuantity\")\n+                .value(moneyQuantity).build();\n+    }\n+\n+    @Test\n+    public void testResources() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"json/ibm/complete-mock/\" + valueSet.value() + \"-1.json\");\n+                Method[] methods = resource.getClass().getMethods();\n+                runMethods(resource, methods);\n+                Class<?>[] clzs = resource.getClass().getClasses();\n+                for (Class<?> clz : clzs) {\n+\n+                    if (!SKIP.contains(clz.getSimpleName())) {\n+                        Method m = resource.getClass().getMethod(\"get\" + clz.getSimpleName());\n+                        Object o = m.invoke(resource);\n+                        if (o.getClass().getSimpleName().contains(\"List\")) {\n+                            @SuppressWarnings(\"unchecked\")\n+                            List<Object> os = ((List<Object>) o);\n+                            if (!os.isEmpty()) {\n+                                runMethods(os.get(0), clz.getMethods());\n+                            }\n+                        } else if (!o.getClass().getSimpleName().contains(\"Class\")) {\n+                            runMethods(o, clz.getMethods());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Test\n+    public void testResourcesWithXml() throws Exception {\n+        List<String> SKIP = Arrays.asList(\"DomainResource\", \"Resource\", \"Builder\");\n+        ValueSet[] values = ResourceType.ValueSet.values();\n+        for (ValueSet valueSet : values) {\n+            if (!SKIP.contains(valueSet.value())) {\n+                Resource resource =\n+                        TestUtil.readExampleResource(\"xml/ibm/complete-mock/\" + valueSet.value() + \"-1.xml\");\n+\n+                Resource.Builder builder = resource.toBuilder();\n+                Method[] methods = builder.getClass().getMethods();\n+                for(Method method : methods) {\n+                    if (method.getName().equals(\"extension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                    \n+                    if (method.getName().equals(\"modifierExtension\") && method.toString().contains(\"java.util.Collection\")) {\n+                        List<Extension> extensions = Arrays.asList(buildBooleanTrue());\n+                        builder = (Resource.Builder) method.invoke(builder, extensions);\n+                    }\n+                }\n+                resource = builder.build();\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.JSON).generate(resource, writer);\n+                    String outJson = writer.toString();\n+                    assertNotNull(outJson);\n+                    assertFalse(outJson.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outJson.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.JSON).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+                \n+                try (StringWriter writer = new StringWriter()) {\n+                    FHIRGenerator.generator(Format.XML).generate(resource, writer);\n+                    String outXML = writer.toString();\n+                    assertNotNull(outXML);\n+                    assertFalse(outXML.isEmpty());\n+                    \n+                    try (ByteArrayInputStream in = new ByteArrayInputStream(outXML.getBytes())) {\n+                        Resource resource2 = FHIRParser.parser(Format.XML).parse(in).as(Resource.class);\n+                        assertNotNull(resource2);\n+                        assertTrue(true);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runMethods(Object resource, Method[] methods) throws Exception {\n+        for (Method method : methods) {\n+            if (method.getName().startsWith(\"get\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"hashCode\")) {\n+                method.invoke(resource);\n+                assertTrue(true);\n+            }\n+\n+            if (method.getName().equals(\"equals\")) {\n+                method.invoke(resource, resource);\n+                assertTrue(true);\n+\n+                String x = \"BAD\";\n+                method.invoke(resource, x);\n+                assertTrue(true);\n+                \n+                if (resource instanceof Resource) {\n+                    Resource r = (Resource) resource; \n+                    Resource r2 = r.toBuilder().build(); \n+                    assertTrue(r.equals(r2));\n+                }\n+            }\n+\n+            if (method.getName().equals(\"hasChildren\")) {\n+                method.invoke(resource);\n+                assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjgyMDYx", "url": "https://github.com/IBM/FHIR/pull/629#pullrequestreview-347682061", "createdAt": "2020-01-23T23:46:50Z", "commit": {"oid": "456b782612cfa84e64d2286db7b1728dda849e70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aea28fe9f589b82a933e8d2b70ec64b2432e08a", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/2aea28fe9f589b82a933e8d2b70ec64b2432e08a", "committedDate": "2020-01-25T01:09:55Z", "message": "Incorporate and Improve test coverage in the build/site #248\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 663, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}