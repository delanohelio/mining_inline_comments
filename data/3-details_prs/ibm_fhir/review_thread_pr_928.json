{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDE0ODIy", "number": 928, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMToyNVrODyI7jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNTowNVrODyK6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAxNzExOnYy", "diffSide": "RIGHT", "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMToyNVrOGGAwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODo1OVrOGGBdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ==", "bodyText": "please add the corresponding docs to the user's guide", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408956935", "createdAt": "2020-04-15T16:01:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -33,6 +33,7 @@\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n+    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODYyOA==", "bodyText": "Added documentation to the user's guide.", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408968628", "createdAt": "2020-04-15T16:18:59Z", "author": {"login": "JohnTimm"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -33,6 +33,7 @@\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n+    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzNTYxOnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjoxMlrOGGA8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1NToyMlrOGGC4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw==", "bodyText": "javadoc?", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408960097", "createdAt": "2020-04-15T16:06:12Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java", "diffHunk": "@@ -108,7 +108,13 @@ public static boolean isDefinitionalResource(Resource resource) {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n-    private static boolean isDefinitionalResourceType(Class<?> resourceType) {\n+    public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTgxOA==", "bodyText": "Added Javadoc to both methods", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991818", "createdAt": "2020-04-15T16:55:22Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java", "diffHunk": "@@ -108,7 +108,13 @@ public static boolean isDefinitionalResource(Resource resource) {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n-    private static boolean isDefinitionalResourceType(Class<?> resourceType) {\n+    public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0Mjc2OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzo1M1rOGGBA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTo1MVrOGGBk_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg==", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408961242", "createdAt": "2020-04-15T16:07:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -143,6 +157,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDQ5Mw==", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simply return null.", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970493", "createdAt": "2020-04-15T16:21:51Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -143,6 +157,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1MDk1OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOTo0NlrOGGBF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODoyNVrOGGB1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw==", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962513", "createdAt": "2020-04-15T16:09:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -115,6 +128,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDc0MA==", "bodyText": "Added Javadoc", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408974740", "createdAt": "2020-04-15T16:28:25Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -115,6 +128,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1MTg2OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMDowMVrOGGBGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyOToyM1rOGGB4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw==", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962663", "createdAt": "2020-04-15T16:10:01Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -87,7 +100,7 @@ public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n      *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n     public String getLatestVersion(String url, Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTQxNQ==", "bodyText": "Added Javadoc", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975415", "createdAt": "2020-04-15T16:29:23Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -87,7 +100,7 @@ public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n      *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n     public String getLatestVersion(String url, Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1MjE2OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMDowOVrOGGBGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDowN1rOGGB6Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA==", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962724", "createdAt": "2020-04-15T16:10:09Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -54,7 +67,7 @@ public static FHIRRegistry getInstance() {\n      *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n      */\n     public boolean hasResource(String url, Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTkxOA==", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simple return false.", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975918", "createdAt": "2020-04-15T16:30:07Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -54,7 +67,7 @@ public static FHIRRegistry getInstance() {\n      *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n      */\n     public boolean hasResource(String url, Class<? extends Resource> resourceType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5OTYwOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTozNVrOGGBkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDo0NFrOGGB7lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg==", "bodyText": "maybe overload the constructor to let the user pass in the cache size?", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970342", "createdAt": "2020-04-15T16:21:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjI3OA==", "bodyText": "This is used internally and is not intended to be configured / controlled by the user.", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408976278", "createdAt": "2020-04-15T16:30:44Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMTM2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoxNFrOGGByqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1MDozMVrOGGCskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA==", "bodyText": "maybe a comment here to explain that getInstance() loads all the static providers", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408973994", "createdAt": "2020-04-15T16:27:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +131,14 @@ public void contextInitialized(ServletContextEvent event) {\n             log.fine(\"Initializing FHIRRegistry...\");\n             FHIRRegistry.getInstance();\n \n+            Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (serverRegistryResourceProviderEnabled) {\n+                log.info(\"Registering ServerRegistryResourceProvider...\");\n+                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n+                FHIRRegistry.getInstance().register(provider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODgxNg==", "bodyText": "Added Javadoc", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988816", "createdAt": "2020-04-15T16:50:31Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +131,14 @@ public void contextInitialized(ServletContextEvent event) {\n             log.fine(\"Initializing FHIRRegistry...\");\n             FHIRRegistry.getInstance();\n \n+            Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (serverRegistryResourceProviderEnabled) {\n+                log.info(\"Registering ServerRegistryResourceProvider...\");\n+                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n+                FHIRRegistry.getInstance().register(provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzMjY1OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyOTo1N1rOGGB5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1MDoxOVrOGGCsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA==", "bodyText": "Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975804", "createdAt": "2020-04-15T16:29:57Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -36,13 +39,23 @@\n     private final List<FHIRRegistryResourceProvider> providers;\n \n     private FHIRRegistry() {\n-        providers = loadProviders();\n+        providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n+    /**\n+     * Register a provider\n+     *\n+     * @param provider\n+     *     the provider to register\n+     */\n+    public void register(FHIRRegistryResourceProvider provider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODY5MA==", "bodyText": "Added Javadoc", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988690", "createdAt": "2020-04-15T16:50:19Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -36,13 +39,23 @@\n     private final List<FHIRRegistryResourceProvider> providers;\n \n     private FHIRRegistry() {\n-        providers = loadProviders();\n+        providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n+    /**\n+     * Register a provider\n+     *\n+     * @param provider\n+     *     the provider to register\n+     */\n+    public void register(FHIRRegistryResourceProvider provider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE1MTcyOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozNDo1N1rOGGCFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1NToxMFrOGGC32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ==", "bodyText": "Was debating whether INFO level here is appropriate...we try to be very sparse with those.", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408978859", "createdAt": "2020-04-15T16:34:57Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n+        try {\n+            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n+        List<FHIRRegistryResource> registryResources = registryResourceMap.computeIfAbsent(url, k -> computeRegistryResources(resourceType, url));\n+        if (!registryResources.isEmpty()) {\n+            if (version != null) {\n+                Version v = Version.from(version);\n+                for (FHIRRegistryResource resource : registryResources) {\n+                    if (resource.getVersion().equals(v)) {\n+                        return resource;\n+                    }\n+                }\n+                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n+            } else {\n+                return registryResources.get(registryResources.size() - 1);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        try {\n+            return getRegistryResources(resourceType, Collections.emptyMap());\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n+        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n+        return getRegistryResources(StructureDefinition.class, queryParameters);\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        return getRegistryResources(SearchParameter.class, queryParameters);\n+    }\n+\n+    @Override\n+    public void afterCreate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterUpdate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterDelete(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    private List<FHIRRegistryResource> computeRegistryResources(Class<? extends Resource> resourceType, String url) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .sorted()\n+                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount());\n+                registryResources.addAll(result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList()));\n+\n+                int pageNumber = 1;\n+                int lastPageNumber = searchContext.getLastPageNumber();\n+                while (pageNumber < lastPageNumber) {\n+                    searchContext.setPageNumber(++pageNumber);\n+                    result = persistence.search(context, resourceType);\n+                    registryResources.addAll(result.getResource().stream()\n+                            .map(ServerRegistryResource::from)\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList()));\n+                }\n+\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return Collections.unmodifiableList(registryResources);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n+        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n+            return;\n+        }\n+        Resource resource = event.getFhirResource();\n+        String url = getUrl(resource);\n+        if (url != null) {\n+            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            if (previous != null && !previous.isEmpty()) {\n+                log.info(\"Removed registry resource(s) with url: \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NjQ0NA==", "bodyText": "As discussed on slack, please also make it clear we're just removing them from the cache...not from the registry or the db or something", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408986444", "createdAt": "2020-04-15T16:46:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n+        try {\n+            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n+        List<FHIRRegistryResource> registryResources = registryResourceMap.computeIfAbsent(url, k -> computeRegistryResources(resourceType, url));\n+        if (!registryResources.isEmpty()) {\n+            if (version != null) {\n+                Version v = Version.from(version);\n+                for (FHIRRegistryResource resource : registryResources) {\n+                    if (resource.getVersion().equals(v)) {\n+                        return resource;\n+                    }\n+                }\n+                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n+            } else {\n+                return registryResources.get(registryResources.size() - 1);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        try {\n+            return getRegistryResources(resourceType, Collections.emptyMap());\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n+        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n+        return getRegistryResources(StructureDefinition.class, queryParameters);\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        return getRegistryResources(SearchParameter.class, queryParameters);\n+    }\n+\n+    @Override\n+    public void afterCreate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterUpdate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterDelete(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    private List<FHIRRegistryResource> computeRegistryResources(Class<? extends Resource> resourceType, String url) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .sorted()\n+                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount());\n+                registryResources.addAll(result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList()));\n+\n+                int pageNumber = 1;\n+                int lastPageNumber = searchContext.getLastPageNumber();\n+                while (pageNumber < lastPageNumber) {\n+                    searchContext.setPageNumber(++pageNumber);\n+                    result = persistence.search(context, resourceType);\n+                    registryResources.addAll(result.getResource().stream()\n+                            .map(ServerRegistryResource::from)\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList()));\n+                }\n+\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return Collections.unmodifiableList(registryResources);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n+        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n+            return;\n+        }\n+        Resource resource = event.getFhirResource();\n+        String url = getUrl(resource);\n+        if (url != null) {\n+            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            if (previous != null && !previous.isEmpty()) {\n+                log.info(\"Removed registry resource(s) with url: \" + url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTcwNw==", "bodyText": "Changed to fine", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991707", "createdAt": "2020-04-15T16:55:10Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n+        try {\n+            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n+        List<FHIRRegistryResource> registryResources = registryResourceMap.computeIfAbsent(url, k -> computeRegistryResources(resourceType, url));\n+        if (!registryResources.isEmpty()) {\n+            if (version != null) {\n+                Version v = Version.from(version);\n+                for (FHIRRegistryResource resource : registryResources) {\n+                    if (resource.getVersion().equals(v)) {\n+                        return resource;\n+                    }\n+                }\n+                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n+            } else {\n+                return registryResources.get(registryResources.size() - 1);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        try {\n+            return getRegistryResources(resourceType, Collections.emptyMap());\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n+        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n+        return getRegistryResources(StructureDefinition.class, queryParameters);\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        return getRegistryResources(SearchParameter.class, queryParameters);\n+    }\n+\n+    @Override\n+    public void afterCreate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterUpdate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterDelete(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    private List<FHIRRegistryResource> computeRegistryResources(Class<? extends Resource> resourceType, String url) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .sorted()\n+                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount());\n+                registryResources.addAll(result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList()));\n+\n+                int pageNumber = 1;\n+                int lastPageNumber = searchContext.getLastPageNumber();\n+                while (pageNumber < lastPageNumber) {\n+                    searchContext.setPageNumber(++pageNumber);\n+                    result = persistence.search(context, resourceType);\n+                    registryResources.addAll(result.getResource().stream()\n+                            .map(ServerRegistryResource::from)\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList()));\n+                }\n+\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return Collections.unmodifiableList(registryResources);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n+        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n+            return;\n+        }\n+        Resource resource = event.getFhirResource();\n+        String url = getUrl(resource);\n+        if (url != null) {\n+            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            if (previous != null && !previous.isEmpty()) {\n+                log.info(\"Removed registry resource(s) with url: \" + url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}, "originalCommit": {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM0Mjg1OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNTowNVrOGGD_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNTowNVrOGGD_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.fine(\"Removed registry resource(s) with url: \" + url);\n          \n          \n            \n                            log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r409010112", "createdAt": "2020-04-15T17:25:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -208,7 +208,7 @@ private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url: \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9796bd65cc265950463b7ec06fae8f973627c92"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4947, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}