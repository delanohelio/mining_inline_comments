{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTE4OTI2", "number": 1078, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyMjoxNFrOD7ysoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Mzo1M1rOD730Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDIzMjAwOnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config/configDropins/disabled/cloud.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyMjoxNFrOGUVe6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozOTozNVrOGUWGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NjY4MA==", "bodyText": "not related to your change at all, but i just spotted this typo that i must have introduced earlier:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <!-- webApp security is MUST be provided via a gateway -->\n          \n          \n            \n                <!-- webApp security MUST be provided via a gateway -->", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423976680", "createdAt": "2020-05-12T19:22:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/configDropins/disabled/cloud.xml", "diffHunk": "@@ -1,7 +1,7 @@\n <server>\n     <!-- webApp security is MUST be provided via a gateway -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4Njg5NQ==", "bodyText": "Fixing in my upcoming pr", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423986895", "createdAt": "2020-05-12T19:39:35Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/configDropins/disabled/cloud.xml", "diffHunk": "@@ -1,7 +1,7 @@\n <server>\n     <!-- webApp security is MUST be provided via a gateway -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NjY4MA=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI1NTYwOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOToxMVrOGUVuGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOToxMVrOGUVuGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MDU3MA==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423980570", "createdAt": "2020-05-12T19:29:11Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -388,26 +404,23 @@ private CapabilityStatement addExtensionElements(CapabilityStatement capabilityS\n             auditLogServiceName = auditLogServiceName.substring(lastDelimeter + 1);\n         }\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/auditLogServiceName\")\n-                .value(string(auditLogServiceName))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/auditLogServiceName\").value(string(auditLogServiceName))\n+                        .build();\n         extentions.add(extension);\n \n         PropertyGroup auditLogProperties =\n                 fhirConfig.getPropertyGroup(FHIRConfiguration.PROPERTY_AUDIT_SERVICE_PROPERTIES);\n         String auditLogPropertiesString =\n                 auditLogProperties != null ? auditLogProperties.toString() : \"<not specified>\";\n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/auditLogProperties\")\n-                .value(string(auditLogPropertiesString))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/auditLogProperties\").value(string(auditLogPropertiesString))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/persistenceType\")\n-                .value(string(getPersistenceImpl().getClass().getSimpleName()))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/persistenceType\")\n+                        .value(string(getPersistenceImpl().getClass().getSimpleName())).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI1ODEwOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOTo1OVrOGUVvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOTo1OVrOGUVvyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MTAwMw==", "bodyText": "I prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423981003", "createdAt": "2020-05-12T19:29:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -330,56 +346,56 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n                 throw new IllegalStateException(\"Operation \" + opDef.getCode().getValue() + \" has no url\");\n             }\n \n-            ops.add(Rest.Resource.Operation.builder()\n-                    .name(opDef.getCode())\n-                    .definition(Canonical.of(opDef.getUrl().getValue(), opDef.getVersion() == null ? null : opDef.getVersion().getValue()))\n-                    .documentation(opDef.getDescription())\n-                    .build());\n+            ops.add(Rest.Resource.Operation.builder().name(opDef.getCode())\n+                    .definition(Canonical.of(opDef.getUrl().getValue(),\n+                            opDef.getVersion() == null ? null : opDef.getVersion().getValue()))\n+                    .documentation(opDef.getDescription()).build());\n         }\n \n         return ops;\n     }\n \n-    private CapabilityStatement addExtensionElements(CapabilityStatement capabilityStatement)\n-        throws Exception {\n+    private CapabilityStatement addExtensionElements(CapabilityStatement capabilityStatement) throws Exception {\n         List<Extension> extentions = new ArrayList<Extension>();\n-        Extension extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/defaultTenantId\")\n-                .value(string(fhirConfig.getStringProperty(FHIRConfiguration.PROPERTY_DEFAULT_TENANT_ID, FHIRConfiguration.DEFAULT_TENANT_ID)))\n-                .build();\n+        Extension extension =\n+                Extension.builder().url(EXTENSION_URL + \"/defaultTenantId\")\n+                        .value(string(fhirConfig.getStringProperty(FHIRConfiguration.PROPERTY_DEFAULT_TENANT_ID,\n+                                FHIRConfiguration.DEFAULT_TENANT_ID)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/websocketNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_WEBSOCKET_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/websocketNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig\n+                                .getBooleanProperty(FHIRConfiguration.PROPERTY_WEBSOCKET_ENABLED, Boolean.FALSE)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/kafkaNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_KAFKA_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/kafkaNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(\n+                                fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_KAFKA_ENABLED, Boolean.FALSE)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/natsNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_NATS_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/natsNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(\n+                                fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_NATS_ENABLED, Boolean.FALSE)))\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 361}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI2MTYwOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMToxMVrOGUVyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMToxMVrOGUVyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MTY0NQ==", "bodyText": "I prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423981645", "createdAt": "2020-05-12T19:31:11Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -285,28 +307,22 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n         format.add(Code.of(FHIRMediaType.APPLICATION_FHIR_XML));\n \n         // Finally, create the CapabilityStatement resource itself.\n-        CapabilityStatement conformance = CapabilityStatement.builder()\n-                .status(PublicationStatus.ACTIVE)\n-                .date(DateTime.of(ZonedDateTime.now(ZoneOffset.UTC)))\n-                .kind(CapabilityStatementKind.CAPABILITY)\n-                .fhirVersion(FHIRVersion.VERSION_4_0_1)\n-                .format(format)\n-                .patchFormat(Code.of(FHIRMediaType.APPLICATION_JSON_PATCH),\n-                             Code.of(FHIRMediaType.APPLICATION_FHIR_JSON),\n-                             Code.of(FHIRMediaType.APPLICATION_FHIR_XML))\n-                .version(string(buildInfo.getBuildVersion()))\n-                .name(string(FHIR_SERVER_NAME))\n-                .description(Markdown.of(buildDescription))\n-                .copyright(Markdown.of(FHIR_COPYRIGHT))\n-                .publisher(string(\"IBM Corporation\"))\n-                .software(CapabilityStatement.Software.builder()\n-                          .name(string(FHIR_SERVER_NAME))\n-                          .version(string(buildInfo.getBuildVersion()))\n-                          .id(buildInfo.getBuildId())\n-                          .build())\n-                .rest(rest)\n-                .instantiates(Canonical.of(\"http://www.hl7.org/fhir/bulk-data/CapabilityStatement-bulk-data.html\"))\n-                .build();\n+        CapabilityStatement conformance =\n+                CapabilityStatement.builder().status(PublicationStatus.ACTIVE)\n+                        .date(DateTime.of(ZonedDateTime.now(ZoneOffset.UTC))).kind(CapabilityStatementKind.CAPABILITY)\n+                        .fhirVersion(FHIRVersion.VERSION_4_0_1).format(format)\n+                        .patchFormat(Code.of(FHIRMediaType.APPLICATION_JSON_PATCH),\n+                                Code.of(FHIRMediaType.APPLICATION_FHIR_JSON),\n+                                Code.of(FHIRMediaType.APPLICATION_FHIR_XML))\n+                        .version(string(buildInfo.getBuildVersion())).name(string(FHIR_SERVER_NAME))\n+                        .description(Markdown.of(buildDescription)).copyright(Markdown.of(FHIR_COPYRIGHT))\n+                        .publisher(string(\"IBM Corporation\"))\n+                        .software(CapabilityStatement.Software.builder().name(string(FHIR_SERVER_NAME))\n+                                .version(string(buildInfo.getBuildVersion())).id(buildInfo.getBuildId()).build())\n+                        .rest(rest)\n+                        .instantiates(\n+                                Canonical.of(\"http://www.hl7.org/fhir/bulk-data/CapabilityStatement-bulk-data.html\"))\n+                        .build();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI2NDczOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjowOVrOGUV0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjowOVrOGUV0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjE4MQ==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982181", "createdAt": "2020-05-12T19:32:09Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -245,38 +272,33 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n \n         String regURL = regURLTemplate.replaceAll(\"<host>\", actualHost);\n \n-        CapabilityStatement.Rest.Security restSecurity = CapabilityStatement.Rest.Security.builder()\n-                .service(CodeableConcept.builder()\n-                    .coding(Coding.builder()\n-                        .code(Code.of(\"SMART-on-FHIR\"))\n-                        .system(Uri.of(\"http://terminology.hl7.org/CodeSystem/restful-security-service\"))\n-                        .build())\n-                    .text(string(\"OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org)\"))\n-                    .build())\n-                .extension(Extension.builder()\n-                    .url(\"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\")\n-                    .extension(\n-                        Extension.builder().url(\"token\").value(Url.of(tokenURL)).build(),\n-                        Extension.builder().url(\"authorize\").value(Url.of(authURL)).build(),\n-                        Extension.builder().url(\"register\").value(Url.of(regURL)).build())\n-                    .build())\n-                .build();\n-\n-        CapabilityStatement.Rest rest = CapabilityStatement.Rest.builder()\n-                .mode(RestfulCapabilityMode.SERVER)\n-                .security(restSecurity)\n-                .resource(resources)\n-                .interaction(CapabilityStatement.Rest.Interaction.builder()\n-                    .code(transactionMode)\n-                    .build())\n-                .operation(mapOperationDefinitionsToRestOperations(systemOps))\n-                .build();\n+        CapabilityStatement.Rest.Security restSecurity =\n+                CapabilityStatement.Rest.Security.builder()\n+                        .service(CodeableConcept.builder().coding(Coding.builder().code(Code.of(\"SMART-on-FHIR\"))\n+                                .system(Uri.of(\"http://terminology.hl7.org/CodeSystem/restful-security-service\"))\n+                                .build())\n+                                .text(string(\"OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org)\"))\n+                                .build())\n+                        .extension(Extension.builder()\n+                                .url(\"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\")\n+                                .extension(Extension.builder().url(\"token\").value(Url.of(tokenURL)).build(),\n+                                        Extension.builder().url(\"authorize\").value(Url.of(authURL)).build(),\n+                                        Extension.builder().url(\"register\").value(Url.of(regURL)).build())\n+                                .build())\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI2NjM4OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjozOVrOGUV1gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjozOVrOGUV1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjQ2Ng==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982466", "createdAt": "2020-05-12T19:32:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -200,19 +230,17 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n             }\n \n             // Build the ConformanceResource for this resource type.\n-            Rest.Resource cr = Rest.Resource.builder()\n-                    .type(ResourceType.of(resourceType))\n-                    .profile(Canonical.of(\"http://hl7.org/fhir/profiles/\" + resourceTypeName))\n-                    .supportedProfile(FHIRRegistry.getInstance().getProfiles(resourceTypeName))\n-                    .interaction(interactions)\n-                    .operation(ops)\n-                    .conditionalCreate(com.ibm.fhir.model.type.Boolean.of(true))\n-                    .conditionalUpdate(com.ibm.fhir.model.type.Boolean.of(true))\n-                    .updateCreate(com.ibm.fhir.model.type.Boolean.of(isUpdateCreateEnabled()))\n-                    .conditionalDelete(ConditionalDeleteStatus.MULTIPLE)\n-                    .conditionalRead(ConditionalReadStatus.FULL_SUPPORT)\n-                    .searchParam(conformanceSearchParams)\n-                    .build();\n+            Rest.Resource cr =\n+                    Rest.Resource.builder().type(ResourceType.of(resourceType))\n+                            .profile(Canonical.of(\"http://hl7.org/fhir/profiles/\" + resourceTypeName))\n+                            .supportedProfile(FHIRRegistry.getInstance().getProfiles(resourceTypeName))\n+                            .interaction(interactions).operation(ops)\n+                            .conditionalCreate(com.ibm.fhir.model.type.Boolean.of(true))\n+                            .conditionalUpdate(com.ibm.fhir.model.type.Boolean.of(true))\n+                            .updateCreate(com.ibm.fhir.model.type.Boolean.of(isUpdateCreateEnabled()))\n+                            .conditionalDelete(ConditionalDeleteStatus.MULTIPLE)\n+                            .conditionalRead(ConditionalReadStatus.FULL_SUPPORT).searchParam(conformanceSearchParams)\n+                            .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI2ODY3OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMzozMFrOGUV3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMzozMFrOGUV3EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4Mjg2NQ==", "bodyText": "i prefer the old style", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982865", "createdAt": "2020-05-12T19:33:30Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -178,15 +210,13 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n                 for (SearchParameter searchParameter : searchParameters) {\n                     // The name here is a natural language name, and intentionally not replaced with code.\n                     Rest.Resource.SearchParam.Builder conformanceSearchParamBuilder =\n-                            Rest.Resource.SearchParam.builder()\n-                                .name(searchParameter.getName())\n-                                .type(searchParameter.getType());\n+                            Rest.Resource.SearchParam.builder().name(searchParameter.getName())\n+                                    .type(searchParameter.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDI4NDYxOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozNzoxMFrOGUWBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo1Mjo0NVrOGUYhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ==", "bodyText": "I've always wondered why this method is synchronized.  Definitely orthogonal to your PR, but let me know if you agree it shouldn't be needed...", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423985519", "createdAt": "2020-05-12T19:37:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NzA1Mg==", "bodyText": "I think you are going to want to use the compute method on ConcurrentHashMap", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423987052", "createdAt": "2020-05-12T19:39:51Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NzM3OQ==", "bodyText": "and computeIfAbsent for the first one", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423987379", "createdAt": "2020-05-12T19:40:20Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NzUyNw==", "bodyText": "Let me remove. If we find we need to add it back we can.", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423987527", "createdAt": "2020-05-12T19:40:37Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODc1Mg==", "bodyText": "what about something like:\nCAPABILITY_STATEMENT_CACHE.compute(tenantId, k -> getOrCreateCapabilityStatement());", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423988752", "createdAt": "2020-05-12T19:43:02Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODk1Mw==", "bodyText": "compute should be atomic (for ConcurrentHashMap)", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423988953", "createdAt": "2020-05-12T19:43:28Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MTIyMg==", "bodyText": "and compute returns the new value:\nCapabilityStatement capabilityStatement = CAPABILITY_STATEMENT_CACHE.compute(tenantId, k -> getOrCreateCapabilityStatement(tenantId));", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423991222", "createdAt": "2020-05-12T19:47:48Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjM4Nw==", "bodyText": "Flipped around per conversation", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r424026387", "createdAt": "2020-05-12T20:52:45Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTA3MDc0OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Mzo1M1rOGUduFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Mzo1M1rOGUduFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMTYzNw==", "bodyText": "The description needs to specify the units.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`fhirServer/core/capabilityStatementCacheTimeout`|integer|The max time a CapabilityStatement is cached for the metadata endpoint. |\n          \n          \n            \n            |`fhirServer/core/capabilityStatementCacheTimeout`|integer|The number of minutes that a tenant's CapabilityStatement is cached for the metadata endpoint. |", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r424111637", "createdAt": "2020-05-13T00:43:53Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1443,6 +1443,7 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/core/checkReferenceTypes`|boolean|Indicates whether reference type checking is performed by the server during parsing / deserialization.|\n |`fhirServer/core/serverRegistryResourceProviderEnabled`|boolean|Indicates whether the server registry resource provider should be used by the FHIR registry component to access definitional resources through the persistence layer.|\n |`fhirServer/core/conditionalDeleteMaxNumber`|integer|The max number of matches supported in conditional delete. |\n+|`fhirServer/core/capabilityStatementCacheTimeout`|integer|The max time a CapabilityStatement is cached for the metadata endpoint. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2868ff5471ca83245daab6090912feab619d4eba"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}