{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTMzMzY3", "number": 1744, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMjo0NlrOE8Wu7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMjo0NlrOE8Wu7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzIyNDc5OnYy", "diffSide": "RIGHT", "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMjo0NlrOH4bWuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxMTo0NFrOH4bqOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDQ5MQ==", "bodyText": "indexOf('char') would probably be preferred here", "url": "https://github.com/IBM/FHIR/pull/1744#discussion_r528930491", "createdAt": "2020-11-23T19:02:46Z", "author": {"login": "prb112"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -643,7 +643,15 @@ private String getIdentifier(ElementDefinition elementDefinition) {\n     private List<Type> getTypes(ElementDefinition elementDefinition) {\n         if (elementDefinition.getContentReference() != null) {\n             String contentReference = elementDefinition.getContentReference().getValue();\n-            return elementDefinitionMap.get(contentReference.substring(1)).getType();\n+            int index = contentReference.indexOf(\"#\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "999650430d06c0e4089edc1f53f2d31f3529a5df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDY1Mg==", "bodyText": "Since the constraint is compiled one time, I think it's a nominal benefit", "url": "https://github.com/IBM/FHIR/pull/1744#discussion_r528930652", "createdAt": "2020-11-23T19:03:06Z", "author": {"login": "prb112"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -643,7 +643,15 @@ private String getIdentifier(ElementDefinition elementDefinition) {\n     private List<Type> getTypes(ElementDefinition elementDefinition) {\n         if (elementDefinition.getContentReference() != null) {\n             String contentReference = elementDefinition.getContentReference().getValue();\n-            return elementDefinitionMap.get(contentReference.substring(1)).getType();\n+            int index = contentReference.indexOf(\"#\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDQ5MQ=="}, "originalCommit": {"oid": "999650430d06c0e4089edc1f53f2d31f3529a5df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNTQ4Mg==", "bodyText": "Per the Sonar link:\nhttps://rules.sonarsource.com/java/RSPEC-3027?search=indexOf\nIt looks like this rule has been deprecated likely because modern compilers already do the optimization.", "url": "https://github.com/IBM/FHIR/pull/1744#discussion_r528935482", "createdAt": "2020-11-23T19:11:44Z", "author": {"login": "JohnTimm"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -643,7 +643,15 @@ private String getIdentifier(ElementDefinition elementDefinition) {\n     private List<Type> getTypes(ElementDefinition elementDefinition) {\n         if (elementDefinition.getContentReference() != null) {\n             String contentReference = elementDefinition.getContentReference().getValue();\n-            return elementDefinitionMap.get(contentReference.substring(1)).getType();\n+            int index = contentReference.indexOf(\"#\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDQ5MQ=="}, "originalCommit": {"oid": "999650430d06c0e4089edc1f53f2d31f3529a5df"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4636, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}