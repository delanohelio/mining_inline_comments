{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Nzg5MDU2", "number": 1560, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyODowNVrOEsnFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1Mzo0NVrOEsnqOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjEzMDk0OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyODowNVrOHf8mYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MToxN1rOHgK87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDc3MQ==", "bodyText": "there was strange logic there, generally when I see that I wonder why there were two, is newResource ever null? was the first check in case newResource was null?", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503260771", "createdAt": "2020-10-12T12:28:05Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -326,8 +324,8 @@ private FHIRRestOperationResponse doPatchOrUpdate(String type, String id, FHIRPa\n                     ior.setPrevResource(null);\n \n                     // if no id provided, then generate an id for the input resource\n-                    if (newResource.getId() == null || newResource.getId() == null) {\n-                        id = UUID.randomUUID().toString();\n+                    if (newResource.getId() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTkxOA==", "bodyText": "newResource should not be null at this point - it's checked during bundle validation (or resource validation if request is not a bundle request)", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503495918", "createdAt": "2020-10-12T19:41:17Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -326,8 +324,8 @@ private FHIRRestOperationResponse doPatchOrUpdate(String type, String id, FHIRPa\n                     ior.setPrevResource(null);\n \n                     // if no id provided, then generate an id for the input resource\n-                    if (newResource.getId() == null || newResource.getId() == null) {\n-                        id = UUID.randomUUID().toString();\n+                    if (newResource.getId() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDc3MQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjEzMzE1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyODo0OVrOHf8n0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MTo0NVrOHgK9jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MTEzOA==", "bodyText": "I wonder if the method name should be generateResourceId() or some such to make it more clear that its no a logical id for the FHIRPersistence object but instead is used to generate resource ids.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503261138", "createdAt": "2020-10-12T12:28:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "diffHunk": "@@ -130,4 +132,13 @@\n     default boolean isDeleteSupported() {\n         return false;\n     }\n+\n+    /**\n+     * Generates a logical identity.\n+     * \n+     * @return logical identity\n+     */\n+    default String getLogicalId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjA3OA==", "bodyText": "I renamed to generateResourceId()", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503496078", "createdAt": "2020-10-12T19:41:45Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "diffHunk": "@@ -130,4 +132,13 @@\n     default boolean isDeleteSupported() {\n         return false;\n     }\n+\n+    /**\n+     * Generates a logical identity.\n+     * \n+     * @return logical identity\n+     */\n+    default String getLogicalId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MTEzOA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjEzNzk5OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozMDoxM1rOHf8q3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MjowNlrOHgK-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MTkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n          \n          \n            \n                        Map<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n          \n      \n    \n    \n  \n\nShouldn't the interface be sufficient here?", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503261919", "createdAt": "2020-10-12T12:30:13Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjIwMg==", "bodyText": "yes, fixed", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503496202", "createdAt": "2020-10-12T19:42:06Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MTkxOQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE0MjM2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozMToyMFrOHf8taQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0Mzo1M1rOHgLAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MjU2OQ==", "bodyText": "try using Entry<Integer,Bundle.Entry> entry : responseIndexAndEntries.entrySet() \nIt'll save the subsequent update", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503262569", "createdAt": "2020-10-12T12:31:20Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5Njg5MQ==", "bodyText": "In this case, I'm looping through the requestBundle, not the responseIndexAndEntries hashmap. I used this form of the for loop because I also need to get the corresponding entry in the responseBundle.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503496891", "createdAt": "2020-10-12T19:43:53Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MjU2OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE0NzM5OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozMjo0OVrOHf8whQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NDoxMlrOHgLBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        log.finer(\"--> path: \" + requestURL.getPath());\n          \n          \n            \n                                        log.finer(\"--> path: '\" + requestURL.getPath() + \"'\");", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503263365", "createdAt": "2020-10-12T12:32:49Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzU0Ng==", "bodyText": "I suggest bracketing the log with a single quote as spaces are hard to see otherwise.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503263546", "createdAt": "2020-10-12T12:33:09Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzM2NQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NzAxNQ==", "bodyText": "Done.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503497015", "createdAt": "2020-10-12T19:44:12Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzM2NQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE0OTI4OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozMzoyNFrOHf8xsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NDoyM1rOHgLBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzY2Nw==", "bodyText": "same with this line ---\nI suggest bracketing the log with a single quote as spaces are hard to see otherwise.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503263667", "createdAt": "2020-10-12T12:33:24Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NzEwNA==", "bodyText": "Done.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503497104", "createdAt": "2020-10-12T19:44:23Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzY2Nw=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE1MDE0OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozMzo0MlrOHf8yQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NTozOFrOHgLDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzgxMA==", "bodyText": "this style is totally fine, but often times we'll prefer a style with more whitespace like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Encounter encounter = Encounter.builder().status(EncounterStatus.FINISHED).clazz(Coding.builder().code(Code.of(\"AMB\")).build())\n          \n          \n            \n                            .reasonReference(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:2\")).build()).build();\n          \n          \n            \n                    Encounter encounter = Encounter.builder()\n          \n          \n            \n                            .status(EncounterStatus.FINISHED)\n          \n          \n            \n                            .clazz(Coding.builder()\n          \n          \n            \n                                .code(Code.of(\"AMB\"))\n          \n          \n            \n                                .build())\n          \n          \n            \n                            .reasonReference(Reference.builder()\n          \n          \n            \n                                .reference(com.ibm.fhir.model.type.String.of(\"urn:2\"))\n          \n          \n            \n                                .build())\n          \n          \n            \n                            .build();", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503263810", "createdAt": "2020-10-12T12:33:42Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry, bundleEntry2).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with backward local reference dependency.\n+     * Procedure has local reference to Patient, but Procedure is first in bundle.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithBackwardDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry2, bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with circular local reference dependency.\n+     * Procedure has local reference to Encounter and Encounter has local reference to Procedure.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithCircularDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Encounter encounter = Encounter.builder().status(EncounterStatus.FINISHED).clazz(Coding.builder().code(Code.of(\"AMB\")).build())\n+                .reasonReference(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:2\")).build()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NTA1Mg==", "bodyText": "additionally, we'll often statically import the com.ibm.fhir.model.type.String.string factory method so that we don't need to fully quality com.ibm.fhir.model.type.String for each usage.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503265052", "createdAt": "2020-10-12T12:35:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry, bundleEntry2).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with backward local reference dependency.\n+     * Procedure has local reference to Patient, but Procedure is first in bundle.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithBackwardDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry2, bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with circular local reference dependency.\n+     * Procedure has local reference to Encounter and Encounter has local reference to Procedure.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithCircularDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Encounter encounter = Encounter.builder().status(EncounterStatus.FINISHED).clazz(Coding.builder().code(Code.of(\"AMB\")).build())\n+                .reasonReference(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:2\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzgxMA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTAwMw==", "bodyText": "these style comments apply to many of the tests in this class...not planning to repeat it for each instance", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503269003", "createdAt": "2020-10-12T12:42:43Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry, bundleEntry2).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with backward local reference dependency.\n+     * Procedure has local reference to Patient, but Procedure is first in bundle.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithBackwardDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry2, bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with circular local reference dependency.\n+     * Procedure has local reference to Encounter and Encounter has local reference to Procedure.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithCircularDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Encounter encounter = Encounter.builder().status(EncounterStatus.FINISHED).clazz(Coding.builder().code(Code.of(\"AMB\")).build())\n+                .reasonReference(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:2\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzgxMA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NzU5NA==", "bodyText": "I updated the testcases to use the style suggested, as well as importing com.ibm.fhir.model.type.String.string", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503497594", "createdAt": "2020-10-12T19:45:38Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry, bundleEntry2).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with backward local reference dependency.\n+     * Procedure has local reference to Patient, but Procedure is first in bundle.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithBackwardDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();\n+        Bundle.Entry.Request bundleEntryRequest2 = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Procedure\")).build();\n+        Bundle.Entry bundleEntry2 = Bundle.Entry.builder().resource(procedure).request(bundleEntryRequest2).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry2, bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        FHIRRequestContext.get().setReturnPreference(HTTPReturnPreference.REPRESENTATION);\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(2, responseBundle.getEntry().size());\n+        for (Bundle.Entry entry : responseBundle.getEntry()) {\n+            Bundle.Entry.Response response = entry.getResponse();\n+            if (response.getLocation().getValue().startsWith(\"Patient\")) {\n+                assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+            } else if (response.getLocation().getValue().startsWith(\"Procedure\")) {\n+                assertEquals(\"Procedure/generated-1/_history/1\", response.getLocation().getValue());\n+                assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+                Procedure returnedProcedure = (Procedure) entry.getResource();\n+                assertEquals(\"Patient/generated-0\", returnedProcedure.getSubject().getReference().getValue());\n+            } else {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test transaction bundle post with circular local reference dependency.\n+     * Procedure has local reference to Encounter and Encounter has local reference to Procedure.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithCircularDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Encounter encounter = Encounter.builder().status(EncounterStatus.FINISHED).clazz(Coding.builder().code(Code.of(\"AMB\")).build())\n+                .reasonReference(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:2\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MzgxMA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE1MjI1OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozNDoxOFrOHf8zlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NTo1OVrOHgLECg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDE0OQ==", "bodyText": "since this if fixed, it may be great to make that string value a static final string(Integer.toString(SC_NOT_FOUND))", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503264149", "createdAt": "2020-10-12T12:34:18Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());\n+                        }\n \n-                StringBuffer requestDescription = new StringBuffer();\n-                long initialTime = System.currentTimeMillis();\n-                try {\n-                    FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-\n-                    String path = requestURL.getPath();\n-                    String query = requestURL.getQuery();\n-                    if (log.isLoggable(Level.FINER)) {\n-                        log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n-                                + request.getMethod().getValue() + \", url=\"\n-                                + request.getUrl().getValue());\n-                        log.finer(\"--> path: \" + path);\n-                        log.finer(\"--> query: \" + query);\n-                    }\n-\n-                    // Log our initial info message for this request.\n-                    requestDescription.append(\"entryIndex:[\");\n-                    requestDescription.append(entryIndex);\n-                    requestDescription.append(\"] correlationId:[\");\n-                    requestDescription.append(bundleRequestCorrelationId);\n-                    requestDescription.append(\"] method:[\");\n-                    requestDescription.append(request.getMethod().getValue());\n-                    requestDescription.append(\"] uri:[\");\n-                    requestDescription.append(request.getUrl().getValue());\n-                    requestDescription.append(\"]\");\n-                    log.info(\"Received bundle request: \" + requestDescription.toString());\n-\n-                    String[] pathTokens = requestURL.getPathTokens();\n-                    MultivaluedMap<String, String> queryParams = requestURL.getQueryParameters();\n-\n-                    // Construct the absolute requestUri to be used for any response bundles associated\n-                    // with history and search requests.\n-                    String absoluteUri =\n-                            getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n-\n-                    if (request.getMethod().equals(HTTPVerb.GET)) {\n-                        Resource resource = null;\n-                        int httpStatus = SC_OK;\n-\n-                        // Process a GET (read, vread, history, search, etc.).\n-                        // Determine the type of request from the path tokens.\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // FHIROperationContext operationContext;\n-                            switch (pathTokens.length) {\n-                            case 1: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, null, null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 2: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 3: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'search' request.\n-                            if (\"_search\".equals(pathTokens[0])) {\n-                                resource =\n-                                        doSearch(\"Resource\", null, null, queryParams, absoluteUri, null, null);\n-                            } else {\n-                                resource =\n-                                        doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 2) {\n-                            // This is a 'read' request.\n-                            resource =\n-                                    doRead(pathTokens[0], pathTokens[1], true, false, null, null);\n-                        } else if (pathTokens.length == 3) {\n-                            if (\"_history\".equals(pathTokens[2])) {\n-                                // This is a 'history' request.\n-                                resource =\n-                                        doHistory(pathTokens[0], pathTokens[1], queryParams, absoluteUri, null);\n-                            } else {\n-                                // This is a compartment based search\n-                                resource =\n-                                        doSearch(pathTokens[2], pathTokens[0], pathTokens[1], queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 4 && pathTokens[2].equals(\"_history\")) {\n-                            // This is a 'vread' request.\n-                            resource = doVRead(pathTokens[0], pathTokens[1], pathTokens[3], null);\n+                        // Log our initial info message for this request.\n+                        requestDescription.append(\"entryIndex:[\");\n+                        requestDescription.append(entryIndex);\n+                        requestDescription.append(\"] correlationId:[\");\n+                        requestDescription.append(bundleRequestCorrelationId);\n+                        requestDescription.append(\"] method:[\");\n+                        requestDescription.append(request.getMethod().getValue());\n+                        requestDescription.append(\"] uri:[\");\n+                        requestDescription.append(request.getUrl().getValue());\n+                        requestDescription.append(\"]\");\n+                        log.info(\"Received bundle request: \" + requestDescription.toString());\n+\n+                        // Construct the absolute requestUri to be used for any response bundles associated\n+                        // with history and search requests.\n+                        String absoluteUri = getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n+\n+                        if (request.getMethod().equals(HTTPVerb.GET)) {\n+                            processEntryForGet(responseEntry, responseIndexAndEntries, entryIndex, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.POST)) {\n+                            processEntryForPost(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.PUT)) {\n+                            processEntryForPut(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.DELETE)) {\n+                            processEntryForDelete(responseEntry, responseIndexAndEntries, entryIndex, requestURL, requestDescription.toString(), initialTime);\n                         } else {\n-                            String msg = \"Unrecognized path in request URL: \" + path;\n-                            throw buildRestException(msg, IssueType.NOT_FOUND);\n+                            // Internal error, should not get here!\n+                            throw new IllegalStateException(\"Internal Server Error: reached an unexpected code location.\");\n                         }\n-\n-                        // Save the results of the operation in the bundle response field.\n+                    } catch (FHIRPersistenceResourceNotFoundException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n                         Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                        responseBuilder.status(string(Integer.toString(httpStatus)));\n-                        setBundleResponseStatus(response, httpStatus, requestDescription.toString(), initialTime);\n-\n-                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(resource).response(responseBuilder.build()).build());\n-                    } else if (request.getMethod().equals(HTTPVerb.POST)) {\n-                        // Process a POST (create or search, or custom operation).\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-\n-                            FHIROperationContext operationContext;\n-                            Resource result;\n-                            switch (pathTokens.length) {\n-                            case 1:\n-                                operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                result = doInvoke(operationContext, null, null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 2:\n-                                operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 3:\n-                                operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, resource, queryParams, null);\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            // Add warning and hint issues to response outcome if any.\n-                            if (result instanceof OperationOutcome) {\n-                                if (((OperationOutcome) result).getIssue() != null) {\n-                                    responseBuilder.outcome(result);\n-                                }\n-                            }\n-\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(result)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-\n-                        } else if (pathTokens.length == 2 && \"_search\".equals(pathTokens[1])) {\n-                            // This is a 'search' request.\n-                            Bundle searchResults =\n-                                    doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-\n-                            // Save the results of the operation in the bundle response field.\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(searchResults)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'create' request.\n-\n-                            // Retrieve the local identifier from the request entry (if present).\n-                            String localIdentifier =\n-                                    retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-                            if (resource == null) {\n-                                String msg =\n-                                        \"BundleEntry.resource is required for bundled create requests.\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            // Convert any local references found within the resource to their\n-                            // corresponding external reference.\n+                        responseBuilder.status(string(Integer.toString(SC_NOT_FOUND)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NzczOA==", "bodyText": "Done.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503497738", "createdAt": "2020-10-12T19:45:59Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());\n+                        }\n \n-                StringBuffer requestDescription = new StringBuffer();\n-                long initialTime = System.currentTimeMillis();\n-                try {\n-                    FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-\n-                    String path = requestURL.getPath();\n-                    String query = requestURL.getQuery();\n-                    if (log.isLoggable(Level.FINER)) {\n-                        log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n-                                + request.getMethod().getValue() + \", url=\"\n-                                + request.getUrl().getValue());\n-                        log.finer(\"--> path: \" + path);\n-                        log.finer(\"--> query: \" + query);\n-                    }\n-\n-                    // Log our initial info message for this request.\n-                    requestDescription.append(\"entryIndex:[\");\n-                    requestDescription.append(entryIndex);\n-                    requestDescription.append(\"] correlationId:[\");\n-                    requestDescription.append(bundleRequestCorrelationId);\n-                    requestDescription.append(\"] method:[\");\n-                    requestDescription.append(request.getMethod().getValue());\n-                    requestDescription.append(\"] uri:[\");\n-                    requestDescription.append(request.getUrl().getValue());\n-                    requestDescription.append(\"]\");\n-                    log.info(\"Received bundle request: \" + requestDescription.toString());\n-\n-                    String[] pathTokens = requestURL.getPathTokens();\n-                    MultivaluedMap<String, String> queryParams = requestURL.getQueryParameters();\n-\n-                    // Construct the absolute requestUri to be used for any response bundles associated\n-                    // with history and search requests.\n-                    String absoluteUri =\n-                            getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n-\n-                    if (request.getMethod().equals(HTTPVerb.GET)) {\n-                        Resource resource = null;\n-                        int httpStatus = SC_OK;\n-\n-                        // Process a GET (read, vread, history, search, etc.).\n-                        // Determine the type of request from the path tokens.\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // FHIROperationContext operationContext;\n-                            switch (pathTokens.length) {\n-                            case 1: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, null, null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 2: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 3: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'search' request.\n-                            if (\"_search\".equals(pathTokens[0])) {\n-                                resource =\n-                                        doSearch(\"Resource\", null, null, queryParams, absoluteUri, null, null);\n-                            } else {\n-                                resource =\n-                                        doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 2) {\n-                            // This is a 'read' request.\n-                            resource =\n-                                    doRead(pathTokens[0], pathTokens[1], true, false, null, null);\n-                        } else if (pathTokens.length == 3) {\n-                            if (\"_history\".equals(pathTokens[2])) {\n-                                // This is a 'history' request.\n-                                resource =\n-                                        doHistory(pathTokens[0], pathTokens[1], queryParams, absoluteUri, null);\n-                            } else {\n-                                // This is a compartment based search\n-                                resource =\n-                                        doSearch(pathTokens[2], pathTokens[0], pathTokens[1], queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 4 && pathTokens[2].equals(\"_history\")) {\n-                            // This is a 'vread' request.\n-                            resource = doVRead(pathTokens[0], pathTokens[1], pathTokens[3], null);\n+                        // Log our initial info message for this request.\n+                        requestDescription.append(\"entryIndex:[\");\n+                        requestDescription.append(entryIndex);\n+                        requestDescription.append(\"] correlationId:[\");\n+                        requestDescription.append(bundleRequestCorrelationId);\n+                        requestDescription.append(\"] method:[\");\n+                        requestDescription.append(request.getMethod().getValue());\n+                        requestDescription.append(\"] uri:[\");\n+                        requestDescription.append(request.getUrl().getValue());\n+                        requestDescription.append(\"]\");\n+                        log.info(\"Received bundle request: \" + requestDescription.toString());\n+\n+                        // Construct the absolute requestUri to be used for any response bundles associated\n+                        // with history and search requests.\n+                        String absoluteUri = getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n+\n+                        if (request.getMethod().equals(HTTPVerb.GET)) {\n+                            processEntryForGet(responseEntry, responseIndexAndEntries, entryIndex, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.POST)) {\n+                            processEntryForPost(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.PUT)) {\n+                            processEntryForPut(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.DELETE)) {\n+                            processEntryForDelete(responseEntry, responseIndexAndEntries, entryIndex, requestURL, requestDescription.toString(), initialTime);\n                         } else {\n-                            String msg = \"Unrecognized path in request URL: \" + path;\n-                            throw buildRestException(msg, IssueType.NOT_FOUND);\n+                            // Internal error, should not get here!\n+                            throw new IllegalStateException(\"Internal Server Error: reached an unexpected code location.\");\n                         }\n-\n-                        // Save the results of the operation in the bundle response field.\n+                    } catch (FHIRPersistenceResourceNotFoundException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n                         Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                        responseBuilder.status(string(Integer.toString(httpStatus)));\n-                        setBundleResponseStatus(response, httpStatus, requestDescription.toString(), initialTime);\n-\n-                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(resource).response(responseBuilder.build()).build());\n-                    } else if (request.getMethod().equals(HTTPVerb.POST)) {\n-                        // Process a POST (create or search, or custom operation).\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-\n-                            FHIROperationContext operationContext;\n-                            Resource result;\n-                            switch (pathTokens.length) {\n-                            case 1:\n-                                operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                result = doInvoke(operationContext, null, null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 2:\n-                                operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 3:\n-                                operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, resource, queryParams, null);\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            // Add warning and hint issues to response outcome if any.\n-                            if (result instanceof OperationOutcome) {\n-                                if (((OperationOutcome) result).getIssue() != null) {\n-                                    responseBuilder.outcome(result);\n-                                }\n-                            }\n-\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(result)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-\n-                        } else if (pathTokens.length == 2 && \"_search\".equals(pathTokens[1])) {\n-                            // This is a 'search' request.\n-                            Bundle searchResults =\n-                                    doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-\n-                            // Save the results of the operation in the bundle response field.\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(searchResults)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'create' request.\n-\n-                            // Retrieve the local identifier from the request entry (if present).\n-                            String localIdentifier =\n-                                    retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-                            if (resource == null) {\n-                                String msg =\n-                                        \"BundleEntry.resource is required for bundled create requests.\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            // Convert any local references found within the resource to their\n-                            // corresponding external reference.\n+                        responseBuilder.status(string(Integer.toString(SC_NOT_FOUND)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDE0OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE1MzE4OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjozNDozM1rOHf80IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NjowNlrOHgLENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDI4OA==", "bodyText": "since this if fixed, it may be great to make that string value a static final string(Integer.toString(SC_GONE))", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503264288", "createdAt": "2020-10-12T12:34:33Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());\n+                        }\n \n-                StringBuffer requestDescription = new StringBuffer();\n-                long initialTime = System.currentTimeMillis();\n-                try {\n-                    FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-\n-                    String path = requestURL.getPath();\n-                    String query = requestURL.getQuery();\n-                    if (log.isLoggable(Level.FINER)) {\n-                        log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n-                                + request.getMethod().getValue() + \", url=\"\n-                                + request.getUrl().getValue());\n-                        log.finer(\"--> path: \" + path);\n-                        log.finer(\"--> query: \" + query);\n-                    }\n-\n-                    // Log our initial info message for this request.\n-                    requestDescription.append(\"entryIndex:[\");\n-                    requestDescription.append(entryIndex);\n-                    requestDescription.append(\"] correlationId:[\");\n-                    requestDescription.append(bundleRequestCorrelationId);\n-                    requestDescription.append(\"] method:[\");\n-                    requestDescription.append(request.getMethod().getValue());\n-                    requestDescription.append(\"] uri:[\");\n-                    requestDescription.append(request.getUrl().getValue());\n-                    requestDescription.append(\"]\");\n-                    log.info(\"Received bundle request: \" + requestDescription.toString());\n-\n-                    String[] pathTokens = requestURL.getPathTokens();\n-                    MultivaluedMap<String, String> queryParams = requestURL.getQueryParameters();\n-\n-                    // Construct the absolute requestUri to be used for any response bundles associated\n-                    // with history and search requests.\n-                    String absoluteUri =\n-                            getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n-\n-                    if (request.getMethod().equals(HTTPVerb.GET)) {\n-                        Resource resource = null;\n-                        int httpStatus = SC_OK;\n-\n-                        // Process a GET (read, vread, history, search, etc.).\n-                        // Determine the type of request from the path tokens.\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // FHIROperationContext operationContext;\n-                            switch (pathTokens.length) {\n-                            case 1: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, null, null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 2: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 3: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'search' request.\n-                            if (\"_search\".equals(pathTokens[0])) {\n-                                resource =\n-                                        doSearch(\"Resource\", null, null, queryParams, absoluteUri, null, null);\n-                            } else {\n-                                resource =\n-                                        doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 2) {\n-                            // This is a 'read' request.\n-                            resource =\n-                                    doRead(pathTokens[0], pathTokens[1], true, false, null, null);\n-                        } else if (pathTokens.length == 3) {\n-                            if (\"_history\".equals(pathTokens[2])) {\n-                                // This is a 'history' request.\n-                                resource =\n-                                        doHistory(pathTokens[0], pathTokens[1], queryParams, absoluteUri, null);\n-                            } else {\n-                                // This is a compartment based search\n-                                resource =\n-                                        doSearch(pathTokens[2], pathTokens[0], pathTokens[1], queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 4 && pathTokens[2].equals(\"_history\")) {\n-                            // This is a 'vread' request.\n-                            resource = doVRead(pathTokens[0], pathTokens[1], pathTokens[3], null);\n+                        // Log our initial info message for this request.\n+                        requestDescription.append(\"entryIndex:[\");\n+                        requestDescription.append(entryIndex);\n+                        requestDescription.append(\"] correlationId:[\");\n+                        requestDescription.append(bundleRequestCorrelationId);\n+                        requestDescription.append(\"] method:[\");\n+                        requestDescription.append(request.getMethod().getValue());\n+                        requestDescription.append(\"] uri:[\");\n+                        requestDescription.append(request.getUrl().getValue());\n+                        requestDescription.append(\"]\");\n+                        log.info(\"Received bundle request: \" + requestDescription.toString());\n+\n+                        // Construct the absolute requestUri to be used for any response bundles associated\n+                        // with history and search requests.\n+                        String absoluteUri = getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n+\n+                        if (request.getMethod().equals(HTTPVerb.GET)) {\n+                            processEntryForGet(responseEntry, responseIndexAndEntries, entryIndex, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.POST)) {\n+                            processEntryForPost(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.PUT)) {\n+                            processEntryForPut(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.DELETE)) {\n+                            processEntryForDelete(responseEntry, responseIndexAndEntries, entryIndex, requestURL, requestDescription.toString(), initialTime);\n                         } else {\n-                            String msg = \"Unrecognized path in request URL: \" + path;\n-                            throw buildRestException(msg, IssueType.NOT_FOUND);\n+                            // Internal error, should not get here!\n+                            throw new IllegalStateException(\"Internal Server Error: reached an unexpected code location.\");\n                         }\n-\n-                        // Save the results of the operation in the bundle response field.\n+                    } catch (FHIRPersistenceResourceNotFoundException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n                         Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                        responseBuilder.status(string(Integer.toString(httpStatus)));\n-                        setBundleResponseStatus(response, httpStatus, requestDescription.toString(), initialTime);\n-\n-                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(resource).response(responseBuilder.build()).build());\n-                    } else if (request.getMethod().equals(HTTPVerb.POST)) {\n-                        // Process a POST (create or search, or custom operation).\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-\n-                            FHIROperationContext operationContext;\n-                            Resource result;\n-                            switch (pathTokens.length) {\n-                            case 1:\n-                                operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                result = doInvoke(operationContext, null, null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 2:\n-                                operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 3:\n-                                operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, resource, queryParams, null);\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            // Add warning and hint issues to response outcome if any.\n-                            if (result instanceof OperationOutcome) {\n-                                if (((OperationOutcome) result).getIssue() != null) {\n-                                    responseBuilder.outcome(result);\n-                                }\n-                            }\n-\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(result)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-\n-                        } else if (pathTokens.length == 2 && \"_search\".equals(pathTokens[1])) {\n-                            // This is a 'search' request.\n-                            Bundle searchResults =\n-                                    doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-\n-                            // Save the results of the operation in the bundle response field.\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(searchResults)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'create' request.\n-\n-                            // Retrieve the local identifier from the request entry (if present).\n-                            String localIdentifier =\n-                                    retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-                            if (resource == null) {\n-                                String msg =\n-                                        \"BundleEntry.resource is required for bundled create requests.\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            // Convert any local references found within the resource to their\n-                            // corresponding external reference.\n+                        responseBuilder.status(string(Integer.toString(SC_NOT_FOUND)));\n+                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(FHIRUtil.buildOperationOutcome(e, false)).response(responseBuilder.build()).build());\n+                        logBundleRequestCompletedMsg(requestDescription.toString(), initialTime, SC_NOT_FOUND);\n+                    } catch (FHIRPersistenceResourceDeletedException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n+                        Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n+                        responseBuilder.status(string(Integer.toString(SC_GONE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 418}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5Nzc4MQ==", "bodyText": "Done.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503497781", "createdAt": "2020-10-12T19:46:06Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1512,432 +1526,477 @@ private Bundle processBundleEntries(Bundle requestBundle, Bundle responseBundle,\n      *            the bundle containing the corresponding response entries\n      * @param httpMethod\n      *            the HTTP method (GET, POST, PUT, etc.) to be processed\n+     * @param failFast\n+     *            a boolean value indicating if processing should stop on first failure \n+     * @param localRefMap\n+     *            the map of local references to external references\n+     * @param bundleRequestProperties\n+     *            the bundle request properties\n+     * @param bundleRequestCorrelationId\n+     *            the bundle request correlation ID\n+     * @return\n+     *            the response bundle\n+     * @throws Exception\n      */\n     private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBundle,\n-            HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n-            Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n-            throws Exception {\n-        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\n-                \"httpMethod\", httpMethod });\n+        HTTPVerb httpMethod, boolean failFast, Map<String, String> localRefMap,\n+        Map<String, String> bundleRequestProperties, String bundleRequestCorrelationId)\n+        throws Exception {\n+        log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n+        \n         try {\n-            // First, obtain a list of request entry indices for the entries that we'll process.\n-            // This list will contain the indices associated with only the entries for the specified http method.\n-            List<Integer> entryIndices =\n-                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n-            if (log.isLoggable(Level.FINER)) {\n-                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n-            }\n-\n-            // Next, for PUT (update) requests, extract any local identifiers and resolve them ahead of time.\n-            // We do this to prevent any local reference problems from occurring due to our re-ordering\n-            // of the PUT request entries.\n-            if (httpMethod.equals(HTTPVerb.PUT)) {\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Pre-processing bundle request entries for PUT method...\");\n-                }\n-                for (Integer index : entryIndices) {\n-                    Bundle.Entry requestEntry = requestBundle.getEntry().get(index);\n-\n-                    // Retrieve the local identifier from the request entry (if present).\n-                    String localIdentifier = retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                    // Since this is for a PUT request (update) we should be able to resolve the local identifier\n-                    // prior to processing the request since the resource's id must already be contained in the resource\n-                    // within the request entry.\n-                    if (localIdentifier != null) {\n-                        Resource resource = requestEntry.getResource();\n-                        addLocalRefMapping(localRefMap, localIdentifier, resource);\n-                    }\n-                }\n-            }\n-\n-            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n-            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n-                sortBundleRequestEntries(requestBundle, entryIndices);\n-                if (log.isLoggable(Level.FINER)) {\n-                    log.finer(\"Sorted bundle request indices to be processed: \"\n-                            + entryIndices.toString());\n-                }\n-            }\n-\n-            // Now visit each of the request entries using the list of indices obtained above.\n-            // Use hashmap to store both the index and the according updated response bundle entry.\n-            HashMap<Integer, Bundle.Entry> responseIndexAndEntries =\n-                    new HashMap<Integer, Bundle.Entry>();\n-            for (Integer entryIndex : entryIndices) {\n+            // Visit each of the request entries, processing those with the specified request method.\n+            // Use hashmap to store both the index and the accordingly updated response bundle entry.\n+            HashMap<Integer, Bundle.Entry> responseIndexAndEntries = new HashMap<Integer, Bundle.Entry>();\n+            for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n                 Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);\n-                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n-                Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n-\n                 Bundle.Entry.Request request = requestEntry.getRequest();\n+                Bundle.Entry responseEntry = responseBundle.getEntry().get(entryIndex);\n                 Bundle.Entry.Response response = responseEntry.getResponse();\n+                if (response.getStatus().equals(string(Integer.toString(SC_OK))) && request.getMethod().equals(httpMethod)) {\n+                    // Process request entry.\n+                    Bundle.Entry.Builder responseEntryBuilder = responseEntry.toBuilder();\n+                    StringBuffer requestDescription = new StringBuffer();\n+                    long initialTime = System.currentTimeMillis();\n+                    \n+                    try {\n+                        FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n+\n+                        if (log.isLoggable(Level.FINER)) {\n+                            log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n+                                    + request.getMethod().getValue() + \", url=\"\n+                                    + request.getUrl().getValue());\n+                            log.finer(\"--> path: \" + requestURL.getPath());\n+                            log.finer(\"--> query: \" + requestURL.getQuery());\n+                        }\n \n-                StringBuffer requestDescription = new StringBuffer();\n-                long initialTime = System.currentTimeMillis();\n-                try {\n-                    FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-\n-                    String path = requestURL.getPath();\n-                    String query = requestURL.getQuery();\n-                    if (log.isLoggable(Level.FINER)) {\n-                        log.finer(\"Processing bundle request entry \" + entryIndex + \"; method=\"\n-                                + request.getMethod().getValue() + \", url=\"\n-                                + request.getUrl().getValue());\n-                        log.finer(\"--> path: \" + path);\n-                        log.finer(\"--> query: \" + query);\n-                    }\n-\n-                    // Log our initial info message for this request.\n-                    requestDescription.append(\"entryIndex:[\");\n-                    requestDescription.append(entryIndex);\n-                    requestDescription.append(\"] correlationId:[\");\n-                    requestDescription.append(bundleRequestCorrelationId);\n-                    requestDescription.append(\"] method:[\");\n-                    requestDescription.append(request.getMethod().getValue());\n-                    requestDescription.append(\"] uri:[\");\n-                    requestDescription.append(request.getUrl().getValue());\n-                    requestDescription.append(\"]\");\n-                    log.info(\"Received bundle request: \" + requestDescription.toString());\n-\n-                    String[] pathTokens = requestURL.getPathTokens();\n-                    MultivaluedMap<String, String> queryParams = requestURL.getQueryParameters();\n-\n-                    // Construct the absolute requestUri to be used for any response bundles associated\n-                    // with history and search requests.\n-                    String absoluteUri =\n-                            getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n-\n-                    if (request.getMethod().equals(HTTPVerb.GET)) {\n-                        Resource resource = null;\n-                        int httpStatus = SC_OK;\n-\n-                        // Process a GET (read, vread, history, search, etc.).\n-                        // Determine the type of request from the path tokens.\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // FHIROperationContext operationContext;\n-                            switch (pathTokens.length) {\n-                            case 1: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, null, null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 2: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], null, null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            case 3: {\n-                                FHIROperationContext operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                resource =\n-                                        doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, null, queryParams, null);\n-                            }\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'search' request.\n-                            if (\"_search\".equals(pathTokens[0])) {\n-                                resource =\n-                                        doSearch(\"Resource\", null, null, queryParams, absoluteUri, null, null);\n-                            } else {\n-                                resource =\n-                                        doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 2) {\n-                            // This is a 'read' request.\n-                            resource =\n-                                    doRead(pathTokens[0], pathTokens[1], true, false, null, null);\n-                        } else if (pathTokens.length == 3) {\n-                            if (\"_history\".equals(pathTokens[2])) {\n-                                // This is a 'history' request.\n-                                resource =\n-                                        doHistory(pathTokens[0], pathTokens[1], queryParams, absoluteUri, null);\n-                            } else {\n-                                // This is a compartment based search\n-                                resource =\n-                                        doSearch(pathTokens[2], pathTokens[0], pathTokens[1], queryParams, absoluteUri, null, null);\n-                            }\n-                        } else if (pathTokens.length == 4 && pathTokens[2].equals(\"_history\")) {\n-                            // This is a 'vread' request.\n-                            resource = doVRead(pathTokens[0], pathTokens[1], pathTokens[3], null);\n+                        // Log our initial info message for this request.\n+                        requestDescription.append(\"entryIndex:[\");\n+                        requestDescription.append(entryIndex);\n+                        requestDescription.append(\"] correlationId:[\");\n+                        requestDescription.append(bundleRequestCorrelationId);\n+                        requestDescription.append(\"] method:[\");\n+                        requestDescription.append(request.getMethod().getValue());\n+                        requestDescription.append(\"] uri:[\");\n+                        requestDescription.append(request.getUrl().getValue());\n+                        requestDescription.append(\"]\");\n+                        log.info(\"Received bundle request: \" + requestDescription.toString());\n+\n+                        // Construct the absolute requestUri to be used for any response bundles associated\n+                        // with history and search requests.\n+                        String absoluteUri = getAbsoluteUri(getRequestUri(), request.getUrl().getValue());\n+\n+                        if (request.getMethod().equals(HTTPVerb.GET)) {\n+                            processEntryForGet(responseEntry, responseIndexAndEntries, entryIndex, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.POST)) {\n+                            processEntryForPost(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.PUT)) {\n+                            processEntryForPut(requestEntry, responseEntry, responseIndexAndEntries, entryIndex, localRefMap, requestURL, absoluteUri, requestDescription.toString(), initialTime);\n+                        } else if (request.getMethod().equals(HTTPVerb.DELETE)) {\n+                            processEntryForDelete(responseEntry, responseIndexAndEntries, entryIndex, requestURL, requestDescription.toString(), initialTime);\n                         } else {\n-                            String msg = \"Unrecognized path in request URL: \" + path;\n-                            throw buildRestException(msg, IssueType.NOT_FOUND);\n+                            // Internal error, should not get here!\n+                            throw new IllegalStateException(\"Internal Server Error: reached an unexpected code location.\");\n                         }\n-\n-                        // Save the results of the operation in the bundle response field.\n+                    } catch (FHIRPersistenceResourceNotFoundException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n                         Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                        responseBuilder.status(string(Integer.toString(httpStatus)));\n-                        setBundleResponseStatus(response, httpStatus, requestDescription.toString(), initialTime);\n-\n-                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(resource).response(responseBuilder.build()).build());\n-                    } else if (request.getMethod().equals(HTTPVerb.POST)) {\n-                        // Process a POST (create or search, or custom operation).\n-                        if (pathTokens.length > 0\n-                                && pathTokens[pathTokens.length - 1].startsWith(\"$\")) {\n-                            // This is a custom operation request\n-\n-                            // Chop off the '$' and save the name\n-                            String operationName = pathTokens[pathTokens.length - 1].substring(1);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-\n-                            FHIROperationContext operationContext;\n-                            Resource result;\n-                            switch (pathTokens.length) {\n-                            case 1:\n-                                operationContext =\n-                                        FHIROperationContext.createSystemOperationContext();\n-                                result = doInvoke(operationContext, null, null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 2:\n-                                operationContext =\n-                                        FHIROperationContext.createResourceTypeOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], null, null, operationName, resource, queryParams, null);\n-                                break;\n-                            case 3:\n-                                operationContext =\n-                                        FHIROperationContext.createInstanceOperationContext();\n-                                result = doInvoke(operationContext, pathTokens[0], pathTokens[1], null, operationName, resource, queryParams, null);\n-                                break;\n-                            default:\n-                                String msg = \"Invalid URL for custom operation '\"\n-                                        + pathTokens[pathTokens.length - 1] + \"'\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            // Add warning and hint issues to response outcome if any.\n-                            if (result instanceof OperationOutcome) {\n-                                if (((OperationOutcome) result).getIssue() != null) {\n-                                    responseBuilder.outcome(result);\n-                                }\n-                            }\n-\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(result)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-\n-                        } else if (pathTokens.length == 2 && \"_search\".equals(pathTokens[1])) {\n-                            // This is a 'search' request.\n-                            Bundle searchResults =\n-                                    doSearch(pathTokens[0], null, null, queryParams, absoluteUri, null, null);\n-\n-                            // Save the results of the operation in the bundle response field.\n-                            Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n-                            responseBuilder.status(string(Integer.toString(SC_OK)));\n-\n-                            responseIndexAndEntries.put(entryIndex, responseEntryBuilder\n-                                    .resource(searchResults)\n-                                    .response(responseBuilder.build())\n-                                    .build());\n-\n-                            setBundleResponseStatus(response, SC_OK, requestDescription.toString(), initialTime);\n-                        } else if (pathTokens.length == 1) {\n-                            // This is a 'create' request.\n-\n-                            // Retrieve the local identifier from the request entry (if present).\n-                            String localIdentifier =\n-                                    retrieveLocalIdentifier(requestEntry, localRefMap);\n-\n-                            // Retrieve the resource from the request entry.\n-                            Resource resource = requestEntry.getResource();\n-                            if (resource == null) {\n-                                String msg =\n-                                        \"BundleEntry.resource is required for bundled create requests.\";\n-                                throw buildRestException(msg, IssueType.NOT_FOUND);\n-                            }\n-\n-                            // Convert any local references found within the resource to their\n-                            // corresponding external reference.\n+                        responseBuilder.status(string(Integer.toString(SC_NOT_FOUND)));\n+                        responseIndexAndEntries.put(entryIndex, responseEntryBuilder.resource(FHIRUtil.buildOperationOutcome(e, false)).response(responseBuilder.build()).build());\n+                        logBundleRequestCompletedMsg(requestDescription.toString(), initialTime, SC_NOT_FOUND);\n+                    } catch (FHIRPersistenceResourceDeletedException e) {\n+                        if (failFast) {\n+                            String msg = \"Error while processing request bundle.\";\n+                            throw new FHIRRestBundledRequestException(msg).withIssue(e.getIssues());\n+                        }\n+                        \n+                        Bundle.Entry.Response.Builder responseBuilder = response.toBuilder();\n+                        responseBuilder.status(string(Integer.toString(SC_GONE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDI4OA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 418}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE4NTg5OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0MzowOVrOHf9Hlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODo1ODoxOFrOHgJ30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTI3MQ==", "bodyText": "It'd be great to have an integration test in fhir-server-test.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503269271", "createdAt": "2020-10-12T12:43:09Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NDQwNg==", "bodyText": "@prb112  Are the tests in com.ibm.fhir.server.test.BundleTest not sufficient?\nAny particular cases you think it should cover which it isn't?\nI was thinking whatever we cover there is fine (testBatchLocalRefs1, testBatchLocalRefs2, and testBatchLocalRefs3) and that the units tests Mike developed would be where we do the more exhaustive testing.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503284406", "createdAt": "2020-10-12T13:08:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTI3MQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODIyNA==", "bodyText": "sounds fair Lee", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503478224", "createdAt": "2020-10-12T18:58:18Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTI3MQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE5NTU2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0NTo0NlrOHf9New==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0NzowM1rOHgLFiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MDc3OQ==", "bodyText": "use an entryset", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503270779", "createdAt": "2020-10-12T12:45:46Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2048,23 +2035,56 @@ public int compare(Integer indexA, Integer indexB) {\n     }\n \n     /**\n-     * Returns the specified BundleEntry's path component of the 'url' field.\n+     * This method will build a mapping of local identifiers to external identifiers for bundle entries\n+     * which specify local identifiers and which have a request method of POST or PUT.\n      *\n-     * @param entry\n-     *            the bundle entry\n-     * @return the bundle entry's 'url' field's path component\n+     * @param requestBundle\n+     *            the bundle containing the requests\n+     *            \n+     * @return local reference map\n      */\n-    private static String getUrlPath(Bundle.Entry entry) {\n-        String path = null;\n-        Bundle.Entry.Request request = entry.getRequest();\n-        if (request != null) {\n-            if (request.getUrl() != null && request.getUrl().getValue() != null) {\n-                FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-                path = requestURL.getPath();\n+    private Map<String, String> buildLocalRefMap(Bundle requestBundle, Bundle responseBundle) throws Exception {\n+        Map<String, String> localRefMap = new HashMap<>();\n+\n+        for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 1057}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5ODEyMA==", "bodyText": "Used this form of the for loop because I need to get both the requestBundle entry and the corresponding responseBundle entry.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503498120", "createdAt": "2020-10-12T19:47:03Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2048,23 +2035,56 @@ public int compare(Integer indexA, Integer indexB) {\n     }\n \n     /**\n-     * Returns the specified BundleEntry's path component of the 'url' field.\n+     * This method will build a mapping of local identifiers to external identifiers for bundle entries\n+     * which specify local identifiers and which have a request method of POST or PUT.\n      *\n-     * @param entry\n-     *            the bundle entry\n-     * @return the bundle entry's 'url' field's path component\n+     * @param requestBundle\n+     *            the bundle containing the requests\n+     *            \n+     * @return local reference map\n      */\n-    private static String getUrlPath(Bundle.Entry entry) {\n-        String path = null;\n-        Bundle.Entry.Request request = entry.getRequest();\n-        if (request != null) {\n-            if (request.getUrl() != null && request.getUrl().getValue() != null) {\n-                FHIRUrlParser requestURL = new FHIRUrlParser(request.getUrl().getValue());\n-                path = requestURL.getPath();\n+    private Map<String, String> buildLocalRefMap(Bundle requestBundle, Bundle responseBundle) throws Exception {\n+        Map<String, String> localRefMap = new HashMap<>();\n+\n+        for (int entryIndex=0; entryIndex<requestBundle.getEntry().size(); ++entryIndex) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(entryIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MDc3OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 1057}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIxMTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0OTo1OVrOHf9XQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0OTowOFrOHgLIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MzI4MA==", "bodyText": "I think because this is in FHIRPersistence this is OK.... but it seems like something we shouldn't have as a default.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503273280", "createdAt": "2020-10-12T12:49:59Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "diffHunk": "@@ -130,4 +132,13 @@\n     default boolean isDeleteSupported() {\n         return false;\n     }\n+\n+    /**\n+     * Generates a logical identity.\n+     * \n+     * @return logical identity\n+     */\n+    default String getLogicalId() {\n+        return UUID.randomUUID().toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3Mzc0NQ==", "bodyText": "also the @OverRide declares it as public.  best to mark this as Public in the interface (rather than the default package)", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503273745", "createdAt": "2020-10-12T12:50:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "diffHunk": "@@ -130,4 +132,13 @@\n     default boolean isDeleteSupported() {\n         return false;\n     }\n+\n+    /**\n+     * Generates a logical identity.\n+     * \n+     * @return logical identity\n+     */\n+    default String getLogicalId() {\n+        return UUID.randomUUID().toString();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MzI4MA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5ODkyMQ==", "bodyText": "I removed the default impl and updated the implementing classes to provide a generateResourceId() method. I also explicitly declared all methods in the interface public.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503498921", "createdAt": "2020-10-12T19:49:08Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java", "diffHunk": "@@ -130,4 +132,13 @@\n     default boolean isDeleteSupported() {\n         return false;\n     }\n+\n+    /**\n+     * Generates a logical identity.\n+     * \n+     * @return logical identity\n+     */\n+    default String getLogicalId() {\n+        return UUID.randomUUID().toString();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MzI4MA=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIxNzM2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1MToyNVrOHf9arQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODo1Nzo0OVrOHgJ28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NDE1Nw==", "bodyText": "What does this change get us?", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503274157", "createdAt": "2020-10-12T12:51:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -289,7 +289,7 @@ protected Action buildActionChain() {\n             // system-generated value. For the update-or-create scenario, see update().\n             // Default version is 1 for a brand new FHIR Resource.\n             int newVersionNumber = 1;\n-            logicalId = logicalIdentityProvider.createNewIdentityValue();\n+            logicalId = getLogicalId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzUyMQ==", "bodyText": "getLogicalId was added to the FHIRPersistence interface, so that it can be called from outside the PL.  basically, he made that piece of it public.\nso now the FHIRRestHelper can delegate to the FHIRPersistence to have it generate a resource id (separate from actually creating a resource)", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503463521", "createdAt": "2020-10-12T18:23:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -289,7 +289,7 @@ protected Action buildActionChain() {\n             // system-generated value. For the update-or-create scenario, see update().\n             // Default version is 1 for a brand new FHIR Resource.\n             int newVersionNumber = 1;\n-            logicalId = logicalIdentityProvider.createNewIdentityValue();\n+            logicalId = getLogicalId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NDE1Nw=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODAwMw==", "bodyText": "a-ok", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503478003", "createdAt": "2020-10-12T18:57:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -289,7 +289,7 @@ protected Action buildActionChain() {\n             // system-generated value. For the update-or-create scenario, see update().\n             // Default version is 1 for a brand new FHIR Resource.\n             int newVersionNumber = 1;\n-            logicalId = logicalIdentityProvider.createNewIdentityValue();\n+            logicalId = getLogicalId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NDE1Nw=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIyMjY4OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1Mjo1MVrOHf9d5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0OTozOFrOHgLJaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NDk4MQ==", "bodyText": "use an active tense\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While processing a request bundle, but before processing individual request entries, the FHIR server will detect the use of a local identifier within any `POST` or `PUT` request entry's `fullUrl` field, and will establish a mapping between that local identifier and the corresponding external identifier that will result from performing the `POST` or `PUT` operation. \n          \n          \n            \n            While processing a request bundle, but before processing individual request entries, the IBM FHIR Server detects the use of a local identifier within any `POST` or `PUT` request entry's `fullUrl` field, and establishes a mapping between that local identifier and the corresponding external identifier that resultsfrom performing the `POST` or `PUT` operation.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503274981", "createdAt": "2020-10-12T12:52:51Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -988,46 +993,87 @@ The following example also satisfies the rule:\n }\n ```\n \n-The FHIR server first processes all POST requests found within a request bundle and then processes all PUT requests. So, the FHIR server will, in fact, process the `Patient` request entry (a POST) before it processes the `Observation` request entry (a PUT). Therefore, this would be considered a valid request bundle as well.\n+In Example 2, if the `Patient` request entry was a conditional create request, this would still be a valid request bundle, because `POST` requests are processed before `PUT` requests (rule 3). This means the `Patient` request entry would be processed before the `Observation` request entry, and thus the `Patient` local identifier would be defined when the `Observation` request entry was processed.\n \n-While processing a POST or PUT request entry within a request bundle, the FHIR server will detect the use of a local identifier within the entry's `fullUrl` field, and will establish a mapping between that local identifier and the corresponding external identifier that results from performing the POST or PUT operation.\n+#### 4.8.1.2 Example 3: Encounter and Procedure circular references\n+```\n+{\n+    \"resourceType\" : \"Bundle\",\n+    \"type\" : \"batch\",\n+    \"entry\" : [ {\n+        \"fullUrl\" : \"urn:Encounter_1\",\n+        \"resource\" : {\n+            \"resourceType\" : \"Encounter\",\n+            \u2026\n+            \"reasonReference\" : [ {\n+                    \"reference\" : \"urn:Procedure_1\"\n+            } ],\n+            \u2026\n+        },\n+        \"request\" : {\n+            \"method\" : \"POST\",\n+            \"url\" : \"Encounter\"\n+        }\n+    }, {\n+        \"fullUrl\" : \"urn:Procedure_1\",\n+        \"resource\" : {\n+            \"resourceType\" : \"Procedure\",\n+            \u2026\n+            \"encounter\" : {\n+                    \"reference\" : \"urn:Encounter_1\"\n+            },\n+            \u2026\n+        },\n+        \"request\" : {\n+            \"method\" : \"POST\",\n+            \"url\" : \"Procedure\"\n+        }\n+    } ]\n+}\n+```\n \n-For example, in Example 1 from [Section 4.8.0.1](#4801-example-1-observation-references-patient-via-local-reference), the FHIR server detects the use of the local identifier in the `Patient` request entry (`urn:uuid:7113a0bb-d9e0-49df-9855-887409388c69`) and -- after creating the new `Patient` resource -- establishes a mapping between the local identifier and the resulting external reference associated with the new `Patient` (for example, `Patient/1cc5d299-d2be-4f93-8745-a121232ffe5b`).\n+While processing a request bundle, but before processing individual request entries, the FHIR server will detect the use of a local identifier within any `POST` or `PUT` request entry's `fullUrl` field, and will establish a mapping between that local identifier and the corresponding external identifier that will result from performing the `POST` or `PUT` operation. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5OTExNQ==", "bodyText": "Done - took your suggested changes.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503499115", "createdAt": "2020-10-12T19:49:38Z", "author": {"login": "michaelwschroeder"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -988,46 +993,87 @@ The following example also satisfies the rule:\n }\n ```\n \n-The FHIR server first processes all POST requests found within a request bundle and then processes all PUT requests. So, the FHIR server will, in fact, process the `Patient` request entry (a POST) before it processes the `Observation` request entry (a PUT). Therefore, this would be considered a valid request bundle as well.\n+In Example 2, if the `Patient` request entry was a conditional create request, this would still be a valid request bundle, because `POST` requests are processed before `PUT` requests (rule 3). This means the `Patient` request entry would be processed before the `Observation` request entry, and thus the `Patient` local identifier would be defined when the `Observation` request entry was processed.\n \n-While processing a POST or PUT request entry within a request bundle, the FHIR server will detect the use of a local identifier within the entry's `fullUrl` field, and will establish a mapping between that local identifier and the corresponding external identifier that results from performing the POST or PUT operation.\n+#### 4.8.1.2 Example 3: Encounter and Procedure circular references\n+```\n+{\n+    \"resourceType\" : \"Bundle\",\n+    \"type\" : \"batch\",\n+    \"entry\" : [ {\n+        \"fullUrl\" : \"urn:Encounter_1\",\n+        \"resource\" : {\n+            \"resourceType\" : \"Encounter\",\n+            \u2026\n+            \"reasonReference\" : [ {\n+                    \"reference\" : \"urn:Procedure_1\"\n+            } ],\n+            \u2026\n+        },\n+        \"request\" : {\n+            \"method\" : \"POST\",\n+            \"url\" : \"Encounter\"\n+        }\n+    }, {\n+        \"fullUrl\" : \"urn:Procedure_1\",\n+        \"resource\" : {\n+            \"resourceType\" : \"Procedure\",\n+            \u2026\n+            \"encounter\" : {\n+                    \"reference\" : \"urn:Encounter_1\"\n+            },\n+            \u2026\n+        },\n+        \"request\" : {\n+            \"method\" : \"POST\",\n+            \"url\" : \"Procedure\"\n+        }\n+    } ]\n+}\n+```\n \n-For example, in Example 1 from [Section 4.8.0.1](#4801-example-1-observation-references-patient-via-local-reference), the FHIR server detects the use of the local identifier in the `Patient` request entry (`urn:uuid:7113a0bb-d9e0-49df-9855-887409388c69`) and -- after creating the new `Patient` resource -- establishes a mapping between the local identifier and the resulting external reference associated with the new `Patient` (for example, `Patient/1cc5d299-d2be-4f93-8745-a121232ffe5b`).\n+While processing a request bundle, but before processing individual request entries, the FHIR server will detect the use of a local identifier within any `POST` or `PUT` request entry's `fullUrl` field, and will establish a mapping between that local identifier and the corresponding external identifier that will result from performing the `POST` or `PUT` operation. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NDk4MQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIyNTg2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1Mzo0NVrOHf9fzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo0MDowMFrOHgQfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTQ2OQ==", "bodyText": "Building these test resources programmatically is totally fine, but an alternative you can use is to import a \"minimal\" example via code like this:\nProcedure procedure = TestUtil.readExampleResource(\"json/ibm/minimal/Procedure-1.json\")\nprocedure = procedure.toBuilder().\n        subject(Reference.builder()\n            .reference(com.ibm.fhir.model.type.String.of(\"urn:1\"))\n            .build())\n        .build()\n\nIts most useful if you have resource types with a lot of required fields.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503275469", "createdAt": "2020-10-12T12:53:45Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTUxOQ==", "bodyText": "It might even be worth wrapping that pattern is a new helper method like TestUtil.minimal(Procedure.class) (which would return a new Builder for the passed resource type class, which has just the required fields populated).  Thoughts?", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503275519", "createdAt": "2020-10-12T12:53:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTQ2OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwMjIwOA==", "bodyText": "I did create a new TestUtil.getMinimalResource() method, per your suggestion. However, fhir-server does not currently pull in the fhir-model test-jar, and when I tried updating the pom to do so, I was getting some 'class not found' exceptions, so decided to just go with what I have. We can revisit if you think it's important.", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503502208", "createdAt": "2020-10-12T19:54:14Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTQ2OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NjU3Mg==", "bodyText": "not important.  will be interested to see if we can make use of this new method over time...it seems generally useful to me; like a cleaner version of the pattern I described above", "url": "https://github.com/IBM/FHIR/pull/1560#discussion_r503586572", "createdAt": "2020-10-12T23:40:00Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/FHIRRestHelperTest.java", "diffHunk": "@@ -0,0 +1,987 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.core.HTTPReturnPreference;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Condition;\n+import com.ibm.fhir.model.resource.Encounter;\n+import com.ibm.fhir.model.resource.Organization;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.resource.Practitioner;\n+import com.ibm.fhir.model.resource.Practitioner.Qualification;\n+import com.ibm.fhir.model.resource.Procedure;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.EncounterStatus;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.type.code.ProcedureStatus;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.server.util.FHIRRestHelper;\n+\n+public class FHIRRestHelperTest {\n+\n+    /**\n+     * Test transaction bundle post single.\n+     */\n+    @Test\n+    public void testTransactionBundlePostSingle() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().resource(patient).request(bundleEntryRequest).build();\n+        \n+        Bundle requestBundle = Bundle.builder().id(\"bundle1\").type(BundleType.TRANSACTION).entry(bundleEntry).build();\n+\n+        // Process bundle\n+        FHIRRequestContext.get().setOriginalRequestUri(\"test\");\n+        Bundle responseBundle = helper.doBundle(requestBundle, null);\n+        \n+        // Validate results\n+        assertNotNull(responseBundle);\n+        assertEquals(1, responseBundle.getEntry().size());\n+        Bundle.Entry entry = responseBundle.getEntry().get(0);\n+        Bundle.Entry.Response response = entry.getResponse();\n+        assertEquals(\"Patient/generated-0/_history/1\", response.getLocation().getValue());\n+        assertEquals(Integer.toString(Response.Status.CREATED.getStatusCode()), response.getStatus().getValue());\n+    }\n+\n+    /**\n+     * Test transaction bundle post with local reference dependency.\n+     * Procedure has local reference to Patient.\n+     */\n+    @Test\n+    public void testTransactionBundlePostWithDependency() throws Exception {\n+        FHIRPersistence persistence = new MockPersistenceImpl();\n+        FHIRRestHelper helper = new FHIRRestHelper(persistence);\n+        \n+        Patient patient = Patient.builder().id(\"1\").build();\n+        Bundle.Entry.Request bundleEntryRequest = Bundle.Entry.Request.builder().method(HTTPVerb.POST).url(Uri.of(\"Patient\")).build();\n+        Bundle.Entry bundleEntry = Bundle.Entry.builder().fullUrl(Uri.of(\"urn:1\")).resource(patient).request(bundleEntryRequest).build();\n+        \n+        Procedure procedure = Procedure.builder().status(ProcedureStatus.COMPLETED).subject(Reference.builder().reference(com.ibm.fhir.model.type.String.of(\"urn:1\")).build()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTQ2OQ=="}, "originalCommit": {"oid": "008e34e27bb1ac44a53af16bbbcc2fbcddb3ef62"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4706, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}