{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTc1ODY0", "number": 934, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0ODozNVrODyPPHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMToxMTowMVrODyPsOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDA1MDIxOnYy", "diffSide": "RIGHT", "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0ODozNVrOGGK-0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1NzoyOFrOGGLRtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNDU2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n          \n          \n            \n                 * passed in as arguments to this method, generate an issue with severity ERROR.\n          \n          \n            \n                 * <p>Resource-asserted profile references that are not available in the FHIRRegistry result in issues with severity WARNING.\n          \n          \n            \n                 * <p>Unknown profile references passed as arguments to this method result in issues with severity ERROR.", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409124563", "createdAt": "2020-04-15T20:48:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -37,21 +40,19 @@\n import com.ibm.fhir.validation.exception.FHIRValidationException;\n \n public class FHIRValidator {\n-    public static boolean DEBUG = false;\n-\n-    private ValidatingNodeVisitor visitor = new ValidatingNodeVisitor();\n+    private static final Logger log = Logger.getLogger(FHIRValidator.class.getName());\n \n     private FHIRValidator() { }\n \n     /**\n      * Validate a {@link Resource} against constraints in the base specification and\n      * resource-asserted profile references or specific profile references but not both.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to this method, generate an issue with severity ERROR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzI0MA==", "bodyText": "and the same change in each of the other variants", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409127240", "createdAt": "2020-04-15T20:53:18Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -37,21 +40,19 @@\n import com.ibm.fhir.validation.exception.FHIRValidationException;\n \n public class FHIRValidator {\n-    public static boolean DEBUG = false;\n-\n-    private ValidatingNodeVisitor visitor = new ValidatingNodeVisitor();\n+    private static final Logger log = Logger.getLogger(FHIRValidator.class.getName());\n \n     private FHIRValidator() { }\n \n     /**\n      * Validate a {@link Resource} against constraints in the base specification and\n      * resource-asserted profile references or specific profile references but not both.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to this method, generate an issue with severity ERROR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNDU2Mw=="}, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyOTM5OA==", "bodyText": "Updated Javadoc to reflect this language", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409129398", "createdAt": "2020-04-15T20:57:28Z", "author": {"login": "JohnTimm"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -37,21 +40,19 @@\n import com.ibm.fhir.validation.exception.FHIRValidationException;\n \n public class FHIRValidator {\n-    public static boolean DEBUG = false;\n-\n-    private ValidatingNodeVisitor visitor = new ValidatingNodeVisitor();\n+    private static final Logger log = Logger.getLogger(FHIRValidator.class.getName());\n \n     private FHIRValidator() { }\n \n     /**\n      * Validate a {@link Resource} against constraints in the base specification and\n      * resource-asserted profile references or specific profile references but not both.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to this method, generate an issue with severity ERROR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNDU2Mw=="}, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDA2MjE2OnYy", "diffSide": "LEFT", "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1MToyMFrOGGLFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1Nzo0OVrOGGLSZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNjI1OA==", "bodyText": "why remove this paragraph?\nthat seems like useful information and the question has come up before wrt contained resources", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409126258", "createdAt": "2020-04-15T20:51:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -37,21 +40,19 @@\n import com.ibm.fhir.validation.exception.FHIRValidationException;\n \n public class FHIRValidator {\n-    public static boolean DEBUG = false;\n-\n-    private ValidatingNodeVisitor visitor = new ValidatingNodeVisitor();\n+    private static final Logger log = Logger.getLogger(FHIRValidator.class.getName());\n \n     private FHIRValidator() { }\n \n     /**\n      * Validate a {@link Resource} against constraints in the base specification and\n      * resource-asserted profile references or specific profile references but not both.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to this method, generate an issue with severity ERROR.\n      *\n-     * <p>Profile references that are passed into this method are only applicable to the outermost\n-     * resource (not contained resources).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyOTU3NA==", "bodyText": "Added this comment back. It was removed inadvertently.", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409129574", "createdAt": "2020-04-15T20:57:49Z", "author": {"login": "JohnTimm"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -37,21 +40,19 @@\n import com.ibm.fhir.validation.exception.FHIRValidationException;\n \n public class FHIRValidator {\n-    public static boolean DEBUG = false;\n-\n-    private ValidatingNodeVisitor visitor = new ValidatingNodeVisitor();\n+    private static final Logger log = Logger.getLogger(FHIRValidator.class.getName());\n \n     private FHIRValidator() { }\n \n     /**\n      * Validate a {@link Resource} against constraints in the base specification and\n      * resource-asserted profile references or specific profile references but not both.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to this method, generate an issue with severity ERROR.\n      *\n-     * <p>Profile references that are passed into this method are only applicable to the outermost\n-     * resource (not contained resources).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNjI1OA=="}, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDA5OTc1OnYy", "diffSide": "RIGHT", "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowMzowNVrOGGLcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowMzozM1rOGGLdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjIwMA==", "bodyText": "pretty minor, but i like to put the variable in ' just so whitespace stands out\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .text(string(\"Profile: \" + url + \" is not applicable to resource type: \" + resourceType.getSimpleName()))\n          \n          \n            \n                                    .text(string(\"Profile '\" + url + \"' is not applicable to resource type: \" + resourceType.getSimpleName()))", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409132200", "createdAt": "2020-04-15T21:03:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -156,26 +165,71 @@ public static FHIRValidator validator() {\n         return new FHIRValidator();\n     }\n \n-    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n-        private FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n-        private EvaluationContext evaluationContext;\n-        private boolean includeResourceAssertedProfiles;\n-        private List<String> profiles;\n-        private List<Issue> issues = new ArrayList<>();\n+    /**\n+     * Validate a list of profile references to ensure they are supported (known by the FHIR registry) and applicable\n+     * (the type constrained by the profile is compatible with the resource being validated).\n+     *\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to the {@link FHIRValidator#validate(EvaluationContext, boolean, String...)} method, generate an\n+     * issue with severity ERROR.\n+     *\n+     * <p>If a specific profile is known but incompatible with the resource being validated, then an issue with severity\n+     * ERROR is generated.\n+     *\n+     * @param resourceNode\n+     *     the resource node being validated by a FHIRValidator instance\n+     * @param profileReferences\n+     *     the list of profile references to validate\n+     * @param resourceAsserted\n+     *     indicates whether the profile references came from the resource or were explicitly passed in as arguments\n+     * @param issues\n+     *     the list of issues to add to\n+     */\n+    private static void validateProfileReferences(\n+            FHIRPathResourceNode resourceNode,\n+            List<String> profileReferences,\n+            boolean resourceAsserted,\n+            List<Issue> issues) {\n+        Class<?> resourceType = resourceNode.resource().getClass();\n+        for (String url : profileReferences) {\n+            StructureDefinition profile = ProfileSupport.getProfile(url);\n+            if (profile == null) {\n+                issues.add(Issue.builder()\n+                    .severity(resourceAsserted ? IssueSeverity.WARNING : IssueSeverity.ERROR)\n+                    .code(IssueType.NOT_SUPPORTED)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not supported\"))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            } else if (!ProfileSupport.isApplicable(profile, resourceType)) {\n+                issues.add(Issue.builder()\n+                    .severity(IssueSeverity.ERROR)\n+                    .code(IssueType.INVALID)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not applicable to resource type: \" + resourceType.getSimpleName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjQ1MQ==", "bodyText": "I guess its just a style difference though", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409132451", "createdAt": "2020-04-15T21:03:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -156,26 +165,71 @@ public static FHIRValidator validator() {\n         return new FHIRValidator();\n     }\n \n-    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n-        private FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n-        private EvaluationContext evaluationContext;\n-        private boolean includeResourceAssertedProfiles;\n-        private List<String> profiles;\n-        private List<Issue> issues = new ArrayList<>();\n+    /**\n+     * Validate a list of profile references to ensure they are supported (known by the FHIR registry) and applicable\n+     * (the type constrained by the profile is compatible with the resource being validated).\n+     *\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to the {@link FHIRValidator#validate(EvaluationContext, boolean, String...)} method, generate an\n+     * issue with severity ERROR.\n+     *\n+     * <p>If a specific profile is known but incompatible with the resource being validated, then an issue with severity\n+     * ERROR is generated.\n+     *\n+     * @param resourceNode\n+     *     the resource node being validated by a FHIRValidator instance\n+     * @param profileReferences\n+     *     the list of profile references to validate\n+     * @param resourceAsserted\n+     *     indicates whether the profile references came from the resource or were explicitly passed in as arguments\n+     * @param issues\n+     *     the list of issues to add to\n+     */\n+    private static void validateProfileReferences(\n+            FHIRPathResourceNode resourceNode,\n+            List<String> profileReferences,\n+            boolean resourceAsserted,\n+            List<Issue> issues) {\n+        Class<?> resourceType = resourceNode.resource().getClass();\n+        for (String url : profileReferences) {\n+            StructureDefinition profile = ProfileSupport.getProfile(url);\n+            if (profile == null) {\n+                issues.add(Issue.builder()\n+                    .severity(resourceAsserted ? IssueSeverity.WARNING : IssueSeverity.ERROR)\n+                    .code(IssueType.NOT_SUPPORTED)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not supported\"))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            } else if (!ProfileSupport.isApplicable(profile, resourceType)) {\n+                issues.add(Issue.builder()\n+                    .severity(IssueSeverity.ERROR)\n+                    .code(IssueType.INVALID)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not applicable to resource type: \" + resourceType.getSimpleName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjIwMA=="}, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDEwNDM2OnYy", "diffSide": "LEFT", "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowNDoyOFrOGGLfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowNDo1MVrOGGLgdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjk1OA==", "bodyText": "why no more reset?  I guess it was never used and its on private class so seems fine...but I would have thought it was there to allow a validator to re-use a single visitor multiple times", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409132958", "createdAt": "2020-04-15T21:04:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -156,26 +165,71 @@ public static FHIRValidator validator() {\n         return new FHIRValidator();\n     }\n \n-    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n-        private FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n-        private EvaluationContext evaluationContext;\n-        private boolean includeResourceAssertedProfiles;\n-        private List<String> profiles;\n-        private List<Issue> issues = new ArrayList<>();\n+    /**\n+     * Validate a list of profile references to ensure they are supported (known by the FHIR registry) and applicable\n+     * (the type constrained by the profile is compatible with the resource being validated).\n+     *\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to the {@link FHIRValidator#validate(EvaluationContext, boolean, String...)} method, generate an\n+     * issue with severity ERROR.\n+     *\n+     * <p>If a specific profile is known but incompatible with the resource being validated, then an issue with severity\n+     * ERROR is generated.\n+     *\n+     * @param resourceNode\n+     *     the resource node being validated by a FHIRValidator instance\n+     * @param profileReferences\n+     *     the list of profile references to validate\n+     * @param resourceAsserted\n+     *     indicates whether the profile references came from the resource or were explicitly passed in as arguments\n+     * @param issues\n+     *     the list of issues to add to\n+     */\n+    private static void validateProfileReferences(\n+            FHIRPathResourceNode resourceNode,\n+            List<String> profileReferences,\n+            boolean resourceAsserted,\n+            List<Issue> issues) {\n+        Class<?> resourceType = resourceNode.resource().getClass();\n+        for (String url : profileReferences) {\n+            StructureDefinition profile = ProfileSupport.getProfile(url);\n+            if (profile == null) {\n+                issues.add(Issue.builder()\n+                    .severity(resourceAsserted ? IssueSeverity.WARNING : IssueSeverity.ERROR)\n+                    .code(IssueType.NOT_SUPPORTED)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not supported\"))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            } else if (!ProfileSupport.isApplicable(profile, resourceType)) {\n+                issues.add(Issue.builder()\n+                    .severity(IssueSeverity.ERROR)\n+                    .code(IssueType.INVALID)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not applicable to resource type: \" + resourceType.getSimpleName()))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            }\n+        }\n+    }\n \n-        private ValidatingNodeVisitor() { }\n+    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n+        private final FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        private final EvaluationContext evaluationContext;\n+        private final boolean includeResourceAssertedProfiles;\n+        private final List<String> profiles;\n+        private final List<Issue> issues = new ArrayList<>();\n \n-        private List<Issue> validate(EvaluationContext evaluationContext, boolean includeResourceAssertedProfiles, String... profiles) {\n-            reset();\n+        private ValidatingNodeVisitor(EvaluationContext evaluationContext, boolean includeResourceAssertedProfiles, List<String> profiles) {\n             this.evaluationContext = evaluationContext;\n             this.includeResourceAssertedProfiles = includeResourceAssertedProfiles;\n-            this.profiles = Arrays.asList(profiles);\n-            this.evaluationContext.getTree().getRoot().accept(this);\n-            return Collections.unmodifiableList(issues);\n+            this.profiles = profiles;\n         }\n \n-        private void reset() {\n-            issues.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzE3NQ==", "bodyText": "We create a visitor each call to FHIRValidator.validate. No need to reset anything.", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409133175", "createdAt": "2020-04-15T21:04:51Z", "author": {"login": "JohnTimm"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -156,26 +165,71 @@ public static FHIRValidator validator() {\n         return new FHIRValidator();\n     }\n \n-    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n-        private FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n-        private EvaluationContext evaluationContext;\n-        private boolean includeResourceAssertedProfiles;\n-        private List<String> profiles;\n-        private List<Issue> issues = new ArrayList<>();\n+    /**\n+     * Validate a list of profile references to ensure they are supported (known by the FHIR registry) and applicable\n+     * (the type constrained by the profile is compatible with the resource being validated).\n+     *\n+     * <p>Resource-asserted profile references that are unknown, generate an issue with severity WARNING. Profile references\n+     * passed in as arguments to the {@link FHIRValidator#validate(EvaluationContext, boolean, String...)} method, generate an\n+     * issue with severity ERROR.\n+     *\n+     * <p>If a specific profile is known but incompatible with the resource being validated, then an issue with severity\n+     * ERROR is generated.\n+     *\n+     * @param resourceNode\n+     *     the resource node being validated by a FHIRValidator instance\n+     * @param profileReferences\n+     *     the list of profile references to validate\n+     * @param resourceAsserted\n+     *     indicates whether the profile references came from the resource or were explicitly passed in as arguments\n+     * @param issues\n+     *     the list of issues to add to\n+     */\n+    private static void validateProfileReferences(\n+            FHIRPathResourceNode resourceNode,\n+            List<String> profileReferences,\n+            boolean resourceAsserted,\n+            List<Issue> issues) {\n+        Class<?> resourceType = resourceNode.resource().getClass();\n+        for (String url : profileReferences) {\n+            StructureDefinition profile = ProfileSupport.getProfile(url);\n+            if (profile == null) {\n+                issues.add(Issue.builder()\n+                    .severity(resourceAsserted ? IssueSeverity.WARNING : IssueSeverity.ERROR)\n+                    .code(IssueType.NOT_SUPPORTED)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not supported\"))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            } else if (!ProfileSupport.isApplicable(profile, resourceType)) {\n+                issues.add(Issue.builder()\n+                    .severity(IssueSeverity.ERROR)\n+                    .code(IssueType.INVALID)\n+                    .details(CodeableConcept.builder()\n+                        .text(string(\"Profile: \" + url + \" is not applicable to resource type: \" + resourceType.getSimpleName()))\n+                        .build())\n+                    .expression(string(resourceNode.path()))\n+                    .build());\n+            }\n+        }\n+    }\n \n-        private ValidatingNodeVisitor() { }\n+    private static class ValidatingNodeVisitor extends FHIRPathDefaultNodeVisitor {\n+        private final FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        private final EvaluationContext evaluationContext;\n+        private final boolean includeResourceAssertedProfiles;\n+        private final List<String> profiles;\n+        private final List<Issue> issues = new ArrayList<>();\n \n-        private List<Issue> validate(EvaluationContext evaluationContext, boolean includeResourceAssertedProfiles, String... profiles) {\n-            reset();\n+        private ValidatingNodeVisitor(EvaluationContext evaluationContext, boolean includeResourceAssertedProfiles, List<String> profiles) {\n             this.evaluationContext = evaluationContext;\n             this.includeResourceAssertedProfiles = includeResourceAssertedProfiles;\n-            this.profiles = Arrays.asList(profiles);\n-            this.evaluationContext.getTree().getRoot().accept(this);\n-            return Collections.unmodifiableList(issues);\n+            this.profiles = profiles;\n         }\n \n-        private void reset() {\n-            issues.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjk1OA=="}, "originalCommit": {"oid": "89d62d71f3f32b645b0cd7345c9676715644f0ae"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDEyNDc1OnYy", "diffSide": "RIGHT", "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMToxMTowMVrOGGLsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMToxNjoyMlrOGGL2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNjE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p>Profiles that are incompatible with the resource being validated result in issues with severity ERROR.\n          \n          \n            \n                 * <p>Profiles that are incompatible with the resource type being validated result in issues with severity ERROR.", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409136142", "createdAt": "2020-04-15T21:11:01Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -120,8 +130,11 @@ private FHIRValidator() { }\n      * Validate a resource, using an {@link EvaluationContext}, against constraints in the base specification and\n      * resource-asserted profile references and/or specific profile references.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are not available in the FHIRRegistry result in issues with severity WARNING.\n+     *\n+     * <p>Unknown profile references passed as arguments to this method result in issues with severity ERROR.\n+     *\n+     * <p>Profiles that are incompatible with the resource being validated result in issues with severity ERROR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0296dad810834fd951a5d40b9c444160e415499"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNjYyMA==", "bodyText": "and the same change on all the other variants", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409136620", "createdAt": "2020-04-15T21:12:06Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -120,8 +130,11 @@ private FHIRValidator() { }\n      * Validate a resource, using an {@link EvaluationContext}, against constraints in the base specification and\n      * resource-asserted profile references and/or specific profile references.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are not available in the FHIRRegistry result in issues with severity WARNING.\n+     *\n+     * <p>Unknown profile references passed as arguments to this method result in issues with severity ERROR.\n+     *\n+     * <p>Profiles that are incompatible with the resource being validated result in issues with severity ERROR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNjE0Mg=="}, "originalCommit": {"oid": "e0296dad810834fd951a5d40b9c444160e415499"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzODc5Mg==", "bodyText": "Updated Javadoc", "url": "https://github.com/IBM/FHIR/pull/934#discussion_r409138792", "createdAt": "2020-04-15T21:16:22Z", "author": {"login": "JohnTimm"}, "path": "fhir-validation/src/main/java/com/ibm/fhir/validation/FHIRValidator.java", "diffHunk": "@@ -120,8 +130,11 @@ private FHIRValidator() { }\n      * Validate a resource, using an {@link EvaluationContext}, against constraints in the base specification and\n      * resource-asserted profile references and/or specific profile references.\n      *\n-     * <p>Resource-asserted profiles which are unknown to the server will be ignored. Conversely,\n-     * unknown profiles passed explicitly as arguments will result in a FHIRValidationException.\n+     * <p>Resource-asserted profile references that are not available in the FHIRRegistry result in issues with severity WARNING.\n+     *\n+     * <p>Unknown profile references passed as arguments to this method result in issues with severity ERROR.\n+     *\n+     * <p>Profiles that are incompatible with the resource being validated result in issues with severity ERROR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNjE0Mg=="}, "originalCommit": {"oid": "e0296dad810834fd951a5d40b9c444160e415499"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4949, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}