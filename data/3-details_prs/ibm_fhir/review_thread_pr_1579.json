{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODgxMjY4", "number": 1579, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzozNjo0NlrOEtQvgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxMToyOVrOEuiQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk1NjgwOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzozNjo0NlrOHg9HBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyMjowN1rOHhVlKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNzcwMA==", "bodyText": "We may want to add a configuration to turn this feature on/off.\nfhirServer/search/checkRestrictions as a parameter?", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r504317700", "createdAt": "2020-10-13T23:36:46Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -800,7 +810,80 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n         context.setSearchParameters(parameters);\n         return context;\n     }\n+    \n+    /**\n+     * Checks the query parameters (with the same parameter code) against any search restrictions specified\n+     * in the SearchParameter resource for that parameter code.\n+     * \n+     * @param parameterCode\n+     *            the parameter code\n+     * @param searchParameter\n+     *            the SearchParameter resource\n+     * @param queryParameters\n+     *            the query parameters to check\n+     * @throws FHIRSearchException\n+     *             if a search restriction is found that is not followed\n+     */\n+    private static void checkSearchParameterRestrictions(String parameterCode, SearchParameter searchParameter, List<QueryParameter> queryParameters)\n+        throws FHIRSearchException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d080202f4fd9f0b3de8a7c2afe43e6c1ec74e6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxODYzMw==", "bodyText": "Hopefully not. I was using the Draft Pull Request to run the e2e tests before this is ready for review, and noticed a fix I needed to make.  We'll see if that takes care of the errors.", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r504718633", "createdAt": "2020-10-14T14:22:07Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -800,7 +810,80 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n         context.setSearchParameters(parameters);\n         return context;\n     }\n+    \n+    /**\n+     * Checks the query parameters (with the same parameter code) against any search restrictions specified\n+     * in the SearchParameter resource for that parameter code.\n+     * \n+     * @param parameterCode\n+     *            the parameter code\n+     * @param searchParameter\n+     *            the SearchParameter resource\n+     * @param queryParameters\n+     *            the query parameters to check\n+     * @throws FHIRSearchException\n+     *             if a search restriction is found that is not followed\n+     */\n+    private static void checkSearchParameterRestrictions(String parameterCode, SearchParameter searchParameter, List<QueryParameter> queryParameters)\n+        throws FHIRSearchException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNzcwMA=="}, "originalCommit": {"oid": "c4d080202f4fd9f0b3de8a7c2afe43e6c1ec74e6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTgwMzQ3OnYy", "diffSide": "RIGHT", "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MjowNFrOHi7Ebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxMzowOFrOHi8RbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MTQyMw==", "bodyText": "Paul wasn't a big fan of this property name, so we just had a chat and settled on supportOmittedResourceTypes:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED = \"includeOmittedResourceTypes\";\n          \n          \n            \n                public static final String PROPERTY_FIELD_RESOURCES_SUPPORT_OMITTED = \"supportOmittedResourceTypes\";", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506381423", "createdAt": "2020-10-16T12:52:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -36,8 +36,13 @@\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n     public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n \n-    public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n-\n+    // Resources properties\n+    public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n+    public static final String PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED = \"includeOmittedResourceTypes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4ODAxMQ==", "bodyText": "What about openas the property name? Where open=true allows inclusion of resources not explicitly defined in the configuration.", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506388011", "createdAt": "2020-10-16T12:59:57Z", "author": {"login": "JohnTimm"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -36,8 +36,13 @@\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n     public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n \n-    public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n-\n+    // Resources properties\n+    public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n+    public static final String PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED = \"includeOmittedResourceTypes\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MTQyMw=="}, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMTEzMg==", "bodyText": "Talked with Paul and we both like it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED = \"includeOmittedResourceTypes\";\n          \n          \n            \n                public static final String PROPERTY_FIELD_RESOURCES_OPEN = \"open\";", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506401132", "createdAt": "2020-10-16T13:13:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -36,8 +36,13 @@\n     public static final String PROPERTY_CAPABILITY_STATEMENT_CACHE = \"fhirServer/core/capabilityStatementCacheTimeout\";\n     public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n \n-    public static final String PROPERTY_SEARCH_PARAMETER_FILTER = \"fhirServer/searchParameterFilter\";\n-\n+    // Resources properties\n+    public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n+    public static final String PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED = \"includeOmittedResourceTypes\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MTQyMw=="}, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkxOTk5OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxMzo0NVrOHi8S9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxMzo0NVrOHi8S9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMTUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED.equals(rsrcsEntry.getName())) {\n          \n          \n            \n                                if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_OPEN.equals(rsrcsEntry.getName())) {", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506401525", "createdAt": "2020-10-16T13:13:45Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -293,51 +295,72 @@ public static void init() {\n \n     /**\n      * Retrieves the search parameter filtering rules for the current tenant.\n-     *\n-     * @throws Exception\n+     * @return map of resource types to allowed search parameters URLs,\n+     * and may include '*' for resource type or search parameter URL.\n+     * @throws Exception an exception\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private static Map<String, List<String>> getFilterRules() throws Exception {\n         Map<String, List<String>> result = new HashMap<>();\n-\n-        // Retrieve the \"searchParameterFilter\" config property group.\n-        PropertyGroup spFilter = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_SEARCH_PARAMETER_FILTER);\n-        List<PropertyEntry> ruleEntries = null;\n-        if (spFilter != null) {\n-            ruleEntries = spFilter.getProperties();\n-        }\n-\n-        // If we have a non-empty set of filter rules, then walk through them and populate our map.\n-        if (ruleEntries != null && !ruleEntries.isEmpty()) {\n-            for (PropertyEntry ruleEntry : ruleEntries) {\n-                String resourceType = ruleEntry.getName();\n-\n-                // Make sure the value is a List<String>.\n-                if (ruleEntry.getValue() instanceof List<?>) {\n-                    for (Object listMember : (List<?>) ruleEntry.getValue()) {\n-                        if (!(listMember instanceof String)) {\n+        boolean includeOmittedRsrcTypes = true;\n+        \n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();            \n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    \n+                    // Check special property for including omitted resource types\n+                    if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED.equals(rsrcsEntry.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkyNzgwOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNDo1OFrOHi8Yjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNDo1OFrOHi8Yjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMjk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean includeOmittedRsrcTypes = true;\n          \n          \n            \n                    boolean supportOmittedRsrcTypes = true;", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506402959", "createdAt": "2020-10-16T13:14:58Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -293,51 +295,72 @@ public static void init() {\n \n     /**\n      * Retrieves the search parameter filtering rules for the current tenant.\n-     *\n-     * @throws Exception\n+     * @return map of resource types to allowed search parameters URLs,\n+     * and may include '*' for resource type or search parameter URL.\n+     * @throws Exception an exception\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private static Map<String, List<String>> getFilterRules() throws Exception {\n         Map<String, List<String>> result = new HashMap<>();\n-\n-        // Retrieve the \"searchParameterFilter\" config property group.\n-        PropertyGroup spFilter = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_SEARCH_PARAMETER_FILTER);\n-        List<PropertyEntry> ruleEntries = null;\n-        if (spFilter != null) {\n-            ruleEntries = spFilter.getProperties();\n-        }\n-\n-        // If we have a non-empty set of filter rules, then walk through them and populate our map.\n-        if (ruleEntries != null && !ruleEntries.isEmpty()) {\n-            for (PropertyEntry ruleEntry : ruleEntries) {\n-                String resourceType = ruleEntry.getName();\n-\n-                // Make sure the value is a List<String>.\n-                if (ruleEntry.getValue() instanceof List<?>) {\n-                    for (Object listMember : (List<?>) ruleEntry.getValue()) {\n-                        if (!(listMember instanceof String)) {\n+        boolean includeOmittedRsrcTypes = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzMDAwOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNToxNFrOHi8Z8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNToxNFrOHi8Z8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMzMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        includeOmittedRsrcTypes = (Boolean) rsrcsEntry.getValue();\n          \n          \n            \n                                        supportOmittedRsrcTypes = (Boolean) rsrcsEntry.getValue();", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506403315", "createdAt": "2020-10-16T13:15:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -293,51 +295,72 @@ public static void init() {\n \n     /**\n      * Retrieves the search parameter filtering rules for the current tenant.\n-     *\n-     * @throws Exception\n+     * @return map of resource types to allowed search parameters URLs,\n+     * and may include '*' for resource type or search parameter URL.\n+     * @throws Exception an exception\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private static Map<String, List<String>> getFilterRules() throws Exception {\n         Map<String, List<String>> result = new HashMap<>();\n-\n-        // Retrieve the \"searchParameterFilter\" config property group.\n-        PropertyGroup spFilter = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_SEARCH_PARAMETER_FILTER);\n-        List<PropertyEntry> ruleEntries = null;\n-        if (spFilter != null) {\n-            ruleEntries = spFilter.getProperties();\n-        }\n-\n-        // If we have a non-empty set of filter rules, then walk through them and populate our map.\n-        if (ruleEntries != null && !ruleEntries.isEmpty()) {\n-            for (PropertyEntry ruleEntry : ruleEntries) {\n-                String resourceType = ruleEntry.getName();\n-\n-                // Make sure the value is a List<String>.\n-                if (ruleEntry.getValue() instanceof List<?>) {\n-                    for (Object listMember : (List<?>) ruleEntry.getValue()) {\n-                        if (!(listMember instanceof String)) {\n+        boolean includeOmittedRsrcTypes = true;\n+        \n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();            \n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    \n+                    // Check special property for including omitted resource types\n+                    if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED.equals(rsrcsEntry.getName())) {\n+                        if (rsrcsEntry.getValue() instanceof Boolean) {\n+                            includeOmittedRsrcTypes = (Boolean) rsrcsEntry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzMTgyOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNToyOVrOHi8bRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNToyOVrOHi8bRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMzY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (includeOmittedRsrcTypes) {\n          \n          \n            \n                    if (supportOmittedRsrcTypes) {", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506403653", "createdAt": "2020-10-16T13:15:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -293,51 +295,72 @@ public static void init() {\n \n     /**\n      * Retrieves the search parameter filtering rules for the current tenant.\n-     *\n-     * @throws Exception\n+     * @return map of resource types to allowed search parameters URLs,\n+     * and may include '*' for resource type or search parameter URL.\n+     * @throws Exception an exception\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private static Map<String, List<String>> getFilterRules() throws Exception {\n         Map<String, List<String>> result = new HashMap<>();\n-\n-        // Retrieve the \"searchParameterFilter\" config property group.\n-        PropertyGroup spFilter = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_SEARCH_PARAMETER_FILTER);\n-        List<PropertyEntry> ruleEntries = null;\n-        if (spFilter != null) {\n-            ruleEntries = spFilter.getProperties();\n-        }\n-\n-        // If we have a non-empty set of filter rules, then walk through them and populate our map.\n-        if (ruleEntries != null && !ruleEntries.isEmpty()) {\n-            for (PropertyEntry ruleEntry : ruleEntries) {\n-                String resourceType = ruleEntry.getName();\n-\n-                // Make sure the value is a List<String>.\n-                if (ruleEntry.getValue() instanceof List<?>) {\n-                    for (Object listMember : (List<?>) ruleEntry.getValue()) {\n-                        if (!(listMember instanceof String)) {\n+        boolean includeOmittedRsrcTypes = true;\n+        \n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();            \n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    \n+                    // Check special property for including omitted resource types\n+                    if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_INCLUDE_OMITTED.equals(rsrcsEntry.getName())) {\n+                        if (rsrcsEntry.getValue() instanceof Boolean) {\n+                            includeOmittedRsrcTypes = (Boolean) rsrcsEntry.getValue();\n+                        }\n+                        else {\n                             throw SearchExceptionUtil.buildNewIllegalStateException();\n                         }\n                     }\n-\n-                    // Add the rule entry to our map, keyed by resource type.\n-                    List<String> stringList = (List<String>) ruleEntry.getValue();\n-                    result.put(resourceType, stringList);\n-                } else {\n-                    throw SearchExceptionUtil.buildNewIllegalStateException();\n+                    else {\n+                        String resourceType = rsrcsEntry.getName();\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            List<String> searchParameterUrls = new ArrayList<>();\n+    \n+                            // Get search parameters\n+                            PropertyGroup spGroup = resourceTypeGroup.getPropertyGroup(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS);\n+                            if (spGroup != null) {\n+                                List<PropertyEntry> spEntries = spGroup.getProperties();            \n+                                if (spEntries != null && !spEntries.isEmpty()) {\n+                                    for (PropertyEntry spEntry : spEntries) {\n+                                        \n+                                        PropertyGroup spValueGroup = (PropertyGroup) spEntry.getValue();\n+                                        if (spValueGroup != null) {\n+                                            String url = spValueGroup.getStringProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_URL);\n+                                            if (url == null) {\n+                                                throw SearchExceptionUtil.buildNewIllegalStateException();\n+                                            }\n+                                            searchParameterUrls.add(url);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            else {\n+                                searchParameterUrls.add(SearchConstants.WILDCARD);\n+                            }\n+                            result.put(resourceType, searchParameterUrls);\n+                        }\n+                    }\n                 }\n             }\n-        } else {\n-            // The current tenant doesn't have any filter rules defined, so\n-            // we'll just fabricate one that includes all search parameters:\n-            // <pre>{ \"*\": [\"*\"] }</pre>\n-            List<String> list = new ArrayList<>();\n-            list.add(SearchConstants.WILDCARD);\n-            result.put(SearchConstants.WILDCARD, list);\n         }\n+\n+        if (includeOmittedRsrcTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzMzQxOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/test/resources/config/tenant1/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNTo0MVrOHi8cTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNTo0MVrOHi8cTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMzkxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"includeOmittedResourceTypes\": true,\n          \n          \n            \n            \t\t\t\"open\": true,", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506403916", "createdAt": "2020-10-16T13:15:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/test/resources/config/tenant1/fhir-server-config.json", "diffHunk": "@@ -1,23 +1,41 @@\n {\n \t\"__comment\": \"FHIR Server configuration\",\n \t\"fhirServer\": {\n-\t\t\"searchParameterFilter\": {\n-\t\t\t\"Device\": [\n-\t\t\t\t\"patient\",\n-\t\t\t\t\"organization\"\n-\t\t\t],\n-\t\t\t\"Observation\": [\n-\t\t\t\t\"code\"\n-\t\t\t],\n-\t\t\t\"Patient\": [\n-\t\t\t\t\"active\",\n-\t\t\t\t\"address\",\n-\t\t\t\t\"birthdate\",\n-\t\t\t\t\"name\"\n-\t\t\t],\n-\t\t\t\"*\": [\n-\t\t\t\t\"*\"\n-\t\t\t]\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzNjI1OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/test/resources/config/tenant4/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjowNVrOHi8eLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjowNVrOHi8eLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwNDM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"includeOmittedResourceTypes\": true,\n          \n          \n            \n            \t\t\t\"open\": true,", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506404399", "createdAt": "2020-10-16T13:16:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/test/resources/config/tenant4/fhir-server-config.json", "diffHunk": "@@ -1,23 +1,41 @@\n {\n \t\"__comment\": \"FHIR Server configuration\",\n \t\"fhirServer\": {\n-\t\t\"searchParameterFilter\": {\n-\t\t\t\"Device\": [\n-\t\t\t\t\"patient\",\n-\t\t\t\t\"organization\"\n-\t\t\t],\n-\t\t\t\"Observation\": [\n-\t\t\t\t\"code\"\n-\t\t\t],\n-\t\t\t\"Patient\": [\n-\t\t\t\t\"active\",\n-\t\t\t\t\"address\",\n-\t\t\t\t\"birthdate\",\n-\t\t\t\t\"name\"\n-\t\t\t],\n-\t\t\t\"*\": [\n-\t\t\t\t\"*\"\n-\t\t\t]\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzNzM4OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/test/resources/config/tenant5/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjoxNlrOHi8fCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjoxNlrOHi8fCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwNDYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"includeOmittedResourceTypes\": true,\n          \n          \n            \n            \t\t\t\"open\": true,", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506404616", "createdAt": "2020-10-16T13:16:16Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/test/resources/config/tenant5/fhir-server-config.json", "diffHunk": "@@ -1,23 +1,41 @@\n {\n \t\"__comment\": \"FHIR Server configuration\",\n \t\"fhirServer\": {\n-\t\t\"searchParameterFilter\": {\n-\t\t\t\"Device\": [\n-\t\t\t\t\"patient\",\n-\t\t\t\t\"organization\"\n-\t\t\t],\n-\t\t\t\"Observation\": [\n-\t\t\t\t\"code\"\n-\t\t\t],\n-\t\t\t\"Patient\": [\n-\t\t\t\t\"active\",\n-\t\t\t\t\"address\",\n-\t\t\t\t\"birthdate\",\n-\t\t\t\t\"name\"\n-\t\t\t],\n-\t\t\t\"*\": [\n-\t\t\t\t\"*\"\n-\t\t\t]\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzODQ0OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/test/resources/config/tenant7/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjoyNlrOHi8f1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjoyNlrOHi8f1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwNDgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"includeOmittedResourceTypes\": true,\n          \n          \n            \n            \t\t\t\"open\": true,", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506404820", "createdAt": "2020-10-16T13:16:26Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/test/resources/config/tenant7/fhir-server-config.json", "diffHunk": "@@ -0,0 +1,41 @@\n+{\n+\t\"__comment\": \"FHIR Server configuration\",\n+\t\"fhirServer\": {\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkzOTkyOnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config-tenants/config/tenant1/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjozOVrOHi8g6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjozOVrOHi8g6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwNTA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"includeOmittedResourceTypes\": true,\n          \n          \n            \n            \t\t\t\"open\": true,", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506405097", "createdAt": "2020-10-16T13:16:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config-tenants/config/tenant1/fhir-server-config.json", "diffHunk": "@@ -1,13 +1,34 @@\n {\n \t\"__comment\": \"FHIR Server configuration for mythical tenant id 'tenant1'\",\n \t\"fhirServer\": {\n-\t\t\"searchParameterFilter\": {\n-\t\t\t\"Observation\": [\"subject\",\n-\t\t\t\"patient\",\n-\t\t\t\"value-quantity\",\n-\t\t\t\"component-value-quantity\"],\n-\t\t\t\"Resource\": [\"_id\"],\n-\t\t\t\"*\": [\"*\"]\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTk3Njc1OnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config-tenants/config/tenant1/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyMTozNFrOHi86Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyMTozNFrOHi86Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMTU1NA==", "bodyText": "shouldn't be needed (it should inheret from Resource), but should be fine...", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506411554", "createdAt": "2020-10-16T13:21:34Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config-tenants/config/tenant1/fhir-server-config.json", "diffHunk": "@@ -1,13 +1,34 @@\n {\n \t\"__comment\": \"FHIR Server configuration for mythical tenant id 'tenant1'\",\n \t\"fhirServer\": {\n-\t\t\"searchParameterFilter\": {\n-\t\t\t\"Observation\": [\"subject\",\n-\t\t\t\"patient\",\n-\t\t\t\"value-quantity\",\n-\t\t\t\"component-value-quantity\"],\n-\t\t\t\"Resource\": [\"_id\"],\n-\t\t\t\"*\": [\"*\"]\n+\t\t\"resources\": {\n+\t\t\t\"includeOmittedResourceTypes\": true,\n+\t\t\t\"Observation\": {\n+\t\t\t\t\"searchParameters\": {\n+\t\t\t\t\t\"_id\": {\n+\t\t\t\t\t\t\"url\": \"http://hl7.org/fhir/SearchParameter/Resource-id\"\n+\t\t\t\t\t},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8398b13aea4be2a85a612d54ef4cc0a05af17bed"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjMxMjY0OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxMToyOVrOHjAdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxMToyOVrOHjAdLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2OTY3Nw==", "bodyText": "would it be helpful (perf-wise) to have this singletonList in a constant?", "url": "https://github.com/IBM/FHIR/pull/1579#discussion_r506469677", "createdAt": "2020-10-16T14:11:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -293,51 +295,72 @@ public static void init() {\n \n     /**\n      * Retrieves the search parameter filtering rules for the current tenant.\n-     *\n-     * @throws Exception\n+     * @return map of resource types to allowed search parameters URLs,\n+     * and may include '*' for resource type or search parameter URL.\n+     * @throws Exception an exception\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private static Map<String, List<String>> getFilterRules() throws Exception {\n         Map<String, List<String>> result = new HashMap<>();\n-\n-        // Retrieve the \"searchParameterFilter\" config property group.\n-        PropertyGroup spFilter = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_SEARCH_PARAMETER_FILTER);\n-        List<PropertyEntry> ruleEntries = null;\n-        if (spFilter != null) {\n-            ruleEntries = spFilter.getProperties();\n-        }\n-\n-        // If we have a non-empty set of filter rules, then walk through them and populate our map.\n-        if (ruleEntries != null && !ruleEntries.isEmpty()) {\n-            for (PropertyEntry ruleEntry : ruleEntries) {\n-                String resourceType = ruleEntry.getName();\n-\n-                // Make sure the value is a List<String>.\n-                if (ruleEntry.getValue() instanceof List<?>) {\n-                    for (Object listMember : (List<?>) ruleEntry.getValue()) {\n-                        if (!(listMember instanceof String)) {\n+        boolean supportOmittedRsrcTypes = true;\n+        \n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();            \n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    \n+                    // Check special property for including omitted resource types\n+                    if (FHIRConfiguration.PROPERTY_FIELD_RESOURCES_OPEN.equals(rsrcsEntry.getName())) {\n+                        if (rsrcsEntry.getValue() instanceof Boolean) {\n+                            supportOmittedRsrcTypes = (Boolean) rsrcsEntry.getValue();\n+                        }\n+                        else {\n                             throw SearchExceptionUtil.buildNewIllegalStateException();\n                         }\n                     }\n-\n-                    // Add the rule entry to our map, keyed by resource type.\n-                    List<String> stringList = (List<String>) ruleEntry.getValue();\n-                    result.put(resourceType, stringList);\n-                } else {\n-                    throw SearchExceptionUtil.buildNewIllegalStateException();\n+                    else {\n+                        String resourceType = rsrcsEntry.getName();\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            List<String> searchParameterUrls = new ArrayList<>();\n+    \n+                            // Get search parameters\n+                            PropertyGroup spGroup = resourceTypeGroup.getPropertyGroup(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETERS);\n+                            if (spGroup != null) {\n+                                List<PropertyEntry> spEntries = spGroup.getProperties();            \n+                                if (spEntries != null && !spEntries.isEmpty()) {\n+                                    for (PropertyEntry spEntry : spEntries) {\n+                                        \n+                                        PropertyGroup spValueGroup = (PropertyGroup) spEntry.getValue();\n+                                        if (spValueGroup != null) {\n+                                            String url = spValueGroup.getStringProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_URL);\n+                                            if (url == null) {\n+                                                throw SearchExceptionUtil.buildNewIllegalStateException();\n+                                            }\n+                                            searchParameterUrls.add(url);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            else {\n+                                searchParameterUrls.add(SearchConstants.WILDCARD);\n+                            }\n+                            result.put(resourceType, searchParameterUrls);\n+                        }\n+                    }\n                 }\n             }\n-        } else {\n-            // The current tenant doesn't have any filter rules defined, so\n-            // we'll just fabricate one that includes all search parameters:\n-            // <pre>{ \"*\": [\"*\"] }</pre>\n-            List<String> list = new ArrayList<>();\n-            list.add(SearchConstants.WILDCARD);\n-            result.put(SearchConstants.WILDCARD, list);\n         }\n+\n+        if (supportOmittedRsrcTypes) {\n+            // All other resource types include all search parameters\n+            result.put(SearchConstants.WILDCARD, Collections.singletonList(SearchConstants.WILDCARD));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ac6ea3a9d5625ee89e48d3435bf5c086032d4c"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4716, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}