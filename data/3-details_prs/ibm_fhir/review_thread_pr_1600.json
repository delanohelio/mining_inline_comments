{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzEyMDM5", "number": 1600, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozOToxOFrOEvjcMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyODozMFrOEx7T_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mjk5MTg1OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozOToxOFrOHkmckw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyNDowOFrOHoR7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ==", "bodyText": "We probably don't want to recompute this every time, is there a look aside map or structure we could use?\nOr should we cache this for the whole system on startup?", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508140691", "createdAt": "2020-10-20T00:39:18Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MjExMQ==", "bodyText": "I based this on SearchUtil.getFilterRules, which calls FHIRConfigHelper.getPropertyGroup each time. Since the config file contents are cached, I thought it would be ok to follow that as an example.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508792111", "createdAt": "2020-10-20T19:42:34Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMjI2MQ==", "bodyText": "Or should we cache this for the whole system on startup?\n\nhaha, I actually had this same thought while editing SearchUtil.getFilterRules today.   I was deciding how much trouble it would be to try caching this and only refresh it when the config file changes.  I ended up deciding to leave that optimatization for a future change, although in this case its new code so may be worth figuring out the caching thing.  I wish we had an easy way to measure performance of the search component as I don't like to optimize prematurely.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508822261", "createdAt": "2020-10-20T20:35:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MTY0OQ==", "bodyText": "OK - let's take a backlog item on this.  Anyone up for creating an issue for it?\nMore as an investigation task?", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511981649", "createdAt": "2020-10-26T14:00:51Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDA4OA==", "bodyText": "I opened #1625 for the potential improvement.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511994088", "createdAt": "2020-10-26T14:17:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODg4MA==", "bodyText": "Lee opened #1625", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511998880", "createdAt": "2020-10-26T14:24:08Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, "originalCommit": {"oid": "63e78559f16727905e6a82acdd42cf80a5f808e6"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzc3MzE3OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowNzozMVrOHoRLMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozMDoyOVrOHoSP1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjQ4MA==", "bodyText": "What do the \\ do or reference?", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511986480", "createdAt": "2020-10-26T14:07:31Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1604,9 +1610,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/open`|true|\n |`fhirServer/resources/Resource/interactions`|null (all interactions supported)|\n |`fhirServer/resources/Resource/searchParameters`|null (all global search parameters supported)|\n+|`fhirServer/resources/Resource/searchIncludes`|null (all \\_include values supported)|\n+|`fhirServer/resources/Resource/searchRevIncludes`|null (all \\_revinclude values supported)|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NTA1OQ==", "bodyText": "I assume it just escapes the _ char (so its not interpretted as formatting...e.g. underline).  not sure if its needed or not, but it looks fine at https://github.com/IBM/FHIR/blob/tbieste-issue-1351/docs/src/pages/guides/FHIRServerUsersGuide.md", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511995059", "createdAt": "2020-10-26T14:19:12Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1604,9 +1610,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/open`|true|\n |`fhirServer/resources/Resource/interactions`|null (all interactions supported)|\n |`fhirServer/resources/Resource/searchParameters`|null (all global search parameters supported)|\n+|`fhirServer/resources/Resource/searchIncludes`|null (all \\_include values supported)|\n+|`fhirServer/resources/Resource/searchRevIncludes`|null (all \\_revinclude values supported)|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjQ4MA=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjMwOQ==", "bodyText": "They are used to escape the underscore '_' character in markdown in cases where you want to display the literal.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511996309", "createdAt": "2020-10-26T14:20:48Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1604,9 +1610,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/open`|true|\n |`fhirServer/resources/Resource/interactions`|null (all interactions supported)|\n |`fhirServer/resources/Resource/searchParameters`|null (all global search parameters supported)|\n+|`fhirServer/resources/Resource/searchIncludes`|null (all \\_include values supported)|\n+|`fhirServer/resources/Resource/searchRevIncludes`|null (all \\_revinclude values supported)|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjQ4MA=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwNDA1NA==", "bodyText": "oh snazy - I hadn't even thought about the implication on formatting.  good catch.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512004054", "createdAt": "2020-10-26T14:30:29Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1604,9 +1610,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/open`|true|\n |`fhirServer/resources/Resource/interactions`|null (all interactions supported)|\n |`fhirServer/resources/Resource/searchParameters`|null (all global search parameters supported)|\n+|`fhirServer/resources/Resource/searchIncludes`|null (all \\_include values supported)|\n+|`fhirServer/resources/Resource/searchRevIncludes`|null (all \\_revinclude values supported)|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjQ4MA=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzc3NDUwOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowNzo1MFrOHoRMDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyMToxNFrOHoRyzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjcwMw==", "bodyText": "same question as 1613,1614", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511986703", "createdAt": "2020-10-26T14:07:50Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1520,9 +1520,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/Resource/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) supported for resource types. Omitting this property is equivalent to supporting all FHIR interactions for the supported resources. An empty list, `[]`, can be used to indicate that no REST methods are supported. This property can be overridden for specific resource types via the `fhirServer/resources/<resourceType>/interactions` property.|\n |`fhirServer/resources/Resource/searchParameters`|object|The set of search parameters to support for all supported resource types. Omitting this property is equivalent to supporting all search parameters in the server's registry that apply to resource type \"Resource\" (all resources). An empty object, `{}`, can be used to indicate that no global search parameters are supported.|\n |`fhirServer/resources/Resource/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>`. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameters/<code>`|\n+|`fhirServer/resources/Resource/searchIncludes`|string list|A comma-separated list of \\_include values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchIncludes`. Omitting this property is equivalent to supporting all \\_include values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_include values are supported.|\n+|`fhirServer/resources/Resource/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchRevIncludes`. Omitting this property is equivalent to supporting all \\_revinclude values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported.|\n+|`fhirServer/resources/Resource/searchParameterCombinations`|string list|A comma-separated list of search parameter combinations supported for all resource types. Each search parameter combination is a string, where a plus sign, `+`, separates the search parameters that can be used in combination. To indicate that searching without any search parameters is allowed, an empty string must be included in the list. Including an asterisk, `*`, in the list indicates support of any search parameter combination. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameterCombinations`. Omitting this property is equivalent to supporting any search parameter combination.|\n |`fhirServer/resources/<resourceType>/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) to support for this resource type. For resources without the property, the value of `fhirServer/resources/Resource/interactions` is used.|\n |`fhirServer/resources/<resourceType>/searchParameters`|object|The set of search parameters to support for this resource type. Global search parameters defined on the `Resource` resource can be overridden on a per-resourceType basis.|\n |`fhirServer/resources/<resourceType>/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>` on resources of type `<resourceType>`.|\n+|`fhirServer/resources/<resourceType>/searchIncludes`|string list|A comma-separated list of \\_include values supported for this resource type. An empty list, `[]`, can be used to indicate that no \\_include values are supported. For resources without the property, the value of `fhirServer/resources/Resource/searchIncludes` is used.|\n+|`fhirServer/resources/<resourceType>/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for this resource type. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported. For resources without the property, the value of `fhirServer/resources/Resource/searchRevIncludes` is used.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjYyMQ==", "bodyText": "Same answer. :)", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511996621", "createdAt": "2020-10-26T14:21:14Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1520,9 +1520,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/Resource/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) supported for resource types. Omitting this property is equivalent to supporting all FHIR interactions for the supported resources. An empty list, `[]`, can be used to indicate that no REST methods are supported. This property can be overridden for specific resource types via the `fhirServer/resources/<resourceType>/interactions` property.|\n |`fhirServer/resources/Resource/searchParameters`|object|The set of search parameters to support for all supported resource types. Omitting this property is equivalent to supporting all search parameters in the server's registry that apply to resource type \"Resource\" (all resources). An empty object, `{}`, can be used to indicate that no global search parameters are supported.|\n |`fhirServer/resources/Resource/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>`. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameters/<code>`|\n+|`fhirServer/resources/Resource/searchIncludes`|string list|A comma-separated list of \\_include values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchIncludes`. Omitting this property is equivalent to supporting all \\_include values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_include values are supported.|\n+|`fhirServer/resources/Resource/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchRevIncludes`. Omitting this property is equivalent to supporting all \\_revinclude values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported.|\n+|`fhirServer/resources/Resource/searchParameterCombinations`|string list|A comma-separated list of search parameter combinations supported for all resource types. Each search parameter combination is a string, where a plus sign, `+`, separates the search parameters that can be used in combination. To indicate that searching without any search parameters is allowed, an empty string must be included in the list. Including an asterisk, `*`, in the list indicates support of any search parameter combination. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameterCombinations`. Omitting this property is equivalent to supporting any search parameter combination.|\n |`fhirServer/resources/<resourceType>/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) to support for this resource type. For resources without the property, the value of `fhirServer/resources/Resource/interactions` is used.|\n |`fhirServer/resources/<resourceType>/searchParameters`|object|The set of search parameters to support for this resource type. Global search parameters defined on the `Resource` resource can be overridden on a per-resourceType basis.|\n |`fhirServer/resources/<resourceType>/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>` on resources of type `<resourceType>`.|\n+|`fhirServer/resources/<resourceType>/searchIncludes`|string list|A comma-separated list of \\_include values supported for this resource type. An empty list, `[]`, can be used to indicate that no \\_include values are supported. For resources without the property, the value of `fhirServer/resources/Resource/searchIncludes` is used.|\n+|`fhirServer/resources/<resourceType>/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for this resource type. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported. For resources without the property, the value of `fhirServer/resources/Resource/searchRevIncludes` is used.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NjcwMw=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzc3Njk1OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowODoyNVrOHoRNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyMToyMVrOHoRzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzEyMw==", "bodyText": "Same question as 1613,1614", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511987123", "createdAt": "2020-10-26T14:08:25Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1520,9 +1520,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/Resource/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) supported for resource types. Omitting this property is equivalent to supporting all FHIR interactions for the supported resources. An empty list, `[]`, can be used to indicate that no REST methods are supported. This property can be overridden for specific resource types via the `fhirServer/resources/<resourceType>/interactions` property.|\n |`fhirServer/resources/Resource/searchParameters`|object|The set of search parameters to support for all supported resource types. Omitting this property is equivalent to supporting all search parameters in the server's registry that apply to resource type \"Resource\" (all resources). An empty object, `{}`, can be used to indicate that no global search parameters are supported.|\n |`fhirServer/resources/Resource/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>`. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameters/<code>`|\n+|`fhirServer/resources/Resource/searchIncludes`|string list|A comma-separated list of \\_include values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchIncludes`. Omitting this property is equivalent to supporting all \\_include values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_include values are supported.|\n+|`fhirServer/resources/Resource/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchRevIncludes`. Omitting this property is equivalent to supporting all \\_revinclude values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjcwOA==", "bodyText": "Same answer. :)", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511996708", "createdAt": "2020-10-26T14:21:21Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1520,9 +1520,15 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/resources/Resource/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) supported for resource types. Omitting this property is equivalent to supporting all FHIR interactions for the supported resources. An empty list, `[]`, can be used to indicate that no REST methods are supported. This property can be overridden for specific resource types via the `fhirServer/resources/<resourceType>/interactions` property.|\n |`fhirServer/resources/Resource/searchParameters`|object|The set of search parameters to support for all supported resource types. Omitting this property is equivalent to supporting all search parameters in the server's registry that apply to resource type \"Resource\" (all resources). An empty object, `{}`, can be used to indicate that no global search parameters are supported.|\n |`fhirServer/resources/Resource/searchParameters/<code>`|string|The URL of the search parameter definition to use for the search parameter `<code>`. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchParameters/<code>`|\n+|`fhirServer/resources/Resource/searchIncludes`|string list|A comma-separated list of \\_include values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchIncludes`. Omitting this property is equivalent to supporting all \\_include values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_include values are supported.|\n+|`fhirServer/resources/Resource/searchRevIncludes`|string list|A comma-separated list of \\_revinclude values supported for all resource types. Individual resource types may override this value via `fhirServer/resources/<resourceType>/searchRevIncludes`. Omitting this property is equivalent to supporting all \\_revinclude values for the supported resources. An empty list, `[]`, can be used to indicate that no \\_revinclude values are supported.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzEyMw=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzc4MDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowOTowN1rOHoRPzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyNDozM1rOHoXsOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzY2MQ==", "bodyText": "Please update the copywrite year.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511987661", "createdAt": "2020-10-26T14:09:07Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -18,16 +18,17 @@\n     private static final String ILLEGAL_EXCEPTION = \"SearchParameter filter property values must be an array of String.\";\n     private static final String ILLEGAL_ARGUMENT_EXCEPTION = \"No constant with value '%s' found.\";\n     private static final String PARSE_PARAMETER_EXCEPTION = \"An error occurred while parsing parameter '%s'.\";\n+    private static final String PARSE_PARAMETERS_EXCEPTION = \"An error occurred while parsing parameters.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzI0Mg==", "bodyText": "Updated.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512093242", "createdAt": "2020-10-26T16:24:33Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -18,16 +18,17 @@\n     private static final String ILLEGAL_EXCEPTION = \"SearchParameter filter property values must be an array of String.\";\n     private static final String ILLEGAL_ARGUMENT_EXCEPTION = \"No constant with value '%s' found.\";\n     private static final String PARSE_PARAMETER_EXCEPTION = \"An error occurred while parsing parameter '%s'.\";\n+    private static final String PARSE_PARAMETERS_EXCEPTION = \"An error occurred while parsing parameters.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzY2MQ=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzc4NDgwOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowOTo1NlrOHoRSSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyMzo1OVrOHoXqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA==", "bodyText": "Can we pack in some additional detail in the exception?  e.g. what's the invalid combo?", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511988298", "createdAt": "2020-10-26T14:09:56Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -816,6 +820,16 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n             }\n         } // end for\n \n+        try {\n+            // Check for valid search parameter combinations\n+            checkSearchParameterCombinations(resourceType, parameters);\n+\n+        } catch (FHIRSearchException se) {\n+            throw se;\n+        } catch (Exception e) {\n+            throw SearchExceptionUtil.buildNewParseParametersException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjcxOA==", "bodyText": "actually in this branch it's only going to be config related exceptions.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511996718", "createdAt": "2020-10-26T14:21:22Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -816,6 +820,16 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n             }\n         } // end for\n \n+        try {\n+            // Check for valid search parameter combinations\n+            checkSearchParameterCombinations(resourceType, parameters);\n+\n+        } catch (FHIRSearchException se) {\n+            throw se;\n+        } catch (Exception e) {\n+            throw SearchExceptionUtil.buildNewParseParametersException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5Mjc2NQ==", "bodyText": "Correct.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512092765", "createdAt": "2020-10-26T16:23:59Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -816,6 +820,16 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n             }\n         } // end for\n \n+        try {\n+            // Check for valid search parameter combinations\n+            checkSearchParameterCombinations(resourceType, parameters);\n+\n+        } catch (FHIRSearchException se) {\n+            throw se;\n+        } catch (Exception e) {\n+            throw SearchExceptionUtil.buildNewParseParametersException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzgxODkzOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoxNzoxOVrOHoRnjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjozNzoyMVrOHoYQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw==", "bodyText": "Line 20,21 are almost identical, I'd consider pumping in more information in this OperationOutcome so that it's more specific to the failing reason.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511993743", "createdAt": "2020-10-26T14:17:19Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -49,9 +50,22 @@ public static FHIRSearchException buildNewParseParameterException(final String n\n         return new FHIRSearchException(msg, e).withIssue(ooi);\n     }\n \n+    /**\n+     * creates a new parse parameters exception\n+     *\n+     * @param name\n+     * @param e\n+     * @return\n+     */\n+    public static FHIRSearchException buildNewParseParametersException(Exception e) {\n+        String msg = String.format(PARSE_PARAMETERS_EXCEPTION);\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, IssueType.INVALID);\n+        return new FHIRSearchException(msg, e).withIssue(ooi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMDYxNg==", "bodyText": "For this exception, it's only going to be due to config-related exceptions, which will be in the \"cause\" exception. That seemed consistent with the existing behavior of buildNewParseParameterException.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512100616", "createdAt": "2020-10-26T16:34:33Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -49,9 +50,22 @@ public static FHIRSearchException buildNewParseParameterException(final String n\n         return new FHIRSearchException(msg, e).withIssue(ooi);\n     }\n \n+    /**\n+     * creates a new parse parameters exception\n+     *\n+     * @param name\n+     * @param e\n+     * @return\n+     */\n+    public static FHIRSearchException buildNewParseParametersException(Exception e) {\n+        String msg = String.format(PARSE_PARAMETERS_EXCEPTION);\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, IssueType.INVALID);\n+        return new FHIRSearchException(msg, e).withIssue(ooi);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMjU3Ng==", "bodyText": "Sounds good", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512102576", "createdAt": "2020-10-26T16:37:21Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -49,9 +50,22 @@ public static FHIRSearchException buildNewParseParameterException(final String n\n         return new FHIRSearchException(msg, e).withIssue(ooi);\n     }\n \n+    /**\n+     * creates a new parse parameters exception\n+     *\n+     * @param name\n+     * @param e\n+     * @return\n+     */\n+    public static FHIRSearchException buildNewParseParametersException(Exception e) {\n+        String msg = String.format(PARSE_PARAMETERS_EXCEPTION);\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, IssueType.INVALID);\n+        return new FHIRSearchException(msg, e).withIssue(ooi);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzg0Nzc5OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyMzoyNVrOHoR5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyNzoyOFrOHoX0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODMyOQ==", "bodyText": "I think we should be proactive here, and only accept the trimmed codes/combinations.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511998329", "createdAt": "2020-10-26T14:23:25Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -902,6 +916,109 @@ private static void checkSearchParameterRestrictions(String parameterCode, Searc\n         }\n     }\n \n+    /**\n+     * Checks that the combination of search parameters is valid.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @param parameters\n+     *            the query parameters to check\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static void checkSearchParameterCombinations(Class<?> resourceType, List<QueryParameter> parameters)\n+        throws Exception {\n+\n+        List<Set<String>> validCombinations = getSearchParameterCombinations(resourceType.getSimpleName());\n+        if (validCombinations != null) {\n+            Set<String> searchParameterCodes = parameters.stream().map(qp -> qp.getCode()).collect(Collectors.toSet());\n+\n+            // Check that search parameter codes are a valid combinations\n+            if (!validCombinations.contains(searchParameterCodes)) {\n+                String msg;\n+                if (searchParameterCodes.isEmpty()) {\n+                    msg = \"A valid search parameter combination is required\";\n+                } else {\n+                    msg = \"Search parameter combination is not valid\";\n+                }\n+                throw SearchExceptionUtil.buildNewInvalidSearchException(msg);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the search parameter combinations.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search parameter combinations, or null if any search parameter combination is allowed\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<Set<String>> getSearchParameterCombinations(String resourceType) throws Exception {\n+\n+        List<Set<String>> spCombinations = null;\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                List<String> combinations = null;\n+\n+                // Try to find search parameter combinations property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            combinations = resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search parameter combinations property for \"Resource\" resource type\n+                if (combinations == null) {\n+                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                        // Check if matching resource type\n+                        if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                            if (resourceTypeGroup != null) {\n+                                combinations =\n+                                        resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                // Convert the delimited combinations to a list of sets\n+                if (combinations != null) {\n+                    spCombinations = new ArrayList<>();\n+                    for (String combination : combinations) {\n+                        Set<String> combinationSet = new HashSet<>();\n+                        if (!combination.isEmpty()) {\n+                            // If any search parameter combination is allowed, return null\n+                            if (SEARCH_PARAM_COMBINATION_ANY.equals(combination)) {\n+                                return null;\n+                            }\n+                            for (String spString : combination.split(SEARCH_PARAM_COMBINATION_DELIMITER)) {\n+                                if (spString.trim().isEmpty()) {\n+                                    throw SearchExceptionUtil.buildNewIllegalStateException();\n+                                }\n+                                combinationSet.add(spString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NTM3OA==", "bodyText": "Updated.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512095378", "createdAt": "2020-10-26T16:27:28Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -902,6 +916,109 @@ private static void checkSearchParameterRestrictions(String parameterCode, Searc\n         }\n     }\n \n+    /**\n+     * Checks that the combination of search parameters is valid.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @param parameters\n+     *            the query parameters to check\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static void checkSearchParameterCombinations(Class<?> resourceType, List<QueryParameter> parameters)\n+        throws Exception {\n+\n+        List<Set<String>> validCombinations = getSearchParameterCombinations(resourceType.getSimpleName());\n+        if (validCombinations != null) {\n+            Set<String> searchParameterCodes = parameters.stream().map(qp -> qp.getCode()).collect(Collectors.toSet());\n+\n+            // Check that search parameter codes are a valid combinations\n+            if (!validCombinations.contains(searchParameterCodes)) {\n+                String msg;\n+                if (searchParameterCodes.isEmpty()) {\n+                    msg = \"A valid search parameter combination is required\";\n+                } else {\n+                    msg = \"Search parameter combination is not valid\";\n+                }\n+                throw SearchExceptionUtil.buildNewInvalidSearchException(msg);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the search parameter combinations.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search parameter combinations, or null if any search parameter combination is allowed\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<Set<String>> getSearchParameterCombinations(String resourceType) throws Exception {\n+\n+        List<Set<String>> spCombinations = null;\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                List<String> combinations = null;\n+\n+                // Try to find search parameter combinations property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            combinations = resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search parameter combinations property for \"Resource\" resource type\n+                if (combinations == null) {\n+                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                        // Check if matching resource type\n+                        if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                            if (resourceTypeGroup != null) {\n+                                combinations =\n+                                        resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                // Convert the delimited combinations to a list of sets\n+                if (combinations != null) {\n+                    spCombinations = new ArrayList<>();\n+                    for (String combination : combinations) {\n+                        Set<String> combinationSet = new HashSet<>();\n+                        if (!combination.isEmpty()) {\n+                            // If any search parameter combination is allowed, return null\n+                            if (SEARCH_PARAM_COMBINATION_ANY.equals(combination)) {\n+                                return null;\n+                            }\n+                            for (String spString : combination.split(SEARCH_PARAM_COMBINATION_DELIMITER)) {\n+                                if (spString.trim().isEmpty()) {\n+                                    throw SearchExceptionUtil.buildNewIllegalStateException();\n+                                }\n+                                combinationSet.add(spString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODMyOQ=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzg3MDA4OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyNzozNFrOHoSGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0NjozNVrOHoYqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTY5MQ==", "bodyText": "Please refactor this method and the prior into one processing logic method, and a new signature, resourceType, String propertyType, and leave the existing methods only pointing to the one logic method.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512001691", "createdAt": "2020-10-26T14:27:34Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1612,6 +1750,95 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+\n+                // Try to find search includes property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search includes property for \"Resource\" resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                    // Check if matching resource type\n+                    if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves the search revinclude restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _revinclude values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchRevIncludeRestrictions(String resourceType) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwOTA5MA==", "bodyText": "Updated.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512109090", "createdAt": "2020-10-26T16:46:35Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1612,6 +1750,95 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+\n+                // Try to find search includes property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search includes property for \"Resource\" resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                    // Check if matching resource type\n+                    if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves the search revinclude restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _revinclude values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchRevIncludeRestrictions(String resourceType) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTY5MQ=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzg3NDUzOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/test/java/com/ibm/fhir/search/parameters/SearchParameterRestrictionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyODozMFrOHoSJWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyMTo1OVrOHoXkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjM5Mw==", "bodyText": "Change the copyright year to 2020 only", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512002393", "createdAt": "2020-10-26T14:28:30Z", "author": {"login": "prb112"}, "path": "fhir-search/src/test/java/com/ibm/fhir/search/parameters/SearchParameterRestrictionTest.java", "diffHunk": "@@ -17,7 +17,14 @@\n \n import com.ibm.fhir.config.FHIRConfiguration;\n import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.resource.CarePlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MTMzMQ==", "bodyText": "Updated.", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512091331", "createdAt": "2020-10-26T16:21:59Z", "author": {"login": "tbieste"}, "path": "fhir-search/src/test/java/com/ibm/fhir/search/parameters/SearchParameterRestrictionTest.java", "diffHunk": "@@ -17,7 +17,14 @@\n \n import com.ibm.fhir.config.FHIRConfiguration;\n import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.resource.CarePlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjM5Mw=="}, "originalCommit": {"oid": "d88baae89897ed6d2009019236960b69d92f2702"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}