{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODQ1NDYx", "number": 735, "title": "issue #726 reuse input stream of data source between chunks", "bodyText": "Signed-off-by: Albert Wang xuwang@us.ibm.com\ncurrently, we enable the reuse by default, and we can turn it off if need in the future.\nTest results(using the same 34M ndjson test file):\nFrom local file\n(1) without reuse\n---- Fhir resources imported in 365.517seconds ----\nResourceType \t Imported \t Failed\nAllergyIntolerance\t54238\t0\n---- Total: 54238 ImportRate: 148.38707912354283 ----\n(2) with reuse\n---- Fhir resources imported in 358.754seconds ----\nResourceType \t Imported \t Failed\nAllergyIntolerance\t54238\t0\n---- Total: 54238 ImportRate: 151.1843770383048 ----\nFrom COS:\n(1) without reuse\n---- Fhir resources imported in 517.111seconds ----\nResourceType \t Imported \t Failed\nAllergyIntolerance\t54238\t0\n---- Total: 54238 ImportRate: 104.8865717418504 ----\n(2) with reuse\n---- Fhir resources imported in 367.606seconds ----\nResourceType \t Imported \t Failed\nAllergyIntolerance\t54238\t0\n---- Total: 54238 ImportRate: 147.54383769579385 ----", "createdAt": "2020-02-27T13:18:33Z", "url": "https://github.com/IBM/FHIR/pull/735", "merged": true, "mergeCommit": {"oid": "6091672f923491dd24d5c53303142124997d7b36"}, "closed": true, "closedAt": "2020-02-28T17:45:22Z", "author": {"login": "albertwang-ibm"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIbMAxAH2gAyMzgwODQ1NDYxOjVjZDAwYTE3OTc3ODE4ODk3YWUyM2I5NmY1NGM0NWU5MjZjODYzY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIzS1-gH2gAyMzgwODQ1NDYxOmY0NTkzNzIwN2I3Mzg0MzZhNWY5NTllYmE2OWE5YjkxYjkxMDZjN2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cd00a17977818897ae23b96f54c45e926c863cf", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/5cd00a17977818897ae23b96f54c45e926c863cf", "committedDate": "2020-02-27T13:18:02Z", "message": "issue #726 reuse input stream of data source between chunks\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f331f9694e43dc8084607253c6eae626e18413", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/e3f331f9694e43dc8084607253c6eae626e18413", "committedDate": "2020-02-27T13:51:53Z", "message": "Merge pull request #736 from IBM/issue-726\n\nIssue 726"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f357ce0bd144f834d0c080cfdd169de7b40d800", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/7f357ce0bd144f834d0c080cfdd169de7b40d800", "committedDate": "2020-02-27T14:41:33Z", "message": "workaround the test coverage error\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30570c396e47ac23c25dbfbd8685f4ecc38eeb0a", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/30570c396e47ac23c25dbfbd8685f4ecc38eeb0a", "committedDate": "2020-02-27T14:45:46Z", "message": "issue #726 enable input stream reuse by default\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c0531e76db724bea5d1b88e871794d32b6d644", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/b4c0531e76db724bea5d1b88e871794d32b6d644", "committedDate": "2020-02-27T16:50:08Z", "message": "rollback testcoverage workaround\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/d35aec846c3b9b33685c086b47c9f1bcae4ae658", "committedDate": "2020-02-27T16:53:03Z", "message": "Merge pull request #739 from IBM/issue-726\n\nIssue 726"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDA5NTAx", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366009501", "createdAt": "2020-02-27T21:25:24Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNToyNFrOFvhvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNToyNFrOFvhvCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA==", "bodyText": "reading through the code in the else statement (below), shouldn't there be an abort after line 170?", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380104", "createdAt": "2020-02-27T21:25:24Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDEwNDMx", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366010431", "createdAt": "2020-02-27T21:26:55Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNjo1NlrOFvhyEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNjo1NlrOFvhyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDg4Mw==", "bodyText": "there seems like a high degree of repetition in the if(if)/else blocks, is there some opportunity to reduce the duplicated code (not the catch blocks are near identical)", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380883", "createdAt": "2020-02-27T21:26:56Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDExODk3", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366011897", "createdAt": "2020-02-27T21:29:16Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToxNlrOFvh2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToxNlrOFvh2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTk5Nw==", "bodyText": "I think there should be some defensive programming here to validate the path is acceptable.  This may be best at the REST layer.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385381997", "createdAt": "2020-02-27T21:29:16Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDEyMDM0", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366012034", "createdAt": "2020-02-27T21:29:29Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToyOVrOFvh20A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToyOVrOFvh20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjA5Ng==", "bodyText": "I think there should be some defensive programming here to validate the url is acceptable.  This may be best at the REST layer.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385382096", "createdAt": "2020-02-27T21:29:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDE0MTMy", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366014132", "createdAt": "2020-02-27T21:32:49Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo0OVrOFvh9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo0OVrOFvh9JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MzcxNw==", "bodyText": "226 uses a non autocloseable. here we use an autocloseable --- worth doublechecking", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385383717", "createdAt": "2020-02-27T21:32:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n+                    transientUserData.setInputStream(inputStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDE1MzE0", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366015314", "createdAt": "2020-02-27T21:34:43Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNDo0NFrOFviAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNDo0NFrOFviAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw==", "bodyText": "looking at these package names, should we have a single parent package for bulkdata, and call out each feature underneath? establishing it as a hierarchy? just a thought... no action needed, just a design question", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385384587", "createdAt": "2020-02-27T21:34:44Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -6,7 +6,9 @@\n \n package com.ibm.fhir.bulkimport;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDE1OTMw", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366015930", "createdAt": "2020-02-27T21:35:47Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNTo0OFrOFviCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNTo0OFrOFviCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw==", "bodyText": "On line 14, add a space between ImportCheckPointData{   so it is ImportCheckPointData {", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385385057", "createdAt": "2020-02-27T21:35:48Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDE2NzYw", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366016760", "createdAt": "2020-02-27T21:37:09Z", "commit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f18a6e9d33cc95639b4499ffc067daec28fd5f85", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f18a6e9d33cc95639b4499ffc067daec28fd5f85", "committedDate": "2020-02-27T22:28:40Z", "message": "issue #726 minor changes per review commands\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae3d7770ad9db62949e0fad613d16073423c53e8", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/ae3d7770ad9db62949e0fad613d16073423c53e8", "committedDate": "2020-02-28T02:25:04Z", "message": "issue #726 replace deprecated COS function call\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzkwNzA3", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366390707", "createdAt": "2020-02-28T13:20:41Z", "commit": {"oid": "ae3d7770ad9db62949e0fad613d16073423c53e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "committedDate": "2020-02-28T17:02:13Z", "message": "issue #726 add cleanup if the job is stopped/cancelled.\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwMjkx", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550291", "createdAt": "2020-02-28T17:05:31Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTozMVrOFv8LDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTozMVrOFv8LDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzI2Mw==", "bodyText": "add an if logger, that way no creation of string to pass to fine logger", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813263", "createdAt": "2020-02-28T17:05:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -102,8 +103,12 @@ public ChunkReader() {\n \n     @Override\n     public Object readItem() throws Exception {\n+        // If the job is being stopped or in other status except for \"started\", then stop the read.\n+        if (!stepCtx.getBatchStatus().equals(BatchStatus.STARTED)) {\n+            return null;\n+        }\n         List<Resource> loadedFhirResources = new ArrayList<Resource>();\n-        logger.info(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);\n+        logger.fine(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwNDMz", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550433", "createdAt": "2020-02-28T17:05:45Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0NVrOFv8LeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0NVrOFv8LeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM2OQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813369", "createdAt": "2020-02-28T17:05:45Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -162,7 +162,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         chunkData.setNumOfProcessedResources(chunkData.getNumOfProcessedResources() + processedNum);\n         chunkData.setNumOfImportedResources(chunkData.getNumOfImportedResources() + succeededNum);\n         chunkData.setNumOfImportFailures(chunkData.getNumOfImportFailures() + failedNum);\n-        logger.info(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());\n+        logger.fine(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwNDY5", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550469", "createdAt": "2020-02-28T17:05:49Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0OVrOFv8LlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0OVrOFv8LlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM5Nw==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813397", "createdAt": "2020-02-28T17:05:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -192,7 +192,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n                     chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n                     chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwNTA3", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550507", "createdAt": "2020-02-28T17:05:53Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo1M1rOFv8LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo1M1rOFv8LuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzQzMw==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813433", "createdAt": "2020-02-28T17:05:53Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -209,7 +209,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n                     chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n                     chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwNjUx", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550651", "createdAt": "2020-02-28T17:06:05Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjowNVrOFv8MEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjowNVrOFv8MEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzUyMQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813521", "createdAt": "2020-02-28T17:06:05Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -94,7 +113,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n                             partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwNzAw", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550700", "createdAt": "2020-02-28T17:06:10Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoxMFrOFv8MNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoxMFrOFv8MNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzU1OQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813559", "createdAt": "2020-02-28T17:06:10Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -116,7 +135,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n                             partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTUwODA2", "url": "https://github.com/IBM/FHIR/pull/735#pullrequestreview-366550806", "createdAt": "2020-02-28T17:06:22Z", "commit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoyMlrOFv8MjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoyMlrOFv8MjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzY0NA==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813644", "createdAt": "2020-02-28T17:06:22Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -132,12 +139,13 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem, numOfLinesToSkip, loadedFhirResources);\n+            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n             break;\n         default:\n             break;\n         }\n-        logger.info(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);\n+        logger.fine(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f45937207b738436a5f959eba69a9b91b9106c7f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f45937207b738436a5f959eba69a9b91b9106c7f", "committedDate": "2020-02-28T17:23:13Z", "message": "issue #726 minor change for logging\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 713, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}