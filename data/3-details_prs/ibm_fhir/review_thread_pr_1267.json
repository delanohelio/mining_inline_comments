{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MjEwMzkx", "number": 1267, "reviewThreads": {"totalCount": 270, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowNjo0NlrOEJrQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDowOVrOEKPLOQ==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgxMzE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchIdLastUpdatedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowNjo0N1rOGqSoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NToxMlrOGrCteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446998535", "createdAt": "2020-06-29T14:06:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchIdLastUpdatedTest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjM2Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447786362", "createdAt": "2020-06-30T15:45:12Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchIdLastUpdatedTest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODUzNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgxNzAyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowNzozMlrOGqSqWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0ODowOFrOGrC12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446999130", "createdAt": "2020-06-29T14:07:32Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "diffHunk": "@@ -16,22 +18,39 @@\n \n public class JDBCSearchNumberTest extends AbstractSearchNumberTest {\n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchNumberTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4ODUwNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447788504", "createdAt": "2020-06-30T15:48:08Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "diffHunk": "@@ -16,22 +18,39 @@\n \n public class JDBCSearchNumberTest extends AbstractSearchNumberTest {\n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchNumberTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTEzMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgxODk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowNzo1NVrOGqSrbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0OTozNFrOGrC6Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446999407", "createdAt": "2020-06-29T14:07:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "diffHunk": "@@ -17,22 +19,39 @@\n public class JDBCSearchQuantityTest extends AbstractSearchQuantityTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchQuantityTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4OTYwNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447789607", "createdAt": "2020-06-30T15:49:34Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "diffHunk": "@@ -17,22 +19,39 @@\n public class JDBCSearchQuantityTest extends AbstractSearchQuantityTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchQuantityTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTQwNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyMDU3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowODoxNlrOGqSsXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MTowMlrOGrC-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446999645", "createdAt": "2020-06-29T14:08:16Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -19,21 +21,38 @@\n     \n     private Properties testProps;\n     \n+    private PoolConnectionProvider connectionPool;\n+    \n     public JDBCSearchReferenceTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MDYwOQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447790609", "createdAt": "2020-06-30T15:51:02Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -19,21 +21,38 @@\n     \n     private Properties testProps;\n     \n+    private PoolConnectionProvider connectionPool;\n+    \n     public JDBCSearchReferenceTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTY0NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyMTk0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowODozNVrOGqStOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MTozMFrOGrC_5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446999867", "createdAt": "2020-06-29T14:08:35Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -19,21 +21,38 @@\n     \n     private Properties testProps;\n     \n+    private PoolConnectionProvider connectionPool;\n+    \n     public JDBCSearchReferenceTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MTA3OA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447791078", "createdAt": "2020-06-30T15:51:30Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -19,21 +21,38 @@\n     \n     private Properties testProps;\n     \n+    private PoolConnectionProvider connectionPool;\n+    \n     public JDBCSearchReferenceTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTg2Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyMzA3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowODo1NVrOGqSt_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MDoxM1rOGrC79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDA2MQ==", "bodyText": "copyright needs to be updated", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447000061", "createdAt": "2020-06-29T14:08:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MDA2OQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447790069", "createdAt": "2020-06-30T15:50:13Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDA2MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyNDcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowOToxNVrOGqSu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0ODo1MFrOGrC4FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDI5Ng==", "bodyText": "update copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447000296", "createdAt": "2020-06-29T14:09:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4OTA3Nw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447789077", "createdAt": "2020-06-30T15:48:50Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDI5Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyNTU0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowOToyOVrOGqSvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NzozNFrOGrC0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDQyNw==", "bodyText": "update copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447000427", "createdAt": "2020-06-29T14:09:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4ODAzNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447788037", "createdAt": "2020-06-30T15:47:34Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDQyNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgzMDcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMDozMlrOGqSyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0Njo0N1rOGrCx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.apache.derby.impl.store.raw.xact.BeginXact;", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447001221", "createdAt": "2020-06-29T14:10:32Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.Properties;\n import java.util.logging.LogManager;\n \n+import org.apache.derby.impl.store.raw.xact.BeginXact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NzQ5NA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447787494", "createdAt": "2020-06-30T15:46:47Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.Properties;\n import java.util.logging.LogManager;\n \n+import org.apache.derby.impl.store.raw.xact.BeginXact;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTIyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgzMzU4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMToxMFrOGqS0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NzowMlrOGrCynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTY3NQ==", "bodyText": "Update Copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447001675", "createdAt": "2020-06-29T14:11:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.Properties;\n import java.util.logging.LogManager;\n \n+import org.apache.derby.impl.store.raw.xact.BeginXact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NzY3Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447787676", "createdAt": "2020-06-30T15:47:02Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNearTest.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.Properties;\n import java.util.logging.LogManager;\n \n+import org.apache.derby.impl.store.raw.xact.BeginXact;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTY3NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgzNTU1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMTozOFrOGqS1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNDozN1rOGrDlKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447001988", "createdAt": "2020-06-29T14:11:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMDYxOA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447800618", "createdAt": "2020-06-30T16:04:37Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMTk4OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgzNjY0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMTo1MVrOGqS2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NDozMVrOGrCrag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMjE2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447002165", "createdAt": "2020-06-29T14:11:51Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NTgzNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447785834", "createdAt": "2020-06-30T15:44:31Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchCompositeTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMjE2NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg0NjEzOnYy", "diffSide": "RIGHT", "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxNDowOVrOGqS8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1OToxMVrOGrOPzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzY5OA==", "bodyText": "Please remove this.\nIt gets called every 60 seconds...", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447003698", "createdAt": "2020-06-29T14:14:09Z", "author": {"login": "prb112"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -45,9 +49,22 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n         try {\n             FHIRPersistence pl =\n                     (FHIRPersistence) operationContext.getProperty(FHIROperationContext.PROPNAME_PERSISTENCE_IMPL);\n-            OperationOutcome operationOutcome = pl.getHealth();\n-            checkOperationOutcome(operationOutcome);\n-            return FHIROperationUtil.getOutputParameters(operationOutcome);\n+\n+            FHIRPersistenceTransaction tx = resourceHelper.getTransaction();\n+            tx.begin();\n+            \n+            try {\n+                logger.info(\"checking health\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NTM3Mw==", "bodyText": "this was removed a while back", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447975373", "createdAt": "2020-06-30T20:59:11Z", "author": {"login": "punktilious"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -45,9 +49,22 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n         try {\n             FHIRPersistence pl =\n                     (FHIRPersistence) operationContext.getProperty(FHIROperationContext.PROPNAME_PERSISTENCE_IMPL);\n-            OperationOutcome operationOutcome = pl.getHealth();\n-            checkOperationOutcome(operationOutcome);\n-            return FHIROperationUtil.getOutputParameters(operationOutcome);\n+\n+            FHIRPersistenceTransaction tx = resourceHelper.getTransaction();\n+            tx.begin();\n+            \n+            try {\n+                logger.info(\"checking health\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzY5OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg0Nzc1OnYy", "diffSide": "RIGHT", "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxNDoyN1rOGqS9IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1OTozMlrOGrOQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzkzNg==", "bodyText": "Please remove this", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447003936", "createdAt": "2020-06-29T14:14:27Z", "author": {"login": "prb112"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -45,9 +49,22 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n         try {\n             FHIRPersistence pl =\n                     (FHIRPersistence) operationContext.getProperty(FHIROperationContext.PROPNAME_PERSISTENCE_IMPL);\n-            OperationOutcome operationOutcome = pl.getHealth();\n-            checkOperationOutcome(operationOutcome);\n-            return FHIROperationUtil.getOutputParameters(operationOutcome);\n+\n+            FHIRPersistenceTransaction tx = resourceHelper.getTransaction();\n+            tx.begin();\n+            \n+            try {\n+                logger.info(\"checking health\");\n+                OperationOutcome operationOutcome = pl.getHealth();\n+                checkOperationOutcome(operationOutcome);\n+                logger.info(\"checked health\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NTU5MA==", "bodyText": "already removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447975590", "createdAt": "2020-06-30T20:59:32Z", "author": {"login": "punktilious"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -45,9 +49,22 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n         try {\n             FHIRPersistence pl =\n                     (FHIRPersistence) operationContext.getProperty(FHIROperationContext.PROPNAME_PERSISTENCE_IMPL);\n-            OperationOutcome operationOutcome = pl.getHealth();\n-            checkOperationOutcome(operationOutcome);\n-            return FHIROperationUtil.getOutputParameters(operationOutcome);\n+\n+            FHIRPersistenceTransaction tx = resourceHelper.getTransaction();\n+            tx.begin();\n+            \n+            try {\n+                logger.info(\"checking health\");\n+                OperationOutcome operationOutcome = pl.getHealth();\n+                checkOperationOutcome(operationOutcome);\n+                logger.info(\"checked health\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzkzNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTkxMzUzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyODoxNVrOGqTlTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxMjozMVrOGrD6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                        // just log the error...things are already bad if this method has been called\n          \n          \n            \n                        logger.severe(\"dumpLockInfo - connection failure: \" + x.getMessage());\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (SQLException x) {\n          \n          \n            \n                        // just log the error...things are already bad if this method has been called\n          \n          \n            \n                        logger.severe(\"dumpLockInfo - connection failure: \" + x.getMessage());\n          \n          \n            \n                    }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447014221", "createdAt": "2020-06-29T14:28:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "diffHunk": "@@ -29,12 +37,37 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+    \n+    @Override\n+    protected void debugLocks() {\n+        // Exception running a query. Let's dump the lock table\n+        try (Connection c = connectionPool.getConnection()) {\n+            DerbyMaster.dumpLockInfo(c);\n+        }\n+        catch (SQLException x) {\n+            // just log the error...things are already bad if this method has been called\n+            logger.severe(\"dumpLockInfo - connection failure: \" + x.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNjA2Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447806066", "createdAt": "2020-06-30T16:12:31Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "diffHunk": "@@ -29,12 +37,37 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+    \n+    @Override\n+    protected void debugLocks() {\n+        // Exception running a query. Let's dump the lock table\n+        try (Connection c = connectionPool.getConnection()) {\n+            DerbyMaster.dumpLockInfo(c);\n+        }\n+        catch (SQLException x) {\n+            // just log the error...things are already bad if this method has been called\n+            logger.severe(\"dumpLockInfo - connection failure: \" + x.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDIyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTkxNTgzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyODo0NVrOGqTmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxMDo0MFrOGrD0rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDU3Mg==", "bodyText": "Copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447014572", "createdAt": "2020-06-29T14:28:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "diffHunk": "@@ -6,8 +6,14 @@\n \n package com.ibm.fhir.persistence.jdbc.test;\n \n+import java.sql.Connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNDU5MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447804591", "createdAt": "2020-06-30T16:10:40Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "diffHunk": "@@ -6,8 +6,14 @@\n \n package com.ibm.fhir.persistence.jdbc.test;\n \n+import java.sql.Connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDU3Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjAyOTcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1MjoxMVrOGqUrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowODoyN1rOGrDu8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMjE4MA==", "bodyText": "Fix copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447032180", "createdAt": "2020-06-29T14:52:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzEyMg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447803122", "createdAt": "2020-06-30T16:08:27Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMjE4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjAzMTE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1MjoyOFrOGqUsZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowODo1M1rOGrDv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMjQyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447032421", "createdAt": "2020-06-29T14:52:28Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -33,12 +39,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzM4NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447803385", "createdAt": "2020-06-30T16:08:53Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -33,12 +39,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMjQyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA3MDIwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMDozN1rOGqVEBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MjowN1rOGrDCIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODQ2OA==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447038468", "createdAt": "2020-06-29T15:00:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MTY1MA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447791650", "createdAt": "2020-06-30T15:52:07Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODQ2OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA3MTc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMTowMVrOGqVFGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MjozNVrOGrDECg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447038747", "createdAt": "2020-06-29T15:01:01Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -18,22 +20,39 @@\n public class JDBCSearchStringTest extends AbstractSearchStringTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchStringTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MjEzOA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447792138", "createdAt": "2020-06-30T15:52:35Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -18,22 +20,39 @@\n public class JDBCSearchStringTest extends AbstractSearchStringTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchStringTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODc0Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA3MjU5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMToxM1rOGqVFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1Mjo1NlrOGrDFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447038878", "createdAt": "2020-06-29T15:01:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -18,22 +20,39 @@\n public class JDBCSearchStringTest extends AbstractSearchStringTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchStringTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MjQ3Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447792476", "createdAt": "2020-06-30T15:52:56Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -18,22 +20,39 @@\n public class JDBCSearchStringTest extends AbstractSearchStringTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchStringTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzODg3OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA3NjcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMjowOVrOGqVIRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1MzozMFrOGrDGyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzOTU1Ng==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447039556", "createdAt": "2020-06-29T15:02:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5Mjg0Mw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447792843", "createdAt": "2020-06-30T15:53:30Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzOTU1Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjA4MTA5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMzowOFrOGqVLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1Mzo1MFrOGrDHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MDI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447040263", "createdAt": "2020-06-29T15:03:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MzA5NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447793095", "createdAt": "2020-06-30T15:53:50Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MDI2Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEzMTIwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxNDoxMFrOGqVqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNzoyMVrOGrDr8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0ODE5NQ==", "bodyText": "Copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447048195", "createdAt": "2020-06-29T15:14:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjM1Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447802352", "createdAt": "2020-06-30T16:07:21Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0ODE5NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEzMjQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxNDoyNFrOGqVqvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNzo0N1rOGrDtGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0ODM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447048380", "createdAt": "2020-06-29T15:14:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjY1MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447802651", "createdAt": "2020-06-30T16:07:47Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0ODM4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE1NzE0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxOTo1MFrOGqV6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowOTozNlrOGrDyBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MjMxNQ==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447052315", "createdAt": "2020-06-29T15:19:50Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzkwOQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447803909", "createdAt": "2020-06-30T16:09:36Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MjMxNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE1OTk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMDoyNVrOGqV75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxMDowMFrOGrDy7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Mjc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447052773", "createdAt": "2020-06-29T15:20:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -29,12 +34,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNDE0Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447804142", "createdAt": "2020-06-30T16:10:00Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -29,12 +34,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Mjc3Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE2NDAzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMToyMlrOGqV-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNTozMlrOGrDnhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzQyNA==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447053424", "createdAt": "2020-06-29T15:21:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMTIyMw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447801223", "createdAt": "2020-06-30T16:05:32Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzQyNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE2NTE0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMTozNlrOGqV_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1NToxNlrOGrDMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzYwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447053600", "createdAt": "2020-06-29T15:21:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDE4MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447794181", "createdAt": "2020-06-30T15:55:16Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MzYwMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE2ODAwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMjoxNVrOGqWA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMDoyM1rOGrOSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NDA2NA==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447054064", "createdAt": "2020-06-29T15:22:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.pool.PoolConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NjAzMQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447976031", "createdAt": "2020-06-30T21:00:23Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.pool.PoolConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NDA2NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE2OTQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyMjozMlrOGqWBzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNjo0MVrOGrDqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NDI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447054287", "createdAt": "2020-06-29T15:22:32Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -28,12 +32,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMTk1MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447801951", "createdAt": "2020-06-30T16:06:41Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -28,12 +32,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NDI4Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE5MjcxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNzo0MlrOGqWQTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyMzo0N1rOGrBwcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Nzk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (Throwable x) {\n          \n          \n            \n                    } catch (Throwable x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447057998", "createdAt": "2020-06-29T15:27:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container.\n+ * Transactions are managed with the help of the SimpleTransactionProvider and\n+ * wrapped by this class, meaning we have a uniform interface for handling\n+ * transactions across JEE and unit-test scenarios.\n+ * \n+ */\n+public class FHIRTestTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    // Support transactions for the persistence unit tests\n+    private final SimpleTransactionProvider transactionProvider;\n+    \n+    // Just in case we have nesting issues, use ThreadLocal to track the current tx\n+    private final ThreadLocal<ITransaction> currentTransaction = new ThreadLocal<>();\n+    \n+    // Was this instance responsible for starting the transaction\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+        \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRTestTransactionAdapter(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+\n+        // provide transaction support for our tests\n+        this.transactionProvider = new SimpleTransactionProvider(this.connectionProvider);\n+    }\n+\n+    @Override\n+    public void begin() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            // allocate a new transaction\n+            this.currentTransaction.set(this.transactionProvider.getTransaction());\n+            this.startedByThis = true;\n+        }\n+        \n+        // add to the start request counter every time. We only close when this\n+        // counter reaches 0.\n+        startCount++;\n+    }\n+\n+    @Override\n+    public void end() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+        \n+        try {\n+            // only end it if we started it\n+            if (startedByThis && --startCount == 0) {\n+                this.currentTransaction.get().close();\n+            }\n+        }\n+        catch (Throwable x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MDczNg==", "bodyText": "fixed next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447770736", "createdAt": "2020-06-30T15:23:47Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container.\n+ * Transactions are managed with the help of the SimpleTransactionProvider and\n+ * wrapped by this class, meaning we have a uniform interface for handling\n+ * transactions across JEE and unit-test scenarios.\n+ * \n+ */\n+public class FHIRTestTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    // Support transactions for the persistence unit tests\n+    private final SimpleTransactionProvider transactionProvider;\n+    \n+    // Just in case we have nesting issues, use ThreadLocal to track the current tx\n+    private final ThreadLocal<ITransaction> currentTransaction = new ThreadLocal<>();\n+    \n+    // Was this instance responsible for starting the transaction\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+        \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRTestTransactionAdapter(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+\n+        // provide transaction support for our tests\n+        this.transactionProvider = new SimpleTransactionProvider(this.connectionProvider);\n+    }\n+\n+    @Override\n+    public void begin() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            // allocate a new transaction\n+            this.currentTransaction.set(this.transactionProvider.getTransaction());\n+            this.startedByThis = true;\n+        }\n+        \n+        // add to the start request counter every time. We only close when this\n+        // counter reaches 0.\n+        startCount++;\n+    }\n+\n+    @Override\n+    public void end() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+        \n+        try {\n+            // only end it if we started it\n+            if (startedByThis && --startCount == 0) {\n+                this.currentTransaction.get().close();\n+            }\n+        }\n+        catch (Throwable x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Nzk5OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE5NDI5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNzo1OVrOGqWRLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNDowM1rOGrBxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    finally {\n          \n          \n            \n                    } finally {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447058221", "createdAt": "2020-06-29T15:27:59Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container.\n+ * Transactions are managed with the help of the SimpleTransactionProvider and\n+ * wrapped by this class, meaning we have a uniform interface for handling\n+ * transactions across JEE and unit-test scenarios.\n+ * \n+ */\n+public class FHIRTestTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    // Support transactions for the persistence unit tests\n+    private final SimpleTransactionProvider transactionProvider;\n+    \n+    // Just in case we have nesting issues, use ThreadLocal to track the current tx\n+    private final ThreadLocal<ITransaction> currentTransaction = new ThreadLocal<>();\n+    \n+    // Was this instance responsible for starting the transaction\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+        \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRTestTransactionAdapter(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+\n+        // provide transaction support for our tests\n+        this.transactionProvider = new SimpleTransactionProvider(this.connectionProvider);\n+    }\n+\n+    @Override\n+    public void begin() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            // allocate a new transaction\n+            this.currentTransaction.set(this.transactionProvider.getTransaction());\n+            this.startedByThis = true;\n+        }\n+        \n+        // add to the start request counter every time. We only close when this\n+        // counter reaches 0.\n+        startCount++;\n+    }\n+\n+    @Override\n+    public void end() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+        \n+        try {\n+            // only end it if we started it\n+            if (startedByThis && --startCount == 0) {\n+                this.currentTransaction.get().close();\n+            }\n+        }\n+        catch (Throwable x) {\n+            // translate to a FHIRPersistenceException\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Unexpected error while committing a transaction.\");\n+            log.log(Level.SEVERE, fx.getMessage(), x);\n+            throw fx;\n+        }\n+        finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MDkyOA==", "bodyText": "fixed next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447770928", "createdAt": "2020-06-30T15:24:03Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container.\n+ * Transactions are managed with the help of the SimpleTransactionProvider and\n+ * wrapped by this class, meaning we have a uniform interface for handling\n+ * transactions across JEE and unit-test scenarios.\n+ * \n+ */\n+public class FHIRTestTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    // Support transactions for the persistence unit tests\n+    private final SimpleTransactionProvider transactionProvider;\n+    \n+    // Just in case we have nesting issues, use ThreadLocal to track the current tx\n+    private final ThreadLocal<ITransaction> currentTransaction = new ThreadLocal<>();\n+    \n+    // Was this instance responsible for starting the transaction\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+        \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRTestTransactionAdapter(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+\n+        // provide transaction support for our tests\n+        this.transactionProvider = new SimpleTransactionProvider(this.connectionProvider);\n+    }\n+\n+    @Override\n+    public void begin() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            // allocate a new transaction\n+            this.currentTransaction.set(this.transactionProvider.getTransaction());\n+            this.startedByThis = true;\n+        }\n+        \n+        // add to the start request counter every time. We only close when this\n+        // counter reaches 0.\n+        startCount++;\n+    }\n+\n+    @Override\n+    public void end() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+        \n+        try {\n+            // only end it if we started it\n+            if (startedByThis && --startCount == 0) {\n+                this.currentTransaction.get().close();\n+            }\n+        }\n+        catch (Throwable x) {\n+            // translate to a FHIRPersistenceException\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Unexpected error while committing a transaction.\");\n+            log.log(Level.SEVERE, fx.getMessage(), x);\n+            throw fx;\n+        }\n+        finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODIyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIwMjE4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyOTo0MFrOGqWV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMToxOFrOGrKeMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTQzMQ==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447059431", "createdAt": "2020-06-29T15:29:40Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NjIyNw==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447896227", "createdAt": "2020-06-30T18:32:13Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTQzMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMzUyMw==", "bodyText": "not fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447913523", "createdAt": "2020-06-30T19:01:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.api.IConnectionProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTQzMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIwMzI2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyOTo1MlrOGqWWhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozMjozOFrOGrJbfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447059588", "createdAt": "2020-06-29T15:29:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NjQ0NQ==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447896445", "createdAt": "2020-06-30T18:32:38Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCSortTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTU4OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIwNzA1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMDozN1rOGqWY0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNDozM1rOGrCQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param connectionStrategy", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447060179", "createdAt": "2020-06-29T15:30:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "diffHunk": "@@ -112,20 +113,30 @@\n     /**\n      * Constructs a DAO instance suitable for acquiring connections from a JDBC Datasource object.\n      */\n-    public ResourceDAOImpl(TransactionSynchronizationRegistry trxSynchRegistry) {\n-        super();\n+    public ResourceDAOImpl(Connection c, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry) {\n+        super(c, schemaName, flavor);\n         this.runningInTrx = true;\n         this.trxSynchRegistry = trxSynchRegistry;\n     }\n \n+    /**\n+     * Constructs a DAO instance for use outside a managed transaction (JEE) environment\n+     * @param connectionStrategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3ODgyOA==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447778828", "createdAt": "2020-06-30T15:34:33Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "diffHunk": "@@ -112,20 +113,30 @@\n     /**\n      * Constructs a DAO instance suitable for acquiring connections from a JDBC Datasource object.\n      */\n-    public ResourceDAOImpl(TransactionSynchronizationRegistry trxSynchRegistry) {\n-        super();\n+    public ResourceDAOImpl(Connection c, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry) {\n+        super(c, schemaName, flavor);\n         this.runningInTrx = true;\n         this.trxSynchRegistry = trxSynchRegistry;\n     }\n \n+    /**\n+     * Constructs a DAO instance for use outside a managed transaction (JEE) environment\n+     * @param connectionStrategy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDE3OQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIxOTk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/QuantityParmBehaviorUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMzozOFrOGqWhHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNTowM1rOGrJgbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MjMwMA==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447062300", "createdAt": "2020-06-29T15:33:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/QuantityParmBehaviorUtilTest.java", "diffHunk": "@@ -177,12 +177,7 @@ public Connection getConnection() throws FHIRPersistenceDBConnectException {\n             }\n \n             @Override\n-            public Connection getExternalConnection() {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean isDb2Database() throws Exception {\n+            public boolean isDb2Database() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzcwOA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447897708", "createdAt": "2020-06-30T18:35:03Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/QuantityParmBehaviorUtilTest.java", "diffHunk": "@@ -177,12 +177,7 @@ public Connection getConnection() throws FHIRPersistenceDBConnectException {\n             }\n \n             @Override\n-            public Connection getExternalConnection() {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean isDb2Database() throws Exception {\n+            public boolean isDb2Database() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MjMwMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIyMzQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNDoyN1rOGqWjYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNDozN1rOGrJfcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mjg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String CLASSNAME = FHIRDebugXADataSource.class.getName();", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447062880", "createdAt": "2020-06-29T15:34:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2017, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.XAConnection;\n+import javax.sql.XADataSource;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+/**\n+ * Wraps a Derby embedded datasource so we can debug connection handling issues\n+ * by returning wrapped datasources (and wrapped connections)\n+ */\n+public class FHIRDebugXADataSource implements XADataSource {\n+    private static final Logger log = Logger.getLogger(FHIRDebugXADataSource.class.getName());\n+    private static final String CLASSNAME = FHIRDebugXADataSource.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzQ1OA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447897458", "createdAt": "2020-06-30T18:34:37Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2017, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.XAConnection;\n+import javax.sql.XADataSource;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+/**\n+ * Wraps a Derby embedded datasource so we can debug connection handling issues\n+ * by returning wrapped datasources (and wrapped connections)\n+ */\n+public class FHIRDebugXADataSource implements XADataSource {\n+    private static final Logger log = Logger.getLogger(FHIRDebugXADataSource.class.getName());\n+    private static final String CLASSNAME = FHIRDebugXADataSource.class.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mjg4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIyODkyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNTozOVrOGqWmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNTo0NFrOGrJiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mzc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447063751", "createdAt": "2020-06-29T15:35:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODExNQ==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447898115", "createdAt": "2020-06-30T18:35:44Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mzc1MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIzMDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjowMVrOGqWntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNjoxMlrOGrJi-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mzk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#addStatementEventListener(javax.sql.StatementEventListener)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447063991", "createdAt": "2020-06-29T15:36:01Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void removeConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.removeConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addStatementEventListener(javax.sql.StatementEventListener)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODM2MA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447898360", "createdAt": "2020-06-30T18:36:12Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void removeConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.removeConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addStatementEventListener(javax.sql.StatementEventListener)\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mzk5MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIzMTE1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjoxMlrOGqWoJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjoxMlrOGqWoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NDEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#removeStatementEventListener(javax.sql.StatementEventListener)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447064101", "createdAt": "2020-06-29T15:36:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void removeConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.removeConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addStatementEventListener(javax.sql.StatementEventListener)\n+     */\n+    @Override\n+    public void addStatementEventListener(StatementEventListener listener) {\n+        this.delegate.addStatementEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeStatementEventListener(javax.sql.StatementEventListener)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIzMjIxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjoyNVrOGqWo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNjoyNVrOGqWo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NDI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.XAConnection#getXAResource()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447064274", "createdAt": "2020-06-29T15:36:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void removeConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.removeConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addStatementEventListener(javax.sql.StatementEventListener)\n+     */\n+    @Override\n+    public void addStatementEventListener(StatementEventListener listener) {\n+        this.delegate.addStatementEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeStatementEventListener(javax.sql.StatementEventListener)\n+     */\n+    @Override\n+    public void removeStatementEventListener(StatementEventListener listener) {\n+        this.delegate.removeStatementEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.XAConnection#getXAResource()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI2NjAwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0MzozNlrOGqW9oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0MzozNlrOGqW9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447069601", "createdAt": "2020-06-29T15:43:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -38,5 +40,10 @@ public void bootstrapDatabase() throws Exception {\n             derbyInit.bootstrapDb(true);\n         }\n     }\n+        \n+    @AfterSuite\n+    public void shutdownDerbyFhir() throws Exception {\n+        DerbyMaster.shutdown(DerbyInitializer.DB_NAME);\n+    }\n     ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI2ODE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0NDoxMFrOGqW_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMDo1NVrOGrOTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTk4MA==", "bodyText": "We no longer have JDBCNormXXX", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447069980", "createdAt": "2020-06-29T15:44:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -8,14 +8,16 @@\n \n import java.util.Properties;\n \n+import org.testng.annotations.AfterSuite;\n import org.testng.annotations.Test;\n \n+import com.ibm.fhir.database.utils.derby.DerbyMaster;\n import com.ibm.fhir.model.test.TestUtil;\n import com.ibm.fhir.persistence.jdbc.test.util.DerbyInitializer;\n \n /**\n- * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. This test class should run first in\n- * the suite of tests that gets run when the fhir-persistence-jdbc project is built.\n+ * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. \n+ * This test class should run first in the suite of tests that gets run when the fhir-persistence-jdbc project is built.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzQxMA==", "bodyText": "Agreed. Not used, so deleting class.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447903410", "createdAt": "2020-06-30T18:45:03Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -8,14 +8,16 @@\n \n import java.util.Properties;\n \n+import org.testng.annotations.AfterSuite;\n import org.testng.annotations.Test;\n \n+import com.ibm.fhir.database.utils.derby.DerbyMaster;\n import com.ibm.fhir.model.test.TestUtil;\n import com.ibm.fhir.persistence.jdbc.test.util.DerbyInitializer;\n \n /**\n- * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. This test class should run first in\n- * the suite of tests that gets run when the fhir-persistence-jdbc project is built.\n+ * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. \n+ * This test class should run first in the suite of tests that gets run when the fhir-persistence-jdbc project is built.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTk4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMzgyOA==", "bodyText": "JDBCNormXXX is in the comment still", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447913828", "createdAt": "2020-06-30T19:01:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -8,14 +8,16 @@\n \n import java.util.Properties;\n \n+import org.testng.annotations.AfterSuite;\n import org.testng.annotations.Test;\n \n+import com.ibm.fhir.database.utils.derby.DerbyMaster;\n import com.ibm.fhir.model.test.TestUtil;\n import com.ibm.fhir.persistence.jdbc.test.util.DerbyInitializer;\n \n /**\n- * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. This test class should run first in\n- * the suite of tests that gets run when the fhir-persistence-jdbc project is built.\n+ * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. \n+ * This test class should run first in the suite of tests that gets run when the fhir-persistence-jdbc project is built.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTk4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NjMwNg==", "bodyText": "This entire class has been deleted.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447976306", "createdAt": "2020-06-30T21:00:55Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -8,14 +8,16 @@\n \n import java.util.Properties;\n \n+import org.testng.annotations.AfterSuite;\n import org.testng.annotations.Test;\n \n+import com.ibm.fhir.database.utils.derby.DerbyMaster;\n import com.ibm.fhir.model.test.TestUtil;\n import com.ibm.fhir.persistence.jdbc.test.util.DerbyInitializer;\n \n /**\n- * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. This test class should run first in\n- * the suite of tests that gets run when the fhir-persistence-jdbc project is built.\n+ * This sole purpose of this class is to delete and redefine the Derby database used by the JDBCNormXXX testng tests. \n+ * This test class should run first in the suite of tests that gets run when the fhir-persistence-jdbc project is built.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTk4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI3NTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0NTo1MlrOGqXDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0MjoxNVrOGrJwrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MTEwNw==", "bodyText": "Love having this unit test", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447071107", "createdAt": "2020-06-29T15:45:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMTg2OA==", "bodyText": "Yeah, this really helps give confidence that the transaction adapter is doing the right thing with all the nesting that happens in our persistence layer.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447901868", "createdAt": "2020-06-30T18:42:15Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MTEwNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI4NTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/DerbyInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0ODoxMlrOGqXJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NjowNVrOGrJ5EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MjcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param reset reset the database if true\n          \n          \n            \n                 * @param reset resets the database if true", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447072705", "createdAt": "2020-06-29T15:48:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/DerbyInitializer.java", "diffHunk": "@@ -129,4 +132,22 @@ public Connection getConnection() throws SQLException {\n         connection.setAutoCommit(false);\n         return connection;\n     }\n+\n+    /**\n+     * Bootstrap the database if necessary, and get a connection provider for it\n+     * @return an {@link IConnectionProvider} configured for the FHIR Derby database\n+     * @param reset reset the database if true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAxNg==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447904016", "createdAt": "2020-06-30T18:46:05Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/DerbyInitializer.java", "diffHunk": "@@ -129,4 +132,22 @@ public Connection getConnection() throws SQLException {\n         connection.setAutoCommit(false);\n         return connection;\n     }\n+\n+    /**\n+     * Bootstrap the database if necessary, and get a connection provider for it\n+     * @return an {@link IConnectionProvider} configured for the FHIR Derby database\n+     * @param reset reset the database if true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MjcwNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI4OTUyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0OToxOFrOGqXMSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0ODoyOFrOGrJ-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MzM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447073354", "createdAt": "2020-06-29T15:49:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTQxMA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447905410", "createdAt": "2020-06-30T18:48:28Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MzM1NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI5Njk4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractSortTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1MDo1NlrOGqXQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0ODo1OVrOGrJ_og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NDUzMA==", "bodyText": "Please update the copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447074530", "createdAt": "2020-06-29T15:50:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractSortTest.java", "diffHunk": "@@ -106,11 +106,14 @@ public void createResources() throws Exception {\n     public void removeSavedResourcesAndResetTenant() throws Exception {\n         Resource[] resources = {resource1a, resource1b, resource2a, resource2b, resource3a, resource3b};\n         if (persistence.isDeleteSupported()) {\n+            if (persistence.isTransactional()) {\n+                persistence.getTransaction().begin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTY5OA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447905698", "createdAt": "2020-06-30T18:48:59Z", "author": {"login": "punktilious"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractSortTest.java", "diffHunk": "@@ -106,11 +106,14 @@ public void createResources() throws Exception {\n     public void removeSavedResourcesAndResetTenant() throws Exception {\n         Resource[] resources = {resource1a, resource1b, resource2a, resource2b, resource3a, resource3b};\n         if (persistence.isDeleteSupported()) {\n+            if (persistence.isTransactional()) {\n+                persistence.getTransaction().begin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NDUzMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMwMTE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPagingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1MTo1MlrOGqXTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0OTozNVrOGrKBXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NTE3Ng==", "bodyText": "Please update the copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447075176", "createdAt": "2020-06-29T15:51:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPagingTest.java", "diffHunk": "@@ -79,12 +79,12 @@ public void createResources() throws Exception {\n     public void removeSavedResourcesAndResetTenant() throws Exception {\n         Resource[] resources = {resource1, resource2, resource3};\n         if (persistence.isDeleteSupported()) {\n+            // as this is AfterClass, we need to manually start/end the transaction\n+            startTrx();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjE0MQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447906141", "createdAt": "2020-06-30T18:49:35Z", "author": {"login": "punktilious"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPagingTest.java", "diffHunk": "@@ -79,12 +79,12 @@ public void createResources() throws Exception {\n     public void removeSavedResourcesAndResetTenant() throws Exception {\n         Resource[] resources = {resource1, resource2, resource3};\n         if (persistence.isDeleteSupported()) {\n+            // as this is AfterClass, we need to manually start/end the transaction\n+            startTrx();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NTE3Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMxNTE5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NTowOFrOGqXb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MDozN1rOGrKDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NzM2NA==", "bodyText": "Please update JDBCSearchNearTest or create a back log issue to update and remove commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447077364", "createdAt": "2020-06-29T15:55:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -25,44 +41,37 @@\n     void begin() throws FHIRPersistenceException;\n \n     /**\n-     * Commit the current thread's transaction.\n+     * End the current thread's transaction. If setRollbackOnly has been called,\n+     * then roll back the transaction instead.\n+     * This call only affects the current transaction if this object actually\n+     * started the transaction (i.e. is the outermost instance of a transaction).\n      * @throws Exception\n      */\n-    void commit() throws FHIRPersistenceException;\n-\n-\n-    /**\n-     * Roll back the current thread's transaction.\n-     * @throws Exception\n-     */\n-    void rollback() throws FHIRPersistenceException;\n+    void end() throws FHIRPersistenceException;\n \n     /**\n      * Modify the transaction associated with the current thread such that the only possible outcome of the transaction\n      * is to roll back the transaction.\n      * @throws FHIRPersistenceException\n      */\n     void setRollbackOnly() throws FHIRPersistenceException;\n+    \n \n     /**\n-     * Enroll in an existing transaction.\n-     *\n-     * <p>Enrolling in an existing transaction is an alternative to beginning a new transaction. Calling this method\n-     * gives implementations a chance to create necessary resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Commit the transaction (if we started it).\n+     * Use {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void enroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void commit() throws FHIRPersistenceException { end(); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjc0OA==", "bodyText": "Creating a backlog issue.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447906748", "createdAt": "2020-06-30T18:50:37Z", "author": {"login": "punktilious"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -25,44 +41,37 @@\n     void begin() throws FHIRPersistenceException;\n \n     /**\n-     * Commit the current thread's transaction.\n+     * End the current thread's transaction. If setRollbackOnly has been called,\n+     * then roll back the transaction instead.\n+     * This call only affects the current transaction if this object actually\n+     * started the transaction (i.e. is the outermost instance of a transaction).\n      * @throws Exception\n      */\n-    void commit() throws FHIRPersistenceException;\n-\n-\n-    /**\n-     * Roll back the current thread's transaction.\n-     * @throws Exception\n-     */\n-    void rollback() throws FHIRPersistenceException;\n+    void end() throws FHIRPersistenceException;\n \n     /**\n      * Modify the transaction associated with the current thread such that the only possible outcome of the transaction\n      * is to roll back the transaction.\n      * @throws FHIRPersistenceException\n      */\n     void setRollbackOnly() throws FHIRPersistenceException;\n+    \n \n     /**\n-     * Enroll in an existing transaction.\n-     *\n-     * <p>Enrolling in an existing transaction is an alternative to beginning a new transaction. Calling this method\n-     * gives implementations a chance to create necessary resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Commit the transaction (if we started it).\n+     * Use {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void enroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void commit() throws FHIRPersistenceException { end(); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NzM2NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMyMDM3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NjoxNlrOGqXfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MToyMVrOGrKFfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3ODE2OA==", "bodyText": "I think this should be removed or a backlog issue to track the removal after Deprecation complete", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447078168", "createdAt": "2020-06-29T15:56:16Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -25,44 +41,37 @@\n     void begin() throws FHIRPersistenceException;\n \n     /**\n-     * Commit the current thread's transaction.\n+     * End the current thread's transaction. If setRollbackOnly has been called,\n+     * then roll back the transaction instead.\n+     * This call only affects the current transaction if this object actually\n+     * started the transaction (i.e. is the outermost instance of a transaction).\n      * @throws Exception\n      */\n-    void commit() throws FHIRPersistenceException;\n-\n-\n-    /**\n-     * Roll back the current thread's transaction.\n-     * @throws Exception\n-     */\n-    void rollback() throws FHIRPersistenceException;\n+    void end() throws FHIRPersistenceException;\n \n     /**\n      * Modify the transaction associated with the current thread such that the only possible outcome of the transaction\n      * is to roll back the transaction.\n      * @throws FHIRPersistenceException\n      */\n     void setRollbackOnly() throws FHIRPersistenceException;\n+    \n \n     /**\n-     * Enroll in an existing transaction.\n-     *\n-     * <p>Enrolling in an existing transaction is an alternative to beginning a new transaction. Calling this method\n-     * gives implementations a chance to create necessary resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Commit the transaction (if we started it).\n+     * Use {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void enroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void commit() throws FHIRPersistenceException { end(); }\n \n     /**\n-     * Unenroll from the existing transaction.\n-     *\n-     * <p>Unenrolling from an existing transaction is an alternative to committing or rolling back the transaction. Calling\n-     * this method gives implementations a chance to release resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Request rollback. Will only perform the rollback if this\n+     * instance actually started the transaction\n+     * Use {@link #setRollbackOnly()} and {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void unenroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void rollback() throws FHIRPersistenceException { setRollbackOnly(); end(); }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzE5OA==", "bodyText": "Same backlog issue as commit()", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447907198", "createdAt": "2020-06-30T18:51:21Z", "author": {"login": "punktilious"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -25,44 +41,37 @@\n     void begin() throws FHIRPersistenceException;\n \n     /**\n-     * Commit the current thread's transaction.\n+     * End the current thread's transaction. If setRollbackOnly has been called,\n+     * then roll back the transaction instead.\n+     * This call only affects the current transaction if this object actually\n+     * started the transaction (i.e. is the outermost instance of a transaction).\n      * @throws Exception\n      */\n-    void commit() throws FHIRPersistenceException;\n-\n-\n-    /**\n-     * Roll back the current thread's transaction.\n-     * @throws Exception\n-     */\n-    void rollback() throws FHIRPersistenceException;\n+    void end() throws FHIRPersistenceException;\n \n     /**\n      * Modify the transaction associated with the current thread such that the only possible outcome of the transaction\n      * is to roll back the transaction.\n      * @throws FHIRPersistenceException\n      */\n     void setRollbackOnly() throws FHIRPersistenceException;\n+    \n \n     /**\n-     * Enroll in an existing transaction.\n-     *\n-     * <p>Enrolling in an existing transaction is an alternative to beginning a new transaction. Calling this method\n-     * gives implementations a chance to create necessary resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Commit the transaction (if we started it).\n+     * Use {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void enroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void commit() throws FHIRPersistenceException { end(); }\n \n     /**\n-     * Unenroll from the existing transaction.\n-     *\n-     * <p>Unenrolling from an existing transaction is an alternative to committing or rolling back the transaction. Calling\n-     * this method gives implementations a chance to release resources associated with a given unit of work when that\n-     * unit of work is performed under an existing user-managed transaction.\n-     *\n+     * Request rollback. Will only perform the rollback if this\n+     * instance actually started the transaction\n+     * Use {@link #setRollbackOnly()} and {@link #end()} instead.\n      * @throws FHIRPersistenceException\n      */\n-    void unenroll() throws FHIRPersistenceException;\n+    @Deprecated\n+    default void rollback() throws FHIRPersistenceException { setRollbackOnly(); end(); }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3ODE2OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMzNjIxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPersistenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1OTo1NFrOGqXo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MjowM1rOGrKG9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MDY5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (Throwable t) {\n          \n          \n            \n                    } catch (Throwable t) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447080690", "createdAt": "2020-06-29T15:59:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPersistenceTest.java", "diffHunk": "@@ -155,9 +170,16 @@ public void tearDown() throws Exception {\n             searchContext.setPageSize(maxPageSize);\n         }\n         FHIRPersistenceContext persistenceContext = getPersistenceContextForSearch(searchContext);\n-        MultiResourceResult<Resource> result = persistence.search(persistenceContext, resourceType);\n-        assertNotNull(result.getResource());\n-        return result;\n+        \n+        try {\n+            MultiResourceResult<Resource> result = persistence.search(persistenceContext, resourceType);\n+            assertNotNull(result.getResource());\n+            return result;\n+        }\n+        catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzU3Mw==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447907573", "createdAt": "2020-06-30T18:52:03Z", "author": {"login": "punktilious"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/common/AbstractPersistenceTest.java", "diffHunk": "@@ -155,9 +170,16 @@ public void tearDown() throws Exception {\n             searchContext.setPageSize(maxPageSize);\n         }\n         FHIRPersistenceContext persistenceContext = getPersistenceContextForSearch(searchContext);\n-        MultiResourceResult<Resource> result = persistence.search(persistenceContext, resourceType);\n-        assertNotNull(result.getResource());\n-        return result;\n+        \n+        try {\n+            MultiResourceResult<Resource> result = persistence.search(persistenceContext, resourceType);\n+            assertNotNull(result.getResource());\n+            return result;\n+        }\n+        catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MDY5MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY0NjIzOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoxNzo1NlrOGqamAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MzoxMVrOGrKJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTA4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447129089", "createdAt": "2020-06-29T17:17:56Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -69,6 +70,8 @@\n     public static final String FHIR_SERVER_INIT_COMPLETE = \"com.ibm.fhir.webappInitComplete\";\n     private static FHIRNotificationKafkaPublisher kafkaPublisher = null;\n     private static FHIRNotificationNATSPublisher natsPublisher = null;\n+    private static final String TXN_JNDI_NAME = \"java:comp/UserTransaction\";\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwODI4NQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447908285", "createdAt": "2020-06-30T18:53:11Z", "author": {"login": "punktilious"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -69,6 +70,8 @@\n     public static final String FHIR_SERVER_INIT_COMPLETE = \"com.ibm.fhir.webappInitComplete\";\n     private static FHIRNotificationKafkaPublisher kafkaPublisher = null;\n     private static FHIRNotificationNATSPublisher natsPublisher = null;\n+    private static final String TXN_JNDI_NAME = \"java:comp/UserTransaction\";\n+\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTA4OQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY2MzQ2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/DerbyMigrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyMzowNFrOGqaxJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NDozMlrOGrKNhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTk0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // the translator we use to handle Derby syntax\n          \n          \n            \n                // private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447131943", "createdAt": "2020-06-29T17:23:04Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/DerbyMigrationTest.java", "diffHunk": "@@ -42,6 +48,10 @@\n     private static final String SCHEMA_NAME = \"FHIRDATA\";\n     private static final String ADMIN_SCHEMA_NAME = \"FHIR_ADMIN\";\n     private static final String OAUTH_SCHEMANAME = \"FHIR_OAUTH\";\n+    \n+    // the translator we use to handle Derby syntax\n+    // private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwOTI1NA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447909254", "createdAt": "2020-06-30T18:54:32Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/DerbyMigrationTest.java", "diffHunk": "@@ -42,6 +48,10 @@\n     private static final String SCHEMA_NAME = \"FHIRDATA\";\n     private static final String ADMIN_SCHEMA_NAME = \"FHIR_ADMIN\";\n     private static final String OAUTH_SCHEMANAME = \"FHIR_OAUTH\";\n+    \n+    // the translator we use to handle Derby syntax\n+    // private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTk0Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY3Mzk3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/DerbyMigrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNTo0NlrOGqa3dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyNTo0NlrOGqa3dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMzU1OA==", "bodyText": "@lmsurpre can you review this part? I think you intended and I'd like to defer to you here.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447133558", "createdAt": "2020-06-29T17:25:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/DerbyMigrationTest.java", "diffHunk": "@@ -52,86 +62,121 @@ protected void setUp() throws SecurityException, IOException\n \n     @Test\n     public void testMigrateFhirSchema() throws Exception {\n+        // The schema for each resource is the same, so we only need to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYzNzM0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NToyNlrOGrJ3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NjozMVrOGrKTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param c the new connection\n          \n          \n            \n                 * @param connection the new connection", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447903677", "createdAt": "2020-06-30T18:45:26Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDY5Mw==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447910693", "createdAt": "2020-06-30T18:56:31Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzY3Nw=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYzNzk3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NTozNlrOGrJ4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMzo0OVrOGrK4tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzc3NA==", "bodyText": "javadoc does not agree", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447903774", "createdAt": "2020-06-30T18:45:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMDMwOA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447920308", "createdAt": "2020-06-30T19:13:49Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzc3NA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY0Nzk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0ODoyNFrOGrJ-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMToxOFrOGrKzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTM3MA==", "bodyText": "This is in Javadoc, I suggest a // after this comment or inside the method", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447905370", "createdAt": "2020-06-30T18:48:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ *           Currently not used - just needs some additional integration\n+ *           with the fhir-server-configuration to be supported.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceBaseName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        this.flavor = createFlavor();\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection = null;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINEST)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+        \n+        // the dsId/tenantId specific datasource we need to locate\n+        DataSource datasource;\n+        \n+        // Resources can be routed to different databases using the dsId currently\n+        // set on the context.\n+        String tenantId = FHIRRequestContext.get().getTenantId();\n+        String dsId = FHIRRequestContext.get().getDataStoreId();\n+        \n+        // this is the important bit...how we name our actual datasources\n+        final String datasourceName = datasourceBaseName + tenantId + \"_\" + dsId;\n+        \n+        // Note: we don't need any synchronization around ConcurrentHashMap, but that\n+        // doesn't change the fact that we may look up the datasource and put it into\n+        // the map more than once. That's fine. There aren't any integrity issues, just\n+        // the chance of doing more work than necessary a single time, but we avoid the\n+        // need for any synchronization. We cache locally, because we've found that JNDI\n+        // lookups can become a bottleneck with high concurrency\n+        datasource = datasourceMap.get(datasourceName);\n+        if (datasource == null) {\n+            // cache miss\n+            try {\n+                InitialContext ctxt = new InitialContext();\n+                \n+                datasource = (DataSource) ctxt.lookup(datasourceName);\n+                datasourceMap.put(datasourceName, datasource);\n+            } catch (Throwable e) {\n+                // don't emit secrets in exceptions\n+                FHIRPersistenceDBConnectException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+                throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+            } finally {\n+                if (log.isLoggable(Level.FINEST)) {\n+                    log.exiting(CLASSNAME, METHODNAME);\n+                }\n+            }\n+        }\n+        \n+        long start = System.nanoTime();\n+        if (log.isLoggable(Level.FINE)) {\n+            log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+        }\n+\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        try {\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                long deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        return this.flavor;\n+    }\n+\n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * TODO duplicate code in FHIRDbConnectionStrategyBase. Refactor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxODk2NA==", "bodyText": "Moved comment and included reference to issue-916.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447918964", "createdAt": "2020-06-30T19:11:18Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ *           Currently not used - just needs some additional integration\n+ *           with the fhir-server-configuration to be supported.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceBaseName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        this.flavor = createFlavor();\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection = null;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINEST)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+        \n+        // the dsId/tenantId specific datasource we need to locate\n+        DataSource datasource;\n+        \n+        // Resources can be routed to different databases using the dsId currently\n+        // set on the context.\n+        String tenantId = FHIRRequestContext.get().getTenantId();\n+        String dsId = FHIRRequestContext.get().getDataStoreId();\n+        \n+        // this is the important bit...how we name our actual datasources\n+        final String datasourceName = datasourceBaseName + tenantId + \"_\" + dsId;\n+        \n+        // Note: we don't need any synchronization around ConcurrentHashMap, but that\n+        // doesn't change the fact that we may look up the datasource and put it into\n+        // the map more than once. That's fine. There aren't any integrity issues, just\n+        // the chance of doing more work than necessary a single time, but we avoid the\n+        // need for any synchronization. We cache locally, because we've found that JNDI\n+        // lookups can become a bottleneck with high concurrency\n+        datasource = datasourceMap.get(datasourceName);\n+        if (datasource == null) {\n+            // cache miss\n+            try {\n+                InitialContext ctxt = new InitialContext();\n+                \n+                datasource = (DataSource) ctxt.lookup(datasourceName);\n+                datasourceMap.put(datasourceName, datasource);\n+            } catch (Throwable e) {\n+                // don't emit secrets in exceptions\n+                FHIRPersistenceDBConnectException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+                throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+            } finally {\n+                if (log.isLoggable(Level.FINEST)) {\n+                    log.exiting(CLASSNAME, METHODNAME);\n+                }\n+            }\n+        }\n+        \n+        long start = System.nanoTime();\n+        if (log.isLoggable(Level.FINE)) {\n+            log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+        }\n+\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        try {\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                long deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        return this.flavor;\n+    }\n+\n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * TODO duplicate code in FHIRDbConnectionStrategyBase. Refactor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTM3MA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY1ODY5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetTenantAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MTowMlrOGrKEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxNDoxNVrOGrK5pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447906999", "createdAt": "2020-06-30T18:51:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetTenantAction.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n+import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n+import com.ibm.fhir.database.utils.api.BadTenantNameException;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Adapter;\n+import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Set the tenant variable in the session (part of Db2 multi-tenancy\n+ * support). This needs to be executed at the beginning of an\n+ * interaction with a database connection, before any other\n+ * DML/SQL.\n+ */\n+public class SetTenantAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetTenantAction.class.getName());\n+    \n+    // Used to indicate the default behavior of a datastore as multitenant.\n+    public static final List<String> DATASTORE_REQUIRES_ROW_PERMISSIONS = Arrays.asList(\"db2\");\n+\n+    /**\n+     * Default public constructor. No next action, so this will be the last action applied\n+     */\n+    public SetTenantAction() {\n+        super();\n+    }\n+    \n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public SetTenantAction(Action next) {\n+        super(next);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMDU1MA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447920550", "createdAt": "2020-06-30T19:14:15Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetTenantAction.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n+import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n+import com.ibm.fhir.database.utils.api.BadTenantNameException;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Adapter;\n+import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Set the tenant variable in the session (part of Db2 multi-tenancy\n+ * support). This needs to be executed at the beginning of an\n+ * interaction with a database connection, before any other\n+ * DML/SQL.\n+ */\n+public class SetTenantAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetTenantAction.class.getName());\n+    \n+    // Used to indicate the default behavior of a datastore as multitenant.\n+    public static final List<String> DATASTORE_REQUIRES_ROW_PERMISSIONS = Arrays.asList(\"db2\");\n+\n+    /**\n+     * Default public constructor. No next action, so this will be the last action applied\n+     */\n+    public SetTenantAction() {\n+        super();\n+    }\n+    \n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public SetTenantAction(Action next) {\n+        super(next);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjk5OQ=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4NDUxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NjoyNVrOGrKS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NjozN1rOGrMP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2018, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2018,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447910632", "createdAt": "2020-06-30T18:56:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MjY0Mw==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447942643", "createdAt": "2020-06-30T19:56:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchReferenceTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDYzMg=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4NTMxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NjozOFrOGrKTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1Njo0NlrOGrMQOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDc1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2018, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2018,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447910757", "createdAt": "2020-06-30T18:56:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MjcxNQ==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447942715", "createdAt": "2020-06-30T19:56:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchStringTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDc1Nw=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4NjA2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Njo0OVrOGrKTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NzowMlrOGrMQzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2018, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2018,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447910858", "createdAt": "2020-06-30T18:56:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0Mjg2Mw==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447942863", "createdAt": "2020-06-30T19:57:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchTokenTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDg1OA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4NzUyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NzowM1rOGrKUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NzoyMVrOGrMRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2018, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2018,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911046", "createdAt": "2020-06-30T18:57:03Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MzAyNg==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447943026", "createdAt": "2020-06-30T19:57:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchURITest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTA0Ng=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4ODUyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NzoxNlrOGrKVDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NzoyOVrOGrMRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTE4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2017, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2017,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911180", "createdAt": "2020-06-30T18:57:16Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MzEwNA==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447943104", "createdAt": "2020-06-30T19:57:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCWholeSystemSearchTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTE4MA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5MDIyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NzozOVrOGrKWBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NzozOVrOGrMSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2017, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2017,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911428", "createdAt": "2020-06-30T18:57:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MzE3OA==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447943178", "createdAt": "2020-06-30T19:57:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTQyOA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5MTEyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Nzo1NVrOGrKWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyNDowNlrOGrLNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTU3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911572", "createdAt": "2020-06-30T18:57:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNTY5MA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447925690", "createdAt": "2020-06-30T19:24:06Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCCompartmentTest.java", "diffHunk": "@@ -29,12 +33,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb(false);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n     \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n     }\n+\n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTU3Mg=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5MTc5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1ODoxMVrOGrKXBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1Nzo0NlrOGrMSRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2017, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2017,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911685", "createdAt": "2020-06-30T18:58:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MzIzOA==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447943238", "createdAt": "2020-06-30T19:57:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCDeleteTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTY4NQ=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5MzAzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1ODozNVrOGrKXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1Nzo1OVrOGrMSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2018, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2018,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447911885", "createdAt": "2020-06-30T18:58:35Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MzM0Nw==", "bodyText": "agreed to ignore", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447943347", "createdAt": "2020-06-30T19:57:59Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCMultiResourceTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018,2019\n+ * (C) Copyright IBM Corp. 2018, 2019, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTg4NQ=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5Mzc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1ODo1MFrOGrKYTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1ODo1MFrOGrKYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2017, 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2017,2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447912012", "createdAt": "2020-06-30T18:58:50Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/JDBCPagingTest.java", "diffHunk": "@@ -1,13 +1,19 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2019\n+ * (C) Copyright IBM Corp. 2017, 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY5ODQ5OnYy", "diffSide": "RIGHT", "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowMDowOVrOGrKbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyMjoxMFrOGrLJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjc4MA==", "bodyText": "This is no longer used", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447912780", "createdAt": "2020-06-30T19:00:09Z", "author": {"login": "prb112"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -19,12 +20,15 @@\n import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.model.type.code.IssueSeverity;\n import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n import com.ibm.fhir.server.operation.spi.AbstractOperation;\n import com.ibm.fhir.server.operation.spi.FHIROperationContext;\n import com.ibm.fhir.server.operation.spi.FHIRResourceHelpers;\n import com.ibm.fhir.server.util.FHIROperationUtil;\n \n public class HealthcheckOperation extends AbstractOperation {\n+    private static final Logger logger = Logger.getLogger(HealthcheckOperation.class.getName());\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDYxOQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447924619", "createdAt": "2020-06-30T19:22:10Z", "author": {"login": "punktilious"}, "path": "operation/fhir-operation-healthcheck/src/main/java/com/ibm/fhir/operation/healthcheck/HealthcheckOperation.java", "diffHunk": "@@ -19,12 +20,15 @@\n import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.model.type.code.IssueSeverity;\n import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n import com.ibm.fhir.server.operation.spi.AbstractOperation;\n import com.ibm.fhir.server.operation.spi.FHIROperationContext;\n import com.ibm.fhir.server.operation.spi.FHIRResourceHelpers;\n import com.ibm.fhir.server.util.FHIROperationUtil;\n \n public class HealthcheckOperation extends AbstractOperation {\n+    private static final Logger logger = Logger.getLogger(HealthcheckOperation.class.getName());\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjc4MA=="}, "originalCommit": {"oid": "79399381a28991fd477c8d9064b82da9c3282b4f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MzU3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/ParameterDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MDo1NFrOGp5UHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MDo1NFrOGp5UHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzgzNw==", "bodyText": "Please update the copyright year to 2017, 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583837", "createdAt": "2020-06-28T00:40:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/ParameterDAO.java", "diffHunk": "@@ -6,7 +6,6 @@\n \n package com.ibm.fhir.persistence.jdbc.dao.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MzcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MToyMVrOGp5ULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozMTowMlrOGrNWXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1NQ==", "bodyText": "Why have the constants if these still exist?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583855", "createdAt": "2020-06-28T00:41:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNzYwMw==", "bodyText": "should be refactored...although this is now probably dead code, so some cleanup is required. Will create a separate issue.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447027603", "createdAt": "2020-06-29T14:46:03Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MDY2OQ==", "bodyText": "issue #1305 to track.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447960669", "createdAt": "2020-06-30T20:31:02Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NDIzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/FHIRDbDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MjoxNFrOGp5UYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozMjoxMFrOGrNYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzkwNw==", "bodyText": "I don't think we. should reference a date (reference a tag) 4.3.0", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583907", "createdAt": "2020-06-28T00:42:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/FHIRDbDAOImpl.java", "diffHunk": "@@ -7,96 +7,86 @@\n package com.ibm.fhir.persistence.jdbc.dao.impl;\n \n import java.sql.Connection;\n-import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import com.ibm.fhir.config.FHIRConfigHelper;\n-import com.ibm.fhir.config.FHIRConfiguration;\n-import com.ibm.fhir.config.FHIRRequestContext;\n-import com.ibm.fhir.config.PropertyGroup;\n-import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n-import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n-import com.ibm.fhir.database.utils.api.BadTenantNameException;\n-import com.ibm.fhir.database.utils.api.IConnectionProvider;\n-import com.ibm.fhir.database.utils.common.JdbcTarget;\n-import com.ibm.fhir.database.utils.db2.Db2Adapter;\n-import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n-import com.ibm.fhir.exception.FHIRException;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n import com.ibm.fhir.model.type.code.IssueType;\n import com.ibm.fhir.model.util.FHIRUtil;\n import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n import com.ibm.fhir.persistence.jdbc.JDBCConstants;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n import com.ibm.fhir.persistence.jdbc.dto.Resource;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n /**\n- * This class is a root Data Access Object for managing JDBC access to the FHIR database. It contains common functions\n- * for managing connections, closing used\n- * JDBC resources, and running database queries.\n+ * This class is a root Data Access Object for managing JDBC access to the FHIR database.\n+ * As of 2020-06-16, connection handling is factored out of the DAO and is instead the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MTIzNg==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447961236", "createdAt": "2020-06-30T20:32:10Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/FHIRDbDAOImpl.java", "diffHunk": "@@ -7,96 +7,86 @@\n package com.ibm.fhir.persistence.jdbc.dao.impl;\n \n import java.sql.Connection;\n-import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import com.ibm.fhir.config.FHIRConfigHelper;\n-import com.ibm.fhir.config.FHIRConfiguration;\n-import com.ibm.fhir.config.FHIRRequestContext;\n-import com.ibm.fhir.config.PropertyGroup;\n-import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n-import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n-import com.ibm.fhir.database.utils.api.BadTenantNameException;\n-import com.ibm.fhir.database.utils.api.IConnectionProvider;\n-import com.ibm.fhir.database.utils.common.JdbcTarget;\n-import com.ibm.fhir.database.utils.db2.Db2Adapter;\n-import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n-import com.ibm.fhir.exception.FHIRException;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n import com.ibm.fhir.model.type.code.IssueType;\n import com.ibm.fhir.model.util.FHIRUtil;\n import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n import com.ibm.fhir.persistence.jdbc.JDBCConstants;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n import com.ibm.fhir.persistence.jdbc.dto.Resource;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n /**\n- * This class is a root Data Access Object for managing JDBC access to the FHIR database. It contains common functions\n- * for managing connections, closing used\n- * JDBC resources, and running database queries.\n+ * This class is a root Data Access Object for managing JDBC access to the FHIR database.\n+ * As of 2020-06-16, connection handling is factored out of the DAO and is instead the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzkwNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NDcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/FHIRDbDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MzoxMVrOGp5UmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MzoxMVrOGp5UmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzk2MQ==", "bodyText": "Is this method necessary?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583961", "createdAt": "2020-06-28T00:43:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/FHIRDbDAOImpl.java", "diffHunk": "@@ -574,29 +338,9 @@ protected Resource createDTO(ResultSet resultSet) throws FHIRPersistenceDataAcce\n         return null;\n     }\n \n-    private Properties getDbProps() {\n-        return dbProps;\n-    }\n-\n-    private void setDbProps(Properties dbProps) {\n-        this.dbProps = dbProps;\n-    }\n-\n-    @Override\n-    public Connection getExternalConnection() {\n-        return externalConnection;\n-    }\n-\n-    @Override\n-    public void setExternalConnection(Connection externalConnection) {\n-        this.externalConnection = externalConnection;\n-    }\n-\n     @Override\n-    public boolean isDb2Database() throws FHIRPersistenceDBConnectException, SQLException {\n-        String dbUrl = this.getConnection().getMetaData().getURL();\n-        dbUrl = dbUrl.toLowerCase();\n-        return dbUrl.contains(\"db2\");\n+    public boolean isDb2Database() {\n+        return this.flavor.getType() == DbType.DB2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 485}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NTUyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0NDo1MlrOGp5U8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1NjoyNVrOGqU4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDA0OQ==", "bodyText": "What does this mean? Where is the error thrown now>?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584049", "createdAt": "2020-06-28T00:44:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "diffHunk": "@@ -223,18 +234,19 @@ protected Resource createDTO(ResultSet resultSet) throws FHIRPersistenceDataAcce\n                 }\n             } else {\n                 stmtString = String.format(SQL_HISTORY, resourceType, resourceType);\n-                if (this.isDb2Database()) {\n+                if (isDb2Database()) {\n                     stmtString = stmtString + DB2_PAGINATION_PARMS;\n                     resources = this.runQuery(stmtString, logicalId, maxResults, offset);\n                 } else {\n                     stmtString = stmtString + DERBY_PAGINATION_PARMS;\n                     resources = this.runQuery(stmtString, logicalId, offset, maxResults);\n                 }\n             }\n-        } catch (SQLException e) {\n-            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure running history query\");\n-            String errMsg = \"Failure running history query: \" + stmtString;\n-            throw severe(log, fx, errMsg, e);\n+//        } \n+//        catch (SQLException e) {\n+//            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure running history query\");\n+//            String errMsg = \"Failure running history query: \" + stmtString;\n+//            throw severe(log, fx, errMsg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNTM5Ng==", "bodyText": "This should be removed. The block no longer throws SQLException, so this particular catch is no longer required.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447035396", "createdAt": "2020-06-29T14:56:25Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceDAOImpl.java", "diffHunk": "@@ -223,18 +234,19 @@ protected Resource createDTO(ResultSet resultSet) throws FHIRPersistenceDataAcce\n                 }\n             } else {\n                 stmtString = String.format(SQL_HISTORY, resourceType, resourceType);\n-                if (this.isDb2Database()) {\n+                if (isDb2Database()) {\n                     stmtString = stmtString + DB2_PAGINATION_PARMS;\n                     resources = this.runQuery(stmtString, logicalId, maxResults, offset);\n                 } else {\n                     stmtString = stmtString + DERBY_PAGINATION_PARMS;\n                     resources = this.runQuery(stmtString, logicalId, offset, maxResults);\n                 }\n             }\n-        } catch (SQLException e) {\n-            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure running history query\");\n-            String errMsg = \"Failure running history query: \" + stmtString;\n-            throw severe(log, fx, errMsg, e);\n+//        } \n+//        catch (SQLException e) {\n+//            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure running history query\");\n+//            String errMsg = \"Failure running history query: \" + stmtString;\n+//            throw severe(log, fx, errMsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDA0OQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NjQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0NjoxMVrOGp5VVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozNDowMVrOGrNcPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDE1MQ==", "bodyText": "Do we need this ?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584151", "createdAt": "2020-06-28T00:46:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -154,61 +169,98 @@ public FHIRPersistenceJDBCImpl() throws Exception {\n         }\n         this.updateCreateEnabled = fhirConfig.getBooleanProperty(PROPERTY_UPDATE_CREATE_ENABLED, Boolean.TRUE);\n         this.userTransaction = retrieveUserTransaction(TXN_JNDI_NAME);\n+        \n+        if (userTransaction != null) {\n+            this.trxSynchRegistry = getTrxSynchRegistry();\n+        } else {\n+            this.trxSynchRegistry = null;\n+        }\n \n         ParameterNamesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_PARAMETER_NAMES_CACHE,\n                                        Boolean.TRUE));\n         CodeSystemsCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_CODE_SYSTEMS_CACHE,\n                                     Boolean.TRUE));\n         ResourceTypesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE,\n                                       Boolean.TRUE));\n-\n-        sharedConnection = this.createConnection();\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(sharedConnection, this.getTrxSynchRegistry());\n-        this.parameterDao = new ParameterDAOImpl(this.getTrxSynchRegistry());\n+        \n+        //this.connectionStrategy = new FHIRDbTenantDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MjE3NA==", "bodyText": "I've removed for now, because we'll need something a little more sophisticated when we implement the simple datasource feature.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447962174", "createdAt": "2020-06-30T20:34:01Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -154,61 +169,98 @@ public FHIRPersistenceJDBCImpl() throws Exception {\n         }\n         this.updateCreateEnabled = fhirConfig.getBooleanProperty(PROPERTY_UPDATE_CREATE_ENABLED, Boolean.TRUE);\n         this.userTransaction = retrieveUserTransaction(TXN_JNDI_NAME);\n+        \n+        if (userTransaction != null) {\n+            this.trxSynchRegistry = getTrxSynchRegistry();\n+        } else {\n+            this.trxSynchRegistry = null;\n+        }\n \n         ParameterNamesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_PARAMETER_NAMES_CACHE,\n                                        Boolean.TRUE));\n         CodeSystemsCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_CODE_SYSTEMS_CACHE,\n                                     Boolean.TRUE));\n         ResourceTypesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE,\n                                       Boolean.TRUE));\n-\n-        sharedConnection = this.createConnection();\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(sharedConnection, this.getTrxSynchRegistry());\n-        this.parameterDao = new ParameterDAOImpl(this.getTrxSynchRegistry());\n+        \n+        //this.connectionStrategy = new FHIRDbTenantDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDE1MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3Njg0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0NjozOFrOGp5Vfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozNTo1NVrOGrNf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDE5MQ==", "bodyText": "Do we need this?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584191", "createdAt": "2020-06-28T00:46:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -154,61 +169,98 @@ public FHIRPersistenceJDBCImpl() throws Exception {\n         }\n         this.updateCreateEnabled = fhirConfig.getBooleanProperty(PROPERTY_UPDATE_CREATE_ENABLED, Boolean.TRUE);\n         this.userTransaction = retrieveUserTransaction(TXN_JNDI_NAME);\n+        \n+        if (userTransaction != null) {\n+            this.trxSynchRegistry = getTrxSynchRegistry();\n+        } else {\n+            this.trxSynchRegistry = null;\n+        }\n \n         ParameterNamesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_PARAMETER_NAMES_CACHE,\n                                        Boolean.TRUE));\n         CodeSystemsCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_CODE_SYSTEMS_CACHE,\n                                     Boolean.TRUE));\n         ResourceTypesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE,\n                                       Boolean.TRUE));\n-\n-        sharedConnection = this.createConnection();\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(sharedConnection, this.getTrxSynchRegistry());\n-        this.parameterDao = new ParameterDAOImpl(this.getTrxSynchRegistry());\n+        \n+        //this.connectionStrategy = new FHIRDbTenantDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());\n+        \n+        // Set up the connection strategy for use within a JEE container. The actions\n+        // are processed the first time a connection is established to a particular tenant/datasource.\n+        this.schemaNameSupplier = new SchemaNameImpl(this);\n+        this.connectionStrategy = new FHIRDbProxyDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());\n+        this.transactionAdapter = new FHIRUserTransactionAdapter(userTransaction);\n \n         log.exiting(CLASSNAME, METHODNAME);\n     }\n-\n+    \n     /**\n-     * Constructor for use when running standalone, outside of any web container.\n+     * Constructor for use when running standalone, outside of any web container. The\n+     * IConnectionProvider should be a pooling implementation which supports an\n+     * ITransactionProvider.\n+     * \n+     * @implNote This constructor is defined to simplify unit-tests\n      * @throws Exception\n      */\n-    public FHIRPersistenceJDBCImpl(Properties configProps) throws Exception {\n-        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties)\";\n+    public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) throws Exception {\n+        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties, IConnectionProvider)\";\n         log.entering(CLASSNAME, METHODNAME);\n \n         this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n \n-        FHIRDbDAO dao = new FHIRDbDAOImpl(configProps);\n+        // not running inside a JEE container\n+        this.trxSynchRegistry = null;\n \n-        this.setBaseDao(dao);\n-        this.setManagedConnection(this.getBaseDao().getConnection());\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(this.getManagedConnection());\n-        this.parameterDao = new ParameterDAOImpl(this.getManagedConnection());\n+        // use the schema name from the configProps, or the connection.getSchema if we have to\n+        this.schemaNameSupplier = new SchemaNameImpl(new SchemaNameFromProps(configProps));\n+        \n+        // Obtain connections from the IConnectionProvider (typically used in Derby-based test-cases)\n+        this.connectionStrategy = new FHIRDbTestConnectionStrategy(cp, buildActionChain());\n+        \n+        // For unit tests (outside of JEE), we also need our own mechanism for handling transactions\n+        this.transactionAdapter = new FHIRTestTransactionAdapter(cp);\n \n         log.exiting(CLASSNAME, METHODNAME);\n     }\n+    \n \n     /**\n      * Constructor for use when running standalone, outside of any web container.\n      * @throws Exception\n      */\n-    public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) throws Exception {\n-        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties, IConnectionProvider)\";\n-        log.entering(CLASSNAME, METHODNAME);\n-\n-        this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n-\n-        FHIRDbDAO dao = new FHIRDbDAOImpl(cp.getConnection());\n-\n-        this.setBaseDao(dao);\n-        this.setManagedConnection(this.getBaseDao().getConnection());\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(this.getManagedConnection());\n-        this.parameterDao = new ParameterDAOImpl(this.getManagedConnection());\n-\n-        log.exiting(CLASSNAME, METHODNAME);\n+//    @Deprecated\n+//    public FHIRPersistenceJDBCImpl(Properties configProps) throws Exception {\n+//        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties)\";\n+//        log.entering(CLASSNAME, METHODNAME);\n+//\n+//        this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n+//\n+//        // not running inside a JEE container\n+//        this.trxSynchRegistry = null;\n+//\n+//        // Obtain connections from DriverManager\n+//        this.schemaName = getSchema();\n+//\n+////        Action setSchema = new SetSchemaAction(schemaName);\n+////        Action setTenant = new SetTenantAction(setSchema);\n+//        this.connectionStrategy = new FHIRDbPropsConnectionStrategy(configProps);\n+//        \n+//\n+//        log.exiting(CLASSNAME, METHODNAME);\n+//    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MzEyNw==", "bodyText": "gone", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447963127", "createdAt": "2020-06-30T20:35:55Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -154,61 +169,98 @@ public FHIRPersistenceJDBCImpl() throws Exception {\n         }\n         this.updateCreateEnabled = fhirConfig.getBooleanProperty(PROPERTY_UPDATE_CREATE_ENABLED, Boolean.TRUE);\n         this.userTransaction = retrieveUserTransaction(TXN_JNDI_NAME);\n+        \n+        if (userTransaction != null) {\n+            this.trxSynchRegistry = getTrxSynchRegistry();\n+        } else {\n+            this.trxSynchRegistry = null;\n+        }\n \n         ParameterNamesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_PARAMETER_NAMES_CACHE,\n                                        Boolean.TRUE));\n         CodeSystemsCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_CODE_SYSTEMS_CACHE,\n                                     Boolean.TRUE));\n         ResourceTypesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE,\n                                       Boolean.TRUE));\n-\n-        sharedConnection = this.createConnection();\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(sharedConnection, this.getTrxSynchRegistry());\n-        this.parameterDao = new ParameterDAOImpl(this.getTrxSynchRegistry());\n+        \n+        //this.connectionStrategy = new FHIRDbTenantDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());\n+        \n+        // Set up the connection strategy for use within a JEE container. The actions\n+        // are processed the first time a connection is established to a particular tenant/datasource.\n+        this.schemaNameSupplier = new SchemaNameImpl(this);\n+        this.connectionStrategy = new FHIRDbProxyDatasourceConnectionStrategy(getTrxSynchRegistry(), buildActionChain());\n+        this.transactionAdapter = new FHIRUserTransactionAdapter(userTransaction);\n \n         log.exiting(CLASSNAME, METHODNAME);\n     }\n-\n+    \n     /**\n-     * Constructor for use when running standalone, outside of any web container.\n+     * Constructor for use when running standalone, outside of any web container. The\n+     * IConnectionProvider should be a pooling implementation which supports an\n+     * ITransactionProvider.\n+     * \n+     * @implNote This constructor is defined to simplify unit-tests\n      * @throws Exception\n      */\n-    public FHIRPersistenceJDBCImpl(Properties configProps) throws Exception {\n-        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties)\";\n+    public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) throws Exception {\n+        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties, IConnectionProvider)\";\n         log.entering(CLASSNAME, METHODNAME);\n \n         this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n \n-        FHIRDbDAO dao = new FHIRDbDAOImpl(configProps);\n+        // not running inside a JEE container\n+        this.trxSynchRegistry = null;\n \n-        this.setBaseDao(dao);\n-        this.setManagedConnection(this.getBaseDao().getConnection());\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(this.getManagedConnection());\n-        this.parameterDao = new ParameterDAOImpl(this.getManagedConnection());\n+        // use the schema name from the configProps, or the connection.getSchema if we have to\n+        this.schemaNameSupplier = new SchemaNameImpl(new SchemaNameFromProps(configProps));\n+        \n+        // Obtain connections from the IConnectionProvider (typically used in Derby-based test-cases)\n+        this.connectionStrategy = new FHIRDbTestConnectionStrategy(cp, buildActionChain());\n+        \n+        // For unit tests (outside of JEE), we also need our own mechanism for handling transactions\n+        this.transactionAdapter = new FHIRTestTransactionAdapter(cp);\n \n         log.exiting(CLASSNAME, METHODNAME);\n     }\n+    \n \n     /**\n      * Constructor for use when running standalone, outside of any web container.\n      * @throws Exception\n      */\n-    public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) throws Exception {\n-        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties, IConnectionProvider)\";\n-        log.entering(CLASSNAME, METHODNAME);\n-\n-        this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n-\n-        FHIRDbDAO dao = new FHIRDbDAOImpl(cp.getConnection());\n-\n-        this.setBaseDao(dao);\n-        this.setManagedConnection(this.getBaseDao().getConnection());\n-        this.resourceDao = FHIRResourceDAOFactory.getResourceDAO(this.getManagedConnection());\n-        this.parameterDao = new ParameterDAOImpl(this.getManagedConnection());\n-\n-        log.exiting(CLASSNAME, METHODNAME);\n+//    @Deprecated\n+//    public FHIRPersistenceJDBCImpl(Properties configProps) throws Exception {\n+//        final String METHODNAME = \"FHIRPersistenceJDBCImpl(Properties)\";\n+//        log.entering(CLASSNAME, METHODNAME);\n+//\n+//        this.updateCreateEnabled = Boolean.parseBoolean(configProps.getProperty(\"updateCreateEnabled\"));\n+//\n+//        // not running inside a JEE container\n+//        this.trxSynchRegistry = null;\n+//\n+//        // Obtain connections from DriverManager\n+//        this.schemaName = getSchema();\n+//\n+////        Action setSchema = new SetSchemaAction(schemaName);\n+////        Action setTenant = new SetTenantAction(setSchema);\n+//        this.connectionStrategy = new FHIRDbPropsConnectionStrategy(configProps);\n+//        \n+//\n+//        log.exiting(CLASSNAME, METHODNAME);\n+//    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDE5MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NzE2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0NzowNVrOGp5VpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowNTo0OFrOGrOdLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDIyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    }\n          \n          \n            \n                                    else {\n          \n          \n            \n                                    } else {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584228", "createdAt": "2020-06-28T00:47:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -499,15 +593,15 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n                         // Sorting results of a system-level search is limited, and has a different logic path\n                         // than other sorted searches.\n                         if (resourceType.equals(Resource.class)) {\n-                           resources = this.convertResourceDTOList(this.resourceDao.search(query), resourceType, elements);\n+                           resources = this.convertResourceDTOList(resourceDao.search(query), resourceType, elements);\n                         }\n                         else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3ODc5OQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447978799", "createdAt": "2020-06-30T21:05:48Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -499,15 +593,15 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n                         // Sorting results of a system-level search is limited, and has a different logic path\n                         // than other sorted searches.\n                         if (resourceType.equals(Resource.class)) {\n-                           resources = this.convertResourceDTOList(this.resourceDao.search(query), resourceType, elements);\n+                           resources = this.convertResourceDTOList(resourceDao.search(query), resourceType, elements);\n                         }\n                         else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDIyOA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NzQzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0NzozNlrOGp5VwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMzoyNFrOGrOYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                }\n          \n          \n            \n                                else {\n          \n          \n            \n                                } else {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584257", "createdAt": "2020-06-28T00:47:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -499,15 +593,15 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n                         // Sorting results of a system-level search is limited, and has a different logic path\n                         // than other sorted searches.\n                         if (resourceType.equals(Resource.class)) {\n-                           resources = this.convertResourceDTOList(this.resourceDao.search(query), resourceType, elements);\n+                           resources = this.convertResourceDTOList(resourceDao.search(query), resourceType, elements);\n                         }\n                         else {\n-                            sortedIdList = this.resourceDao.searchForIds(query);\n-                            resources = this.buildSortedFhirResources(context, resourceType, sortedIdList, elements);\n+                            sortedIdList = resourceDao.searchForIds(query);\n+                            resources = this.buildSortedFhirResources(resourceDao, context, resourceType, sortedIdList, elements);\n                         }\n                     }\n                     else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzQ5Ng==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447977496", "createdAt": "2020-06-30T21:03:24Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -499,15 +593,15 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n                         // Sorting results of a system-level search is limited, and has a different logic path\n                         // than other sorted searches.\n                         if (resourceType.equals(Resource.class)) {\n-                           resources = this.convertResourceDTOList(this.resourceDao.search(query), resourceType, elements);\n+                           resources = this.convertResourceDTOList(resourceDao.search(query), resourceType, elements);\n                         }\n                         else {\n-                            sortedIdList = this.resourceDao.searchForIds(query);\n-                            resources = this.buildSortedFhirResources(context, resourceType, sortedIdList, elements);\n+                            sortedIdList = resourceDao.searchForIds(query);\n+                            resources = this.buildSortedFhirResources(resourceDao, context, resourceType, sortedIdList, elements);\n                         }\n                     }\n                     else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDI1Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3NzkwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0ODoyNFrOGp5V9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozNzo1OFrOGrNjog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch(Throwable e) {\n          \n          \n            \n                        FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");\n          \n          \n            \n                    } catch(Throwable e) {\n          \n          \n            \n                        FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584310", "createdAt": "2020-06-28T00:48:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1011,22 +1115,17 @@ private String performCacheDiagnostics() {\n      * @throws FHIRPersistenceException\n      */\n     private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPersistenceException {\n-\n         InitialContext ctxt;\n \n-        if (this.trxSynchRegistry == null) {\n-            try {\n-                ctxt = new InitialContext();\n-                this.trxSynchRegistry = (TransactionSynchronizationRegistry) ctxt.lookup(TRX_SYNCH_REG_JNDI_NAME);\n-            }\n-            catch(Throwable e) {\n-                FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");\n-                log.log(Level.SEVERE, fx.getMessage(), e);\n-                throw fx;\n-            }\n+        try {\n+            ctxt = new InitialContext();\n+            return (TransactionSynchronizationRegistry) ctxt.lookup(TRX_SYNCH_REG_JNDI_NAME);\n+        }\n+        catch(Throwable e) {\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 511}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDA2Ng==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447964066", "createdAt": "2020-06-30T20:37:58Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1011,22 +1115,17 @@ private String performCacheDiagnostics() {\n      * @throws FHIRPersistenceException\n      */\n     private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPersistenceException {\n-\n         InitialContext ctxt;\n \n-        if (this.trxSynchRegistry == null) {\n-            try {\n-                ctxt = new InitialContext();\n-                this.trxSynchRegistry = (TransactionSynchronizationRegistry) ctxt.lookup(TRX_SYNCH_REG_JNDI_NAME);\n-            }\n-            catch(Throwable e) {\n-                FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");\n-                log.log(Level.SEVERE, fx.getMessage(), e);\n-                throw fx;\n-            }\n+        try {\n+            ctxt = new InitialContext();\n+            return (TransactionSynchronizationRegistry) ctxt.lookup(TRX_SYNCH_REG_JNDI_NAME);\n+        }\n+        catch(Throwable e) {\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Failed to acquire TrxSynchRegistry service\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDMxMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 511}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3ODIyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0OToxMlrOGp5WGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozODo0NVrOGrNk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDM0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Exception x) {\n          \n          \n            \n                        } catch (Exception x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584345", "createdAt": "2020-06-28T00:49:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1673,4 +1563,38 @@ private void addWarning(IssueType issueType, String message, String... expressio\n                 .expression(Arrays.stream(expression).map(com.ibm.fhir.model.type.String::string).collect(Collectors.toList()))\n                 .build());\n     }\n+    \n+    \n+    @Override\n+    public String getSchemaForRequestContext(Connection connection) throws FHIRPersistenceDBConnectException {\n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId + \"/connectionProperties\";\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            try {\n+                // If the currentSchema parameter isn't given, we have to\n+                // get it from the database when we have a connection.\n+                String currentSchema = dsPG.getStringProperty(\"currentSchema\", null);\n+                \n+                if (currentSchema == null) {\n+                    // Backup plan. Try getting it from the parent (datasource) property group\n+                    dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+                    dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+                    currentSchema = dsPG.getStringProperty(\"currentSchema\", null);\n+                }\n+\n+                // can be null\n+                return currentSchema;\n+            }\n+            catch (Exception x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 839}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDQxNA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447964414", "createdAt": "2020-06-30T20:38:45Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1673,4 +1563,38 @@ private void addWarning(IssueType issueType, String message, String... expressio\n                 .expression(Arrays.stream(expression).map(com.ibm.fhir.model.type.String::string).collect(Collectors.toList()))\n                 .build());\n     }\n+    \n+    \n+    @Override\n+    public String getSchemaForRequestContext(Connection connection) throws FHIRPersistenceDBConnectException {\n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId + \"/connectionProperties\";\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            try {\n+                // If the currentSchema parameter isn't given, we have to\n+                // get it from the database when we have a connection.\n+                String currentSchema = dsPG.getStringProperty(\"currentSchema\", null);\n+                \n+                if (currentSchema == null) {\n+                    // Backup plan. Try getting it from the parent (datasource) property group\n+                    dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+                    dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+                    currentSchema = dsPG.getStringProperty(\"currentSchema\", null);\n+                }\n+\n+                // can be null\n+                return currentSchema;\n+            }\n+            catch (Exception x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDM0NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 839}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3ODQ2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0OTozOFrOGp5WNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozODoxMFrOGrCaNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDM3NQ==", "bodyText": "parameters dont match javadoc", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584375", "createdAt": "2020-06-28T00:49:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -30,8 +30,8 @@\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c) {\n-        super(c);\n+    public PostgreSqlCodeSystemDAO(Connection c, String schemaName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MTQzMQ==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447781431", "createdAt": "2020-06-30T15:38:10Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -30,8 +30,8 @@\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c) {\n-        super(c);\n+    public PostgreSqlCodeSystemDAO(Connection c, String schemaName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDM3NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3OTkyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchDateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MTozNVrOGp5W2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MTozNVrOGp5W2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584536", "createdAt": "2020-06-28T00:51:35Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchDateTest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MDE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchDateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MTo0OFrOGp5W9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MTo0OFrOGp5W9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584567", "createdAt": "2020-06-28T00:51:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchDateTest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MDI3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchIdLastUpdatedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MjoxMlrOGp5XAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MjoxMlrOGp5XAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584579", "createdAt": "2020-06-28T00:52:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchIdLastUpdatedTest.java", "diffHunk": "@@ -27,12 +31,26 @@ public void bootstrapDatabase() throws Exception {\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n             derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MDkxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MjozOFrOGp5XRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1MjozOFrOGp5XRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584647", "createdAt": "2020-06-28T00:52:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchNumberTest.java", "diffHunk": "@@ -16,22 +18,39 @@\n \n public class JDBCSearchNumberTest extends AbstractSearchNumberTest {\n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchNumberTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MTA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Mjo1NlrOGp5XXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Mjo1NlrOGp5XXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDY2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584669", "createdAt": "2020-06-28T00:52:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/search/test/JDBCSearchQuantityTest.java", "diffHunk": "@@ -17,22 +19,39 @@\n public class JDBCSearchQuantityTest extends AbstractSearchQuantityTest {\n \n     private Properties testProps;\n+    \n+    private PoolConnectionProvider connectionPool;\n \n     public JDBCSearchQuantityTest() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n     @Override\n     public void bootstrapDatabase() throws Exception {\n+        DerbyInitializer derbyInit;\n         String dbDriverName = this.testProps.getProperty(\"dbDriverName\");\n         if (dbDriverName != null && dbDriverName.contains(\"derby\")) {\n-            DerbyInitializer derbyInit = new DerbyInitializer(this.testProps);\n-            derbyInit.bootstrapDb();\n+            derbyInit = new DerbyInitializer(this.testProps);\n+            IConnectionProvider cp = derbyInit.getConnectionProvider(false);\n+            this.connectionPool = new PoolConnectionProvider(cp, 1);\n         }\n     }\n-\n+    \n     @Override\n     public FHIRPersistence getPersistenceImpl() throws Exception {\n-        return new FHIRPersistenceJDBCImpl(this.testProps);\n+        if (this.connectionPool == null) {\n+            throw new IllegalStateException(\"Database not bootstrapped\");\n+        }\n+        return new FHIRPersistenceJDBCImpl(this.testProps, this.connectionPool);\n+    }\n+    \n+    @Override\n+    protected void shutdownPools() throws Exception {\n+        // Mark the pool as no longer in use. This allows the pool to check for\n+        // lingering open connections/transactions.\n+        if (this.connectionPool != null) {\n+            this.connectionPool.close();\n+        }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MTkwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/FHIRDbDAOTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NDo0MFrOGp5XuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozOTo1MFrOGrNnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDc2MA==", "bodyText": "use the FHIRDbConstants to be consistent", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584760", "createdAt": "2020-06-28T00:54:40Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/FHIRDbDAOTest.java", "diffHunk": "@@ -52,9 +69,14 @@ public void testGetDB2Connection() throws Exception {\n         props.setProperty(FHIRDbDAO.PROPERTY_DB_URL, \"jdbc:db2://localhost:50000/fhirdb\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_USER, \"user\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_PSWD, \"password\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzOTEyNw==", "bodyText": "Yes, should be part of the FHIRDbDAO properties cleanup.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447039127", "createdAt": "2020-06-29T15:01:34Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/FHIRDbDAOTest.java", "diffHunk": "@@ -52,9 +69,14 @@ public void testGetDB2Connection() throws Exception {\n         props.setProperty(FHIRDbDAO.PROPERTY_DB_URL, \"jdbc:db2://localhost:50000/fhirdb\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_USER, \"user\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_PSWD, \"password\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDc2MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDk1OQ==", "bodyText": "removed because class no longer exists.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447964959", "createdAt": "2020-06-30T20:39:50Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/FHIRDbDAOTest.java", "diffHunk": "@@ -52,9 +69,14 @@ public void testGetDB2Connection() throws Exception {\n         props.setProperty(FHIRDbDAO.PROPERTY_DB_URL, \"jdbc:db2://localhost:50000/fhirdb\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_USER, \"user\");\n         props.setProperty(FHIRDbDAO.PROPERTY_DB2_PSWD, \"password\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDc2MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4Mjk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NjoxM1rOGp5YLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MDo0NlrOGrNpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDg3Nw==", "bodyText": "What is this for?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584877", "createdAt": "2020-06-28T00:56:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -26,7 +28,7 @@ public RedefineDerbyDB() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n-    @Test\n+//    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTQ3OQ==", "bodyText": "This is legacy code. Removed now.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447965479", "createdAt": "2020-06-30T20:40:46Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/RedefineDerbyDB.java", "diffHunk": "@@ -26,7 +28,7 @@ public RedefineDerbyDB() throws Exception {\n         this.testProps = TestUtil.readTestProperties(\"test.jdbc.properties\");\n     }\n \n-    @Test\n+//    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDg3Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MzQzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Njo1MVrOGp5YXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Njo1MVrOGp5YXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584925", "createdAt": "2020-06-28T00:56:51Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testStandardFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testRepeatFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // start a new transaction\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4MzY3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NzoyMFrOGp5Ydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NzoyMFrOGp5Ydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                \n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584950", "createdAt": "2020-06-28T00:57:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testStandardFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testRepeatFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // start a new transaction\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        \n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedBeginAfterRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we should see the rollback\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        \n+        // inner transaction, so setRollbackOnly is suppressed\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be marked active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4Mzg2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Nzo0OFrOGp5YjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1Nzo0OFrOGp5YjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446584972", "createdAt": "2020-06-28T00:57:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testStandardFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testRepeatFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // start a new transaction\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        \n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedBeginAfterRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we should see the rollback\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        \n+        // inner transaction, so setRollbackOnly is suppressed\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be marked active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedRollback() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        nested.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // when we end the nested, because we didn't start the tx, it should still\n+        // be marked for active\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // the outer transaction can mark for rollback\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we can end the transaction (rollback to no transaction)\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDE3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODowNVrOGp5Yrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODowNVrOGp5Yrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585007", "createdAt": "2020-06-28T00:58:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testStandardFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testRepeatFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // start a new transaction\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        \n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedBeginAfterRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we should see the rollback\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        \n+        // inner transaction, so setRollbackOnly is suppressed\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be marked active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedRollback() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        nested.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // when we end the nested, because we didn't start the tx, it should still\n+        // be marked for active\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // the outer transaction can mark for rollback\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we can end the transaction (rollback to no transaction)\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedCommit() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // when we end the nested, because we didn't start the tx, it should be active\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // now we can end (commit) the transaction\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDM1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODoyM1rOGp5YxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODoyM1rOGp5YxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585028", "createdAt": "2020-06-28T00:58:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/FHIRUserTransactionAdapterTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.Status;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+/**\n+ * Unit test for the {@link FHIRUserTransactionAdapter}\n+ */\n+public class FHIRUserTransactionAdapterTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testStandardFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testRepeatFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // start a new transaction\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        \n+    }\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedFlow() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedBeginAfterRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // should still be active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we should see the rollback\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void testNestedRollbackOnly() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        \n+        // inner transaction, so setRollbackOnly is suppressed\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // should still be marked active\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        \n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+    \n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedRollback() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        \n+        nested.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // when we end the nested, because we didn't start the tx, it should still\n+        // be marked for active\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // the outer transaction can mark for rollback\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we can end the transaction (rollback to no transaction)\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedCommit() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        adapter.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // when we end the nested, because we didn't start the tx, it should be active\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+\n+        // now we can end (commit) the transaction\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void sharedNestedAfterRollback() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+\n+        FHIRUserTransactionAdapter adapter = new FHIRUserTransactionAdapter(tx);\n+        adapter.begin();\n+        adapter.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now try and start a nested transaction\n+        FHIRUserTransactionAdapter nested = new FHIRUserTransactionAdapter(tx);\n+        nested.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // should be a NOP\n+        nested.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // when we end the nested, because we didn't start the tx, it should still\n+        // be marked for rollback\n+        nested.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+\n+        // now we can end the transaction (rollback to no transaction)\n+        adapter.end();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDQwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODo0MlrOGp5Yyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MToxMFrOGrNqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#begin()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585035", "createdAt": "2020-06-28T00:58:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTczNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447965734", "createdAt": "2020-06-30T20:41:10Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTAzNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDUzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1ODo1NFrOGp5Y3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MToyMVrOGrNqgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#commit()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585052", "createdAt": "2020-06-28T00:58:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTgyNg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447965826", "createdAt": "2020-06-30T20:41:21Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA1Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDU0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1OToxMlrOGp5Y3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MTo0NVrOGrNrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#rollback()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585054", "createdAt": "2020-06-28T00:59:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NjA0MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447966041", "createdAt": "2020-06-30T20:41:45Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA1NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NDkwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1OTozNlrOGp5ZBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MTo1NlrOGrNrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#setRollbackOnly()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585092", "createdAt": "2020-06-28T00:59:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NjEyNg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447966126", "createdAt": "2020-06-30T20:41:56Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTA5Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NTA1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1OTo1M1rOGp5ZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MjoyNVrOGrNsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTExMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585110", "createdAt": "2020-06-28T00:59:53Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */\n+    @Override\n+    public int getStatus() throws SystemException {\n+        return this.status;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setTransactionTimeout(int)\n+     */\n+    @Override\n+    public void setTransactionTimeout(int seconds) throws SystemException {\n+        this.transactionTimeout = seconds;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NjM3Ng==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447966376", "createdAt": "2020-06-30T20:42:25Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */\n+    @Override\n+    public int getStatus() throws SystemException {\n+        return this.status;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setTransactionTimeout(int)\n+     */\n+    @Override\n+    public void setTransactionTimeout(int seconds) throws SystemException {\n+        this.transactionTimeout = seconds;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTExMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NTM4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMDowOFrOGp5ZOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0Mzo0NlrOGrNvLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTE0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#setTransactionTimeout(int)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585146", "createdAt": "2020-06-28T01:00:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */\n+    @Override\n+    public int getStatus() throws SystemException {\n+        return this.status;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setTransactionTimeout(int)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzAyMw==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967023", "createdAt": "2020-06-30T20:43:46Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */\n+    @Override\n+    public int getStatus() throws SystemException {\n+        return this.status;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setTransactionTimeout(int)\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTE0Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NTU4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMDoxOFrOGp5ZUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0Mzo1NVrOGrNveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.transaction.UserTransaction#getStatus()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585168", "createdAt": "2020-06-28T01:00:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzA5OA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967098", "createdAt": "2020-06-30T20:43:55Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+\n+\n+/**\n+ * Pretend to be a {@link UserTransaction} with modifiable behavior to\n+ * support different test scenarios\n+ */\n+public class MockUserTransaction implements UserTransaction {\n+    private int status = Status.STATUS_NO_TRANSACTION;\n+    private int transactionTimeout = 0;\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#begin()\n+     */\n+    @Override\n+    public void begin() throws NotSupportedException, SystemException {\n+        if (this.status != Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction already active\");\n+        }\n+        this.status = Status.STATUS_ACTIVE;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#commit()\n+     */\n+    @Override\n+    public void commit()\n+        throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {\n+\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            throw new RollbackException(\"transaction rolled back\");\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#rollback()\n+     */\n+    @Override\n+    public void rollback() throws IllegalStateException, SecurityException, SystemException {\n+        switch (this.status) {\n+        case Status.STATUS_ACTIVE:\n+        case Status.STATUS_MARKED_ROLLBACK:\n+            this.status = Status.STATUS_NO_TRANSACTION;\n+            break;\n+        default:\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#setRollbackOnly()\n+     */\n+    @Override\n+    public void setRollbackOnly() throws IllegalStateException, SystemException {\n+        if (this.status == Status.STATUS_NO_TRANSACTION) {\n+            throw new IllegalStateException(\"transaction not active\");\n+        }\n+        this.status = Status.STATUS_MARKED_ROLLBACK;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.transaction.UserTransaction#getStatus()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTE2OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NTkwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransactionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMDo0MlrOGp5Zcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMDo0MlrOGp5Zcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585202", "createdAt": "2020-06-28T01:00:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockUserTransactionTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.UserTransaction;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test our mock for {@link UserTransaction} to make sure it does what we expect\n+ * so that we can rely on it for the {@link FHIRUserTransactionAdapterTest}\n+ */\n+public class MockUserTransactionTest {\n+\n+    @Test(groups = {\"jdbc\"})\n+    public void test() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        tx.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        tx.commit();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+\n+        // try another transaction, but roll it back\n+        tx.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        tx.setRollbackOnly();\n+        assertEquals(tx.getStatus(), Status.STATUS_MARKED_ROLLBACK);\n+        tx.rollback();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+        \n+        // straight rollback\n+        tx.begin();\n+        assertEquals(tx.getStatus(), Status.STATUS_ACTIVE);\n+        tx.rollback();\n+        assertEquals(tx.getStatus(), Status.STATUS_NO_TRANSACTION);\n+    }\n+\n+    \n+    @Test(groups = {\"jdbc\"}, expectedExceptions = RollbackException.class)\n+    public void rollbackOnlyCommit() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        tx.begin();\n+        tx.setRollbackOnly();\n+        tx.commit();\n+    }\n+\n+    @Test(groups = {\"jdbc\"}, expectedExceptions = IllegalStateException.class)\n+    public void commitNoTransaction() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        tx.commit();\n+    }\n+\n+    @Test(groups = {\"jdbc\"}, expectedExceptions = IllegalStateException.class)\n+    public void rollbackNoTransaction() throws Exception {\n+        MockUserTransaction tx = new MockUserTransaction();\n+        tx.rollback();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NjM2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/PopulateStaticTablesDerbyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMTo0OVrOGp5Zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMTo0OVrOGp5Zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * \n          \n          \n            \n             */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585255", "createdAt": "2020-06-28T01:01:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/PopulateStaticTablesDerbyTest.java", "diffHunk": "@@ -12,62 +12,74 @@\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.util.Properties;\n \n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import com.ibm.fhir.database.utils.api.ITransaction;\n import com.ibm.fhir.model.test.TestUtil;\n-import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n-import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n-import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.connection.Action;\n+import com.ibm.fhir.persistence.jdbc.connection.DisableAutocommitAction;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbTestConnectionStrategy;\n+import com.ibm.fhir.persistence.jdbc.connection.SetSchemaAction;\n \n /**\n  * \n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4NzE0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMzoyN1rOGp5Z_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NDozMVrOGrNwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2017, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585340", "createdAt": "2020-06-28T01:03:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2017, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NzkyOQ==", "bodyText": "new file", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447947929", "createdAt": "2020-06-30T20:06:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2017, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTM0MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzQzOQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967439", "createdAt": "2020-06-30T20:44:31Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRDebugXADataSource.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2017, 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTM0MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4Nzc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNDo1NFrOGp5aQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNDo1NFrOGp5aQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585411", "createdAt": "2020-06-28T01:04:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyConnection.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.NClob;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLClientInfoException;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.sql.Struct;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Wrapping of a real database connection so that we can intercept the close call\n+ * and therefore reuse the connection. Note that we also listen for any exceptions\n+ * generated, and assume (for better or for worse) that something might be broken\n+ * so call back to the connection provider so that it can decide whether or not\n+ * to abandon the underlying connection.\n+ */\n+public class FHIRProxyConnection implements Connection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyConnection.class.getName());\n+\n+    // The actual connection we're wrapping (decorating)\n+    private final Connection wrapped;\n+    \n+    // Remember the stack from the last usage\n+    private Exception lastStack;\n+    \n+    /**\n+     * Public constructor\n+     * @param wrappee\n+     */\n+    public FHIRProxyConnection(Connection wrappee) {\n+        this.wrapped = wrappee;\n+    }\n+\n+    @Override\n+    public void clearWarnings() throws SQLException {\n+        wrapped.clearWarnings();\n+    }\n+\n+    @Override\n+    public void close() throws SQLException {\n+        if (lastStack != null) {\n+            logger.log(Level.INFO, \"LAST USAGE\", lastStack);\n+            lastStack = null;\n+        }\n+        wrapped.close();\n+    }\n+\n+    @Override\n+    public void commit() throws SQLException {\n+        wrapped.commit();\n+    }\n+\n+    @Override\n+    public Array createArrayOf(String typeName, Object[] elements)\n+                    throws SQLException {\n+\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4ODY0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNTo0MlrOGp5amw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NTowMFrOGrNxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTQ5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#getConnection()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585499", "createdAt": "2020-06-28T01:05:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzY5NA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967694", "createdAt": "2020-06-30T20:45:00Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTQ5OQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4ODczOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNTo1NlrOGp5apw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NToxMlrOGrNyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#close()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585511", "createdAt": "2020-06-28T01:05:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2Nzc5NQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967795", "createdAt": "2020-06-30T20:45:12Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTUxMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4ODc3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNjoxMFrOGp5arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NToyN1rOGrNyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585516", "createdAt": "2020-06-28T01:06:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzkyOQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967929", "createdAt": "2020-06-30T20:45:27Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTUxNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg4OTAxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowNjozNFrOGp5ayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NTozNlrOGrNy-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446585544", "createdAt": "2020-06-28T01:06:34Z", "author": {"login": "prb112"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2Nzk5Mw==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447967993", "createdAt": "2020-06-30T20:45:36Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyXAConnection.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.proxy;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.StatementEventListener;\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+\n+\n+/**\n+ * Proxy/wrapper for XAConnection objects obtained via the FHIRProxyXADataSource.\n+ * Provides additional tracing for connection/transaction/pooling issues\n+ */\n+public class FHIRProxyXAConnection implements XAConnection {\n+    private static final Logger logger = Logger.getLogger(FHIRProxyXAConnection.class.getName());\n+    private final XAConnection delegate;\n+    \n+    public FHIRProxyXAConnection(XAConnection delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws SQLException {\n+        // dump the stack showing who's calling\n+        Exception x = new Exception(\"stack\");\n+        logger.log(Level.INFO, \"PROXY XA CONNECTION\", x);\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // Wrap the connection so that we can really see what's going on\n+            return new FHIRProxyConnection(delegate.getConnection());\n+        } else {\n+            return delegate.getConnection();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#close()\n+     */\n+    @Override\n+    public void close() throws SQLException {\n+        this.delegate.close();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */\n+    @Override\n+    public void addConnectionEventListener(ConnectionEventListener listener) {\n+        this.delegate.addConnectionEventListener(listener);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see javax.sql.PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTU0NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM2NDIyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/load/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMzo1MFrOGqOXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMzo1MFrOGqOXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyODgzOQ==", "bodyText": "very helpful comment", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446928839", "createdAt": "2020-06-29T12:23:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/load/ChunkWriter.java", "diffHunk": "@@ -183,41 +183,44 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         // Acquire a DB connection which will be used in the batch.\n         // This doesn't really start the transaction, because the transaction has already been started by the JavaBatch\n         // framework at this time point.\n-        txn.enroll();\n-        for (Object objResJsonList : arg0) {\n-            @SuppressWarnings(\"unchecked\")\n-            List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n-\n-            for (Resource fhirResource : fhirResourceList) {\n-                try {\n-                    String id = fhirResource.getId();\n-                    processedNum++;\n-                    // Skip the resources which failed the validation\n-                    if (failValidationIds.contains(id)) {\n-                        continue;\n-                    }\n-                    OperationOutcome operationOutcome =\n-                            fhirPersistence.update(persistenceContext, id, fhirResource).getOutcome();\n-                    succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n-                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n-                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n-                    }\n-                } catch (FHIROperationException e) {\n-                    logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n-                    failedNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        OperationOutcome operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n-                        FHIRGenerator.generator(Format.JSON).generate(operationOutCome, chunkData.getBufferStreamForImportError());\n-                        chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);\n+        txn.begin();\n+        try {\n+            for (Object objResJsonList : arg0) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n+    \n+                for (Resource fhirResource : fhirResourceList) {\n+                    try {\n+                        String id = fhirResource.getId();\n+                        processedNum++;\n+                        // Skip the resources which failed the validation\n+                        if (failValidationIds.contains(id)) {\n+                            continue;\n+                        }\n+                        OperationOutcome operationOutcome =\n+                                fhirPersistence.update(persistenceContext, id, fhirResource).getOutcome();\n+                        succeededNum++;\n+                        if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                            chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n+                        }\n+                    } catch (FHIROperationException e) {\n+                        logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n+                        failedNum++;\n+                        if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                            OperationOutcome operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                            FHIRGenerator.generator(Format.JSON).generate(operationOutCome, chunkData.getBufferStreamForImportError());\n+                            chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);\n+                        }\n                     }\n                 }\n             }\n+        } finally {\n+            // Release the DB connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3MDQwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNToyMVrOGqObXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNToyMVrOGqObXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTc1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param connection\n          \n      \n    \n    \n  \n\nNo connection is passed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446929759", "createdAt": "2020-06-29T12:25:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Supplier which tries to obtain the schema name from the given delegate,\n+ * falling back to calling getSchema() from the connection if the supplier\n+ * returns a null\n+ */\n+public class SchemaNameImpl implements SchemaNameSupplier { \n+    private static final Logger logger = Logger.getLogger(SchemaNameImpl.class.getName());\n+    \n+    // the delegate we use ask for the schema name\n+    private final SchemaNameSupplier delegate;\n+\n+    /**\n+     * Public constructor\n+     * @param delegate\n+     * @param connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3NDg3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjozM1rOGqOeLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjozM1rOGqOeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446930476", "createdAt": "2020-06-29T12:26:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3NjYwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameSupplier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjo1N1rOGqOfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjo1N1rOGqOfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws FHIRPersistenceException\n          \n          \n            \n                 * @throws FHIRPersistenceDBConnectException", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446930733", "createdAt": "2020-06-29T12:26:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameSupplier.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Provides the schema name for the current request context\n+ */\n+@FunctionalInterface\n+public interface SchemaNameSupplier {\n+\n+    /**\n+     * Get the schema name for the current request context\n+     * @param c the connection for which we want to obtain the schema name\n+     * @return the main schema name to use for the given connection\n+     * @throws FHIRPersistenceException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3OTA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNzozM1rOGqOgvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NjoyMVrOGrN0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param schemaName\n          \n          \n            \n                 * @param schemaName\n          \n          \n            \n                 * @param next", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446931133", "createdAt": "2020-06-29T12:27:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2ODM0OA==", "bodyText": "should be correct now", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447968348", "createdAt": "2020-06-30T20:46:21Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTEzMw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM3OTc1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNzo0M1rOGqOhJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNzo0M1rOGqOhJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446931237", "createdAt": "2020-06-29T12:27:43Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM5MjgyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozMDo0OFrOGqOowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1MjoyOVrOGrKIKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMzE4NQ==", "bodyText": "is this necessary to have here? it reads as if this can be refactored out, which would make this interface cleaner", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446933185", "createdAt": "2020-06-29T12:30:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";\n \n     /**\n-     * Acquires and returns a JDBC database connection to the FHIR database.\n-     * If no DB Properties are available, an attempt is made to acquire the connection via a Datasource obtained via\n-     * JNDI. If DB Properties are present, those properties are used to build the Connection.\n+     * Obtains a database connection. Connection is configured and ready to use. Its\n+     * schema will be set to the configured FHIR data schema (usually 'FHIRDATA') and\n+     * if multi-tenant, the tenant property will have been set.\n      * \n      * @return Connection - A connection to the FHIR database.\n      * @throws FHIRPersistenceDBConnectException\n      */\n     Connection getConnection() throws FHIRPersistenceDBConnectException;\n \n-    /**\n-     * Returns a previously set externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @return Connection\n-     */\n-    Connection getExternalConnection();\n-\n-    /**\n-     * Sets an externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @param connection\n-     */\n-    void setExternalConnection(Connection connection);\n-\n     /**\n      * @return true if this DAO is connected to a DB2 database.\n      * @throws Exception\n      */\n-    boolean isDb2Database() throws Exception;\n+    boolean isDb2Database();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyOTEzOA==", "bodyText": "Do you mean the isDb2Database? We can look at removing as part of the FhirDbDAO property cleanup.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447029138", "createdAt": "2020-06-29T14:48:16Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";\n \n     /**\n-     * Acquires and returns a JDBC database connection to the FHIR database.\n-     * If no DB Properties are available, an attempt is made to acquire the connection via a Datasource obtained via\n-     * JNDI. If DB Properties are present, those properties are used to build the Connection.\n+     * Obtains a database connection. Connection is configured and ready to use. Its\n+     * schema will be set to the configured FHIR data schema (usually 'FHIRDATA') and\n+     * if multi-tenant, the tenant property will have been set.\n      * \n      * @return Connection - A connection to the FHIR database.\n      * @throws FHIRPersistenceDBConnectException\n      */\n     Connection getConnection() throws FHIRPersistenceDBConnectException;\n \n-    /**\n-     * Returns a previously set externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @return Connection\n-     */\n-    Connection getExternalConnection();\n-\n-    /**\n-     * Sets an externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @param connection\n-     */\n-    void setExternalConnection(Connection connection);\n-\n     /**\n      * @return true if this DAO is connected to a DB2 database.\n      * @throws Exception\n      */\n-    boolean isDb2Database() throws Exception;\n+    boolean isDb2Database();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMzE4NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NDU1Nw==", "bodyText": "It's used by some of the query constructor classes to tweak syntax. This should be handled by the translator, but it's inline for now - and not something that's part of issue-1144.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447774557", "createdAt": "2020-06-30T15:28:45Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";\n \n     /**\n-     * Acquires and returns a JDBC database connection to the FHIR database.\n-     * If no DB Properties are available, an attempt is made to acquire the connection via a Datasource obtained via\n-     * JNDI. If DB Properties are present, those properties are used to build the Connection.\n+     * Obtains a database connection. Connection is configured and ready to use. Its\n+     * schema will be set to the configured FHIR data schema (usually 'FHIRDATA') and\n+     * if multi-tenant, the tenant property will have been set.\n      * \n      * @return Connection - A connection to the FHIR database.\n      * @throws FHIRPersistenceDBConnectException\n      */\n     Connection getConnection() throws FHIRPersistenceDBConnectException;\n \n-    /**\n-     * Returns a previously set externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @return Connection\n-     */\n-    Connection getExternalConnection();\n-\n-    /**\n-     * Sets an externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @param connection\n-     */\n-    void setExternalConnection(Connection connection);\n-\n     /**\n      * @return true if this DAO is connected to a DB2 database.\n      * @throws Exception\n      */\n-    boolean isDb2Database() throws Exception;\n+    boolean isDb2Database();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMzE4NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzg4MQ==", "bodyText": "Right, it didn't seem necessary after the code changes.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447907881", "createdAt": "2020-06-30T18:52:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/FHIRDbDAO.java", "diffHunk": "@@ -21,32 +21,18 @@\n     public static final String PROPERTY_DB2_PSWD = \"password\";\n \n     /**\n-     * Acquires and returns a JDBC database connection to the FHIR database.\n-     * If no DB Properties are available, an attempt is made to acquire the connection via a Datasource obtained via\n-     * JNDI. If DB Properties are present, those properties are used to build the Connection.\n+     * Obtains a database connection. Connection is configured and ready to use. Its\n+     * schema will be set to the configured FHIR data schema (usually 'FHIRDATA') and\n+     * if multi-tenant, the tenant property will have been set.\n      * \n      * @return Connection - A connection to the FHIR database.\n      * @throws FHIRPersistenceDBConnectException\n      */\n     Connection getConnection() throws FHIRPersistenceDBConnectException;\n \n-    /**\n-     * Returns a previously set externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @return Connection\n-     */\n-    Connection getExternalConnection();\n-\n-    /**\n-     * Sets an externally managed DB connection, used by the DAO for all DB activity.\n-     * \n-     * @param connection\n-     */\n-    void setExternalConnection(Connection connection);\n-\n     /**\n      * @return true if this DAO is connected to a DB2 database.\n      * @throws Exception\n      */\n-    boolean isDb2Database() throws Exception;\n+    boolean isDb2Database();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMzE4NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTM5Mzg2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameFromProps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozMTowNVrOGqOpXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozMTowNVrOGqOpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMzM0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446933343", "createdAt": "2020-06-29T12:31:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameFromProps.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Properties;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQwMDY5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozMjo0MlrOGqOtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyOTo1MlrOGrCC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDMzNw==", "bodyText": "Please update the copyright header", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446934337", "createdAt": "2020-06-29T12:32:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "diffHunk": "@@ -38,12 +38,16 @@\n \n     // The JDBC connection used by this DAO instance\n     private final Connection connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NTQ0NQ==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447775445", "createdAt": "2020-06-30T15:29:52Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "diffHunk": "@@ -38,12 +38,16 @@\n \n     // The JDBC connection used by this DAO instance\n     private final Connection connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDMzNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQwNjk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozNDoyMlrOGqOxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozMzoyNVrOGrJc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTMyNg==", "bodyText": "So this can be picked up in ParameterDaoImpl?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446935326", "createdAt": "2020-06-29T12:34:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "diffHunk": "@@ -54,6 +58,14 @@ protected Connection getConnection() {\n         return this.connection;\n     }\n \n+    /**\n+     * Getter for the FHIR data schema\n+     * @return\n+     */\n+    protected String getSchemaName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMTUzNg==", "bodyText": "Pls explain", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447031536", "createdAt": "2020-06-29T14:51:22Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "diffHunk": "@@ -54,6 +58,14 @@ protected Connection getConnection() {\n         return this.connection;\n     }\n \n+    /**\n+     * Getter for the FHIR data schema\n+     * @return\n+     */\n+    protected String getSchemaName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTMyNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NjgyOQ==", "bodyText": "Why is this here?  Why is it used for?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447896829", "createdAt": "2020-06-30T18:33:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/CodeSystemDAOImpl.java", "diffHunk": "@@ -54,6 +58,14 @@ protected Connection getConnection() {\n         return this.connection;\n     }\n \n+    /**\n+     * Getter for the FHIR data schema\n+     * @return\n+     */\n+    protected String getSchemaName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTMyNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQxNjg3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozNjo1MFrOGqO3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMzoxNlrOGqTWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446936853", "createdAt": "2020-06-29T12:36:50Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMDQ1Mg==", "bodyText": "file will be removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447010452", "createdAt": "2020-06-29T14:23:16Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjg1Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQyNzk1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozOTozNlrOGqO9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozOTozNlrOGqO9yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzODU3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param c\n          \n          \n            \n                 * @param connection", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446938571", "createdAt": "2020-06-29T12:39:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQzNzQ5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MTo1NVrOGqPDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowNDoxN1rOGrA2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDAyMQ==", "bodyText": "you pass in some methods, and not in others.\nI do like the concept of the helper, I just prefer the traceability of a logged message being identified in the originating class.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446940021", "createdAt": "2020-06-29T12:41:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {\n+        if (connection != null) {\n+            try {\n+                connection.close();\n+            } catch (Throwable e) {\n+                // log the failure, but suppress the exception\n+                FHIRPersistenceDBCleanupException ce = new FHIRPersistenceDBCleanupException(\"Failure closing Connection.\", e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwNjI1NQ==", "bodyText": "Agreed. There may have been some cases where we didn't have a logger at hand when wanting to make this call. In this case, there's probably plenty of drama logged already before the close is called, so we won't be left wanting for context.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447006255", "createdAt": "2020-06-29T14:17:27Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {\n+        if (connection != null) {\n+            try {\n+                connection.close();\n+            } catch (Throwable e) {\n+                // log the failure, but suppress the exception\n+                FHIRPersistenceDBCleanupException ce = new FHIRPersistenceDBCleanupException(\"Failure closing Connection.\", e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDAyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1NTk3Mw==", "bodyText": "removed method", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447755973", "createdAt": "2020-06-30T15:04:17Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {\n+        if (connection != null) {\n+            try {\n+                connection.close();\n+            } catch (Throwable e) {\n+                // log the failure, but suppress the exception\n+                FHIRPersistenceDBCleanupException ce = new FHIRPersistenceDBCleanupException(\"Failure closing Connection.\", e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDAyMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQzODU0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MjowOVrOGqPEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MjowOVrOGqPEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446940175", "createdAt": "2020-06-29T12:42:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {\n+        if (connection != null) {\n+            try {\n+                connection.close();\n+            } catch (Throwable e) {\n+                // log the failure, but suppress the exception\n+                FHIRPersistenceDBCleanupException ce = new FHIRPersistenceDBCleanupException(\"Failure closing Connection.\", e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);\n+            }\n+        }\n+        \n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ0MDA1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MjozM1rOGqPFBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MjozM1rOGqPFBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446940423", "createdAt": "2020-06-29T12:42:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ0MjU1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MzowNVrOGqPGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0Njo0OFrOGrN1bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDc4Mw==", "bodyText": "Can you explain why this new class is already deprecated?\nIt seems like it should just not be included or the @deprecated tag should be removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446940783", "createdAt": "2020-06-29T12:43:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwOTk5Nw==", "bodyText": "Yes, this class represents one of the three methods we had for constructing the FHIRPersistenceJDBCImpl. It was used to support getting connections to Derby based on configuration data passed as properties. As the refactor progressed, all the unit tests were updated to use the IConnectionProvider approach. This class was created in case we needed to support the old properties-based connection configuration for any reason. Now the refactor is complete, we can remove it.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447009997", "createdAt": "2020-06-29T14:22:37Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDc4Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2ODYyMg==", "bodyText": "class has been removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447968622", "createdAt": "2020-06-30T20:46:48Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDc4Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ0NzA4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0NDoxMVrOGqPJOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxNzo1NFrOGq-m9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTQ5Ng==", "bodyText": "Please fix the copyright", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446941496", "createdAt": "2020-06-29T12:44:11Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "diffHunk": "@@ -9,6 +9,8 @@\n import java.sql.SQLException;\n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.model.DbType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTE1Nw==", "bodyText": "Fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447719157", "createdAt": "2020-06-30T14:17:54Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "diffHunk": "@@ -9,6 +9,8 @@\n import java.sql.SQLException;\n import java.util.Properties;\n \n+import com.ibm.fhir.database.utils.model.DbType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTQ5Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ3MjExOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDoxN1rOGqPYdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNjo0NlrOGqQB0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTM5Ng==", "bodyText": "Where is this used? it's implemented in 3 spots, and not used.  Please add a backlog issue to implement something that uses it, or remove the unused code.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446945396", "createdAt": "2020-06-29T12:50:17Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "diffHunk": "@@ -145,4 +156,16 @@\n      * @return\n      */\n     boolean clobSupportsInline();\n+    \n+    /**\n+     * The main type of the database\n+     * @return\n+     */\n+    DbType getType();\n+    \n+    /**\n+     * The name of the \"DUAL\" table...that special table giving us one row/column.\n+     * @return\n+     */\n+    String dualTableName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTk4NA==", "bodyText": "Are you referring to getType or dualTableName? They are framework/utility methods. I don't think everything has to be used today if it might be useful in the future. It was in use at one point during the refactor, but if it's no longer used, I don't think we should remove it, only to have to implement it again in the future should it be needed.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446955984", "createdAt": "2020-06-29T13:06:46Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IDatabaseTranslator.java", "diffHunk": "@@ -145,4 +156,16 @@\n      * @return\n      */\n     boolean clobSupportsInline();\n+    \n+    /**\n+     * The main type of the database\n+     * @return\n+     */\n+    DbType getType();\n+    \n+    /**\n+     * The name of the \"DUAL\" table...that special table giving us one row/column.\n+     * @return\n+     */\n+    String dualTableName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTM5Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ3MzY0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDozOFrOGqPZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDozOFrOGqPZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446945629", "createdAt": "2020-06-29T12:50:38Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -55,7 +55,7 @@\n \n     // The translator used to to tweak the syntax for the database\n     private final IDatabaseTranslator translator;\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ3NDg2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDo1NlrOGqPaFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNToxNVrOGrJg5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446945814", "createdAt": "2020-06-29T12:50:56Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -46,7 +46,7 @@\n  */\n public abstract class CommonDatabaseAdapter implements IDatabaseAdapter, IDatabaseTypeAdapter {\n     private static final Logger logger = Logger.getLogger(CommonDatabaseAdapter.class.getName());\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzgzMQ==", "bodyText": "it's best to change your eclipse settings to remove whitespace at end of lines", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447897831", "createdAt": "2020-06-30T18:35:15Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -46,7 +46,7 @@\n  */\n public abstract class CommonDatabaseAdapter implements IDatabaseAdapter, IDatabaseTypeAdapter {\n     private static final Logger logger = Logger.getLogger(CommonDatabaseAdapter.class.getName());\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTgxNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ4MjczOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1Mjo1MVrOGqPe_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0ODo0MVrOGrN5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NzA3MA==", "bodyText": "This comment seems no longer applicable.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446947070", "createdAt": "2020-06-29T12:52:51Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -514,7 +515,7 @@ public void createSequence(String schemaName, String sequenceName, int cache) {\n          */\n         // The move to start with 1000 gives room for manual creation and update of sequences.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTY5OQ==", "bodyText": "updated", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447969699", "createdAt": "2020-06-30T20:48:41Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -514,7 +515,7 @@ public void createSequence(String schemaName, String sequenceName, int cache) {\n          */\n         // The move to start with 1000 gives room for manual creation and update of sequences.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NzA3MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ5MzcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1NToyNFrOGqPlVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MDo0MVrOGrN9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0ODY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            import java.util.HashSet;\n          \n          \n            \n            import java.util.Set;", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446948693", "createdAt": "2020-06-29T12:55:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.util.HashSet;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MDc0OA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447970748", "createdAt": "2020-06-30T20:50:41Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.util.HashSet;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0ODY5Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUwMDM4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1Njo1N1rOGqPpMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMjoyM1rOGrOWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0OTY4Mw==", "bodyText": "Why should this be programmatically accessible?  Wouldn't a comment suffice?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446949683", "createdAt": "2020-06-29T12:56:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Tracks the incremental changes to the FHIR schema as it evolves. Incremental\n+ * changes to the schema should be recorded here to create a new version number\n+ * and this enum can then be used to identify the schema objects associated with\n+ * a particular version.\n+ */\n+public enum FhirSchemaVersion {\n+    \n+    // Make sure the vid values are unique...this cannot be done programmatically with an enum\n+     V0001(1, \"Initial version\")\n+    ,V0002(2, \"Composite search value support\")\n+    ,V0003(3, \"issue-1263 fhir_ref_sequence start with 20000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Njk2Mw==", "bodyText": "Useful in info/error messages to see which updates are being applied.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447976963", "createdAt": "2020-06-30T21:02:23Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaVersion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Tracks the incremental changes to the FHIR schema as it evolves. Incremental\n+ * changes to the schema should be recorded here to create a new version number\n+ * and this enum can then be used to identify the schema objects associated with\n+ * a particular version.\n+ */\n+public enum FhirSchemaVersion {\n+    \n+    // Make sure the vid values are unique...this cannot be done programmatically with an enum\n+     V0001(1, \"Initial version\")\n+    ,V0002(2, \"Composite search value support\")\n+    ,V0003(3, \"issue-1263 fhir_ref_sequence start with 20000\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0OTY4Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUxMzk0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowMDowNVrOGqPxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MToxOFrOGrN-7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MTczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Throwable t) {\n          \n          \n            \n                        } catch (Throwable t) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446951737", "createdAt": "2020-06-29T13:00:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -73,8 +82,19 @@ public DerbyFhirDatabase(String dbPath) throws SQLException {\n \n         // apply the model we've defined to the new Derby database\n         VersionHistoryService vhs = createVersionHistoryService();\n-        derby.createSchema(vhs, pdm);\n-\n+        \n+        // Create the schema in a managed transaction\n+        try (ITransaction tx = transactionProvider.getTransaction()) {\n+            try {\n+                derby.createSchema(connectionPool, vhs, pdm);\n+            }\n+            catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MTA1NA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447971054", "createdAt": "2020-06-30T20:51:18Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -73,8 +82,19 @@ public DerbyFhirDatabase(String dbPath) throws SQLException {\n \n         // apply the model we've defined to the new Derby database\n         VersionHistoryService vhs = createVersionHistoryService();\n-        derby.createSchema(vhs, pdm);\n-\n+        \n+        // Create the schema in a managed transaction\n+        try (ITransaction tx = transactionProvider.getTransaction()) {\n+            try {\n+                derby.createSchema(connectionPool, vhs, pdm);\n+            }\n+            catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MTczNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUyMTA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowMTo0NlrOGqP1eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MjowMlrOGrOARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MjgyNQ==", "bodyText": "Remove this code as it is not needed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446952825", "createdAt": "2020-06-29T13:01:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -44,10 +44,17 @@\n     private static final String BATCH_SCHEMANAME = Main.BATCH_SCHEMANAME;\n \n     // The translator to help us out with Derby syntax\n-    private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();\n+    // private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MTM5OQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447971399", "createdAt": "2020-06-30T20:52:02Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -44,10 +44,17 @@\n     private static final String BATCH_SCHEMANAME = Main.BATCH_SCHEMANAME;\n \n     // The translator to help us out with Derby syntax\n-    private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();\n+    // private static final IDatabaseTranslator DERBY_TRANSLATOR = new DerbyTranslator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MjgyNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUyMzE2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowMjoyMVrOGqP2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MjoyOVrOGrOBQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MzE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (SQLException x) {\n          \n          \n            \n                        } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446953158", "createdAt": "2020-06-29T13:02:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -89,59 +109,69 @@ public void populateResourceTypeAndParameterNameTableEntries() throws SQLExcepti\n         // Prepopulate the Resource Type Tables and Parameters Name/Code Table\n         logger.info(\"started prepopulating lookup table data.\");\n         DerbyTranslator translator = new DerbyTranslator();\n-        Connection connection = getConnection();\n-\n-        // Ensures we don't double up the generated derby db prepopulation.\n-        // Docs for the table are at https://db.apache.org/derby/docs/10.5/ref/rrefsistabs24269.html\n-        boolean process = true;\n-        final String sql = \"SELECT COUNT(TABLENAME) AS CNT FROM SYS.SYSTABLES WHERE TABLENAME = 'PARAMETER_NAMES'\";\n-        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n-            stmt.execute();\n-            ResultSet set = stmt.getResultSet();\n-            if (set.next()) {\n-                int val = set.getInt(\"CNT\");\n-                if (val > 0) {\n-                    process = false;\n+        try (Connection connection = getConnection()) {\n+\n+            // Ensures we don't double up the generated derby db prepopulation.\n+            // Docs for the table are at https://db.apache.org/derby/docs/10.5/ref/rrefsistabs24269.html\n+            boolean process = true;\n+            final String sql = \"SELECT COUNT(TABLENAME) AS CNT FROM SYS.SYSTABLES WHERE TABLENAME = 'PARAMETER_NAMES'\";\n+            try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n+                stmt.execute();\n+                ResultSet set = stmt.getResultSet();\n+                if (set.next()) {\n+                    int val = set.getInt(\"CNT\");\n+                    if (val > 0) {\n+                        process = false;\n+                    }\n                 }\n             }\n-        }\n-\n-        if (process) {\n-            PopulateResourceTypes populateResourceTypes =\n-                    new PopulateResourceTypes(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n-            populateResourceTypes.run(translator, connection);\n-\n-            PopulateParameterNames populateParameterNames =\n-                    new PopulateParameterNames(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n-            populateParameterNames.run(translator, connection);\n+    \n+            if (process) {\n+                PopulateResourceTypes populateResourceTypes =\n+                        new PopulateResourceTypes(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n+                populateResourceTypes.run(translator, connection);\n+    \n+                PopulateParameterNames populateParameterNames =\n+                        new PopulateParameterNames(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n+                populateParameterNames.run(translator, connection);\n+                logger.info(\"Finished prepopulating the resource type and search parameter code/name tables tables\");\n+            } else {\n+                logger.info(\"Skipped prepopulating the resource type and search parameter code/name tables tables\");\n+            }\n+            \n+            // always commit here before we close the connection.\n             connection.commit();\n-            logger.info(\"Finished prepopulating the resource type and search parameter code/name tables tables\");\n-        } else {\n-            logger.info(\"Skipped prepopulating the resource type and search parameter code/name tables tables\");\n         }\n     }\n \n     /**\n-     * Configure the TransactionProvider\n+     * Create the version history table and a simple service which is used to\n+     * access information from it.\n      * \n      * @throws SQLException\n      */\n     public VersionHistoryService createVersionHistoryService() throws SQLException {\n-        Connection c = derby.getConnection();\n-        JdbcTarget target = new JdbcTarget(c);\n-\n-        JdbcPropertyAdapter jdbcAdapter = new JdbcPropertyAdapter(new Properties());\n-        JdbcConnectionProvider cp = new JdbcConnectionProvider(DERBY_TRANSLATOR, jdbcAdapter);\n-        PoolConnectionProvider connectionPool = new PoolConnectionProvider(cp, 200);\n-        ITransactionProvider transactionProvider = new SimpleTransactionProvider(connectionPool);\n-\n-        DerbyAdapter derbyAdapter = new DerbyAdapter(target);\n-        CreateVersionHistory.createTableIfNeeded(ADMIN_SCHEMA_NAME, derbyAdapter);\n \n-        // Current version history for the data schema\n+        // No complex transaction handling required here. Simply check if the versions\n+        // table exists, and if not, create it.\n+        try (Connection c = derby.getConnection()) {\n+            try {\n+                JdbcTarget target = new JdbcTarget(c);\n+                DerbyAdapter derbyAdapter = new DerbyAdapter(target);\n+                CreateVersionHistory.createTableIfNeeded(ADMIN_SCHEMA_NAME, derbyAdapter);\n+                c.commit();\n+            }\n+            catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MTY1MQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447971651", "createdAt": "2020-06-30T20:52:29Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -89,59 +109,69 @@ public void populateResourceTypeAndParameterNameTableEntries() throws SQLExcepti\n         // Prepopulate the Resource Type Tables and Parameters Name/Code Table\n         logger.info(\"started prepopulating lookup table data.\");\n         DerbyTranslator translator = new DerbyTranslator();\n-        Connection connection = getConnection();\n-\n-        // Ensures we don't double up the generated derby db prepopulation.\n-        // Docs for the table are at https://db.apache.org/derby/docs/10.5/ref/rrefsistabs24269.html\n-        boolean process = true;\n-        final String sql = \"SELECT COUNT(TABLENAME) AS CNT FROM SYS.SYSTABLES WHERE TABLENAME = 'PARAMETER_NAMES'\";\n-        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n-            stmt.execute();\n-            ResultSet set = stmt.getResultSet();\n-            if (set.next()) {\n-                int val = set.getInt(\"CNT\");\n-                if (val > 0) {\n-                    process = false;\n+        try (Connection connection = getConnection()) {\n+\n+            // Ensures we don't double up the generated derby db prepopulation.\n+            // Docs for the table are at https://db.apache.org/derby/docs/10.5/ref/rrefsistabs24269.html\n+            boolean process = true;\n+            final String sql = \"SELECT COUNT(TABLENAME) AS CNT FROM SYS.SYSTABLES WHERE TABLENAME = 'PARAMETER_NAMES'\";\n+            try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n+                stmt.execute();\n+                ResultSet set = stmt.getResultSet();\n+                if (set.next()) {\n+                    int val = set.getInt(\"CNT\");\n+                    if (val > 0) {\n+                        process = false;\n+                    }\n                 }\n             }\n-        }\n-\n-        if (process) {\n-            PopulateResourceTypes populateResourceTypes =\n-                    new PopulateResourceTypes(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n-            populateResourceTypes.run(translator, connection);\n-\n-            PopulateParameterNames populateParameterNames =\n-                    new PopulateParameterNames(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n-            populateParameterNames.run(translator, connection);\n+    \n+            if (process) {\n+                PopulateResourceTypes populateResourceTypes =\n+                        new PopulateResourceTypes(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n+                populateResourceTypes.run(translator, connection);\n+    \n+                PopulateParameterNames populateParameterNames =\n+                        new PopulateParameterNames(ADMIN_SCHEMA_NAME, SCHEMA_NAME, null);\n+                populateParameterNames.run(translator, connection);\n+                logger.info(\"Finished prepopulating the resource type and search parameter code/name tables tables\");\n+            } else {\n+                logger.info(\"Skipped prepopulating the resource type and search parameter code/name tables tables\");\n+            }\n+            \n+            // always commit here before we close the connection.\n             connection.commit();\n-            logger.info(\"Finished prepopulating the resource type and search parameter code/name tables tables\");\n-        } else {\n-            logger.info(\"Skipped prepopulating the resource type and search parameter code/name tables tables\");\n         }\n     }\n \n     /**\n-     * Configure the TransactionProvider\n+     * Create the version history table and a simple service which is used to\n+     * access information from it.\n      * \n      * @throws SQLException\n      */\n     public VersionHistoryService createVersionHistoryService() throws SQLException {\n-        Connection c = derby.getConnection();\n-        JdbcTarget target = new JdbcTarget(c);\n-\n-        JdbcPropertyAdapter jdbcAdapter = new JdbcPropertyAdapter(new Properties());\n-        JdbcConnectionProvider cp = new JdbcConnectionProvider(DERBY_TRANSLATOR, jdbcAdapter);\n-        PoolConnectionProvider connectionPool = new PoolConnectionProvider(cp, 200);\n-        ITransactionProvider transactionProvider = new SimpleTransactionProvider(connectionPool);\n-\n-        DerbyAdapter derbyAdapter = new DerbyAdapter(target);\n-        CreateVersionHistory.createTableIfNeeded(ADMIN_SCHEMA_NAME, derbyAdapter);\n \n-        // Current version history for the data schema\n+        // No complex transaction handling required here. Simply check if the versions\n+        // table exists, and if not, create it.\n+        try (Connection c = derby.getConnection()) {\n+            try {\n+                JdbcTarget target = new JdbcTarget(c);\n+                DerbyAdapter derbyAdapter = new DerbyAdapter(target);\n+                CreateVersionHistory.createTableIfNeeded(ADMIN_SCHEMA_NAME, derbyAdapter);\n+                c.commit();\n+            }\n+            catch (SQLException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MzE1OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU1MDIwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowODo1NFrOGqQHDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MzoyOVrOGrODNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NzMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446957326", "createdAt": "2020-06-29T13:08:54Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T runStatement(IDatabaseTranslator translator, IDatabaseSupplier<T> supplier) {\n+        // execute the statement using the given translator and a fresh connection\n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            \n+            T result;\n+            try {\n+                result = supplier.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+            return result;\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+            \n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MjE1MA==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447972150", "createdAt": "2020-06-30T20:53:29Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T runStatement(IDatabaseTranslator translator, IDatabaseSupplier<T> supplier) {\n+        // execute the statement using the given translator and a fresh connection\n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            \n+            T result;\n+            try {\n+                result = supplier.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+            return result;\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+            \n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NzMyNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MDczOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/group/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMToxNlrOGqQNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMToxNlrOGqQNYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1ODk0Ng==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446958946", "createdAt": "2020-06-29T13:11:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/group/ChunkReader.java", "diffHunk": "@@ -85,10 +85,13 @@ private Group findGroupByID(String groupId) throws Exception{\n         searchContext = SearchUtil.parseQueryParameters(Group.class, queryParameters);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.enroll();\n-        persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-        resources = fhirPersistence.search(persistenceContext, Group.class).getResource();\n-        txn.unenroll();\n+        txn.begin();\n+        try {\n+            persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            resources = fhirPersistence.search(persistenceContext, Group.class).getResource();\n+        } finally {\n+            txn.end();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MTY5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/group/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMToyN1rOGqQN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMToyN1rOGqQN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTA4NA==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959084", "createdAt": "2020-06-29T13:11:27Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/group/ChunkReader.java", "diffHunk": "@@ -108,10 +111,13 @@ private Group findGroupByID(String groupId) throws Exception{\n         searchContext.setPageSize(pageSize);\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n \n-        txn.enroll();\n-        persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-        patients = fhirPersistence.search(persistenceContext, Patient.class).getResource();\n-        txn.unenroll();\n+        txn.begin();\n+        try {\n+            persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            patients = fhirPersistence.search(persistenceContext, Patient.class).getResource();\n+        } finally {\n+            txn.end();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MjM1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTozNlrOGqQOTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTozNlrOGqQOTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTE4Mw==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959183", "createdAt": "2020-06-29T13:11:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/patient/ChunkReader.java", "diffHunk": "@@ -175,10 +175,15 @@ protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n                         searchContext.setPageSize(pageSize);\n                         searchContext.setPageNumber(compartmentPageNum);\n                         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                        txn.enroll();\n                         FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                        txn.unenroll();\n+\n+                        List<Resource> resources;\n+                        txn.begin();\n+                        try {\n+                            resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        } finally {\n+                            txn.end();\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MjQyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DataDefinitionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTozOFrOGqQOXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1NDozOVrOGrOFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the value contains risky characters\n          \n          \n            \n                 * @throws IllegalArgumentException if the value contains unapproved characters", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959198", "createdAt": "2020-06-29T13:11:38Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DataDefinitionUtil.java", "diffHunk": "@@ -160,6 +160,7 @@ public static void assertValidNames(String... names) {\n      * as part of a larger CREATE/ALTER statement. Note: none of the input\n      * being dealt with here is external input...so it should be safe already.\n      * @param value\n+     * @throws IllegalArgumentException if the value contains risky characters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MjcyOA==", "bodyText": "I don't see anything wrong with saying risky here, especially given that this relates to security", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447972728", "createdAt": "2020-06-30T20:54:39Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DataDefinitionUtil.java", "diffHunk": "@@ -160,6 +160,7 @@ public static void assertValidNames(String... names) {\n      * as part of a larger CREATE/ALTER statement. Note: none of the input\n      * being dealt with here is external input...so it should be safe already.\n      * @param value\n+     * @throws IllegalArgumentException if the value contains risky characters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTE5OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MjkyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo0NFrOGqQOsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo0NFrOGqQOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTI4Mg==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959282", "createdAt": "2020-06-29T13:11:44Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/patient/ChunkReader.java", "diffHunk": "@@ -297,10 +302,14 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.enroll();\n-        persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-        resources = fhirPersistence.search(persistenceContext, Patient.class).getResource();\n-        txn.unenroll();\n+        txn.begin();\n+        \n+        try {\n+            persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            resources = fhirPersistence.search(persistenceContext, Patient.class).getResource();\n+        } finally {\n+            txn.end();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MzU0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo1MlrOGqQPEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo1MlrOGqQPEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTM3Nw==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959377", "createdAt": "2020-06-29T13:11:52Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/export/system/ChunkReader.java", "diffHunk": "@@ -210,10 +210,13 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.enroll();\n-        persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-        resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-        txn.unenroll();\n+        txn.begin();\n+        try {\n+            persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+        } finally {\n+            txn.end();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2NTQ2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMjoxOFrOGqQQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1NToxNlrOGrOG_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTY2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959663", "createdAt": "2020-06-29T13:12:18Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropIndex.java", "diffHunk": "@@ -40,6 +42,8 @@ public void run(IDatabaseTranslator translator, Connection c) {\n             s.executeUpdate(\"DROP INDEX \" + qname);\n         }\n         catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzExOQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447973119", "createdAt": "2020-06-30T20:55:16Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropIndex.java", "diffHunk": "@@ -40,6 +42,8 @@ public void run(IDatabaseTranslator translator, Connection c) {\n             s.executeUpdate(\"DROP INDEX \" + qname);\n         }\n         catch (SQLException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTY2Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2NTc3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/load/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMjoyM1rOGqQQXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMjoyM1rOGqQQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTcwOQ==", "bodyText": "not sure if this can work well, need to be verified by the minio enabled build pipeline.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446959709", "createdAt": "2020-06-29T13:12:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/jbatch/bulkdata/load/ChunkWriter.java", "diffHunk": "@@ -183,41 +183,44 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         // Acquire a DB connection which will be used in the batch.\n         // This doesn't really start the transaction, because the transaction has already been started by the JavaBatch\n         // framework at this time point.\n-        txn.enroll();\n-        for (Object objResJsonList : arg0) {\n-            @SuppressWarnings(\"unchecked\")\n-            List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n-\n-            for (Resource fhirResource : fhirResourceList) {\n-                try {\n-                    String id = fhirResource.getId();\n-                    processedNum++;\n-                    // Skip the resources which failed the validation\n-                    if (failValidationIds.contains(id)) {\n-                        continue;\n-                    }\n-                    OperationOutcome operationOutcome =\n-                            fhirPersistence.update(persistenceContext, id, fhirResource).getOutcome();\n-                    succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n-                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n-                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n-                    }\n-                } catch (FHIROperationException e) {\n-                    logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n-                    failedNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        OperationOutcome operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n-                        FHIRGenerator.generator(Format.JSON).generate(operationOutCome, chunkData.getBufferStreamForImportError());\n-                        chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);\n+        txn.begin();\n+        try {\n+            for (Object objResJsonList : arg0) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n+    \n+                for (Resource fhirResource : fhirResourceList) {\n+                    try {\n+                        String id = fhirResource.getId();\n+                        processedNum++;\n+                        // Skip the resources which failed the validation\n+                        if (failValidationIds.contains(id)) {\n+                            continue;\n+                        }\n+                        OperationOutcome operationOutcome =\n+                                fhirPersistence.update(persistenceContext, id, fhirResource).getOutcome();\n+                        succeededNum++;\n+                        if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                            chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n+                        }\n+                    } catch (FHIROperationException e) {\n+                        logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n+                        failedNum++;\n+                        if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                            OperationOutcome operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                            FHIRGenerator.generator(Format.JSON).generate(operationOutCome, chunkData.getBufferStreamForImportError());\n+                            chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);\n+                        }\n                     }\n                 }\n             }\n+        } finally {\n+            // Release the DB connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTYzMzUxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyNzoyM1rOGqQ5-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1NzowNVrOGrOLMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MDM2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param vhs\n          \n          \n            \n                 * @param pdm\n          \n          \n            \n                 * @param pool\n          \n          \n            \n                 * @param vhs\n          \n          \n            \n                 * @param pdm", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446970363", "createdAt": "2020-06-29T13:27:23Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDE5Mw==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447974193", "createdAt": "2020-06-30T20:57:05Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MDM2Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY0MTYyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyOToxNFrOGqQ-8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1NzozNFrOGrOMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTYzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException e) {\n          \n          \n            \n                    } catch (SQLException e) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446971635", "createdAt": "2020-06-29T13:29:14Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * @implNote this drop is only relevant for in-memory Derby databases, which we no\n+     *           longer use due to the size of the tests. This does not remove any\n+     *           files on disk.\n+     */\n     @Override\n     public void close() throws Exception {\n-        // Drop the database we created\n-        boolean dropped = false;\n+        shutdown(database);\n+    }\n+    \n+    public static void shutdown(String databaseName) {\n+        boolean shutdown = false;\n         try {\n-            if (connection != null && !connection.isClosed()) {\n-                connection.close();\n-            }\n             Properties properties = new Properties();\n             DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-            adapter.setDatabase(database);\n+            adapter.setDatabase(databaseName);\n \n-            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";drop=true\";\n-            logger.info(\"Dropping derby DB with: \" + dropper);\n+            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";shutdown=true\";\n+            logger.info(\"Shutting down Derby DB '\" + databaseName + \"' with: \" + dropper);\n+            \n+            // should throw an exception if successful\n             DriverManager.getConnection(dropper);\n         }\n         catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDQ1MQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447974451", "createdAt": "2020-06-30T20:57:34Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * @implNote this drop is only relevant for in-memory Derby databases, which we no\n+     *           longer use due to the size of the tests. This does not remove any\n+     *           files on disk.\n+     */\n     @Override\n     public void close() throws Exception {\n-        // Drop the database we created\n-        boolean dropped = false;\n+        shutdown(database);\n+    }\n+    \n+    public static void shutdown(String databaseName) {\n+        boolean shutdown = false;\n         try {\n-            if (connection != null && !connection.isClosed()) {\n-                connection.close();\n-            }\n             Properties properties = new Properties();\n             DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-            adapter.setDatabase(database);\n+            adapter.setDatabase(databaseName);\n \n-            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";drop=true\";\n-            logger.info(\"Dropping derby DB with: \" + dropper);\n+            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";shutdown=true\";\n+            logger.info(\"Shutting down Derby DB '\" + databaseName + \"' with: \" + dropper);\n+            \n+            // should throw an exception if successful\n             DriverManager.getConnection(dropper);\n         }\n         catch (SQLException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTYzNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY0MzI1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyOTozNlrOGqQ_7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0MDowMFrOGrJrfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTg4NA==", "bodyText": "I do not follow this message", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446971884", "createdAt": "2020-06-29T13:29:36Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * @implNote this drop is only relevant for in-memory Derby databases, which we no\n+     *           longer use due to the size of the tests. This does not remove any\n+     *           files on disk.\n+     */\n     @Override\n     public void close() throws Exception {\n-        // Drop the database we created\n-        boolean dropped = false;\n+        shutdown(database);\n+    }\n+    \n+    public static void shutdown(String databaseName) {\n+        boolean shutdown = false;\n         try {\n-            if (connection != null && !connection.isClosed()) {\n-                connection.close();\n-            }\n             Properties properties = new Properties();\n             DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-            adapter.setDatabase(database);\n+            adapter.setDatabase(databaseName);\n \n-            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";drop=true\";\n-            logger.info(\"Dropping derby DB with: \" + dropper);\n+            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";shutdown=true\";\n+            logger.info(\"Shutting down Derby DB '\" + databaseName + \"' with: \" + dropper);\n+            \n+            // should throw an exception if successful\n             DriverManager.getConnection(dropper);\n         }\n         catch (SQLException e) {\n-            logger.info(\"Expected error while closing the database: \" + e.getMessage());\n-            dropped = true;\n+            // should say \"Database 'target/derby/...' shutdown.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczOTI1Mw==", "bodyText": "When you shut down a Derby database, it throws an exception to indicate that the shutdown was successful.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447739253", "createdAt": "2020-06-30T14:43:18Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * @implNote this drop is only relevant for in-memory Derby databases, which we no\n+     *           longer use due to the size of the tests. This does not remove any\n+     *           files on disk.\n+     */\n     @Override\n     public void close() throws Exception {\n-        // Drop the database we created\n-        boolean dropped = false;\n+        shutdown(database);\n+    }\n+    \n+    public static void shutdown(String databaseName) {\n+        boolean shutdown = false;\n         try {\n-            if (connection != null && !connection.isClosed()) {\n-                connection.close();\n-            }\n             Properties properties = new Properties();\n             DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-            adapter.setDatabase(database);\n+            adapter.setDatabase(databaseName);\n \n-            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";drop=true\";\n-            logger.info(\"Dropping derby DB with: \" + dropper);\n+            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";shutdown=true\";\n+            logger.info(\"Shutting down Derby DB '\" + databaseName + \"' with: \" + dropper);\n+            \n+            // should throw an exception if successful\n             DriverManager.getConnection(dropper);\n         }\n         catch (SQLException e) {\n-            logger.info(\"Expected error while closing the database: \" + e.getMessage());\n-            dropped = true;\n+            // should say \"Database 'target/derby/...' shutdown.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTg4NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMDU0MA==", "bodyText": "I think it's a confusing message.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447900540", "createdAt": "2020-06-30T18:40:00Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * @implNote this drop is only relevant for in-memory Derby databases, which we no\n+     *           longer use due to the size of the tests. This does not remove any\n+     *           files on disk.\n+     */\n     @Override\n     public void close() throws Exception {\n-        // Drop the database we created\n-        boolean dropped = false;\n+        shutdown(database);\n+    }\n+    \n+    public static void shutdown(String databaseName) {\n+        boolean shutdown = false;\n         try {\n-            if (connection != null && !connection.isClosed()) {\n-                connection.close();\n-            }\n             Properties properties = new Properties();\n             DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-            adapter.setDatabase(database);\n+            adapter.setDatabase(databaseName);\n \n-            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";drop=true\";\n-            logger.info(\"Dropping derby DB with: \" + dropper);\n+            final String dropper = DERBY_TRANSLATOR.getUrl(properties) + \";shutdown=true\";\n+            logger.info(\"Shutting down Derby DB '\" + databaseName + \"' with: \" + dropper);\n+            \n+            // should throw an exception if successful\n             DriverManager.getConnection(dropper);\n         }\n         catch (SQLException e) {\n-            logger.info(\"Expected error while closing the database: \" + e.getMessage());\n-            dropped = true;\n+            // should say \"Database 'target/derby/...' shutdown.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTg4NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY0Njk2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMDoyNFrOGqRCDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0NToxNlrOGq_7sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446972430", "createdAt": "2020-06-29T13:30:24Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */\n+    @Override\n+    public String selectSequenceNextValue(String schemaName, String sequenceName) {\n+        String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MDg1MA==", "bodyText": "fixed in my next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447740850", "createdAt": "2020-06-30T14:45:16Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */\n+    @Override\n+    public String selectSequenceNextValue(String schemaName, String sequenceName) {\n+        String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjQzMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY1NTA0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMjowNlrOGqRG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0Njo1NFrOGrAAYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MzY3Ng==", "bodyText": "please fix the javadoc", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446973676", "createdAt": "2020-06-29T13:32:06Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MjA0OA==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447742048", "createdAt": "2020-06-30T14:46:54Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MzY3Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY1NzE5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMjozNVrOGqRINA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0NzozNVrOGrACeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDAwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446974004", "createdAt": "2020-06-29T13:32:35Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {\n+        super(schemaName, sequenceName, DatabaseObjectType.SEQUENCE, version);\n+        this.startWith = startWith;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterSequenceRestartWith(getSchemaName(), getObjectName(), startWith, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visit(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */\n+    @Override\n+    public void visit(DataModelVisitor v) {\n+        v.visited(this);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visitReverse(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */\n+    @Override\n+    public void visitReverse(DataModelVisitor v) {\n+        v.visited(this);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MjU4Ng==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447742586", "createdAt": "2020-06-30T14:47:35Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {\n+        super(schemaName, sequenceName, DatabaseObjectType.SEQUENCE, version);\n+        this.startWith = startWith;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterSequenceRestartWith(getSchemaName(), getObjectName(), startWith, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visit(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */\n+    @Override\n+    public void visit(DataModelVisitor v) {\n+        v.visited(this);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visitReverse(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */\n+    @Override\n+    public void visitReverse(DataModelVisitor v) {\n+        v.visited(this);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDAwNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY2NzA4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozNDo1NVrOGqROJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1MTozMVrOGrAO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NTUyNQ==", "bodyText": "does this signature change impact anything in prior releases?\ne.g. what's stored in the version history table?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446975525", "createdAt": "2020-06-29T13:34:55Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -108,11 +108,11 @@\n     public String getName();\n \n     /**\n-     * Get the qualified name for this object prefixed with the object type\n-     * which acts as a namespace\n+     * Get the qualified name for this object:\n+     *   objectType:objectName:objectVersion\n      * @return\n      */\n-    public String getTypeAndName();\n+    public String getTypeNameVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTc0NA==", "bodyText": "No, this doesn't change the semantics of the version history table. Its primary use is to provide a unique name describing the object/change in the task list (which can apply schema changes in parallel).", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447745744", "createdAt": "2020-06-30T14:51:31Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -108,11 +108,11 @@\n     public String getName();\n \n     /**\n-     * Get the qualified name for this object prefixed with the object type\n-     * which acts as a namespace\n+     * Get the qualified name for this object:\n+     *   objectType:objectName:objectVersion\n      * @return\n      */\n-    public String getTypeAndName();\n+    public String getTypeNameVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NTUyNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY3MzUxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozNjoyMlrOGqRR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1MjozM1rOGrASJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NjQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param sequenceName\n          \n          \n            \n                 * @param cache\n          \n          \n            \n                 * @param sequenceName\n          \n          \n            \n                 * @param version\n          \n          \n            \n                 * @param startWith\n          \n          \n            \n                 * @param cache", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446976487", "createdAt": "2020-06-29T13:36:22Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -23,14 +27,15 @@\n      * @param sequenceName\n      * @param cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NjU5OQ==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447746599", "createdAt": "2020-06-30T14:52:33Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -23,14 +27,15 @@\n      * @param sequenceName\n      * @param cache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NjQ4Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY4MDQ0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/pool/PoolConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozODowMFrOGqRWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo0NlrOGrAWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NzU3MA==", "bodyText": "Fix the copyright at the top of the file", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446977570", "createdAt": "2020-06-29T13:38:00Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/pool/PoolConnectionProvider.java", "diffHunk": "@@ -275,4 +275,21 @@ public void describe(String prefix, StringBuilder cfg, String key) {\n     public int getPoolSize() {\n         return this.maxPoolSize;\n     }\n+\n+    /**\n+     * The caller is telling us they no longer need to use the pool so we can free\n+     * any internal resources. This also let's us check for anything currently\n+     * in-use that shouldn't be\n+     * @throws IllegalStateException if there are open connections or a transaction\n+     *         is active.\n+     */\n+    public void close() {\n+        if (activeConnection.get() != null) {\n+            throw new IllegalStateException(\"transaction still active\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzYyNg==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447747626", "createdAt": "2020-06-30T14:53:46Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/pool/PoolConnectionProvider.java", "diffHunk": "@@ -275,4 +275,21 @@ public void describe(String prefix, StringBuilder cfg, String key) {\n     public int getPoolSize() {\n         return this.maxPoolSize;\n     }\n+\n+    /**\n+     * The caller is telling us they no longer need to use the pool so we can free\n+     * any internal resources. This also let's us check for anything currently\n+     * in-use that shouldn't be\n+     * @throws IllegalStateException if there are open connections or a transaction\n+     *         is active.\n+     */\n+    public void close() {\n+        if (activeConnection.get() != null) {\n+            throw new IllegalStateException(\"transaction still active\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NzU3MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY5NTAxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0MTowNlrOGqRe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1NTo1MVrOGrAc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3OTgyOQ==", "bodyText": "what's the behavior for default?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446979829", "createdAt": "2020-06-29T13:41:06Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "diffHunk": "@@ -7,77 +7,71 @@\n package com.ibm.fhir.persistence.jdbc;\n \n import java.sql.Connection;\n-import java.sql.SQLException;\n \n import javax.transaction.TransactionSynchronizationRegistry;\n \n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.ResourceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n import com.ibm.fhir.persistence.jdbc.derby.DerbyResourceDAO;\n import com.ibm.fhir.persistence.jdbc.postgresql.PostgreSqlResourceDAO;\n \n+/**\n+ * Factory for constructing ResourceDAO implementations specific to a\n+ * particular {@link FHIRDbFlavor}.\n+ */\n public class FHIRResourceDAOFactory {\n \n-    // The various DAO Types that are used in the JDBC Persistence layer.\n-    public enum FHIRResourceDAOType {\n-        DB2(\"jdbc:db2:\"),\n-        DERBY(\"derby\"),\n-        POSTGRESQL(\"jdbc:postgresql:\");\n-\n-        private final String value;\n-\n-        FHIRResourceDAOType(String value) {\n-            this.value = value;\n-        }\n-\n-        public String value() {\n-            return value;\n-        }\n-\n-        public static FHIRResourceDAOType of(Connection conn) throws SQLException, IllegalArgumentException {\n-            String dbUrl = conn.getMetaData().getURL();\n-            dbUrl = dbUrl.toLowerCase();\n-            if (dbUrl.contains(DB2.value)) {\n-                return DB2;\n-            } else if (dbUrl.contains(DERBY.value)) {\n-                return DERBY;\n-            } else if (dbUrl.contains(POSTGRESQL.value)) {\n-                return POSTGRESQL;\n-            } else {\n-                throw new IllegalArgumentException(dbUrl);\n-            }\n-\n-        }\n-    }\n-\n-   public static ResourceDAO getResourceDAO (Connection conn, TransactionSynchronizationRegistry trxSynchRegistry) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @param trxSynchRegistry\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry)\n+        throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(trxSynchRegistry);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(trxSynchRegistry);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(trxSynchRegistry);\n-                break;\n+        \n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0OTM2Mw==", "bodyText": "default not required because all the cases of the enum are covered.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447749363", "createdAt": "2020-06-30T14:55:51Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "diffHunk": "@@ -7,77 +7,71 @@\n package com.ibm.fhir.persistence.jdbc;\n \n import java.sql.Connection;\n-import java.sql.SQLException;\n \n import javax.transaction.TransactionSynchronizationRegistry;\n \n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.ResourceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n import com.ibm.fhir.persistence.jdbc.derby.DerbyResourceDAO;\n import com.ibm.fhir.persistence.jdbc.postgresql.PostgreSqlResourceDAO;\n \n+/**\n+ * Factory for constructing ResourceDAO implementations specific to a\n+ * particular {@link FHIRDbFlavor}.\n+ */\n public class FHIRResourceDAOFactory {\n \n-    // The various DAO Types that are used in the JDBC Persistence layer.\n-    public enum FHIRResourceDAOType {\n-        DB2(\"jdbc:db2:\"),\n-        DERBY(\"derby\"),\n-        POSTGRESQL(\"jdbc:postgresql:\");\n-\n-        private final String value;\n-\n-        FHIRResourceDAOType(String value) {\n-            this.value = value;\n-        }\n-\n-        public String value() {\n-            return value;\n-        }\n-\n-        public static FHIRResourceDAOType of(Connection conn) throws SQLException, IllegalArgumentException {\n-            String dbUrl = conn.getMetaData().getURL();\n-            dbUrl = dbUrl.toLowerCase();\n-            if (dbUrl.contains(DB2.value)) {\n-                return DB2;\n-            } else if (dbUrl.contains(DERBY.value)) {\n-                return DERBY;\n-            } else if (dbUrl.contains(POSTGRESQL.value)) {\n-                return POSTGRESQL;\n-            } else {\n-                throw new IllegalArgumentException(dbUrl);\n-            }\n-\n-        }\n-    }\n-\n-   public static ResourceDAO getResourceDAO (Connection conn, TransactionSynchronizationRegistry trxSynchRegistry) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @param trxSynchRegistry\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry)\n+        throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(trxSynchRegistry);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(trxSynchRegistry);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(trxSynchRegistry);\n-                break;\n+        \n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3OTgyOQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY5OTkxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0MjowOFrOGqRh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Nzo1MFrOGrAjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MDYwMA==", "bodyText": "default behavior?\nps. seems very duplicate of prior method?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446980600", "createdAt": "2020-06-29T13:42:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "diffHunk": "@@ -7,77 +7,71 @@\n package com.ibm.fhir.persistence.jdbc;\n \n import java.sql.Connection;\n-import java.sql.SQLException;\n \n import javax.transaction.TransactionSynchronizationRegistry;\n \n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.ResourceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n import com.ibm.fhir.persistence.jdbc.derby.DerbyResourceDAO;\n import com.ibm.fhir.persistence.jdbc.postgresql.PostgreSqlResourceDAO;\n \n+/**\n+ * Factory for constructing ResourceDAO implementations specific to a\n+ * particular {@link FHIRDbFlavor}.\n+ */\n public class FHIRResourceDAOFactory {\n \n-    // The various DAO Types that are used in the JDBC Persistence layer.\n-    public enum FHIRResourceDAOType {\n-        DB2(\"jdbc:db2:\"),\n-        DERBY(\"derby\"),\n-        POSTGRESQL(\"jdbc:postgresql:\");\n-\n-        private final String value;\n-\n-        FHIRResourceDAOType(String value) {\n-            this.value = value;\n-        }\n-\n-        public String value() {\n-            return value;\n-        }\n-\n-        public static FHIRResourceDAOType of(Connection conn) throws SQLException, IllegalArgumentException {\n-            String dbUrl = conn.getMetaData().getURL();\n-            dbUrl = dbUrl.toLowerCase();\n-            if (dbUrl.contains(DB2.value)) {\n-                return DB2;\n-            } else if (dbUrl.contains(DERBY.value)) {\n-                return DERBY;\n-            } else if (dbUrl.contains(POSTGRESQL.value)) {\n-                return POSTGRESQL;\n-            } else {\n-                throw new IllegalArgumentException(dbUrl);\n-            }\n-\n-        }\n-    }\n-\n-   public static ResourceDAO getResourceDAO (Connection conn, TransactionSynchronizationRegistry trxSynchRegistry) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @param trxSynchRegistry\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry)\n+        throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(trxSynchRegistry);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(trxSynchRegistry);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(trxSynchRegistry);\n-                break;\n+        \n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n         }\n         return resourceDAO;\n     }\n \n-    public static ResourceDAO getResourceDAO (Connection conn) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor) throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(conn);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(conn);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(conn);\n-                break;\n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor);\n+            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MDkzOA==", "bodyText": "No default required.\nOne method passed a trxSynchRegistry.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447750938", "createdAt": "2020-06-30T14:57:50Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/FHIRResourceDAOFactory.java", "diffHunk": "@@ -7,77 +7,71 @@\n package com.ibm.fhir.persistence.jdbc;\n \n import java.sql.Connection;\n-import java.sql.SQLException;\n \n import javax.transaction.TransactionSynchronizationRegistry;\n \n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n import com.ibm.fhir.persistence.jdbc.dao.api.ResourceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n import com.ibm.fhir.persistence.jdbc.derby.DerbyResourceDAO;\n import com.ibm.fhir.persistence.jdbc.postgresql.PostgreSqlResourceDAO;\n \n+/**\n+ * Factory for constructing ResourceDAO implementations specific to a\n+ * particular {@link FHIRDbFlavor}.\n+ */\n public class FHIRResourceDAOFactory {\n \n-    // The various DAO Types that are used in the JDBC Persistence layer.\n-    public enum FHIRResourceDAOType {\n-        DB2(\"jdbc:db2:\"),\n-        DERBY(\"derby\"),\n-        POSTGRESQL(\"jdbc:postgresql:\");\n-\n-        private final String value;\n-\n-        FHIRResourceDAOType(String value) {\n-            this.value = value;\n-        }\n-\n-        public String value() {\n-            return value;\n-        }\n-\n-        public static FHIRResourceDAOType of(Connection conn) throws SQLException, IllegalArgumentException {\n-            String dbUrl = conn.getMetaData().getURL();\n-            dbUrl = dbUrl.toLowerCase();\n-            if (dbUrl.contains(DB2.value)) {\n-                return DB2;\n-            } else if (dbUrl.contains(DERBY.value)) {\n-                return DERBY;\n-            } else if (dbUrl.contains(POSTGRESQL.value)) {\n-                return POSTGRESQL;\n-            } else {\n-                throw new IllegalArgumentException(dbUrl);\n-            }\n-\n-        }\n-    }\n-\n-   public static ResourceDAO getResourceDAO (Connection conn, TransactionSynchronizationRegistry trxSynchRegistry) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @param trxSynchRegistry\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry)\n+        throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(trxSynchRegistry);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(trxSynchRegistry);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(trxSynchRegistry);\n-                break;\n+        \n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor, trxSynchRegistry);\n+            break;\n         }\n         return resourceDAO;\n     }\n \n-    public static ResourceDAO getResourceDAO (Connection conn) throws IllegalArgumentException, SQLException {\n+    /**\n+     * Construct a new ResourceDAO implementation matching the database type\n+     * @param connection valid connection to the database\n+     * @param schemaName the name of the schema containing the FHIR resource tables\n+     * @param flavor the type and capability of the database and schema\n+     * @return a concrete implementation of {@link ResourceDAO}\n+     * @throws IllegalArgumentException\n+     * @throws FHIRPersistenceException\n+     */\n+    public static ResourceDAO getResourceDAO(Connection connection, String schemaName, FHIRDbFlavor flavor) throws IllegalArgumentException, FHIRPersistenceException {\n         ResourceDAO resourceDAO = null;\n-        switch (FHIRResourceDAOType.of(conn)) {\n-            case DB2:\n-                resourceDAO = new ResourceDAOImpl(conn);\n-                break;\n-            case DERBY:\n-                resourceDAO = new DerbyResourceDAO(conn);\n-                break;\n-            case POSTGRESQL:\n-                resourceDAO = new PostgreSqlResourceDAO(conn);\n-                break;\n+        switch (flavor.getType()) {\n+        case DB2:\n+            resourceDAO = new ResourceDAOImpl(connection, schemaName, flavor);\n+            break;\n+        case DERBY:\n+            resourceDAO = new DerbyResourceDAO(connection, schemaName, flavor);\n+            break;\n+        case POSTGRESQL:\n+            resourceDAO = new PostgreSqlResourceDAO(connection, schemaName, flavor);\n+            break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MDYwMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTcwNDUwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0MzowMlrOGqRkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1ODo0M1rOGrAlzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446981274", "createdAt": "2020-06-29T13:43:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MTYyOA==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447751628", "createdAt": "2020-06-30T14:58:43Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTI3NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTcwNTQzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0MzoxN1rOGqRlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1OToxOFrOGrAnkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446981432", "createdAt": "2020-06-29T13:43:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Base for chaining actions together\n+ */\n+public class ChainedAction implements Action {\n+\n+    // the next action in the chain\n+    private final Action next;\n+\n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public ChainedAction(Action next) {\n+        this.next = next;\n+    }\n+\n+    /**\n+     * Public constructor where this action is the end of the chain\n+     */\n+    public ChainedAction() {\n+        this.next = null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MjA4Mg==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447752082", "createdAt": "2020-06-30T14:59:18Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Base for chaining actions together\n+ */\n+public class ChainedAction implements Action {\n+\n+    // the next action in the chain\n+    private final Action next;\n+\n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public ChainedAction(Action next) {\n+        this.next = next;\n+    }\n+\n+    /**\n+     * Public constructor where this action is the end of the chain\n+     */\n+    public ChainedAction() {\n+        this.next = null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTQzMg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTcyMjQ5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0Njo0M1rOGqRvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0OTo0NFrOGrAJBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NDAwNQ==", "bodyText": "isn't this inclusive of type name and version already? version isn't necessary", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446984005", "createdAt": "2020-06-29T13:46:43Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -256,7 +256,7 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n     @Override\n     public void applyVersion(IDatabaseAdapter target, IVersionHistoryService vhs) {\n         if (vhs.applies(getSchemaName(), getObjectType().name(), getObjectName(), version)) {\n-            logger.fine(\"Applying change [v\" + version + \"]: \" + this.getTypeAndName());\n+            logger.fine(\"Applying change [v\" + version + \"]: \" + this.getTypeNameVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NDI2MA==", "bodyText": "No, the logic requires we use version to distinguish the name - this is really important when creating the task list, which is used to apply the objects in parallel. Each version ends up being a task, but depends on the prior version so that they are applied in the correct order.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447744260", "createdAt": "2020-06-30T14:49:44Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -256,7 +256,7 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n     @Override\n     public void applyVersion(IDatabaseAdapter target, IVersionHistoryService vhs) {\n         if (vhs.applies(getSchemaName(), getObjectType().name(), getObjectName(), version)) {\n-            logger.fine(\"Applying change [v\" + version + \"]: \" + this.getTypeAndName());\n+            logger.fine(\"Applying change [v\" + version + \"]: \" + this.getTypeNameVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NDAwNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTczMDcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0ODoyNlrOGqR0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowMDowNlrOGrAqLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NTI5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446985296", "createdAt": "2020-06-29T13:48:26Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";\n+    public static final String PROPERTY_DB2_PSWD = \"password\";\n+    public static final String PROPERTY_SCHEMA_NAME = \"schemaName\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1Mjc0OQ==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447752749", "createdAt": "2020-06-30T15:00:06Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";\n+    public static final String PROPERTY_DB2_PSWD = \"password\";\n+    public static final String PROPERTY_SCHEMA_NAME = \"schemaName\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NTI5Ng=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTczNzMyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0OTo1NVrOGqR4bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMjo0MlrOGrBPYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjM0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446986349", "createdAt": "2020-06-29T13:49:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MjI3Mg==", "bodyText": "next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447762272", "createdAt": "2020-06-30T15:12:42Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjM0OQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTczOTY1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MDoyMVrOGqR5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxNDowN1rOGrBTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446986681", "createdAt": "2020-06-29T13:50:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MzMxMA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447763310", "createdAt": "2020-06-30T15:14:07Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjY4MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc0MTY0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MDo0NlrOGqR65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNTowNlrOGrB0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4Njk4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446986982", "createdAt": "2020-06-29T13:50:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MTc2OA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447771768", "createdAt": "2020-06-30T15:25:06Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4Njk4Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc0MjcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MTowMlrOGqR7nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNTo1OFrOGrB3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NzE2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446987164", "createdAt": "2020-06-29T13:51:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+\n+/**\n+ * Factory/strategy to instantiate FHIRTestTransactionHandler implementations\n+ * of the {@link FHIRPersistenceTransaction} interface. Typically used\n+ * to support unit-tests\n+ */\n+public class FHIRTestTransactionFactory implements FHIRTransactionFactory {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     */\n+    public FHIRTestTransactionFactory(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRTransactionFactory#create()\n+     */\n+    @Override\n+    public FHIRPersistenceTransaction create() {\n+        return new FHIRTestTransactionAdapter(connectionProvider);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MjQzMg==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447772432", "createdAt": "2020-06-30T15:25:58Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+\n+/**\n+ * Factory/strategy to instantiate FHIRTestTransactionHandler implementations\n+ * of the {@link FHIRPersistenceTransaction} interface. Typically used\n+ * to support unit-tests\n+ */\n+public class FHIRTestTransactionFactory implements FHIRTransactionFactory {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     */\n+    public FHIRTestTransactionFactory(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRTransactionFactory#create()\n+     */\n+    @Override\n+    public FHIRPersistenceTransaction create() {\n+        return new FHIRTestTransactionAdapter(connectionProvider);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NzE2NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc1NTMxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Mzo1M1rOGqSDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMjo0NVrOGrCLKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4OTE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param Connection - A database connection that will be managed by the caller.\n          \n          \n            \n                 * @param Connection - A database connection that will be managed by the caller.\n          \n          \n            \n                 * @param schemaName\n          \n          \n            \n                 * @param flavor", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446989194", "createdAt": "2020-06-29T13:53:53Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -45,28 +44,32 @@\n     private Map<String, Integer> newParameterNameIds = new HashMap<>();\n     private Map<String, Integer> newCodeSystemIds = new HashMap<>();\n \n-    private boolean runningInTrx = false;\n+    private final TransactionSynchronizationRegistry trxSynchRegistry;\n+    private final boolean runningInTrx;\n     private CodeSystemsCacheUpdater csCacheUpdater = null;\n     private ParameterNamesCacheUpdater pnCacheUpdater = null;\n-    private TransactionSynchronizationRegistry trxSynchRegistry;\n \n \n     /**\n      * Constructs a DAO instance suitable for acquiring connections from a JDBC Datasource object.\n      */\n-    public ParameterDAOImpl(TransactionSynchronizationRegistry trxSynchRegistry) {\n-        super();\n-        this.runningInTrx = true;\n+    public ParameterDAOImpl(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry) {\n+        super(connection, schemaName, flavor);\n         this.trxSynchRegistry = trxSynchRegistry;\n+        this.runningInTrx = true;\n     }\n \n     /**\n      * Constructs a DAO using the passed externally managed database connection.\n      * The connection used by this instance for all DB operations will be the passed connection.\n      * @param Connection - A database connection that will be managed by the caller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NzU3Ng==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447777576", "createdAt": "2020-06-30T15:32:45Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -45,28 +44,32 @@\n     private Map<String, Integer> newParameterNameIds = new HashMap<>();\n     private Map<String, Integer> newCodeSystemIds = new HashMap<>();\n \n-    private boolean runningInTrx = false;\n+    private final TransactionSynchronizationRegistry trxSynchRegistry;\n+    private final boolean runningInTrx;\n     private CodeSystemsCacheUpdater csCacheUpdater = null;\n     private ParameterNamesCacheUpdater pnCacheUpdater = null;\n-    private TransactionSynchronizationRegistry trxSynchRegistry;\n \n \n     /**\n      * Constructs a DAO instance suitable for acquiring connections from a JDBC Datasource object.\n      */\n-    public ParameterDAOImpl(TransactionSynchronizationRegistry trxSynchRegistry) {\n-        super();\n-        this.runningInTrx = true;\n+    public ParameterDAOImpl(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry) {\n+        super(connection, schemaName, flavor);\n         this.trxSynchRegistry = trxSynchRegistry;\n+        this.runningInTrx = true;\n     }\n \n     /**\n      * Constructs a DAO using the passed externally managed database connection.\n      * The connection used by this instance for all DB operations will be the passed connection.\n      * @param Connection - A database connection that will be managed by the caller.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4OTE5NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc2MTg1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyCodeSystemDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1NToyMlrOGqSHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNTo0M1rOGrCTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MDI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param c\n          \n          \n            \n                 * @param fsd\n          \n          \n            \n                 * @param c\n          \n          \n            \n                 * @param schemaName", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446990260", "createdAt": "2020-06-29T13:55:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyCodeSystemDAO.java", "diffHunk": "@@ -28,8 +28,8 @@\n      * @param c\n      * @param fsd", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3OTcwMg==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447779702", "createdAt": "2020-06-30T15:35:43Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyCodeSystemDAO.java", "diffHunk": "@@ -28,8 +28,8 @@\n      * @param c\n      * @param fsd", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MDI2MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc2NjAwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyParameterNamesDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1NjoxOVrOGqSKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1NjoxOVrOGqSKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MDk2MQ==", "bodyText": "Technically we are not use Parameter Name, we're using code... just something to think about.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446990961", "createdAt": "2020-06-29T13:56:19Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyParameterNamesDAO.java", "diffHunk": "@@ -22,8 +22,8 @@\n public class DerbyParameterNamesDAO extends ParameterNameDAOImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc2ODI0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Njo0OFrOGqSLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1ODoyNVrOGrOOFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MTMwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param fsd\n          \n          \n            \n                 * @param schemaName", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446991303", "createdAt": "2020-06-29T13:56:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -30,8 +30,8 @@\n      * @param c\n      * @param fsd", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDkzNQ==", "bodyText": "ok", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447974935", "createdAt": "2020-06-30T20:58:25Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -30,8 +30,8 @@\n      * @param c\n      * @param fsd", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MTMwMw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc4MDQzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1OTozM1rOGqSTuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowMzo1M1rOGrA1mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MzMzOQ==", "bodyText": "Turns out this is not used in the code base.  Please remove or add a backlog issue to support its use", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446993339", "createdAt": "2020-06-29T13:59:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1NTY3NQ==", "bodyText": "I've removed. It's no longer needed because we now always use try-with-resource to manage connection scope.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447755675", "createdAt": "2020-06-30T15:03:53Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Helper functions used for managing FHIR database interactions\n+ */\n+public class FHIRDbHelper {\n+    private static final Logger log = Logger.getLogger(FHIRDbHelper.class.getName());\n+    \n+    /**\n+     * Convenience function to log the cause of an exception about to be thrown. This\n+     * is useful when avoiding chaining the cause with the persistence exception, which\n+     * could inadvertently leak sensitive information (details of the schema, for example)\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, Throwable cause) {\n+        logger.log(Level.SEVERE, fx.getMessage(), cause);\n+        return fx;\n+    }\n+    \n+    /**\n+     * Log the exception message here along with the cause stack. Return the\n+     * exception fx to the caller so that it can be thrown easily.\n+     *\n+     * @param logger\n+     * @param fx\n+     * @param errorMessage\n+     * @param cause\n+     * @return\n+     */\n+    public static <XT extends FHIRPersistenceException> XT severe(Logger logger, XT fx, String errorMessage,\n+            Throwable cause) {\n+        if (cause != null) {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage), cause);\n+        } else {\n+            logger.log(Level.SEVERE, fx.addProbeId(errorMessage));\n+        }\n+        return fx;\n+    }\n+    \n+    public static FHIRPersistenceDataAccessException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIRPersistenceDataAccessException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDataAccessException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIRPersistenceDBConnectException buildFHIRPersistenceDBConnectException(String msg, IssueType issueType)\n+            throws FHIRPersistenceDBConnectException {\n+        Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIRPersistenceDBConnectException(msg).withIssue(ooi);\n+    }\n+\n+    /**\n+     * Close the connection if not null.\n+     * @implNote This connection object is just a wrapper. If we're in a \n+     *           transaction, then closing it doesn't do much, other than tell\n+     *           the transaction manager that the connection is no longer in\n+     *           use. The transaction manager still holds the underlying \n+     *           database connection open, and will use that connection the \n+     *           next time getConnection() is called for the same datasource \n+     *           within this thread. Only when the transaction commits \n+     *           will the connection be returned to the pool (or closed). \n+     *           If connections remain open when commit() is called, the \n+     *           transaction will fail.\n+     * @param c\n+     */\n+    public static void close(Connection connection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MzMzOQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc5MTIwOnYy", "diffSide": "LEFT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowMTo0OFrOGqSaOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0Mjo1N1rOGrCnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTAwMA==", "bodyText": "interesting... so this was never used?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446995000", "createdAt": "2020-06-29T14:01:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -261,14 +252,11 @@ public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBC\n                 logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n             }\n             resourceTypeId = stmt.getInt(2);\n-        } catch(FHIRPersistenceDBConnectException e) {\n-            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NDc3NQ==", "bodyText": "The DAO is passed a valid connection so it never attempts to connect itself, and therefore will never see FHIRPersistenceDBConnectException. This is a lot cleaner, because connection issues are handled higher up, leaving the DAO to focus on performing statements.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447784775", "createdAt": "2020-06-30T15:42:57Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -261,14 +252,11 @@ public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBC\n                 logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n             }\n             resourceTypeId = stmt.getInt(2);\n-        } catch(FHIRPersistenceDBConnectException e) {\n-            throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTAwMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc5Mjg5OnYy", "diffSide": "LEFT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowMjoxMlrOGqSbRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowMzozN1rOGrDipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTI2OA==", "bodyText": "Where does this happen now?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446995268", "createdAt": "2020-06-29T14:02:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -261,14 +252,11 @@ public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBC\n                 logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n             }\n             resourceTypeId = stmt.getInt(2);\n-        } catch(FHIRPersistenceDBConnectException e) {\n-            throw e;\n         } catch (Throwable e) {\n             final String errMsg = \"Failure storing Resource type name id: name=\" + resourceType;\n             FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(errMsg);\n             throw severe(logger, fx, e);\n         } finally {\n-            this.cleanup(stmt, connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzEzMA==", "bodyText": "Connections are opened and closed using try-with-resource in the corresponding FHIRPersistenceJDBCImpl method. We keep connection management in one place. Much less risk.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447797130", "createdAt": "2020-06-30T15:59:29Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -261,14 +252,11 @@ public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBC\n                 logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n             }\n             resourceTypeId = stmt.getInt(2);\n-        } catch(FHIRPersistenceDBConnectException e) {\n-            throw e;\n         } catch (Throwable e) {\n             final String errMsg = \"Failure storing Resource type name id: name=\" + resourceType;\n             FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(errMsg);\n             throw severe(logger, fx, e);\n         } finally {\n-            this.cleanup(stmt, connection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTI2OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5OTk3NA==", "bodyText": "I've added a cleanup(stmt). The statement would be closed as soon as the connection (wrapper) is closed, but it makes sense to close it where it was opened. We ought to use try-with-resource for all statements, but doing so requires a bit more finesse in the exception handling.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447799974", "createdAt": "2020-06-30T16:03:37Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -261,14 +252,11 @@ public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBC\n                 logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n             }\n             resourceTypeId = stmt.getInt(2);\n-        } catch(FHIRPersistenceDBConnectException e) {\n-            throw e;\n         } catch (Throwable e) {\n             final String errMsg = \"Failure storing Resource type name id: name=\" + resourceType;\n             FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(errMsg);\n             throw severe(logger, fx, e);\n         } finally {\n-            this.cleanup(stmt, connection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTI2OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzcyODIyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo0Mzo1OFrOGnnacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo0Mzo1OFrOGnnacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5MzM5NA==", "bodyText": "here is the problem", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r444193394", "createdAt": "2020-06-23T12:43:58Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.DatabaseType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // The transaction handler\n+    private final UserTransaction userTransaction;\n+    \n+    private boolean rollbackOnly;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(UserTransaction userTx, TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.userTransaction = userTx;\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection\n+     * @param tenantId the tenant to which the connection belongs\n+     * @param dsId the datasource in the tenant to which the connection belongs\n+     */\n+    protected void configure(Connection connection, String tenantId, String dsId) throws FHIRPersistenceException {\n+        // We prefix the  key with the name of this class to avoid any potential conflict with other\n+        // users of the sync registry.        \n+        final String key = this.getClass().getName() + \"/\" + tenantId + \"/\" + dsId;\n+        if (trxSyncRegistry.getResource(key) == null) {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Configuring new connection in this transaction. Key='\" + key + \"'\");\n+            }\n+            \n+            // first time...so we need to apply actions. Will be cleared when the transaction commits\n+            newConnectionAction.performOn(connection);\n+            \n+            // and register the key so we don't do this again\n+            trxSyncRegistry.putResource(key, new Object());\n+        } else {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Connection already configured. Key='\" + key + \"'\");\n+            }\n+        }\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#txBegin()\n+     */\n+    @Override\n+    public void txBegin() throws FHIRPersistenceException {\n+        try {\n+            this.rollbackOnly = false;\n+            userTransaction.begin();\n+        } catch (Throwable e) {\n+            String errorMessage = \"Unexpected error while rolling a transaction.\";\n+            FHIRPersistenceException fx = new FHIRPersistenceException(errorMessage);\n+            log.log(Level.SEVERE, fx.getMessage(), e);\n+            throw fx;\n+        }\n+\n+    }\n+\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#commit()\n+     */\n+    @Override\n+    public void txEnd() throws FHIRPersistenceException {\n+        try {\n+            if (this.rollbackOnly) {\n+                userTransaction.rollback();\n+            } else {\n+                userTransaction.commit();\n+            }\n+        } catch (Throwable e) {\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Unexpected error while committing a transaction.\");\n+            log.log(Level.SEVERE, fx.getMessage(), e);\n+            throw fx;\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#setRollbackOnly()\n+     */\n+    @Override\n+    public void txSetRollbackOnly() throws FHIRPersistenceException {\n+\n+        try {\n+            this.rollbackOnly = true;\n+            userTransaction.setRollbackOnly();\n+        } catch (Throwable e) {\n+            String errorMessage = \"Unexpected error while rolling a transaction.\";\n+            FHIRPersistenceException fx = new FHIRPersistenceException(errorMessage);\n+            log.log(Level.SEVERE, fx.getMessage(), e);\n+            throw fx;\n+        }\n+        \n+    }\n+    \n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * @return\n+     * @throws FHIRPersistenceException\n+     */\n+    private FHIRDbFlavor createFlavor() throws FHIRPersistenceDataAccessException {\n+        FHIRDbFlavor result;\n+        \n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                boolean multitenant = false;\n+                String typeValue = dsPG.getStringProperty(\"type\");\n+                \n+                DatabaseType type = DatabaseType.valueOf(typeValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9348e76a297b89b336b2e60a877031fc89287ce3"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTEyODMxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoyNTowNFrOGn1YFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoyNTowNFrOGn1YFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyMjE2Nw==", "bodyText": "I think this should print a warning.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r444422167", "createdAt": "2020-06-23T18:25:04Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+    \n+    private final String schemaName;\n+    /**\n+     * Public constructor\n+     */\n+    public SetSchemaAction() {\n+        this.schemaName = null;\n+    }\n+\n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName\n+     */\n+    public SetSchemaAction(String schemaName) {\n+        this.schemaName = schemaName;\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param next action in a chain\n+     */\n+    public SetSchemaAction(Action next) {\n+        super(next);\n+        this.schemaName = null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */\n+    @Override\n+    public void performOn(Connection c) throws FHIRPersistenceDBConnectException {\n+        // this is being called the first time we've seen a connection for this\n+        // particular datastore. Find out which schema is configured, and make\n+        // sure it is set as the current schema.\n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            String schemaName;\n+            \n+            try {\n+                // Schema name can be given for unit-tests. At runtime, we always use the schema name property from the configuration\n+                if (this.schemaName != null) {\n+                    schemaName = this.schemaName;\n+                }\n+                else {\n+                    schemaName = dsPG.getStringProperty(\"currentSchema\", \"FHIRDATA\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87a4296864020ddd99ff2f7dbb396ff8b5c3fa01"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NDEzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NjowMVrOGp5HEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NjowMVrOGp5HEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \n          \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseAdapter#alterSequenceRestartWith(java.lang.String, java.lang.String, long)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580497", "createdAt": "2020-06-27T23:56:01Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -530,6 +531,29 @@ public void dropSequence(String schemaName, String sequenceName) {\n             logger.warning(ddl + \"; Sequence not found\");\n         }\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseAdapter#alterSequenceRestartWith(java.lang.String, java.lang.String, long)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NDMwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NjoxN1rOGp5HJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NjoxN1rOGp5HJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580518", "createdAt": "2020-06-27T23:56:17Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NDY4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Njo1MFrOGp5HVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Njo1MFrOGp5HVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580565", "createdAt": "2020-06-27T23:56:50Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NDgzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NzowNlrOGp5HaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NzowNlrOGp5HaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580584", "createdAt": "2020-06-27T23:57:06Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NDk2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NzoyOFrOGp5HfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1NzoyOFrOGp5HfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Throwable t) {\n          \n          \n            \n                        } catch (Throwable t) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580604", "createdAt": "2020-06-27T23:57:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NTEwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Nzo0M1rOGp5HjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Nzo0M1rOGp5HjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580620", "createdAt": "2020-06-27T23:57:43Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NTI1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Nzo1NlrOGp5HnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1Nzo1NlrOGp5HnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Throwable t) {\n          \n          \n            \n                        } catch (Throwable t) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580637", "createdAt": "2020-06-27T23:57:56Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T runStatement(IDatabaseTranslator translator, IDatabaseSupplier<T> supplier) {\n+        // execute the statement using the given translator and a fresh connection\n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            \n+            T result;\n+            try {\n+                result = supplier.run(translator, connection);\n+            }\n+            catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NTM5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1ODoxMVrOGp5HrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1ODoxMVrOGp5HrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580653", "createdAt": "2020-06-27T23:58:11Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ConnectionProviderTarget.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTarget;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IDatabaseTarget} which uses an {@link IConnectionProvider}\n+ * to obtain a connection which is then closed immediately for\n+ * each statement. Each run statement is committed before the\n+ * connection is closed. This target is not intended for use\n+ * with the ITransactionProvider/ITransaction implementation.\n+ */\n+public class ConnectionProviderTarget implements IDatabaseTarget {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp provides connections used for running statements\n+     */\n+    public ConnectionProviderTarget(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        // Execute the DDL (no parameters)\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (Statement s = connection.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatementWithInt(IDatabaseTranslator translator, String sql, int value) {\n+        // convenience for running a statement requiring a single int parameter\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try (PreparedStatement ps = connection.prepareStatement(sql)) {\n+                ps.setInt(1, value);\n+                ps.executeUpdate(sql);\n+            } catch (SQLException x) {\n+                connection.rollback();\n+                throw x;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void runStatement(IDatabaseTranslator translator, IDatabaseStatement statement) {\n+        \n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            try {\n+                statement.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+        }\n+        catch (SQLException x) {\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T runStatement(IDatabaseTranslator translator, IDatabaseSupplier<T> supplier) {\n+        // execute the statement using the given translator and a fresh connection\n+        // run the statement on a fresh connection and commit right away\n+        try (Connection connection = connectionProvider.getConnection()) {\n+            \n+            T result;\n+            try {\n+                result = supplier.run(translator, connection);\n+            }\n+            catch (Throwable t) {\n+                connection.rollback();\n+                throw t;\n+            }\n+            connection.commit();\n+            return result;\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NjExOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1OTozM1rOGp5IBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1OTozM1rOGp5IBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580740", "createdAt": "2020-06-27T23:59:33Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NjI4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1OTo1MVrOGp5IFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1OTo1MVrOGp5IFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDc1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580759", "createdAt": "2020-06-27T23:59:51Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NjcwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDowNlrOGp5IQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDowNlrOGp5IQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            else {\n          \n          \n            \n                            } else {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580803", "createdAt": "2020-06-28T00:00:06Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    \n+    /**\n+     * Execute the encapsulated query against the database and stream the result data to the\n+     * configured target\n+     * @param c\n+     */\n+    @Override\n+    public Long run(IDatabaseTranslator translator, Connection c) {\n+        // you can't get the current value before calling next value in a given session,\n+        // so we simply bump the sequence number. The translator is used to support\n+        // our different database flavors (e.g. Derby, DB2 and PostgreSQL)\n+        final String SQL = translator.selectSequenceNextValue(schemaName, sequenceName);\n+\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                long currentValue = rs.getInt(1);\n+                if (rs.wasNull()) {\n+                    return null;\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NzAxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDoxOVrOGp5IYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDoxOVrOGp5IYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580835", "createdAt": "2020-06-28T00:00:19Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    \n+    /**\n+     * Execute the encapsulated query against the database and stream the result data to the\n+     * configured target\n+     * @param c\n+     */\n+    @Override\n+    public Long run(IDatabaseTranslator translator, Connection c) {\n+        // you can't get the current value before calling next value in a given session,\n+        // so we simply bump the sequence number. The translator is used to support\n+        // our different database flavors (e.g. Derby, DB2 and PostgreSQL)\n+        final String SQL = translator.selectSequenceNextValue(schemaName, sequenceName);\n+\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                long currentValue = rs.getInt(1);\n+                if (rs.wasNull()) {\n+                    return null;\n+                }\n+                else {\n+                    return currentValue;\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0NzE0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDozNlrOGp5IcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMDozNlrOGp5IcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580849", "createdAt": "2020-06-28T00:00:36Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    \n+    /**\n+     * Execute the encapsulated query against the database and stream the result data to the\n+     * configured target\n+     * @param c\n+     */\n+    @Override\n+    public Long run(IDatabaseTranslator translator, Connection c) {\n+        // you can't get the current value before calling next value in a given session,\n+        // so we simply bump the sequence number. The translator is used to support\n+        // our different database flavors (e.g. Derby, DB2 and PostgreSQL)\n+        final String SQL = translator.selectSequenceNextValue(schemaName, sequenceName);\n+\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                long currentValue = rs.getInt(1);\n+                if (rs.wasNull()) {\n+                    return null;\n+                }\n+                else {\n+                    return currentValue;\n+                }\n+            }\n+            else {\n+                // Something broken with the SQL engine if this happens!\n+                throw new IllegalStateException(SQL + \" returned nothing\");\n+            }\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0Nzc1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMTozOFrOGp5ItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxNToyNlrOGqQYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDkxNw==", "bodyText": "Should we be throwing the SQL here? could it ever include private identifiers?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580917", "createdAt": "2020-06-28T00:01:38Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    \n+    /**\n+     * Execute the encapsulated query against the database and stream the result data to the\n+     * configured target\n+     * @param c\n+     */\n+    @Override\n+    public Long run(IDatabaseTranslator translator, Connection c) {\n+        // you can't get the current value before calling next value in a given session,\n+        // so we simply bump the sequence number. The translator is used to support\n+        // our different database flavors (e.g. Derby, DB2 and PostgreSQL)\n+        final String SQL = translator.selectSequenceNextValue(schemaName, sequenceName);\n+\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                long currentValue = rs.getInt(1);\n+                if (rs.wasNull()) {\n+                    return null;\n+                }\n+                else {\n+                    return currentValue;\n+                }\n+            }\n+            else {\n+                // Something broken with the SQL engine if this happens!\n+                throw new IllegalStateException(SQL + \" returned nothing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MTgyOA==", "bodyText": "No risk here. It's just the SQL for getting the next value from a sequence, and the chance of this actually being thrown is practically 0.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446961828", "createdAt": "2020-06-29T13:15:26Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/GetSequenceNextValueDAO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * DAO to create a free tenant slot (to align with a new partition)\n+ */\n+public class GetSequenceNextValueDAO implements IDatabaseSupplier<Long> {\n+\n+    // the name of the schema with the sequence\n+    private final String schemaName;\n+    \n+    // the name of the sequence\n+    private final String sequenceName;\n+    \n+    /**\n+     * DAO to get the next value from the named sequence\n+     * @param schemaName\n+     * @param sequenceName\n+     */\n+    public GetSequenceNextValueDAO(String schemaName, String sequenceName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(sequenceName);\n+        this.schemaName = schemaName;\n+        this.sequenceName = sequenceName;\n+    }\n+    \n+    \n+    /**\n+     * Execute the encapsulated query against the database and stream the result data to the\n+     * configured target\n+     * @param c\n+     */\n+    @Override\n+    public Long run(IDatabaseTranslator translator, Connection c) {\n+        // you can't get the current value before calling next value in a given session,\n+        // so we simply bump the sequence number. The translator is used to support\n+        // our different database flavors (e.g. Derby, DB2 and PostgreSQL)\n+        final String SQL = translator.selectSequenceNextValue(schemaName, sequenceName);\n+\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                long currentValue = rs.getInt(1);\n+                if (rs.wasNull()) {\n+                    return null;\n+                }\n+                else {\n+                    return currentValue;\n+                }\n+            }\n+            else {\n+                // Something broken with the SQL engine if this happens!\n+                throw new IllegalStateException(SQL + \" returned nothing\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDkxNw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0ODI2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjoxNlrOGp5I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjoxNlrOGp5I6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580971", "createdAt": "2020-06-28T00:02:16Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "diffHunk": "@@ -233,4 +235,29 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return true;\n     }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0ODQ0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjozMVrOGp5I_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjozMVrOGp5I_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDk5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446580990", "createdAt": "2020-06-28T00:02:31Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "diffHunk": "@@ -233,4 +235,29 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return true;\n     }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DB2;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0ODU4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjo0M1rOGp5JDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMjo0M1rOGp5JDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581005", "createdAt": "2020-06-28T00:02:43Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Translator.java", "diffHunk": "@@ -233,4 +235,29 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return true;\n     }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DB2;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0OTM0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowMzo1OFrOGp5JZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxODozMlrOGqQgmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTA5Mw==", "bodyText": "the above CREATE sequence seems out of place. - I suggest putting it where fhir_sequence is actually created or in a unit test", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581093", "createdAt": "2020-06-28T00:03:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -181,20 +183,57 @@ public boolean doesTableExist(String schemaName, String tableName) {\n     }\n \n     @Override\n-    public void createSequence(String schemaName, String sequenceName, int cache) {\n+    public void createSequence(String schemaName, String sequenceName, long startWith, int cache) {\n         /* CREATE SEQUENCE fhir_sequence\n          *     AS BIGINT\n          *     START WITH 1\n          *     CACHE 1000\n          *     NO CYCLE;\n-        */\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2Mzg2NA==", "bodyText": "It's just an example of the syntax we need to build. Comment will be made more generic.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446963864", "createdAt": "2020-06-29T13:18:32Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -181,20 +183,57 @@ public boolean doesTableExist(String schemaName, String tableName) {\n     }\n \n     @Override\n-    public void createSequence(String schemaName, String sequenceName, int cache) {\n+    public void createSequence(String schemaName, String sequenceName, long startWith, int cache) {\n         /* CREATE SEQUENCE fhir_sequence\n          *     AS BIGINT\n          *     START WITH 1\n          *     CACHE 1000\n          *     NO CYCLE;\n-        */\n+         */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTA5Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0OTM5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDoxMVrOGp5JbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDoxMVrOGp5JbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (UndefinedNameException x) {\n          \n          \n            \n                    } catch (UndefinedNameException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581101", "createdAt": "2020-06-28T00:04:11Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -181,20 +183,57 @@ public boolean doesTableExist(String schemaName, String tableName) {\n     }\n \n     @Override\n-    public void createSequence(String schemaName, String sequenceName, int cache) {\n+    public void createSequence(String schemaName, String sequenceName, long startWith, int cache) {\n         /* CREATE SEQUENCE fhir_sequence\n          *     AS BIGINT\n          *     START WITH 1\n          *     CACHE 1000\n          *     NO CYCLE;\n-        */\n+         */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n-        final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";\n+        final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH \" + startWith + \" NO CYCLE\";\n         runStatement(ddl);\n+    }\n+    \n+    @Override\n+    public void dropSequence(String schemaName, String sequenceName) {\n+        // the \"RESTRICT\" keyword is mandatory in Derby\n+        final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        final String ddl = \"DROP SEQUENCE \" + sname + \" RESTRICT\";\n+\n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (UndefinedNameException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0OTY1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDoyN1rOGp5JiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDoyN1rOGp5JiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseAdapter#alterSequenceRestartWith(java.lang.String, java.lang.String, long)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581128", "createdAt": "2020-06-28T00:04:27Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -181,20 +183,57 @@ public boolean doesTableExist(String schemaName, String tableName) {\n     }\n \n     @Override\n-    public void createSequence(String schemaName, String sequenceName, int cache) {\n+    public void createSequence(String schemaName, String sequenceName, long startWith, int cache) {\n         /* CREATE SEQUENCE fhir_sequence\n          *     AS BIGINT\n          *     START WITH 1\n          *     CACHE 1000\n          *     NO CYCLE;\n-        */\n+         */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n-        final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";\n+        final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH \" + startWith + \" NO CYCLE\";\n         runStatement(ddl);\n+    }\n+    \n+    @Override\n+    public void dropSequence(String schemaName, String sequenceName) {\n+        // the \"RESTRICT\" keyword is mandatory in Derby\n+        final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        final String ddl = \"DROP SEQUENCE \" + sname + \" RESTRICT\";\n+\n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (UndefinedNameException x) {\n+            logger.warning(ddl + \"; Sequence not found\");\n+        }\n+    }\n \n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseAdapter#alterSequenceRestartWith(java.lang.String, java.lang.String, long)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0OTkxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDo0OFrOGp5Jpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNDo0OFrOGp5Jpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581158", "createdAt": "2020-06-28T00:04:48Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -313,4 +352,5 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MDA1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNTowMFrOGp5JtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNTowMFrOGp5JtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581173", "createdAt": "2020-06-28T00:05:00Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MDQ3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNTozMFrOGp5J4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNTozMFrOGp5J4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581218", "createdAt": "2020-06-28T00:05:30Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IConnectionProvider} wrapper around DerbyMaster\n+ */\n+public class DerbyConnectionProvider implements IConnectionProvider {\n+    private static final Logger logger = Logger.getLogger(DerbyConnectionProvider.class.getName());\n+\n+    // The wrapper for managing a derby in-memory instance\n+    private final DerbyMaster derby;\n+    \n+    // The schema name to set as current for each new connection\n+    private final String schemaName;\n+\n+    /**\n+     * Wrap the derby database\n+     * @param derby the Derby database instance to wrap and provide connections for\n+     * @param the schema name to set as current on each connection, or null to not set the schema\n+     */\n+    public DerbyConnectionProvider(DerbyMaster derby, String schemaName) {\n+        this.derby = derby;\n+        this.schemaName = schemaName;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MDgwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNjowNVrOGp5KBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNjowNVrOGp5KBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void describe(String arg0, StringBuilder arg1, String arg2) {\n          \n          \n            \n                }\n          \n          \n            \n                public void describe(String arg0, StringBuilder arg1, String arg2) {\n          \n          \n            \n                    // NOP\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581255", "createdAt": "2020-06-28T00:06:05Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyConnectionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * An {@link IConnectionProvider} wrapper around DerbyMaster\n+ */\n+public class DerbyConnectionProvider implements IConnectionProvider {\n+    private static final Logger logger = Logger.getLogger(DerbyConnectionProvider.class.getName());\n+\n+    // The wrapper for managing a derby in-memory instance\n+    private final DerbyMaster derby;\n+    \n+    // The schema name to set as current for each new connection\n+    private final String schemaName;\n+\n+    /**\n+     * Wrap the derby database\n+     * @param derby the Derby database instance to wrap and provide connections for\n+     * @param the schema name to set as current on each connection, or null to not set the schema\n+     */\n+    public DerbyConnectionProvider(DerbyMaster derby, String schemaName) {\n+        this.derby = derby;\n+        this.schemaName = schemaName;\n+    }\n+\n+\n+    @Override\n+    public void commitTransaction() throws SQLException {\n+        // NOP\n+    }\n+\n+    @Override\n+    public void describe(String arg0, StringBuilder arg1, String arg2) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MTI3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNjo0MFrOGp5KOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyNToyMlrOGqQz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020\n          \n      \n    \n    \n  \n\nPlease fix your copyright headers", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581304", "createdAt": "2020-06-28T00:06:40Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2ODgyNQ==", "bodyText": "The template is this:\n/*\n * (C) Copyright IBM Corp. 2020\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nnot sure where the 2019 is coming from", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446968825", "createdAt": "2020-06-29T13:25:22Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTMwNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNzowMlrOGp5KTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNzowMlrOGp5KTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTMyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DerbyLockDiag() {\n          \n          \n            \n                public DerbyLockDiag() {\n          \n          \n            \n                    // NOP", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581325", "createdAt": "2020-06-28T00:07:02Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.derby;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Fetch all the rows from the SYSCS_DIAG.LOCK_TABLE\n+ */\n+public class DerbyLockDiag implements IDatabaseSupplier<List<LockInfo>> {\n+\n+    private final String SQL = \"\"\n+            + \" SELECT xid, type, mode, tablename, lockname, state, tabletype, lockcount, indexname \"\n+            + \"   FROM SYSCS_DIAG.LOCK_TABLE\";\n+    \n+    /**\n+     * Public constructor\n+     */\n+    public DerbyLockDiag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MTgzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNzoxNlrOGp5Kcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNzoxNlrOGp5Kcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581362", "createdAt": "2020-06-28T00:07:16Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyLockDiag.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.derby;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Fetch all the rows from the SYSCS_DIAG.LOCK_TABLE\n+ */\n+public class DerbyLockDiag implements IDatabaseSupplier<List<LockInfo>> {\n+\n+    private final String SQL = \"\"\n+            + \" SELECT xid, type, mode, tablename, lockname, state, tabletype, lockcount, indexname \"\n+            + \"   FROM SYSCS_DIAG.LOCK_TABLE\";\n+    \n+    /**\n+     * Public constructor\n+     */\n+    public DerbyLockDiag() {\n+    }\n+\n+    @Override\n+    public List<LockInfo> run(IDatabaseTranslator translator, Connection c) {\n+\n+        List<LockInfo> result = new ArrayList<>();\n+        try (PreparedStatement ps = c.prepareStatement(SQL)) {\n+            ResultSet rs = ps.executeQuery();\n+            while (rs.next()) {\n+                LockInfo info = new LockInfo(\n+                    rs.getString(1),\n+                    rs.getString(2),\n+                    rs.getString(3),\n+                    rs.getString(4),\n+                    rs.getString(5),\n+                    rs.getString(6),\n+                    rs.getString(7),\n+                    rs.getString(8),\n+                    rs.getString(9));\n+                result.add(info);\n+            }\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MjU0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowNzo1MlrOGp5Kvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyOTo0OVrOGqRAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            catch (SQLException x) {\n          \n          \n            \n                            } catch (SQLException x) {\n          \n      \n    \n    \n  \n\nThis is just messy to look at", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581438", "createdAt": "2020-06-28T00:07:52Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -64,11 +66,46 @@ public DerbyMaster(String database) {\n         }\n \n         // Derby Server Properties are now set using the System Stored procedures.\n-        try {\n-            DerbyServerPropertiesMgr.setServerProperties(DEBUG, getConnection());\n+        try (Connection c = getConnection()) {\n+            DerbyServerPropertiesMgr.setServerProperties(DEBUG, c);\n+            c.commit();\n+        } catch (SQLException e) {\n+            logger.log(Level.WARNING, \"Derby Server Properties not set\", e);\n+        }\n+    }\n+    \n+    /**\n+     * Derby setSchema fails if the schema doesn't exist, so we need to create that\n+     * now in order for our connections to succeed when we build out the FHIR database\n+     * @param schemaName\n+     */\n+    public void createSchemaIfNeeded(String schemaName) {\n+        DataDefinitionUtil.assertSecure(schemaName);\n+        boolean createSchema = false;\n+        try (Connection c = getConnection()) {\n+            try {\n+                c.setSchema(schemaName);\n+            } catch (SQLException x) {\n+                // schema doesn't exist, so we need to create it\n+                createSchema = true;\n+            }\n+\n+            if (createSchema) {\n+                final String createSchemaDDL = \"CREATE SCHEMA \" + schemaName;\n+                JdbcTarget target = new JdbcTarget(c);\n+                target.runStatement(DERBY_TRANSLATOR, createSchemaDDL);\n+                \n+                try {\n+                    c.commit();\n+                }\n+                catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjAzMQ==", "bodyText": "What is?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446972031", "createdAt": "2020-06-29T13:29:49Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -64,11 +66,46 @@ public DerbyMaster(String database) {\n         }\n \n         // Derby Server Properties are now set using the System Stored procedures.\n-        try {\n-            DerbyServerPropertiesMgr.setServerProperties(DEBUG, getConnection());\n+        try (Connection c = getConnection()) {\n+            DerbyServerPropertiesMgr.setServerProperties(DEBUG, c);\n+            c.commit();\n+        } catch (SQLException e) {\n+            logger.log(Level.WARNING, \"Derby Server Properties not set\", e);\n+        }\n+    }\n+    \n+    /**\n+     * Derby setSchema fails if the schema doesn't exist, so we need to create that\n+     * now in order for our connections to succeed when we build out the FHIR database\n+     * @param schemaName\n+     */\n+    public void createSchemaIfNeeded(String schemaName) {\n+        DataDefinitionUtil.assertSecure(schemaName);\n+        boolean createSchema = false;\n+        try (Connection c = getConnection()) {\n+            try {\n+                c.setSchema(schemaName);\n+            } catch (SQLException x) {\n+                // schema doesn't exist, so we need to create it\n+                createSchema = true;\n+            }\n+\n+            if (createSchema) {\n+                final String createSchemaDDL = \"CREATE SCHEMA \" + schemaName;\n+                JdbcTarget target = new JdbcTarget(c);\n+                target.runStatement(DERBY_TRANSLATOR, createSchemaDDL);\n+                \n+                try {\n+                    c.commit();\n+                }\n+                catch (SQLException x) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTQzOA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MjcxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowODowOFrOGp5K0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowODowOFrOGp5K0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (IllegalStateException x) {\n          \n          \n            \n                    } catch (IllegalStateException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581459", "createdAt": "2020-06-28T00:08:08Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -80,7 +117,15 @@ public static void dropDatabase(String database) {\n         if (!database.contains(DERBY_DIR)) {\n             throw new IllegalArgumentException(\"Derby databases must start with: \" + DERBY_DIR);\n         }\n-\n+        \n+        // Make sure the database is shut down before we try to drop it\n+        try {\n+            shutdown(database);\n+        }\n+        catch (IllegalStateException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1Mjg4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowODoyOVrOGp5K6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMjoyN1rOGrNE6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTQ4MA==", "bodyText": "please add a logger statement here", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581480", "createdAt": "2020-06-28T00:08:29Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -80,7 +117,15 @@ public static void dropDatabase(String database) {\n         if (!database.contains(DERBY_DIR)) {\n             throw new IllegalArgumentException(\"Derby databases must start with: \" + DERBY_DIR);\n         }\n-\n+        \n+        // Make sure the database is shut down before we try to drop it\n+        try {\n+            shutdown(database);\n+        }\n+        catch (IllegalStateException x) {\n+            // NOP - database doesn't exist anyway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NjIwMw==", "bodyText": "added logger.info(\"DROP DATABASE - database does not exist: \" + database);", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447956203", "createdAt": "2020-06-30T20:22:27Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -80,7 +117,15 @@ public static void dropDatabase(String database) {\n         if (!database.contains(DERBY_DIR)) {\n             throw new IllegalArgumentException(\"Derby databases must start with: \" + DERBY_DIR);\n         }\n-\n+        \n+        // Make sure the database is shut down before we try to drop it\n+        try {\n+            shutdown(database);\n+        }\n+        catch (IllegalStateException x) {\n+            // NOP - database doesn't exist anyway", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTQ4MA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MzExOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowODo1N1rOGp5LAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowODo1N1rOGp5LAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581507", "createdAt": "2020-06-28T00:08:57Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -131,27 +176,29 @@ private static void delete(File file) throws IOException {\n \n     /**\n      * Get a connection to the configured Derby database, creating the database if necessary.\n+     * @implNote creates a new connection each time. Should be wrapped in an IConnectionProvider\n+     *           implementation for use where a transaction might scope multiple open/close\n+     *           connections. This class returns the driver's connection. For proper transaction\n+     *           handling, the connection needs to be wrapped, which IConnectionProvider can\n+     *           take care of.\n      * @return\n      * @throws SQLException\n-     * @implNote currently this returns the same connection each time, so don't close it!\n      */\n-    public synchronized Connection getConnection() throws SQLException {\n+    public Connection getConnection() throws SQLException {\n         logger.info(\"Opening connection to Derby database: \" + database);\n-        if (connection == null) {\n-            try {\n-                // Make sure the Derby driver is loaded\n-                Properties properties = new Properties();\n-                DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n-                adapter.setDatabase(database);\n-                adapter.setAutoCreate(true);\n-                connection = DriverManager.getConnection(DERBY_TRANSLATOR.getUrl(properties));\n-                connection.setAutoCommit(false);\n-            }\n-            catch (SQLException x) {\n-                throw DERBY_TRANSLATOR.translate(x);\n-            }\n+        try {\n+            // Make sure the Derby driver is loaded\n+            Properties properties = new Properties();\n+            DerbyPropertyAdapter adapter = new DerbyPropertyAdapter(properties);\n+            adapter.setDatabase(database);\n+            adapter.setAutoCreate(true);\n+            Connection connection = DriverManager.getConnection(DERBY_TRANSLATOR.getUrl(properties));\n+            connection.setAutoCommit(false);\n+            return connection;\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1MzUzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowOToyNlrOGp5LNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMjo1MVrOGrNFnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTU1Nw==", "bodyText": "Why the full package name is specified?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581557", "createdAt": "2020-06-28T00:09:26Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDg5NA==", "bodyText": "Probably to help Eclipse find the right Consumer more quickly when typing. No other reason.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446974894", "createdAt": "2020-06-29T13:34:00Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTU1Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NjM4Mw==", "bodyText": "added import", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447956383", "createdAt": "2020-06-30T20:22:51Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTU1Nw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NDAyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDowOTo1N1rOGp5LaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozODowNlrOGqRWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTYwOQ==", "bodyText": "I think you should use a logger", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581609", "createdAt": "2020-06-28T00:09:57Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NzYxOQ==", "bodyText": "I considered logger output, but it ruins the tabular formatting. It's targeted as a development-time feature, which is why System.out in this case is appropriate.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446977619", "createdAt": "2020-06-29T13:38:06Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTYwOQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NDQ3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMDoxOVrOGp5Lmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMDoxOVrOGp5Lmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTY1OA==", "bodyText": "the comment isn't needed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581658", "createdAt": "2020-06-28T00:10:19Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMDoyOFrOGp5LoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozOTozM1rOGqRalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTY2NQ==", "bodyText": "Fix the logger", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581665", "createdAt": "2020-06-28T00:10:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3ODcwOA==", "bodyText": "I don't want to use a logger in this case.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446978708", "createdAt": "2020-06-29T13:39:33Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyMaster.java", "diffHunk": "@@ -166,75 +213,122 @@ public IDatabaseTranslator getTranslator() {\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param pdm\n      */\n-    public void createSchema(PhysicalDataModel pdm) {\n-        createSchema(vhs, pdm);\n+    public void createSchema(IConnectionProvider pool, PhysicalDataModel pdm) {\n+        createSchema(pool, vhs, pdm);\n     }\n \n     /**\n      * Ask the schema to apply itself to our target (adapter pattern)\n      * @param vhs\n      * @param pdm\n      */\n-    public void createSchema(IVersionHistoryService vhs, PhysicalDataModel pdm) {\n-        runWithAdapter(target -> pdm.applyWithHistory(target, vhs));\n+    public void createSchema(IConnectionProvider pool, IVersionHistoryService vhs, PhysicalDataModel pdm) {\n+        runWithAdapter(pool, target -> pdm.applyWithHistory(target, vhs));\n     }\n+    \n+    public void runWithAdapter(IConnectionProvider pool, java.util.function.Consumer<IDatabaseAdapter> fn) {\n+\n+        // We need to obtain connections from the same pool as the version history service\n+        // so we can avoid deadlocks for certain DDL like DROP INDEX\n+        try {\n+            // wrap the connection pool in an adapter for the Derby database\n+            DerbyAdapter adapter = new DerbyAdapter(pool);\n+            \n+            // call the Function we've been given using the adapter we just wrapped\n+            // around the connection.\n+            fn.accept(adapter);\n+        } catch (DataAccessException x) {\n+            logger.log(Level.SEVERE, \"Error while running\", x);\n+            throw x;\n+        }\n+    }\n+\n \n     /**\n      * Run the function with an adapter configured for this database\n      * \n      * @param fn\n      */\n     public void runWithAdapter(java.util.function.Consumer<IDatabaseAdapter> fn) {\n-        try {\n-            Connection c = getConnection();\n-            try {\n-                JdbcTarget target = new JdbcTarget(c);\n-                DerbyAdapter adapter = new DerbyAdapter(target);\n \n-                // Replace the target with a decorated output, so that we print all the DDL before executing\n-                // The output is very FINE and logs out a lot. \n-                if (logger.isLoggable(Level.FINE)) {\n-                    PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n-                    adapter = new DerbyAdapter(printer);\n-                }\n-                fn.accept(adapter);\n-            } catch (DataAccessException x) {\n-                logger.log(Level.SEVERE, \"Error while running\", x);\n-                c.rollback();\n-                throw x;\n-            }\n-            c.commit();\n-        } catch (SQLException e) {\n-            logger.log(Level.SEVERE, \"Error while running\", e);\n-            throw DERBY_TRANSLATOR.translate(e);\n-        } finally {\n-            logger.info(\"connection was closed\");\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+\n+        // Replace the target with a decorated output, so that we print all the DDL before executing\n+        // The output is very FINE and logs out a lot. \n+        if (logger.isLoggable(Level.FINE)) {\n+            PrintTarget printer = new PrintTarget(target, logger.isLoggable(Level.FINE));\n+            adapter = new DerbyAdapter(printer);\n         }\n+      \n+        // call the Function we've been given using the adapter we just wrapped\n+        // around the connection. Each statement executes in its own connection/transaction.\n+        fn.accept(adapter);\n     }\n \n+    /**\n+     * Diagnostic utility to display all the current locks in the Derby database\n+     */\n+    public void dumpLockInfo() {\n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        IConnectionProvider cp = new DerbyConnectionProvider(this, null);\n+        ConnectionProviderTarget target = new ConnectionProviderTarget(cp);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        System.out.println(LockInfo.header());\n+        locks.forEach(System.out::println);\n+    }\n+    \n+    /**\n+     * Dump locks using the given connection\n+     * @param c\n+     */\n+    public static void dumpLockInfo(Connection c) {\n+        // wrap the connection so that we can run our lock diag DAO\n+        JdbcTarget target = new JdbcTarget(c);\n+        DerbyAdapter adapter = new DerbyAdapter(target);\n+        \n+        DerbyLockDiag diag = new DerbyLockDiag();\n+        List<LockInfo> locks = adapter.runStatement(diag);\n+        \n+        // render\n+        System.out.println(LockInfo.header());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTY2NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NTAzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMToyOFrOGp5L5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMToyOFrOGp5L5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581733", "createdAt": "2020-06-28T00:11:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NTA5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMTozOVrOGp5L7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMTozOVrOGp5L7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581742", "createdAt": "2020-06-28T00:11:39Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NTM3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMTo1MVrOGp5MCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMTo1MVrOGp5MCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTc3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581771", "createdAt": "2020-06-28T00:11:51Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NTY5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMjoxOVrOGp5MLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0NDo1MFrOGq_6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTgwNQ==", "bodyText": "In other. spots you use a final String, seems a bit inconsistent.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581805", "createdAt": "2020-06-28T00:12:19Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */\n+    @Override\n+    public String selectSequenceNextValue(String schemaName, String sequenceName) {\n+        String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTg5Nw==", "bodyText": "In general we should do a better job of using final where appropriate throughout the code. When usage is obvious, it's less of an issue. But we could certainly benefit from it in more complex methods.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446981897", "createdAt": "2020-06-29T13:43:56Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */\n+    @Override\n+    public String selectSequenceNextValue(String schemaName, String sequenceName) {\n+        String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTgwNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MDQ2NQ==", "bodyText": "made it final in the next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447740465", "createdAt": "2020-06-30T14:44:50Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -163,4 +165,30 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.DERBY;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        return \"SYSIBM.SYSDUMMY1\";\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */\n+    @Override\n+    public String selectSequenceNextValue(String schemaName, String sequenceName) {\n+        String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n+        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTgwNQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NTkyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/LockInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMjo0MVrOGp5MRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMjo0MVrOGp5MRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see java.lang.Object#toString()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581831", "createdAt": "2020-06-28T00:12:41Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/LockInfo.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.derby;\n+\n+\n+/**\n+ * DTO representing a row from the Derby lock diagnostic table SYSCS_DIAG.LOCK_TABLE\n+ */\n+public class LockInfo {\n+\n+    private final String xid;\n+    private final String type;\n+    private final String mode;\n+    private final String tablename;\n+    private final String lockname;\n+    private final String state;\n+    private final String tabletype;\n+    private final String lockcount;\n+    private final String indexname;\n+\n+    /**\n+     * Public constructor\n+     * @param xid\n+     * @param type\n+     * @param mode\n+     * @param tablename\n+     * @param lockname\n+     * @param state\n+     * @param tabletype\n+     * @param lockcount\n+     * @param indexname\n+     */\n+    public LockInfo(String xid, String type, String mode, String tablename, String lockname, String state,\n+        String tabletype, String lockcount, String indexname) {\n+        this.xid = xid;\n+        this.type = type;\n+        this.mode = mode;\n+        this.tablename = tablename;\n+        this.lockname = lockname;\n+        this.state = state;\n+        this.tabletype = tabletype;\n+        this.lockcount = lockcount;\n+        this.indexname = indexname;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see java.lang.Object#toString()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NjExOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMjo1OVrOGp5MXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMjo1OVrOGp5MXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTg1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020\n          \n          \n            \n             * (C) Copyright IBM Corp. 2020", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581852", "createdAt": "2020-06-28T00:12:59Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NjE5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMzoxOFrOGp5MZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMzoxOFrOGp5MZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTg2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visit(com.ibm.fhir.database.utils.model.DataModelVisitor)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581863", "createdAt": "2020-06-28T00:13:18Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {\n+        super(schemaName, sequenceName, DatabaseObjectType.SEQUENCE, version);\n+        this.startWith = startWith;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterSequenceRestartWith(getSchemaName(), getObjectName(), startWith, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visit(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NjMxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMzozM1rOGp5MeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxMzozM1rOGp5MeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visitReverse(com.ibm.fhir.database.utils.model.DataModelVisitor)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581880", "createdAt": "2020-06-28T00:13:33Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterSequenceStartWith.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterSequenceStartWith extends BaseObject {\n+    // the value we want the sequence to start with\n+    private final long startWith;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param cache\n+     */\n+    public AlterSequenceStartWith(String schemaName, String sequenceName, int version, long startWith, int cache) {\n+        super(schemaName, sequenceName, DatabaseObjectType.SEQUENCE, version);\n+        this.startWith = startWith;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterSequenceRestartWith(getSchemaName(), getObjectName(), startWith, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visit(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */\n+    @Override\n+    public void visit(DataModelVisitor v) {\n+        v.visited(this);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#visitReverse(com.ibm.fhir.database.utils.model.DataModelVisitor)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NjU3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitorBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDowNFrOGp5Mlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDowNFrOGp5Mlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.model.DataModelVisitor#visited(com.ibm.fhir.database.utils.model.AlterSequenceStartWith)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581910", "createdAt": "2020-06-28T00:14:04Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitorBase.java", "diffHunk": "@@ -94,4 +94,13 @@ public void visited(FunctionDef functionDef) {\n         // NOP\n     }\n \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.DataModelVisitor#visited(com.ibm.fhir.database.utils.model.AlterSequenceStartWith)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1Njc2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitorBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDoxOFrOGp5Mqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMzo1M1rOGrNHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTkzMQ==", "bodyText": "make abstract?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581931", "createdAt": "2020-06-28T00:14:18Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitorBase.java", "diffHunk": "@@ -94,4 +94,13 @@ public void visited(FunctionDef functionDef) {\n         // NOP\n     }\n \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.DataModelVisitor#visited(com.ibm.fhir.database.utils.model.AlterSequenceStartWith)\n+     */\n+    @Override\n+    public void visited(AlterSequenceStartWith alterSequence) {\n+        // TODO Auto-generated method stub\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NjkwMg==", "bodyText": "Just a NOP like the others. This is a helper class, because implementations probably only need to implement one or two methods.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447956902", "createdAt": "2020-06-30T20:23:53Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitorBase.java", "diffHunk": "@@ -94,4 +94,13 @@ public void visited(FunctionDef functionDef) {\n         // NOP\n     }\n \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.model.DataModelVisitor#visited(com.ibm.fhir.database.utils.model.AlterSequenceStartWith)\n+     */\n+    @Override\n+    public void visited(AlterSequenceStartWith alterSequence) {\n+        // TODO Auto-generated method stub\n+        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTkzMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1Njk1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDozOFrOGp5MwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDozOFrOGp5MwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                }\n          \n          \n            \n                                else {\n          \n          \n            \n                                } else {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581953", "createdAt": "2020-06-28T00:14:38Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "diffHunk": "@@ -156,21 +156,21 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n                     // Either a deadlock, or lock timeout, we allow the transaction to be\n                     // tried again.\n                     if (x.isDeadlock()) {\n-                        logger.warning(\"Deadlock detected processing: \" + this.getTypeAndName() + \" [remaining=\" + remainingAttempts + \"]\");\n+                        logger.warning(\"Deadlock detected processing: \" + this.getTypeNameVersion() + \" [remaining=\" + remainingAttempts + \"]\");\n                     }\n                     else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1NzIyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDo1NFrOGp5M4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNDo1NFrOGp5M4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            catch (Exception x) {\n          \n          \n            \n                            } catch (Exception x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446581985", "createdAt": "2020-06-28T00:14:54Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "diffHunk": "@@ -156,21 +156,21 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n                     // Either a deadlock, or lock timeout, we allow the transaction to be\n                     // tried again.\n                     if (x.isDeadlock()) {\n-                        logger.warning(\"Deadlock detected processing: \" + this.getTypeAndName() + \" [remaining=\" + remainingAttempts + \"]\");\n+                        logger.warning(\"Deadlock detected processing: \" + this.getTypeNameVersion() + \" [remaining=\" + remainingAttempts + \"]\");\n                     }\n                     else {\n-                        logger.warning(\"Lock timeout detected processing: \" + this.getTypeAndName() + \" [remaining=\" + remainingAttempts + \"]\");\n+                        logger.warning(\"Lock timeout detected processing: \" + this.getTypeNameVersion() + \" [remaining=\" + remainingAttempts + \"]\");\n                     }\n                     tx.setRollbackOnly();\n \n                     if (remainingAttempts == 0) {\n                         // end of the road on this one\n-                        logger.log(Level.SEVERE, \"[FAILED] retries exhausted for: \" + this.getTypeAndName());\n+                        logger.log(Level.SEVERE, \"[FAILED] retries exhausted for: \" + this.getTypeNameVersion());\n                         throw x;\n                     }\n                 }\n                 catch (Exception x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1ODM0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNjoxNVrOGp5NZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0MjoyNVrOGrJxEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjExNg==", "bodyText": "Have you tried deploying the 4.1.0 schema jar, and upgrade. from there?  I'm curious if we have any latent issues.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582116", "createdAt": "2020-06-28T00:16:15Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "diffHunk": "@@ -195,7 +195,7 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n     public void applyVersion(IDatabaseAdapter target, IVersionHistoryService vhs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NTAxNg==", "bodyText": "I updated Lee's unit test which performs the migration.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446985016", "createdAt": "2020-06-29T13:48:05Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "diffHunk": "@@ -195,7 +195,7 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n     public void applyVersion(IDatabaseAdapter target, IVersionHistoryService vhs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjExNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMTk2OQ==", "bodyText": "Yes, it's also covered in the CI, which has passed from 4.2.3 to this", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447901969", "createdAt": "2020-06-30T18:42:25Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DatabaseObject.java", "diffHunk": "@@ -195,7 +195,7 @@ public void applyTx(IDatabaseAdapter target, ITransactionProvider tp, IVersionHi\n     public void applyVersion(IDatabaseAdapter target, IVersionHistoryService vhs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjExNg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1OTA4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzozM1rOGp5NtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzozM1rOGp5NtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582197", "createdAt": "2020-06-28T00:17:33Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -368,5 +367,5 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1OTQxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzo0NlrOGp5N1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzo0NlrOGp5N1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582231", "createdAt": "2020-06-28T00:17:46Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg1OTQ2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzo1OFrOGp5N3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxNzo1OFrOGp5N3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582237", "createdAt": "2020-06-28T00:17:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MDEzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxOToyOVrOGp5OJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NDoyNFrOGrJ1TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjMxMQ==", "bodyText": "it's kind of messy to return null, I realize there is overhead for this, but return empty I think is preferred.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582311", "createdAt": "2020-06-28T00:19:29Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        // PostgreSQL does not support a \"DUAL\" table because the FROM clause is optional.\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NDM2MA==", "bodyText": "I find null here a useful flag to indicate no such value exists for this implementation. This should be used consistently, to distinguish between no value and an actual value which happens to be an empty string (something which databases don't handle consistently).", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446994360", "createdAt": "2020-06-29T14:00:56Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        // PostgreSQL does not support a \"DUAL\" table because the FROM clause is optional.\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjMxMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMjkzNw==", "bodyText": "Right... it's actually just SELECT 1 in postgres.   I think the concept shouldn't be so much focused on a 'dualTableName' rather connectivityCheck.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447902937", "createdAt": "2020-06-30T18:44:13Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        // PostgreSQL does not support a \"DUAL\" table because the FROM clause is optional.\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjMxMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzA1Mw==", "bodyText": "I'm leaving this as resolved", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447903053", "createdAt": "2020-06-30T18:44:24Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        // PostgreSQL does not support a \"DUAL\" table because the FROM clause is optional.\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjMxMQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MDE5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxOTo0MlrOGp5OLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoxOTo0MlrOGp5OLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582318", "createdAt": "2020-06-28T00:19:42Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlTranslator.java", "diffHunk": "@@ -163,4 +165,32 @@ public String getUrl(Properties connectionProperties) {\n     public boolean clobSupportsInline() {\n         return false;\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return DbType.POSTGRESQL;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#dualTableName()\n+     */\n+    @Override\n+    public String dualTableName() {\n+        // PostgreSQL does not support a \"DUAL\" table because the FROM clause is optional.\n+        return null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.database.utils.api.IDatabaseTranslator#selectSequenceNextValue(java.lang.String, java.lang.String)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MTAzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMDo0MlrOGp5Oig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowMzo1MlrOGqSgBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQxMA==", "bodyText": "Why are you. clearing this?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582410", "createdAt": "2020-06-28T00:20:42Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "diffHunk": "@@ -98,6 +98,7 @@ public void init() {\n     private void getLatestVersionHistoryForSchema() {\n         // Note how we don't care about connections here...that is all\n         // hidden inside the target adapter implementation\n+        versionHistoryMap.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NjQ4NQ==", "bodyText": "Because the database table contains the \"truth\" and we are about to read all of it. The data in the database should replace everything in the map, which is just being used as a cache.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446996485", "createdAt": "2020-06-29T14:03:52Z", "author": {"login": "punktilious"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "diffHunk": "@@ -98,6 +98,7 @@ public void init() {\n     private void getLatestVersionHistoryForSchema() {\n         // Note how we don't care about connections here...that is all\n         // hidden inside the target adapter implementation\n+        versionHistoryMap.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQxMA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MTU4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMTo0N1rOGp5O0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMTo0N1rOGp5O0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582480", "createdAt": "2020-06-28T00:21:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/ChainedAction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Base for chaining actions together\n+ */\n+public class ChainedAction implements Action {\n+\n+    // the next action in the chain\n+    private final Action next;\n+\n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public ChainedAction(Action next) {\n+        this.next = next;\n+    }\n+\n+    /**\n+     * Public constructor where this action is the end of the chain\n+     */\n+    public ChainedAction() {\n+        this.next = null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */\n+    @Override\n+    public void performOn(Connection c) throws FHIRPersistenceDBConnectException {\n+        if (next != null) {\n+            next.performOn(c);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MTcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjowNFrOGp5O3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjowNFrOGp5O3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582495", "createdAt": "2020-06-28T00:22:04Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MTcyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjoxNVrOGp5O4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyNDozOVrOGrNJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ5OA==", "bodyText": "Fix formatting please", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582498", "createdAt": "2020-06-28T00:22:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to turn off autocommit\n+ */\n+public class DisableAutocommitAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(DisableAutocommitAction.class.getName());\n+        /**\n+     * Public constructor\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NzMwOQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447957309", "createdAt": "2020-06-30T20:24:39Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to turn off autocommit\n+ */\n+public class DisableAutocommitAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(DisableAutocommitAction.class.getName());\n+        /**\n+     * Public constructor\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ5OA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MjA2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjo0MlrOGp5PCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjo0MlrOGp5PCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DisableAutocommitAction() {\n          \n          \n            \n                }\n          \n          \n            \n                public DisableAutocommitAction() {\n          \n          \n            \n                    // No Op\n          \n          \n            \n                }", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582539", "createdAt": "2020-06-28T00:22:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to turn off autocommit\n+ */\n+public class DisableAutocommitAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(DisableAutocommitAction.class.getName());\n+        /**\n+     * Public constructor\n+     */\n+    public DisableAutocommitAction() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MjA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjo1MlrOGp5PDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMjo1MlrOGp5PDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582541", "createdAt": "2020-06-28T00:22:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to turn off autocommit\n+ */\n+public class DisableAutocommitAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(DisableAutocommitAction.class.getName());\n+        /**\n+     * Public constructor\n+     */\n+    public DisableAutocommitAction() {\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param next action in a chain\n+     */\n+    public DisableAutocommitAction(Action next) {\n+        super(next);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */\n+    @Override\n+    public void performOn(Connection c) throws FHIRPersistenceDBConnectException {\n+            \n+        try {\n+            c.setAutoCommit(false);\n+        } catch (SQLException x) {\n+            log.log(Level.SEVERE, \"failed to set autocommit (false)\", x);\n+            \n+            // schemaName is a secret, so don't emit in the exception to avoid propagating to client\n+            throw new FHIRPersistenceDBConnectException(\"Failed disabling autocommit on connection\");\n+        }\n+        \n+        // call the next action in the chain\n+        super.performOn(c);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MjM5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzowNVrOGp5PLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzowNVrOGp5PLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582573", "createdAt": "2020-06-28T00:23:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/DisableAutocommitAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to turn off autocommit\n+ */\n+public class DisableAutocommitAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(DisableAutocommitAction.class.getName());\n+        /**\n+     * Public constructor\n+     */\n+    public DisableAutocommitAction() {\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param next action in a chain\n+     */\n+    public DisableAutocommitAction(Action next) {\n+        super(next);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MjU0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzoyMVrOGp5PPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzoyMVrOGp5PPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582590", "createdAt": "2020-06-28T00:23:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MjY4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzozN1rOGp5PTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMzozN1rOGp5PTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjYwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582606", "createdAt": "2020-06-28T00:23:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Abstraction used to obtain JDBC connections. The database being connected\n+ * is determined by the datasource currently referenced by the {@link FHIRRequestContext}\n+ * (which is a ThreadLocal thing, and not obvious).\n+ * \n+ * @implNote Refactor of the getConnection logic from {@link FHIRDbDAOImpl}. This\n+ * isolates connection logic from the DAO implementations, promoting separation of\n+ * concerns, and makes it possible to use different strategies in the future,\n+ * without having to disrupt the (complex) DAO code again.\n+ */\n+public interface FHIRDbConnectionStrategy {\n+\n+    /**\n+     * Get a connection to the desired data source identified by the current {@link FHIRRequestContext}\n+     * @return a {@link Connection}. Never null.\n+     */\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException;\n+\n+    /**\n+     * Get the flavor of the database we are working with to reveal its capabilities\n+     * @return the datastore/source flavor from the FHIR configuration\n+     * @throws FHIRPersistenceDataAccessException if there is an issue with the configuration\n+     */\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException;\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MzAzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDowMFrOGp5Pcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDowMFrOGp5Pcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Exception x) {\n          \n          \n            \n                        } catch (Exception x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582642", "createdAt": "2020-06-28T00:24:00Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection\n+     * @param tenantId the tenant to which the connection belongs\n+     * @param dsId the datasource in the tenant to which the connection belongs\n+     */\n+    protected void configure(Connection connection, String tenantId, String dsId) throws FHIRPersistenceException {\n+        // We prefix the  key with the name of this class to avoid any potential conflict with other\n+        // users of the sync registry.        \n+        final String key = this.getClass().getName() + \"/\" + tenantId + \"/\" + dsId;\n+        if (trxSyncRegistry.getResource(key) == null) {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Configuring new connection in this transaction. Key='\" + key + \"'\");\n+            }\n+            \n+            // first time...so we need to apply actions. Will be cleared when the transaction commits\n+            newConnectionAction.performOn(connection);\n+            \n+            // and register the key so we don't do this again\n+            trxSyncRegistry.putResource(key, new Object());\n+        } else {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Connection already configured. Key='\" + key + \"'\");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * @return\n+     * @throws FHIRPersistenceException\n+     */\n+    private FHIRDbFlavor createFlavor() throws FHIRPersistenceDataAccessException {\n+        FHIRDbFlavor result;\n+        \n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                boolean multitenant = false;\n+                String typeValue = dsPG.getStringProperty(\"type\");\n+                \n+                DbType type = DbType.from(typeValue);\n+                if (type == DbType.DB2) {\n+                    // We make this absolute for now. May change in the future if we\n+                    // support a single-tenant schema in DB2.\n+                    multitenant = true;\n+                }\n+                \n+                result = new FHIRDbFlavorImpl(type, multitenant);\n+            }\n+            catch (Exception x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MzE5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDoxOFrOGp5Pgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDoxOFrOGp5Pgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582659", "createdAt": "2020-06-28T00:24:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection\n+     * @param tenantId the tenant to which the connection belongs\n+     * @param dsId the datasource in the tenant to which the connection belongs\n+     */\n+    protected void configure(Connection connection, String tenantId, String dsId) throws FHIRPersistenceException {\n+        // We prefix the  key with the name of this class to avoid any potential conflict with other\n+        // users of the sync registry.        \n+        final String key = this.getClass().getName() + \"/\" + tenantId + \"/\" + dsId;\n+        if (trxSyncRegistry.getResource(key) == null) {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Configuring new connection in this transaction. Key='\" + key + \"'\");\n+            }\n+            \n+            // first time...so we need to apply actions. Will be cleared when the transaction commits\n+            newConnectionAction.performOn(connection);\n+            \n+            // and register the key so we don't do this again\n+            trxSyncRegistry.putResource(key, new Object());\n+        } else {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Connection already configured. Key='\" + key + \"'\");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * @return\n+     * @throws FHIRPersistenceException\n+     */\n+    private FHIRDbFlavor createFlavor() throws FHIRPersistenceDataAccessException {\n+        FHIRDbFlavor result;\n+        \n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                boolean multitenant = false;\n+                String typeValue = dsPG.getStringProperty(\"type\");\n+                \n+                DbType type = DbType.from(typeValue);\n+                if (type == DbType.DB2) {\n+                    // We make this absolute for now. May change in the future if we\n+                    // support a single-tenant schema in DB2.\n+                    multitenant = true;\n+                }\n+                \n+                result = new FHIRDbFlavorImpl(type, multitenant);\n+            }\n+            catch (Exception x) {\n+                log.log(Level.SEVERE, \"No type property found for datastore '\" + datastoreId + \"'\", x);\n+                throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+            }\n+        } else {\n+            log.log(Level.SEVERE, \"Missing datastore configuration for '\" + datastoreId + \"'\");\n+            throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+        }\n+        \n+        return result;\n+    }\n+    \n+    /**\n+     * Get a connection configured for the given tenant and datasourceId\n+     * @param datasource\n+     * @param tenantId\n+     * @param dsId\n+     * @return\n+     */\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection();\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original\n+            } finally {\n+                // just to prevent future coding mistakes\n+                connection = null;\n+            }\n+            throw t;\n+        }\n+        \n+        return connection;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2MzMyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDoyN1rOGp5PkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNDoyN1rOGp5PkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582672", "createdAt": "2020-06-28T00:24:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConnectionStrategyBase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+/**\n+ * Common base for multi-tenant connection strategy implementations\n+ */\n+public abstract class FHIRDbConnectionStrategyBase implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbConnectionStrategyBase.class.getName());\n+    // We use the sync registry to remember connections we've configured in the current transaction.\n+    private final TransactionSynchronizationRegistry trxSyncRegistry;\n+\n+    // the action chain to be applied to new connections\n+    private final Action newConnectionAction;\n+    \n+    // Type and capability \n+    private final FHIRDbFlavor flavor;\n+    \n+    /**\n+     * Protected constructor\n+     * @param userTx the transaction handler\n+     * @param trxSyncRegistry\n+     * @param newConnectionAction\n+     */\n+    protected FHIRDbConnectionStrategyBase(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRPersistenceDataAccessException {\n+        this.trxSyncRegistry = trxSyncRegistry;\n+        this.newConnectionAction = newConnectionAction;\n+        \n+        // initialize the flavor from the configuration\n+        this.flavor = createFlavor();\n+    }\n+\n+    /**\n+     * Check with the transaction sync registry to see if this is the first time\n+     * we've worked with this connection in the current transaction.\n+     * @param c the new connection\n+     * @param tenantId the tenant to which the connection belongs\n+     * @param dsId the datasource in the tenant to which the connection belongs\n+     */\n+    protected void configure(Connection connection, String tenantId, String dsId) throws FHIRPersistenceException {\n+        // We prefix the  key with the name of this class to avoid any potential conflict with other\n+        // users of the sync registry.        \n+        final String key = this.getClass().getName() + \"/\" + tenantId + \"/\" + dsId;\n+        if (trxSyncRegistry.getResource(key) == null) {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Configuring new connection in this transaction. Key='\" + key + \"'\");\n+            }\n+            \n+            // first time...so we need to apply actions. Will be cleared when the transaction commits\n+            newConnectionAction.performOn(connection);\n+            \n+            // and register the key so we don't do this again\n+            trxSyncRegistry.putResource(key, new Object());\n+        } else {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Connection already configured. Key='\" + key + \"'\");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * @return\n+     * @throws FHIRPersistenceException\n+     */\n+    private FHIRDbFlavor createFlavor() throws FHIRPersistenceDataAccessException {\n+        FHIRDbFlavor result;\n+        \n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                boolean multitenant = false;\n+                String typeValue = dsPG.getStringProperty(\"type\");\n+                \n+                DbType type = DbType.from(typeValue);\n+                if (type == DbType.DB2) {\n+                    // We make this absolute for now. May change in the future if we\n+                    // support a single-tenant schema in DB2.\n+                    multitenant = true;\n+                }\n+                \n+                result = new FHIRDbFlavorImpl(type, multitenant);\n+            }\n+            catch (Exception x) {\n+                log.log(Level.SEVERE, \"No type property found for datastore '\" + datastoreId + \"'\", x);\n+                throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+            }\n+        } else {\n+            log.log(Level.SEVERE, \"Missing datastore configuration for '\" + datastoreId + \"'\");\n+            throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+        }\n+        \n+        return result;\n+    }\n+    \n+    /**\n+     * Get a connection configured for the given tenant and datasourceId\n+     * @param datasource\n+     * @param tenantId\n+     * @param dsId\n+     * @return\n+     */\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection();\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original\n+            } finally {\n+                // just to prevent future coding mistakes\n+                connection = null;\n+            }\n+            throw t;\n+        }\n+        \n+        return connection;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n+     */\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        return this.flavor;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NDM2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNjoxMFrOGp5QCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMTo0MVrOGqS1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mjc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String PROPERTY_DB2_USER = \"user\";\n          \n          \n            \n                public static final String PROPERTY_DB_USER = \"user\";", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582793", "createdAt": "2020-06-28T00:26:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMjAyOA==", "bodyText": "agreed, although these were taken directly from the old FHIRDbDao.java.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447002028", "createdAt": "2020-06-29T14:11:41Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mjc5Mw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNjoyM1rOGp5QGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNjozOFrOGp5QNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjgwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String PROPERTY_DB2_PSWD = \"password\";\n          \n          \n            \n                public static final String PROPERTY_DB_PSWD = \"password\";", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582809", "createdAt": "2020-06-28T00:26:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";\n+    public static final String PROPERTY_DB2_PSWD = \"password\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjgzOA==", "bodyText": "We're doing more than just db2", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582838", "createdAt": "2020-06-28T00:26:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+\n+/**\n+ * Constants used with FHIR DB datasources and connections\n+ * \n+ * @implNote extracted from FHIRDbDAO\n+ */\n+public class FHIRDbConstants {\n+    public static final String FHIRDB_JNDI_NAME_DEFAULT = \"jdbc/fhirProxyDataSource\";\n+    public static final String PROPERTY_DB_DRIVER = \"dbDriverName\";\n+    public static final String PROPERTY_DB_URL = \"dbUrl\";\n+    public static final String PROPERTY_DB2_USER = \"user\";\n+    public static final String PROPERTY_DB2_PSWD = \"password\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjgwOQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NDk4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNjo1NVrOGp5QUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNjo1NVrOGp5QUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mjg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582865", "createdAt": "2020-06-28T00:26:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n+\n+/**\n+ * Capabilities supported by the different flavors of database we connect to.\n+ * The flavor is a combination of the database type (e.g. DB2/Derby etc) and\n+ * the capabilities of the installed schema\n+ */\n+public interface FHIRDbFlavor {\n+\n+    /**\n+     * Does the database support multi-tenancy?\n+     * @return\n+     */\n+    public boolean isMultitenant();\n+\n+    /**\n+     * What type of database is this?\n+     * @return\n+     */\n+    public DbType getType();\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NTMyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzoxOVrOGp5QdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzoxOVrOGp5QdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjkwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#isMultitenant()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582901", "createdAt": "2020-06-28T00:27:19Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n+\n+/**\n+ * Describes the capability of the underlying database and the schema it has\n+ * been configured with.\n+ */\n+public class FHIRDbFlavorImpl implements FHIRDbFlavor {\n+    \n+    // does the database schema support multi-tenancy\n+    private final boolean multitenant;\n+\n+    // basic type of the database (DB2, Derby etc)\n+    private final DbType type;\n+    \n+    public FHIRDbFlavorImpl(DbType type, boolean multitenant) {\n+        this.type = type;\n+        this.multitenant = multitenant;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#isMultitenant()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NTM2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzoyOVrOGp5Qew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzoyOVrOGp5Qew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#getType()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582907", "createdAt": "2020-06-28T00:27:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n+\n+/**\n+ * Describes the capability of the underlying database and the schema it has\n+ * been configured with.\n+ */\n+public class FHIRDbFlavorImpl implements FHIRDbFlavor {\n+    \n+    // does the database schema support multi-tenancy\n+    private final boolean multitenant;\n+\n+    // basic type of the database (DB2, Derby etc)\n+    private final DbType type;\n+    \n+    public FHIRDbFlavorImpl(DbType type, boolean multitenant) {\n+        this.type = type;\n+        this.multitenant = multitenant;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#isMultitenant()\n+     */\n+    @Override\n+    public boolean isMultitenant() {\n+        return this.multitenant;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#getType()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NTQyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzo0MlrOGp5Qgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyNzo0MlrOGp5Qgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446582915", "createdAt": "2020-06-28T00:27:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbFlavorImpl.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.model.DbType;\n+\n+/**\n+ * Describes the capability of the underlying database and the schema it has\n+ * been configured with.\n+ */\n+public class FHIRDbFlavorImpl implements FHIRDbFlavor {\n+    \n+    // does the database schema support multi-tenancy\n+    private final boolean multitenant;\n+\n+    // basic type of the database (DB2, Derby etc)\n+    private final DbType type;\n+    \n+    public FHIRDbFlavorImpl(DbType type, boolean multitenant) {\n+        this.type = type;\n+        this.multitenant = multitenant;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#isMultitenant()\n+     */\n+    @Override\n+    public boolean isMultitenant() {\n+        return this.multitenant;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor#getType()\n+     */\n+    @Override\n+    public DbType getType() {\n+        return this.type;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NjQ5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyOToyNlrOGp5Q-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyNToxNlrOGrNKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzAzMw==", "bodyText": "I think we should assume it's null by default.  If null, then we throw an exception.\nIt seems dangerous to set a default", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583033", "createdAt": "2020-06-28T00:29:26Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMTQ3Ng==", "bodyText": "yes, FHIRDATA should no longer be considered default anywhere. But it's moot here, because this class will be removed as it's no longer required.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447011476", "createdAt": "2020-06-29T14:24:42Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzAzMw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NzY1NA==", "bodyText": "this class has been deleted", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447957654", "createdAt": "2020-06-30T20:25:16Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzAzMw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NjYwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyOTozNlrOGp5RBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyNTowOVrOGqTcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583045", "createdAt": "2020-06-28T00:29:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");\n+            connection.setSchema(schemaName);\n+            \n+            return connection;\n+        } catch (Throwable e) {\n+            // Don't emit secrets like the dbUrl in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failed to acquire DB connection\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failed to acquire DB connection. dbUrl=\" + dbUrl, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMTg5Ng==", "bodyText": "file will be removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447011896", "createdAt": "2020-06-29T14:25:09Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");\n+            connection.setSchema(schemaName);\n+            \n+            return connection;\n+        } catch (Throwable e) {\n+            // Don't emit secrets like the dbUrl in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failed to acquire DB connection\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failed to acquire DB connection. dbUrl=\" + dbUrl, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA0NQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NjgzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMDoxMFrOGp5RIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyNTozM1rOGrNLHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA3Mg==", "bodyText": "? should be implemented or commented on?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583072", "createdAt": "2020-06-28T00:30:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");\n+            connection.setSchema(schemaName);\n+            \n+            return connection;\n+        } catch (Throwable e) {\n+            // Don't emit secrets like the dbUrl in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failed to acquire DB connection\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failed to acquire DB connection. dbUrl=\" + dbUrl, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        // TODO Auto-generated method stub\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMTY3OQ==", "bodyText": "file will be removed", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447011679", "createdAt": "2020-06-29T14:24:57Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");\n+            connection.setSchema(schemaName);\n+            \n+            return connection;\n+        } catch (Throwable e) {\n+            // Don't emit secrets like the dbUrl in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failed to acquire DB connection\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failed to acquire DB connection. dbUrl=\" + dbUrl, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        // TODO Auto-generated method stub\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA3Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1Nzc4OQ==", "bodyText": "class deleted", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447957789", "createdAt": "2020-06-30T20:25:33Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbPropsConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This class implements the old way to obtain DB connections using a {@link Properties} instance\n+ */\n+@Deprecated\n+public class FHIRDbPropsConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbPropsConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = \"FHIRDbPropsConnectionStrategy\";\n+\n+    // Contains the connection properties\n+    private final Properties dbProps;\n+    \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbPropsConnectionStrategy(Properties dbProps) throws FHIRPersistenceDBConnectException {\n+        this.dbProps = dbProps;\n+\n+        // ensure the driver is loaded\n+        String dbDriverName = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_DRIVER);\n+        try {\n+            Class.forName(dbDriverName);\n+        } catch (ClassNotFoundException e) {\n+            // Not concerned about revealing a classname in the exception\n+            throw new FHIRPersistenceDBConnectException(\"Failed to load driver: \" + dbDriverName, e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        // TODO we need to wrap the connection to simplify transaction handling\n+        final String METHODNAME = \"getConnection()\";\n+        \n+        Connection connection = null;\n+        String dbUrl;\n+    \n+        dbUrl = this.dbProps.getProperty(FHIRDbConstants.PROPERTY_DB_URL);\n+        try {\n+            connection = DriverManager.getConnection(dbUrl, this.dbProps);\n+    \n+            // Most queries assume the current schema is set up properly\n+            String schemaName = dbProps.getProperty(FHIRDbConstants.PROPERTY_SCHEMA_NAME, \"FHIRDATA\");\n+            connection.setSchema(schemaName);\n+            \n+            return connection;\n+        } catch (Throwable e) {\n+            // Don't emit secrets like the dbUrl in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failed to acquire DB connection\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failed to acquire DB connection. dbUrl=\" + dbUrl, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        // TODO Auto-generated method stub\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA3Mg=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NzAzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMDozMFrOGp5RNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMDozMFrOGp5RNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583095", "createdAt": "2020-06-28T00:30:30Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NzQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMDo0N1rOGp5RaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMDo0N1rOGp5RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583145", "createdAt": "2020-06-28T00:30:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2NzYzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMTowOVrOGp5Rew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMTowOVrOGp5Rew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzE2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583163", "createdAt": "2020-06-28T00:31:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2Nzc5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMTozNFrOGp5RjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMTozNFrOGp5RjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583181", "createdAt": "2020-06-28T00:31:34Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINE)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+\n+        try {\n+            // Resources can be routed to different databases using the dsId currently\n+            // set on the context.\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dsId = FHIRRequestContext.get().getDataStoreId();\n+            \n+            long start = System.nanoTime();\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+            }\n+\n+            // Use the username/password interface to pass the tenantId and datasource id\n+            // paramters into the proxy datasource so that it can find the correct connection\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                double deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceJndiName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection(tenantId, dsId);\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original\n+            } finally {\n+                // just to prevent future coding mistakes\n+                connection = null;\n+            }\n+            throw t;\n+        }\n+        \n+        return connection;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2ODA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMjowOFrOGp5Rrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowOToxNVrOGrBFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzIxNA==", "bodyText": "I still think it's appropriate to log finest", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583214", "createdAt": "2020-06-28T00:32:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINE)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+\n+        try {\n+            // Resources can be routed to different databases using the dsId currently\n+            // set on the context.\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dsId = FHIRRequestContext.get().getDataStoreId();\n+            \n+            long start = System.nanoTime();\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+            }\n+\n+            // Use the username/password interface to pass the tenantId and datasource id\n+            // paramters into the proxy datasource so that it can find the correct connection\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                double deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceJndiName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection(tenantId, dsId);\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzcyNA==", "bodyText": "which bit? Perhaps we should create some guidelines for FINE/FINER/FINEST.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447013724", "createdAt": "2020-06-29T14:27:38Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINE)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+\n+        try {\n+            // Resources can be routed to different databases using the dsId currently\n+            // set on the context.\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dsId = FHIRRequestContext.get().getDataStoreId();\n+            \n+            long start = System.nanoTime();\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+            }\n+\n+            // Use the username/password interface to pass the tenantId and datasource id\n+            // paramters into the proxy datasource so that it can find the correct connection\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                double deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceJndiName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection(tenantId, dsId);\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzIxNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NjQ2Mw==", "bodyText": "if you are catching a throwable here, it'd be a great think to have a log statement at least announcing.  I say FINEST as it is not FINER which is our default, and allows us to turn it higher to see what's happening.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447056463", "createdAt": "2020-06-29T15:25:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINE)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+\n+        try {\n+            // Resources can be routed to different databases using the dsId currently\n+            // set on the context.\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dsId = FHIRRequestContext.get().getDataStoreId();\n+            \n+            long start = System.nanoTime();\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+            }\n+\n+            // Use the username/password interface to pass the tenantId and datasource id\n+            // paramters into the proxy datasource so that it can find the correct connection\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                double deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceJndiName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection(tenantId, dsId);\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzIxNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1OTY5NQ==", "bodyText": "fixed in next commit", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447759695", "createdAt": "2020-06-30T15:09:15Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbProxyDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy is used for configurations using the FHIR proxy datasource, \n+ * which supports dynamic configurations of datasources without requiring\n+ * the application server to restart.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbProxyDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbProxyDatasourceConnectionStrategy.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final double NANOMS = 1e6;\n+    \n+    // The (proxy) datasource\n+    private final DataSource datasource;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceJndiName;\n+\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbProxyDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+        final String METHODNAME = \"FHIRDbProxyDatasourceConnectionProvider()\";\n+        \n+        \n+        // Find the JNDI name of the datasource we want to use\n+        try {\n+            this.datasourceJndiName =\n+                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceJndiName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        // JNDI lookup. May fail if the server configuration is incorrect\n+        try {\n+            InitialContext ctxt = new InitialContext();\n+            datasource = (DataSource) ctxt.lookup(datasourceJndiName);\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure acquiring datasource: \" + datasourceJndiName), e);\n+            throw fx;\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINE)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+\n+        try {\n+            // Resources can be routed to different databases using the dsId currently\n+            // set on the context.\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            String dsId = FHIRRequestContext.get().getDataStoreId();\n+            \n+            long start = System.nanoTime();\n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+            }\n+\n+            // Use the username/password interface to pass the tenantId and datasource id\n+            // paramters into the proxy datasource so that it can find the correct connection\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                double deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceJndiName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINE)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    @Override\n+    protected Connection getConnection(DataSource datasource, String tenantId, String dsId) throws SQLException, FHIRPersistenceException {\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        Connection connection = datasource.getConnection(tenantId, dsId);\n+        \n+        try {\n+            // always\n+            connection.setAutoCommit(false);\n+            \n+            // configure the connection if it's the first time we've accessed it in this transaction\n+            configure(connection, tenantId, dsId);\n+        } catch (Throwable t) {\n+            // clean up if something goes wrong during configuration\n+            try {\n+                connection.close();\n+            } catch (Throwable x) {\n+                // NOP...something bad is going on anyway, so don't confuse things\n+                // by throwing a different exception and hiding the original", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzIxNA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2ODYwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMjo1MlrOGp5R5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozMDo1N1rOGrNWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ==", "bodyText": "OK, what is this code block doing?  it seems unused", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583271", "createdAt": "2020-06-28T00:32:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxODc3Mw==", "bodyText": "This is a new datasource strategy Lee and I discussed. It will allow us to create simpler database configurations using datasources directly from JNDI instead of our more complex proxy configuration. I used it temporarily when I was debugging the setSchema issue. The strategy implementation works, but needs some extra support from the FHIR server config side of things to make it usable.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447018773", "createdAt": "2020-06-29T14:34:17Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Njk4Mg==", "bodyText": "let's take the code out or add a comment", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447056982", "createdAt": "2020-06-29T15:26:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MDI1NA==", "bodyText": "I'll add a comment", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447760254", "createdAt": "2020-06-30T15:09:58Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTAyMw==", "bodyText": "I'm sorry I don't see the comment", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447905023", "createdAt": "2020-06-30T18:47:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1ODM2MA==", "bodyText": "Currently not used - just needs some additional integration\n\n\n\n      with the fhir-server-configuration to be supported.\n\n\n\nlines 48-49", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447958360", "createdAt": "2020-06-30T20:26:41Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MDYzMA==", "bodyText": "thank you", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447960630", "createdAt": "2020-06-30T20:30:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI3MQ=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2ODcxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzowM1rOGp5R9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzowM1rOGp5R9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583284", "createdAt": "2020-06-28T00:33:03Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceBaseName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        this.flavor = createFlavor();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2ODc5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzoyMFrOGp5SAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzoyMFrOGp5SAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzI5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583296", "createdAt": "2020-06-28T00:33:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceBaseName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        this.flavor = createFlavor();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection = null;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINEST)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+        \n+        // the dsId/tenantId specific datasource we need to locate\n+        DataSource datasource;\n+        \n+        // Resources can be routed to different databases using the dsId currently\n+        // set on the context.\n+        String tenantId = FHIRRequestContext.get().getTenantId();\n+        String dsId = FHIRRequestContext.get().getDataStoreId();\n+        \n+        // this is the important bit...how we name our actual datasources\n+        final String datasourceName = datasourceBaseName + tenantId + \"_\" + dsId;\n+        \n+        // Note: we don't need any synchronization around ConcurrentHashMap, but that\n+        // doesn't change the fact that we may look up the datasource and put it into\n+        // the map more than once. That's fine. There aren't any integrity issues, just\n+        // the chance of doing more work than necessary a single time, but we avoid the\n+        // need for any synchronization. We cache locally, because we've found that JNDI\n+        // lookups can become a bottleneck with high concurrency\n+        datasource = datasourceMap.get(datasourceName);\n+        if (datasource == null) {\n+            // cache miss\n+            try {\n+                InitialContext ctxt = new InitialContext();\n+                \n+                datasource = (DataSource) ctxt.lookup(datasourceName);\n+                datasourceMap.put(datasourceName, datasource);\n+            } catch (Throwable e) {\n+                // don't emit secrets in exceptions\n+                FHIRPersistenceDBConnectException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+                throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+            } finally {\n+                if (log.isLoggable(Level.FINEST)) {\n+                    log.exiting(CLASSNAME, METHODNAME);\n+                }\n+            }\n+        }\n+        \n+        long start = System.nanoTime();\n+        if (log.isLoggable(Level.FINE)) {\n+            log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+        }\n+\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        try {\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                long deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2ODg1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzozNVrOGp5SBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozMzozNVrOGp5SBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzMwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583303", "createdAt": "2020-06-28T00:33:35Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTenantDatasourceConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FHIRDbDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.FHIRDbDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Uses datasource and tenant ids configured in the fhir-server-config to\n+ * map directly to a managed datasource. All managed datasources must be\n+ * available when the server starts. This differs from the proxy\n+ * datasource strategy {@link FHIRDbPropsConnectionStrategy} which supports\n+ * dynamic (programmatic) definition of managed datasources.\n+ * \n+ * @implNote Refactored from {@link FHIRDbDAOImpl}. Improves separation of\n+ *           concerns by removing connection management code from the DAO\n+ *           and injecting it as a strategy instead. This not only simplifies\n+ *           things, but also makes it easier to implement new strategies,\n+ *           such as using a JEE datasource directly instead of the FHIR\n+ *           proxy datasource used here.\n+ */\n+public class FHIRDbTenantDatasourceConnectionStrategy extends FHIRDbConnectionStrategyBase {\n+    private static final Logger log = Logger.getLogger(FHIRDbDAOImpl.class.getName());\n+    private static final String CLASSNAME = FHIRDbDAOImpl.class.getName();\n+\n+    // number of nanoseconds in a millisecond\n+    private static final long NANOMS = 1000000;\n+    \n+    // JNDI address of the (proxy) datasource\n+    private final String datasourceBaseName = \"jdbc/fhir_\";\n+\n+    // Cache of datasources we've found\n+    private final Map<String, DataSource> datasourceMap = new ConcurrentHashMap<>();\n+    \n+    // the flavor of the database we are configured to represent\n+    private final FHIRDbFlavor flavor;\n+\n+    /**\n+     * Public constructor. The proxy datasource must be present (registered in JNDI)\n+     * at server startup.\n+     * @throws FHIRPersistenceDBConnectException if the proxy datasource is not configured\n+     */\n+    public FHIRDbTenantDatasourceConnectionStrategy(TransactionSynchronizationRegistry trxSyncRegistry, Action newConnectionAction) throws FHIRException {\n+        super(trxSyncRegistry, newConnectionAction);\n+\n+        // Find the base JNDI name of the datasource we want to use\n+        try {\n+//            this.datasourceBaseName =\n+//                    FHIRConfiguration.getInstance().loadConfiguration().getStringProperty(\n+//                        FHIRConfiguration.PROPERTY_JDBC_DATASOURCE_JNDINAME, FHIRDbDAO.FHIRDB_JNDI_NAME_DEFAULT);\n+            \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Using datasource JNDI name: \" + datasourceBaseName);\n+            }\n+        } catch (Throwable e) {\n+            FHIRException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+            log.log(Level.SEVERE, fx.addProbeId(\"Failure to find proxy datasource in FHIR server configuration\"), e);\n+            throw fx;\n+        }\n+        \n+        this.flavor = createFlavor();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionProvider#getConnection()\n+     */\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        Connection connection = null;\n+        final String METHODNAME = \"getConnection\";\n+\n+        if (log.isLoggable(Level.FINEST)) {\n+            log.entering(CLASSNAME, METHODNAME);\n+        }\n+        \n+        // the dsId/tenantId specific datasource we need to locate\n+        DataSource datasource;\n+        \n+        // Resources can be routed to different databases using the dsId currently\n+        // set on the context.\n+        String tenantId = FHIRRequestContext.get().getTenantId();\n+        String dsId = FHIRRequestContext.get().getDataStoreId();\n+        \n+        // this is the important bit...how we name our actual datasources\n+        final String datasourceName = datasourceBaseName + tenantId + \"_\" + dsId;\n+        \n+        // Note: we don't need any synchronization around ConcurrentHashMap, but that\n+        // doesn't change the fact that we may look up the datasource and put it into\n+        // the map more than once. That's fine. There aren't any integrity issues, just\n+        // the chance of doing more work than necessary a single time, but we avoid the\n+        // need for any synchronization. We cache locally, because we've found that JNDI\n+        // lookups can become a bottleneck with high concurrency\n+        datasource = datasourceMap.get(datasourceName);\n+        if (datasource == null) {\n+            // cache miss\n+            try {\n+                InitialContext ctxt = new InitialContext();\n+                \n+                datasource = (DataSource) ctxt.lookup(datasourceName);\n+                datasourceMap.put(datasourceName, datasource);\n+            } catch (Throwable e) {\n+                // don't emit secrets in exceptions\n+                FHIRPersistenceDBConnectException fx = new FHIRPersistenceDBConnectException(\"Failure acquiring datasource\");\n+                throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+            } finally {\n+                if (log.isLoggable(Level.FINEST)) {\n+                    log.exiting(CLASSNAME, METHODNAME);\n+                }\n+            }\n+        }\n+        \n+        long start = System.nanoTime();\n+        if (log.isLoggable(Level.FINE)) {\n+            log.fine(\"Getting connection for tenantId/dsId: [\" + tenantId + \"/\" + dsId + \"]...\");\n+        }\n+\n+        // Now use the dsId/tenantId specific JEE datasource to get a connection\n+        try {\n+            connection = getConnection(datasource, tenantId, dsId);\n+\n+            if (log.isLoggable(Level.FINE)) {\n+                long deltams = (System.nanoTime() - start) / NANOMS;\n+                log.fine(\"Got the connection for [\" + tenantId + \"/\" + dsId + \"]. Took \" + deltams + \" ms\");\n+            }\n+        } catch (Throwable e) {\n+            // Don't emit secrets in case they are returned to a client\n+            FHIRPersistenceDBConnectException fx =\n+                    new FHIRPersistenceDBConnectException(\"Failure acquiring connection for datasource\");\n+            throw FHIRDbHelper.severe(log, fx, \"Failure acquiring connection for datasource: \" + datasourceName, e);\n+        } finally {\n+            if (log.isLoggable(Level.FINEST)) {\n+                log.exiting(CLASSNAME, METHODNAME);\n+            }\n+        }\n+        \n+        return connection;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRDbConnectionStrategy#getFlavor()\n+     */\n+    @Override\n+    public FHIRDbFlavor getFlavor() throws FHIRPersistenceDataAccessException {\n+        return this.flavor;\n+    }\n+\n+    /**\n+     * Identify the flavor of the database using information from the\n+     * datasource configuration.\n+     * TODO duplicate code in FHIRDbConnectionStrategyBase. Refactor\n+     * @return\n+     * @throws FHIRPersistenceException\n+     */\n+    private FHIRDbFlavor createFlavor() throws FHIRPersistenceDataAccessException {\n+        FHIRDbFlavor result;\n+        \n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                boolean multitenant = false;\n+                String typeValue = dsPG.getStringProperty(\"type\");\n+                \n+                DbType type = DbType.from(typeValue);\n+                if (type == DbType.DB2) {\n+                    // We make this absolute for now. May change in the future if we\n+                    // support a single-tenant schema in DB2.\n+                    multitenant = true;\n+                }\n+                \n+                result = new FHIRDbFlavorImpl(type, multitenant);\n+            }\n+            catch (Exception x) {\n+                log.log(Level.SEVERE, \"No type property found for datastore '\" + datastoreId + \"'\", x);\n+                throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+            }\n+        } else {\n+            log.log(Level.SEVERE, \"Missing datastore configuration for '\" + datastoreId + \"'\");\n+            throw new FHIRPersistenceDataAccessException(\"Datastore configuration issue. Details in server logs\");\n+        }\n+        \n+        return result;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2OTM3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDoxMlrOGp5SRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDoxMlrOGp5SRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzM2NA==", "bodyText": "missing a parameter\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @param action\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583364", "createdAt": "2020-06-28T00:34:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy object is local to a thread, and because we use the same\n+ * underlying connection to our test database within a transaction, we\n+ * only need to configure the connection once. We can track this initialization\n+ * with nothing more complicated than a Boolean flag.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container. For\n+ * example, this is used when connecting to in-memory instances of Derby when\n+ * running persistence layer unit-tests.\n+ * \n+ */\n+public class FHIRDbTestConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    private boolean initialized = false;\n+\n+    // Action to take to initialize a new connection\n+    private final Action action;\n+    \n+    // The type and capability of the database we connect to\n+    private final FHIRDbFlavor flavor;\n+            \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2OTUwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDozM1rOGp5SVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDozM1rOGp5SVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            catch (Throwable t) {\n          \n          \n            \n                            } catch (Throwable t) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583380", "createdAt": "2020-06-28T00:34:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy object is local to a thread, and because we use the same\n+ * underlying connection to our test database within a transaction, we\n+ * only need to configure the connection once. We can track this initialization\n+ * with nothing more complicated than a Boolean flag.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container. For\n+ * example, this is used when connecting to in-memory instances of Derby when\n+ * running persistence layer unit-tests.\n+ * \n+ */\n+public class FHIRDbTestConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    private boolean initialized = false;\n+\n+    // Action to take to initialize a new connection\n+    private final Action action;\n+    \n+    // The type and capability of the database we connect to\n+    private final FHIRDbFlavor flavor;\n+            \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbTestConnectionStrategy(IConnectionProvider cp, Action action) {\n+        this.connectionProvider = cp;\n+        this.action = action;\n+\n+        // we don't support multi-tenancy in our unit-test database\n+        flavor = new FHIRDbFlavorImpl(cp.getTranslator().getType(), false);\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        try {\n+            // The connection we get from this connection provider will be wrapped, so it\n+            // can be closed by the caller.\n+            Connection result = connectionProvider.getConnection();\n+\n+            if (!this.initialized) {\n+                log.fine(\"Initializing new connection\");\n+                try {\n+                    // actions are optional so may be null\n+                    if (action != null) {\n+                        action.performOn(result);\n+                    }\n+                    this.initialized = true;\n+                    \n+                    log.fine(\"Connection initialized\");\n+                }\n+                catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg2OTcwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDo0NlrOGp5SaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNDo0NlrOGp5SaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    catch (SQLException x) {\n          \n          \n            \n                    } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583401", "createdAt": "2020-06-28T00:34:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRDbTestConnectionStrategy.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * This strategy object is local to a thread, and because we use the same\n+ * underlying connection to our test database within a transaction, we\n+ * only need to configure the connection once. We can track this initialization\n+ * with nothing more complicated than a Boolean flag.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container. For\n+ * example, this is used when connecting to in-memory instances of Derby when\n+ * running persistence layer unit-tests.\n+ * \n+ */\n+public class FHIRDbTestConnectionStrategy implements FHIRDbConnectionStrategy {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    private boolean initialized = false;\n+\n+    // Action to take to initialize a new connection\n+    private final Action action;\n+    \n+    // The type and capability of the database we connect to\n+    private final FHIRDbFlavor flavor;\n+            \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRDbTestConnectionStrategy(IConnectionProvider cp, Action action) {\n+        this.connectionProvider = cp;\n+        this.action = action;\n+\n+        // we don't support multi-tenancy in our unit-test database\n+        flavor = new FHIRDbFlavorImpl(cp.getTranslator().getType(), false);\n+    }\n+\n+    @Override\n+    public Connection getConnection() throws FHIRPersistenceDBConnectException {\n+        try {\n+            // The connection we get from this connection provider will be wrapped, so it\n+            // can be closed by the caller.\n+            Connection result = connectionProvider.getConnection();\n+\n+            if (!this.initialized) {\n+                log.fine(\"Initializing new connection\");\n+                try {\n+                    // actions are optional so may be null\n+                    if (action != null) {\n+                        action.performOn(result);\n+                    }\n+                    this.initialized = true;\n+                    \n+                    log.fine(\"Connection initialized\");\n+                }\n+                catch (Throwable t) {\n+                    // inialization failed, but the connection is open so we need to close it\n+                    log.severe(\"Connection initialization failed\");\n+                    result.close();\n+                    throw t;\n+                }\n+            }\n+            \n+            return result;\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MDQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNTo0MVrOGp5Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNTo0MVrOGp5Svw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583487", "createdAt": "2020-06-28T00:35:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.database.utils.api.ITransaction;\n+import com.ibm.fhir.database.utils.transaction.SimpleTransactionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Hides the logic behind obtaining a JDBC {@link Connection} from the DAO code.\n+ * \n+ * Use by unit tests or other scenarios where connections are obtained using an\n+ * IConnectionProvider implementation, outside the scope of a JEE container.\n+ * Transactions are managed with the help of the SimpleTransactionProvider and\n+ * wrapped by this class, meaning we have a uniform interface for handling\n+ * transactions across JEE and unit-test scenarios.\n+ * \n+ */\n+public class FHIRTestTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRDbTestConnectionStrategy.class.getName());\n+    \n+    // Provides connections when outside of a container\n+    private final IConnectionProvider connectionProvider;\n+    \n+    // Support transactions for the persistence unit tests\n+    private final SimpleTransactionProvider transactionProvider;\n+    \n+    // Just in case we have nesting issues, use ThreadLocal to track the current tx\n+    private final ThreadLocal<ITransaction> currentTransaction = new ThreadLocal<>();\n+    \n+    // Was this instance responsible for starting the transaction\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+        \n+    /**\n+     * Public constructor\n+     * @param cp\n+     */\n+    public FHIRTestTransactionAdapter(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+\n+        // provide transaction support for our tests\n+        this.transactionProvider = new SimpleTransactionProvider(this.connectionProvider);\n+    }\n+\n+    @Override\n+    public void begin() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            // allocate a new transaction\n+            this.currentTransaction.set(this.transactionProvider.getTransaction());\n+            this.startedByThis = true;\n+        }\n+        \n+        // add to the start request counter every time. We only close when this\n+        // counter reaches 0.\n+        startCount++;\n+    }\n+\n+    @Override\n+    public void end() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+        \n+        try {\n+            // only end it if we started it\n+            if (startedByThis && --startCount == 0) {\n+                this.currentTransaction.get().close();\n+            }\n+        }\n+        catch (Throwable x) {\n+            // translate to a FHIRPersistenceException\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Unexpected error while committing a transaction.\");\n+            log.log(Level.SEVERE, fx.getMessage(), x);\n+            throw fx;\n+        }\n+        finally {\n+            this.currentTransaction.set(null);\n+            this.startedByThis = false;\n+        }\n+    }\n+\n+    @Override\n+    public void setRollbackOnly() throws FHIRPersistenceException {\n+        if (currentTransaction.get() == null) {\n+            throw new FHIRPersistenceDataAccessException(\"Transaction not started\");\n+        }\n+\n+        // always mark the transaction for rollback, even if not started by this\n+        this.currentTransaction.get().setRollbackOnly();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MDUzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNjowMVrOGp5Sxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNjowMVrOGp5Sxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.FHIRTransactionFactory#create()\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583495", "createdAt": "2020-06-28T00:36:01Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+\n+/**\n+ * Factory/strategy to instantiate FHIRTestTransactionHandler implementations\n+ * of the {@link FHIRPersistenceTransaction} interface. Typically used\n+ * to support unit-tests\n+ */\n+public class FHIRTestTransactionFactory implements FHIRTransactionFactory {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor\n+     */\n+    public FHIRTestTransactionFactory(IConnectionProvider cp) {\n+        this.connectionProvider = cp;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.FHIRTransactionFactory#create()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MDgwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNjoxN1rOGp5S4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1NzoyNFrOGrDRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzUyMw==", "bodyText": "missing the parameter javadoc", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583523", "createdAt": "2020-06-28T00:36:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+\n+/**\n+ * Factory/strategy to instantiate FHIRTestTransactionHandler implementations\n+ * of the {@link FHIRPersistenceTransaction} interface. Typically used\n+ * to support unit-tests\n+ */\n+public class FHIRTestTransactionFactory implements FHIRTransactionFactory {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NTYzNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447795637", "createdAt": "2020-06-30T15:57:24Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRTestTransactionFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+\n+/**\n+ * Factory/strategy to instantiate FHIRTestTransactionHandler implementations\n+ * of the {@link FHIRPersistenceTransaction} interface. Typically used\n+ * to support unit-tests\n+ */\n+public class FHIRTestTransactionFactory implements FHIRTransactionFactory {\n+\n+    private final IConnectionProvider connectionProvider;\n+    \n+    /**\n+     * Public constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzUyMw=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MTE2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRUserTransactionAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNjo0OFrOGp5TDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNjo0OFrOGp5TDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Public constructor\n          \n          \n            \n                 * @param strat\n          \n          \n            \n                 * Public constructor\n          \n          \n            \n                 * @param tx", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583564", "createdAt": "2020-06-28T00:36:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRUserTransactionAdapter.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.Status;\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+\n+\n+/**\n+ * Adapter to simplify transaction handling. This object is returned by\n+ * FHIRPersistenceJDBCImpl and can be used instead of the old FHIRTransactionHelper\n+ */\n+public class FHIRUserTransactionAdapter implements FHIRPersistenceTransaction {\n+    private static final Logger log = Logger.getLogger(FHIRUserTransactionAdapter.class.getName());\n+    \n+    // The connection strategy handling the underlying transaction object\n+    private final UserTransaction userTransaction;\n+    \n+    // Did this instance start the transaction?\n+    private boolean startedByThis;\n+    \n+    // support nesting by tracking the number of begin/end requests\n+    private int startCount;\n+    \n+    /**\n+     * Public constructor\n+     * @param strat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MTQxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRUserTransactionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNzoyOVrOGp5TLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNzoyOVrOGp5TLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583597", "createdAt": "2020-06-28T00:37:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/FHIRUserTransactionFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import javax.transaction.UserTransaction;\n+\n+import com.ibm.fhir.persistence.FHIRPersistenceTransaction;\n+\n+/**\n+ * Factory implementation for creating new instances of FHIRTransactionImpl\n+ * referencing a given {@link UserTransaction} object\n+ */\n+public class FHIRUserTransactionFactory implements FHIRTransactionFactory {\n+    // The UserTransaction object used to create the objects we manufacture\n+    private final UserTransaction userTransaction;\n+\n+    /**\n+     * Public constructor\n+     * @param tx\n+     */\n+    public FHIRUserTransactionFactory(UserTransaction tx) {\n+        this.userTransaction = tx;\n+    }\n+    \n+    @Override\n+    public FHIRPersistenceTransaction create() {\n+        return new FHIRUserTransactionAdapter(userTransaction);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MTc1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameFromProps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNzo1NlrOGp5TUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozNzo1NlrOGp5TUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583634", "createdAt": "2020-06-28T00:37:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameFromProps.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Properties;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Returns a constant schemaName. Useful for unit test configurations\n+ */\n+public class SchemaNameFromProps implements SchemaNameSupplier { \n+\n+    // The constant schema name we supply\n+    private final String schemaName;\n+ \n+    /**\n+     * Public constructor\n+     * @param configProps should contain the \"schemaName\" property\n+     */\n+    public SchemaNameFromProps(Properties configProps) {\n+        // get the schema name from the configuration properties\n+        this.schemaName = configProps.getProperty(\"schemaName\", null);\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName constant\n+     */\n+    public SchemaNameFromProps(String schemaName) {\n+        this.schemaName = schemaName;\n+    }\n+\n+    @Override\n+    public String getSchemaForRequestContext(Connection connection) throws FHIRPersistenceDBConnectException {\n+        return this.schemaName;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MTc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozODoxNFrOGp5TWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozODoxNFrOGp5TWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (SQLException x) {\n          \n          \n            \n                        } catch (SQLException x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583640", "createdAt": "2020-06-28T00:38:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Supplier which tries to obtain the schema name from the given delegate,\n+ * falling back to calling getSchema() from the connection if the supplier\n+ * returns a null\n+ */\n+public class SchemaNameImpl implements SchemaNameSupplier { \n+    private static final Logger logger = Logger.getLogger(SchemaNameImpl.class.getName());\n+    \n+    // the delegate we use ask for the schema name\n+    private final SchemaNameSupplier delegate;\n+\n+    /**\n+     * Public constructor\n+     * @param delegate\n+     * @param connection\n+     */\n+    public SchemaNameImpl(SchemaNameSupplier delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public String getSchemaForRequestContext(Connection connection) throws FHIRPersistenceDBConnectException {\n+        String result = delegate.getSchemaForRequestContext(connection);\n+        if (result == null) {\n+            try {\n+                // fall back to getting the name of the schema from the connection\n+                // which is slower. We need this because \"currentSchema\" isn't\n+                // a supported property in the Derby datasource properties.\n+                if (result == null) {\n+                    // log a warning...the schema name will have to be obtained from the\n+                    // connection later...which is slower because it requires a DB round-trip\n+                    logger.warning(\"Calling Connection#getSchema() to obtain schema name. Put schema name in configuration for better performance\");\n+                }\n+                \n+                result = connection.getSchema();\n+                \n+                if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(\"schema name from connection: \" + result);\n+                }\n+            }\n+            catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MTg5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozODoyM1rOGp5TYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozODoyM1rOGp5TYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583651", "createdAt": "2020-06-28T00:38:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SchemaNameImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Supplier which tries to obtain the schema name from the given delegate,\n+ * falling back to calling getSchema() from the connection if the supplier\n+ * returns a null\n+ */\n+public class SchemaNameImpl implements SchemaNameSupplier { \n+    private static final Logger logger = Logger.getLogger(SchemaNameImpl.class.getName());\n+    \n+    // the delegate we use ask for the schema name\n+    private final SchemaNameSupplier delegate;\n+\n+    /**\n+     * Public constructor\n+     * @param delegate\n+     * @param connection\n+     */\n+    public SchemaNameImpl(SchemaNameSupplier delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public String getSchemaForRequestContext(Connection connection) throws FHIRPersistenceDBConnectException {\n+        String result = delegate.getSchemaForRequestContext(connection);\n+        if (result == null) {\n+            try {\n+                // fall back to getting the name of the schema from the connection\n+                // which is slower. We need this because \"currentSchema\" isn't\n+                // a supported property in the Derby datasource properties.\n+                if (result == null) {\n+                    // log a warning...the schema name will have to be obtained from the\n+                    // connection later...which is slower because it requires a DB round-trip\n+                    logger.warning(\"Calling Connection#getSchema() to obtain schema name. Put schema name in configuration for better performance\");\n+                }\n+                \n+                result = connection.getSchema();\n+                \n+                if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(\"schema name from connection: \" + result);\n+                }\n+            }\n+            catch (SQLException x) {\n+                throw new FHIRPersistenceDBConnectException(\"Unable to obtain schema name from connection\", x);\n+            }\n+        }\n+        return result;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MjE5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozOTowNFrOGp5ThA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyNzo1MlrOGrNP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzY4NA==", "bodyText": "You are missing the right names", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583684", "createdAt": "2020-06-28T00:39:04Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNDI0MA==", "bodyText": "?", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447024240", "createdAt": "2020-06-29T14:41:31Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzY4NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1OTAwNg==", "bodyText": "Does this comment refer to javadoc? It should be correct.", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r447959006", "createdAt": "2020-06-30T20:27:52Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzY4NA=="}, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MjQyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozOToyMFrOGp5TnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozOToyMFrOGp5TnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* (non-Javadoc)\n          \n          \n            \n                 * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n          \n          \n            \n                 */", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583708", "createdAt": "2020-06-28T00:39:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName\n+     */\n+    public SetSchemaAction(SchemaNameSupplier schemaNameSupplier, Action next) {\n+        super(next);\n+        this.schemaNameSupplier = schemaNameSupplier;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3MjUzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozOTozNFrOGp5Tpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDozOTozNFrOGp5Tpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583719", "createdAt": "2020-06-28T00:39:34Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetSchemaAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+\n+/**\n+ * Command to set the named schema on a connection\n+ */\n+public class SetSchemaAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetSchemaAction.class.getName());\n+\n+    // supplier to obtain the schema name when we need it\n+    private final SchemaNameSupplier schemaNameSupplier;\n+    \n+    /**\n+     * Use a provided schema name (handy for testing)\n+     * @param schemaName\n+     */\n+    public SetSchemaAction(SchemaNameSupplier schemaNameSupplier, Action next) {\n+        super(next);\n+        this.schemaNameSupplier = schemaNameSupplier;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see com.ibm.fhir.persistence.jdbc.connection.Action#performOn(java.sql.Connection)\n+     */\n+    @Override\n+    public void performOn(Connection c) throws FHIRPersistenceDBConnectException {\n+        // this is being called the first time we've seen a connection for this\n+        // particular datastore. Find out which schema is configured, and make\n+        // sure it is set as the current schema.\n+        String schemaName = schemaNameSupplier.getSchemaForRequestContext(c);\n+        if (schemaName != null) {\n+            try {\n+                log.severe(\"Calling setSchema(...) may break connection pool/transaction manager\");\n+                c.setSchema(schemaName);\n+            } catch (SQLException x) {\n+                log.log(Level.SEVERE, \"failed to set current schema '\" + schemaName + \"'\");\n+                \n+                // schemaName is a secret, so don't emit in the exception to avoid propagating to client\n+                throw new FHIRPersistenceDBConnectException(\"Failed setting schema on connection\");\n+            }\n+        } else {\n+            // rare\n+            log.fine(\"schemaName is null, so skipping setSchema() on connection\");\n+        }\n+        \n+        // call the next action in the chain\n+        super.performOn(c);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg3Mjg4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetTenantAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MDowN1rOGp5T0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo0MDowN1rOGp5T0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        catch (Exception x) {\n          \n          \n            \n                        } catch (Exception x) {", "url": "https://github.com/IBM/FHIR/pull/1267#discussion_r446583761", "createdAt": "2020-06-28T00:40:07Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/SetTenantAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n+import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n+import com.ibm.fhir.database.utils.api.BadTenantNameException;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Adapter;\n+import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Set the tenant variable in the session (part of Db2 multi-tenancy\n+ * support). This needs to be executed at the beginning of an\n+ * interaction with a database connection, before any other\n+ * DML/SQL.\n+ */\n+public class SetTenantAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetTenantAction.class.getName());\n+    \n+    // Used to indicate the default behavior of a datastore as multitenant.\n+    public static final List<String> DATASTORE_REQUIRES_ROW_PERMISSIONS = Arrays.asList(\"db2\");\n+\n+    /**\n+     * Default public constructor. No next action, so this will be the last action applied\n+     */\n+    public SetTenantAction() {\n+        super();\n+    }\n+    \n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public SetTenantAction(Action next) {\n+        super(next);\n+    }\n+\n+\n+    @Override\n+    public void performOn(Connection c) throws FHIRPersistenceDBConnectException {\n+        \n+        configureTenantAccess(c);\n+        \n+        // perform next action in the chain\n+        super.performOn(c);\n+    }\n+\n+    /**\n+     * Find the tenantKey for the datasource/tenant from the FHIR server configuration\n+     * and use it to set up the connection for access by this tenant by setting \n+     * the SV_TENANT_ID session variable (via the FHIR_ADMIN.SET_TENANT stored procedure).\n+     * Note that the database user we connect as does not have direct access to WRITE\n+     * to the SV_TENANT_ID...it can only be set through the SET_TENANT call, for which\n+     * we have been explicitly granted execute privilege.\n+     *\n+     * @param connection the connection to configure\n+     * @throws FHIRPersistenceException if the configuration fails\n+     */\n+    public void configureTenantAccess(Connection connection) throws FHIRPersistenceDBConnectException {\n+        boolean multiTenantFeature = false;\n+        String tenantKey = null;\n+        \n+        // Get the datastore and tenant from the request context\n+        String tenantName = FHIRRequestContext.get().getTenantId();\n+        String datastoreId = FHIRRequestContext.get().getDataStoreId();\n+\n+        // Retrieve the property group pertaining to the specified datastore.\n+        // Find and set the tenantKey for the request, otherwise subsequent pulls from the pool\n+        // miss the tenantKey.\n+        String dsPropertyName = FHIRConfiguration.PROPERTY_DATASOURCES + \"/\" + datastoreId;\n+        PropertyGroup dsPG = FHIRConfigHelper.getPropertyGroup(dsPropertyName);\n+        if (dsPG != null) {\n+            \n+            try {\n+                tenantKey = dsPG.getStringProperty(\"tenantKey\", null);\n+                if (log.isLoggable(Level.FINE)) {\n+                    log.finer(\"tenantKey is null? = [\" + Objects.isNull(tenantKey) + \"]\");\n+                }\n+    \n+                // Specific to Db2 right now, we want to switch behavior if multitenant row level permission is required.\n+                String type = dsPG.getStringProperty(\"type\", null);\n+                if (type != null) {\n+                    // Based on the default for the database type, the code.\n+                    multiTenantFeature =\n+                            dsPG.getBooleanProperty(\"multitenant\", DATASTORE_REQUIRES_ROW_PERMISSIONS.contains(type));\n+                }\n+            }\n+            catch (Exception x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d46a2b46e45dcd95d487a27f6b051e73ec38d4"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4906, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}