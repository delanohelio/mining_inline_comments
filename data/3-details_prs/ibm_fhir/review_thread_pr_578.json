{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjc2MTU1", "number": 578, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTozNFrODX6PcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozNzoyOVrODX6bRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk4MDY0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTozNFrOFddyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0MTozNlrOFdeOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MTA0Mw==", "bodyText": "are the other regular bind variables are added in this.addBindVariables(allBindVariables)?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366441043", "createdAt": "2020-01-14T16:29:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -133,17 +133,21 @@ protected SqlQueryData buildCountQuery() throws Exception {\n         final String METHODNAME = \"buildCountQuery\";\n         log.entering(CLASSNAME, METHODNAME);\n \n-        List<Object> allBindVariables = new ArrayList<>();\n-        this.addBindVariables(allBindVariables);\n-\n         StringBuilder queryString = new StringBuilder();\n         queryString.append(SELECT_COUNT_ROOT);\n         queryString.append(LEFT_PAREN);\n         queryString.append(QuerySegmentAggregator.SELECT_ROOT);\n         buildFromClause(queryString, resourceType.getSimpleName());\n-        allBindVariables.addAll(this.idsObjects);\n-        buildWhereClause(queryString, null);\n \n+        // An important step here is to add _id and _lastUpdated and then\n+        // the regular bind variables. \n+        List<Object> allBindVariables = new ArrayList<>();\n+        allBindVariables.addAll(idsObjects);\n+        allBindVariables.addAll(lastUpdatedObjects);\n+        this.addBindVariables(allBindVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MjUwNA==", "bodyText": "just checked the codes, and found it's", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366442504", "createdAt": "2020-01-14T16:31:54Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -133,17 +133,21 @@ protected SqlQueryData buildCountQuery() throws Exception {\n         final String METHODNAME = \"buildCountQuery\";\n         log.entering(CLASSNAME, METHODNAME);\n \n-        List<Object> allBindVariables = new ArrayList<>();\n-        this.addBindVariables(allBindVariables);\n-\n         StringBuilder queryString = new StringBuilder();\n         queryString.append(SELECT_COUNT_ROOT);\n         queryString.append(LEFT_PAREN);\n         queryString.append(QuerySegmentAggregator.SELECT_ROOT);\n         buildFromClause(queryString, resourceType.getSimpleName());\n-        allBindVariables.addAll(this.idsObjects);\n-        buildWhereClause(queryString, null);\n \n+        // An important step here is to add _id and _lastUpdated and then\n+        // the regular bind variables. \n+        List<Object> allBindVariables = new ArrayList<>();\n+        allBindVariables.addAll(idsObjects);\n+        allBindVariables.addAll(lastUpdatedObjects);\n+        this.addBindVariables(allBindVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MTA0Mw=="}, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0ODI2OA==", "bodyText": "that's right.", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366448268", "createdAt": "2020-01-14T16:41:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -133,17 +133,21 @@ protected SqlQueryData buildCountQuery() throws Exception {\n         final String METHODNAME = \"buildCountQuery\";\n         log.entering(CLASSNAME, METHODNAME);\n \n-        List<Object> allBindVariables = new ArrayList<>();\n-        this.addBindVariables(allBindVariables);\n-\n         StringBuilder queryString = new StringBuilder();\n         queryString.append(SELECT_COUNT_ROOT);\n         queryString.append(LEFT_PAREN);\n         queryString.append(QuerySegmentAggregator.SELECT_ROOT);\n         buildFromClause(queryString, resourceType.getSimpleName());\n-        allBindVariables.addAll(this.idsObjects);\n-        buildWhereClause(queryString, null);\n \n+        // An important step here is to add _id and _lastUpdated and then\n+        // the regular bind variables. \n+        List<Object> allBindVariables = new ArrayList<>();\n+        allBindVariables.addAll(idsObjects);\n+        allBindVariables.addAll(lastUpdatedObjects);\n+        this.addBindVariables(allBindVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MTA0Mw=="}, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk5Njk3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozMzo1MlrOFdd8Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0MToyM1rOFdeN8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MzU5NQ==", "bodyText": "what the SqlParameterEncoder.encode is used for here?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366443595", "createdAt": "2020-01-14T16:33:52Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -232,13 +242,14 @@ private void executeIncludeSubQuery(StringBuilder queryString, InclusionParamete\n         //The subquery should return a list of strings in the FHIR Reference String value format \n         //(e.g. {@code \"Patient/<resource_id>\"})\n         SqlQueryData subQueryData = new SqlQueryData(subQueryString.toString(), bindVariables);\n+\n         boolean isFirstItem = true;\n         for (String strValue : this.resourceDao.searchStringValues(subQueryData)) {\n             if (!isFirstItem) {\n                 queryString.append(COMMA);\n             }\n             if (strValue != null) {\n-                queryString.append(QUOTE).append(strValue).append(QUOTE);\n+                queryString.append(QUOTE).append(SqlParameterEncoder.encode(strValue)).append(QUOTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0ODExMw==", "bodyText": "avoid secondary injection problems when self assembling a query. https://haiderm.com/second-order-sql-injection-explained-with-example/", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366448113", "createdAt": "2020-01-14T16:41:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -232,13 +242,14 @@ private void executeIncludeSubQuery(StringBuilder queryString, InclusionParamete\n         //The subquery should return a list of strings in the FHIR Reference String value format \n         //(e.g. {@code \"Patient/<resource_id>\"})\n         SqlQueryData subQueryData = new SqlQueryData(subQueryString.toString(), bindVariables);\n+\n         boolean isFirstItem = true;\n         for (String strValue : this.resourceDao.searchStringValues(subQueryData)) {\n             if (!isFirstItem) {\n                 queryString.append(COMMA);\n             }\n             if (strValue != null) {\n-                queryString.append(QUOTE).append(strValue).append(QUOTE);\n+                queryString.append(QUOTE).append(SqlParameterEncoder.encode(strValue)).append(QUOTE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MzU5NQ=="}, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDAxMDk0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchIdAndLastUpdatedTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozNzoyOVrOFdeFGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoyMDowNlrOFdffOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NTg0OA==", "bodyText": "Could you add one \"gt\" test for _lastModified?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366445848", "createdAt": "2020-01-14T16:37:29Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchIdAndLastUpdatedTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (C) Copyright IBM Corp. 2018, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.search.test;\n+\n+import static com.ibm.fhir.model.test.TestUtil.isResourceInResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.test.TestUtil;\n+\n+/**\n+ * <a href=\"https://hl7.org/fhir/search.html#date\">FHIR Specification: Search\n+ * - _id and _lastUpdated</a> Tests\n+ */\n+public abstract class AbstractSearchIdAndLastUpdatedTest extends AbstractPLSearchTest {\n+    private Boolean DEBUG = Boolean.FALSE;\n+\n+    protected Basic getBasicResource() throws Exception {\n+        return TestUtil.readExampleResource(\"json/ibm/basic/BasicDate.json\");\n+    }\n+\n+    protected void setTenant() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+\n+        // this might deserve its own method, but just use setTenant for now \n+        // since its called before creating any resources\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT-4:00\"));\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdated() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResource() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResourceWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    /*\n+     * generates the output into a resource.\n+     */\n+    public static void generateOutput(Resource resource) {\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(resource, System.out);\n+            System.out.println(writer.toString());\n+        } catch (FHIRGeneratorException e) {\n+            fail(\"unable to generate the fhir resource to JSON\", e);\n+        } catch (IOException e1) {\n+            fail(\"unable to generate the fhir resource to JSON (io problem) \", e1);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NzcyOA==", "bodyText": "sure", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366447728", "createdAt": "2020-01-14T16:40:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchIdAndLastUpdatedTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (C) Copyright IBM Corp. 2018, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.search.test;\n+\n+import static com.ibm.fhir.model.test.TestUtil.isResourceInResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.test.TestUtil;\n+\n+/**\n+ * <a href=\"https://hl7.org/fhir/search.html#date\">FHIR Specification: Search\n+ * - _id and _lastUpdated</a> Tests\n+ */\n+public abstract class AbstractSearchIdAndLastUpdatedTest extends AbstractPLSearchTest {\n+    private Boolean DEBUG = Boolean.FALSE;\n+\n+    protected Basic getBasicResource() throws Exception {\n+        return TestUtil.readExampleResource(\"json/ibm/basic/BasicDate.json\");\n+    }\n+\n+    protected void setTenant() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+\n+        // this might deserve its own method, but just use setTenant for now \n+        // since its called before creating any resources\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT-4:00\"));\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdated() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResource() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResourceWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    /*\n+     * generates the output into a resource.\n+     */\n+    public static void generateOutput(Resource resource) {\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(resource, System.out);\n+            System.out.println(writer.toString());\n+        } catch (FHIRGeneratorException e) {\n+            fail(\"unable to generate the fhir resource to JSON\", e);\n+        } catch (IOException e1) {\n+            fail(\"unable to generate the fhir resource to JSON (io problem) \", e1);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NTg0OA=="}, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2ODkyMQ==", "bodyText": "in next commit", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366468921", "createdAt": "2020-01-14T17:20:06Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchIdAndLastUpdatedTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (C) Copyright IBM Corp. 2018, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.search.test;\n+\n+import static com.ibm.fhir.model.test.TestUtil.isResourceInResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.test.TestUtil;\n+\n+/**\n+ * <a href=\"https://hl7.org/fhir/search.html#date\">FHIR Specification: Search\n+ * - _id and _lastUpdated</a> Tests\n+ */\n+public abstract class AbstractSearchIdAndLastUpdatedTest extends AbstractPLSearchTest {\n+    private Boolean DEBUG = Boolean.FALSE;\n+\n+    protected Basic getBasicResource() throws Exception {\n+        return TestUtil.readExampleResource(\"json/ibm/basic/BasicDate.json\");\n+    }\n+\n+    protected void setTenant() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+\n+        // this might deserve its own method, but just use setTenant for now \n+        // since its called before creating any resources\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT-4:00\"));\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdated() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResource() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResourceWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    /*\n+     * generates the output into a resource.\n+     */\n+    public static void generateOutput(Resource resource) {\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(resource, System.out);\n+            System.out.println(writer.toString());\n+        } catch (FHIRGeneratorException e) {\n+            fail(\"unable to generate the fhir resource to JSON\", e);\n+        } catch (IOException e1) {\n+            fail(\"unable to generate the fhir resource to JSON (io problem) \", e1);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NTg0OA=="}, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 185, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}