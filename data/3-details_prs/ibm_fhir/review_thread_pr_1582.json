{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjY0ODU2", "number": 1582, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoxMzo1NVrOEttZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjozOTowNFrOEt-VWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzY1MTc4OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoxMzo1NVrOHhqIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjozNTozMVrOHiFjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1NTM5OQ==", "bodyText": "Need if isLoggable barrier here", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505055399", "createdAt": "2020-10-14T23:13:55Z", "author": {"login": "punktilious"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2023,6 +2044,98 @@ private Bundle reconstructResponseBundle(Bundle responseBundle,\n         return responseBundle;\n     }\n \n+    /**\n+     * Returns a list of Integers that provide the indices of the bundle entries associated with the specified http\n+     * method.\n+     *\n+     * @param requestBundle\n+     *            the request bundle\n+     * @param httpMethod\n+     *            the http method to look for\n+     * @return\n+     */\n+    private List<Integer> getBundleRequestIndicesForMethod(Bundle requestBundle,\n+        Bundle responseBundle, HTTPVerb httpMethod) {\n+        List<Integer> indices = new ArrayList<>();\n+        for (int i = 0; i < requestBundle.getEntry().size(); i++) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(i);\n+            Bundle.Entry.Request request = requestEntry.getRequest();\n+\n+            Bundle.Entry responseEntry = responseBundle.getEntry().get(i);\n+            Bundle.Entry.Response response = responseEntry.getResponse();\n+\n+            // If the response status is SC_OK which means the request passed the validation,\n+            // and this request entry's http method is the one we're looking for,\n+            // then record the index in our list.\n+            // (please notice that status can not be null since R4, So we set the response status as SC_OK\n+            // after the resource validation. )\n+            if (response.getStatus().equals(SC_OK_STRING)\n+                    && request.getMethod().equals(httpMethod)) {\n+                indices.add(Integer.valueOf(i));\n+            }\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * This function sorts the request entries in the specified bundle, based on the path part of the entry's 'url'\n+     * field.\n+     *\n+     * @param bundle\n+     *            the bundle containing the request entries to be sorted.\n+     * @return an array of Integer which provides the \"sorted\" ordering of request entry index values.\n+     */\n+    private void sortBundleRequestEntries(Bundle bundle, List<Integer> indices) {\n+        // Sort the list of indices based on the contents of their entries in the bundle.\n+        Collections.sort(indices, new BundleEntryComparator(bundle.getEntry()));\n+    }\n+\n+    private static class BundleEntryComparator implements Comparator<Integer> {\n+        private List<Bundle.Entry> entries;\n+\n+        public BundleEntryComparator(List<Bundle.Entry> entries) {\n+            this.entries = entries;\n+        }\n+\n+        @Override\n+        public int compare(Integer indexA, Integer indexB) {\n+            Bundle.Entry a = entries.get(indexA);\n+            Bundle.Entry b = entries.get(indexB);\n+            String pathA = getUrlPath(a);\n+            String pathB = getUrlPath(b);\n+\n+            log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bad7cf02f13766c9175e1c69e6bbee66815959b"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MjYxNA==", "bodyText": "like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);\n          \n          \n            \n                        if (log.isLoggable(Level.FINE)) {\n          \n          \n            \n                            log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);\n          \n          \n            \n                        }", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505462614", "createdAt": "2020-10-15T11:20:36Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2023,6 +2044,98 @@ private Bundle reconstructResponseBundle(Bundle responseBundle,\n         return responseBundle;\n     }\n \n+    /**\n+     * Returns a list of Integers that provide the indices of the bundle entries associated with the specified http\n+     * method.\n+     *\n+     * @param requestBundle\n+     *            the request bundle\n+     * @param httpMethod\n+     *            the http method to look for\n+     * @return\n+     */\n+    private List<Integer> getBundleRequestIndicesForMethod(Bundle requestBundle,\n+        Bundle responseBundle, HTTPVerb httpMethod) {\n+        List<Integer> indices = new ArrayList<>();\n+        for (int i = 0; i < requestBundle.getEntry().size(); i++) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(i);\n+            Bundle.Entry.Request request = requestEntry.getRequest();\n+\n+            Bundle.Entry responseEntry = responseBundle.getEntry().get(i);\n+            Bundle.Entry.Response response = responseEntry.getResponse();\n+\n+            // If the response status is SC_OK which means the request passed the validation,\n+            // and this request entry's http method is the one we're looking for,\n+            // then record the index in our list.\n+            // (please notice that status can not be null since R4, So we set the response status as SC_OK\n+            // after the resource validation. )\n+            if (response.getStatus().equals(SC_OK_STRING)\n+                    && request.getMethod().equals(httpMethod)) {\n+                indices.add(Integer.valueOf(i));\n+            }\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * This function sorts the request entries in the specified bundle, based on the path part of the entry's 'url'\n+     * field.\n+     *\n+     * @param bundle\n+     *            the bundle containing the request entries to be sorted.\n+     * @return an array of Integer which provides the \"sorted\" ordering of request entry index values.\n+     */\n+    private void sortBundleRequestEntries(Bundle bundle, List<Integer> indices) {\n+        // Sort the list of indices based on the contents of their entries in the bundle.\n+        Collections.sort(indices, new BundleEntryComparator(bundle.getEntry()));\n+    }\n+\n+    private static class BundleEntryComparator implements Comparator<Integer> {\n+        private List<Bundle.Entry> entries;\n+\n+        public BundleEntryComparator(List<Bundle.Entry> entries) {\n+            this.entries = entries;\n+        }\n+\n+        @Override\n+        public int compare(Integer indexA, Integer indexB) {\n+            Bundle.Entry a = entries.get(indexA);\n+            Bundle.Entry b = entries.get(indexB);\n+            String pathA = getUrlPath(a);\n+            String pathB = getUrlPath(b);\n+\n+            log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1NTM5OQ=="}, "originalCommit": {"oid": "3bad7cf02f13766c9175e1c69e6bbee66815959b"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MjM5OQ==", "bodyText": "Added check around all log.fine() statements that did not have check.", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505492399", "createdAt": "2020-10-15T12:15:25Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2023,6 +2044,98 @@ private Bundle reconstructResponseBundle(Bundle responseBundle,\n         return responseBundle;\n     }\n \n+    /**\n+     * Returns a list of Integers that provide the indices of the bundle entries associated with the specified http\n+     * method.\n+     *\n+     * @param requestBundle\n+     *            the request bundle\n+     * @param httpMethod\n+     *            the http method to look for\n+     * @return\n+     */\n+    private List<Integer> getBundleRequestIndicesForMethod(Bundle requestBundle,\n+        Bundle responseBundle, HTTPVerb httpMethod) {\n+        List<Integer> indices = new ArrayList<>();\n+        for (int i = 0; i < requestBundle.getEntry().size(); i++) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(i);\n+            Bundle.Entry.Request request = requestEntry.getRequest();\n+\n+            Bundle.Entry responseEntry = responseBundle.getEntry().get(i);\n+            Bundle.Entry.Response response = responseEntry.getResponse();\n+\n+            // If the response status is SC_OK which means the request passed the validation,\n+            // and this request entry's http method is the one we're looking for,\n+            // then record the index in our list.\n+            // (please notice that status can not be null since R4, So we set the response status as SC_OK\n+            // after the resource validation. )\n+            if (response.getStatus().equals(SC_OK_STRING)\n+                    && request.getMethod().equals(httpMethod)) {\n+                indices.add(Integer.valueOf(i));\n+            }\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * This function sorts the request entries in the specified bundle, based on the path part of the entry's 'url'\n+     * field.\n+     *\n+     * @param bundle\n+     *            the bundle containing the request entries to be sorted.\n+     * @return an array of Integer which provides the \"sorted\" ordering of request entry index values.\n+     */\n+    private void sortBundleRequestEntries(Bundle bundle, List<Integer> indices) {\n+        // Sort the list of indices based on the contents of their entries in the bundle.\n+        Collections.sort(indices, new BundleEntryComparator(bundle.getEntry()));\n+    }\n+\n+    private static class BundleEntryComparator implements Comparator<Integer> {\n+        private List<Bundle.Entry> entries;\n+\n+        public BundleEntryComparator(List<Bundle.Entry> entries) {\n+            this.entries = entries;\n+        }\n+\n+        @Override\n+        public int compare(Integer indexA, Integer indexB) {\n+            Bundle.Entry a = entries.get(indexA);\n+            Bundle.Entry b = entries.get(indexB);\n+            String pathA = getUrlPath(a);\n+            String pathB = getUrlPath(b);\n+\n+            log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1NTM5OQ=="}, "originalCommit": {"oid": "3bad7cf02f13766c9175e1c69e6bbee66815959b"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNDcxOQ==", "bodyText": "FWIW, I don't think its always needed.  Its mostly just to avoid paying the cost of string building, especially when the logs contain Object.toString() calls (or similar), and especially when in a loop.\nBut it never hurts to have it, so I'm OK with adding it everywhere.", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505504719", "createdAt": "2020-10-15T12:35:31Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2023,6 +2044,98 @@ private Bundle reconstructResponseBundle(Bundle responseBundle,\n         return responseBundle;\n     }\n \n+    /**\n+     * Returns a list of Integers that provide the indices of the bundle entries associated with the specified http\n+     * method.\n+     *\n+     * @param requestBundle\n+     *            the request bundle\n+     * @param httpMethod\n+     *            the http method to look for\n+     * @return\n+     */\n+    private List<Integer> getBundleRequestIndicesForMethod(Bundle requestBundle,\n+        Bundle responseBundle, HTTPVerb httpMethod) {\n+        List<Integer> indices = new ArrayList<>();\n+        for (int i = 0; i < requestBundle.getEntry().size(); i++) {\n+            Bundle.Entry requestEntry = requestBundle.getEntry().get(i);\n+            Bundle.Entry.Request request = requestEntry.getRequest();\n+\n+            Bundle.Entry responseEntry = responseBundle.getEntry().get(i);\n+            Bundle.Entry.Response response = responseEntry.getResponse();\n+\n+            // If the response status is SC_OK which means the request passed the validation,\n+            // and this request entry's http method is the one we're looking for,\n+            // then record the index in our list.\n+            // (please notice that status can not be null since R4, So we set the response status as SC_OK\n+            // after the resource validation. )\n+            if (response.getStatus().equals(SC_OK_STRING)\n+                    && request.getMethod().equals(httpMethod)) {\n+                indices.add(Integer.valueOf(i));\n+            }\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * This function sorts the request entries in the specified bundle, based on the path part of the entry's 'url'\n+     * field.\n+     *\n+     * @param bundle\n+     *            the bundle containing the request entries to be sorted.\n+     * @return an array of Integer which provides the \"sorted\" ordering of request entry index values.\n+     */\n+    private void sortBundleRequestEntries(Bundle bundle, List<Integer> indices) {\n+        // Sort the list of indices based on the contents of their entries in the bundle.\n+        Collections.sort(indices, new BundleEntryComparator(bundle.getEntry()));\n+    }\n+\n+    private static class BundleEntryComparator implements Comparator<Integer> {\n+        private List<Bundle.Entry> entries;\n+\n+        public BundleEntryComparator(List<Bundle.Entry> entries) {\n+            this.entries = entries;\n+        }\n+\n+        @Override\n+        public int compare(Integer indexA, Integer indexB) {\n+            Bundle.Entry a = entries.get(indexA);\n+            Bundle.Entry b = entries.get(indexB);\n+            String pathA = getUrlPath(a);\n+            String pathB = getUrlPath(b);\n+\n+            log.fine(\"Comparing request entry URL paths: \" + pathA + \", \" + pathB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1NTM5OQ=="}, "originalCommit": {"oid": "3bad7cf02f13766c9175e1c69e6bbee66815959b"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjQyNjQ4OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjozOTowNFrOHiFslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDozNDo1MFrOHiLAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNjk2Ng==", "bodyText": "I think @punktilious requested to add this one back in \"to avoid deadlock issues in case the same id appears in another bundle\", but I'm hoping someone can explain it to me because I'm not sure I get it.", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505506966", "createdAt": "2020-10-15T12:39:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1549,10 +1571,27 @@ private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBund\n         log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n         \n         try {\n-            // Visit each of the request entries, processing those with the specified request method.\n+            // First, obtain a list of request entry indices for the entries that we'll process.\n+            // This list will contain the indices associated with only the entries for the specified http method.\n+            List<Integer> entryIndices =\n+                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n+            }\n+\n+            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n+            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n+                sortBundleRequestEntries(requestBundle, entryIndices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920ca45a2a1f6ec05adca2773ebb6a2223ea146a"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5Mzk1NQ==", "bodyText": "here is the problematic scenario:\nwithin single transaction bundle:\nbundle 1:\nPUT A\nPUT B\n\nwithin a separate transaction bundle:\nbundle 2:\nPUT B\nPUT A\n\nthe timing problem would be:\n\nbundle 1 arrives first, it goes through entries and when it hits PUT A it locks A\nbundle 2 arrives very soon afterward, and it starts processing the PUT B before bundle 1's PUT B (locking B)\ndeadlock", "url": "https://github.com/IBM/FHIR/pull/1582#discussion_r505593955", "createdAt": "2020-10-15T14:34:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -1549,10 +1571,27 @@ private Bundle processEntriesForMethod(Bundle requestBundle, Bundle responseBund\n         log.entering(this.getClass().getName(), \"processEntriesForMethod\", new Object[] {\"httpMethod\", httpMethod });\n         \n         try {\n-            // Visit each of the request entries, processing those with the specified request method.\n+            // First, obtain a list of request entry indices for the entries that we'll process.\n+            // This list will contain the indices associated with only the entries for the specified http method.\n+            List<Integer> entryIndices =\n+                    getBundleRequestIndicesForMethod(requestBundle, responseBundle, httpMethod);\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"Bundle request indices to be processed: \" + entryIndices.toString());\n+            }\n+\n+            // Next, for PUT and DELETE requests, we need to sort the indices by the request url path value.\n+            if (httpMethod.equals(HTTPVerb.PUT) || httpMethod.equals(HTTPVerb.DELETE)) {\n+                sortBundleRequestEntries(requestBundle, entryIndices);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNjk2Ng=="}, "originalCommit": {"oid": "920ca45a2a1f6ec05adca2773ebb6a2223ea146a"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}