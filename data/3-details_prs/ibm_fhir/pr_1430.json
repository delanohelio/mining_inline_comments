{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDQ2MDE5", "number": 1430, "title": "Issue #694 - Perform syntax validation against ucum-units value set", "bodyText": "Signed-off-by: Mike Schroeder mschroed@us.ibm.com", "createdAt": "2020-08-19T20:44:32Z", "url": "https://github.com/IBM/FHIR/pull/1430", "merged": true, "mergeCommit": {"oid": "ebb749d7381003235edca0298db29458e2e24c73"}, "closed": true, "closedAt": "2020-08-22T13:14:25Z", "author": {"login": "michaelwschroeder"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAhvlwgH2gAyNDcwNDQ2MDE5Ojc3MjVmZTAzNGM2NGFkYjRiMjRhZDY4YWU4MzQ3YjE4MzIxNDcyN2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBZOJHAFqTQ3MjkyNTQxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c", "author": {"user": {"login": "michaelwschroeder", "name": "Michael W Schroeder"}}, "url": "https://github.com/IBM/FHIR/commit/7725fe034c64adb4b24ad68ae8347b183214727c", "committedDate": "2020-08-19T20:36:05Z", "message": "Issue #694 - Perform syntax validation against ucum-units value set\n\nSigned-off-by: Mike Schroeder <mschroed@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTU3NTQy", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-470957542", "createdAt": "2020-08-19T21:01:15Z", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMToxNlrOHDY7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMToxNlrOHDY7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjExOQ==", "bodyText": "style consistency - we merge the catch line with the prior line", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473316119", "createdAt": "2020-08-19T21:01:16Z", "author": {"login": "prb112"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java", "diffHunk": "@@ -154,4 +154,160 @@ public void testCheckLanguageCodeableConceptsNotValid() {\n         catch (IllegalStateException e) {}\n     }\n     \n+    @Test\n+    public void testCheckUcumCodeValid() {\n+        ValidationSupport.checkUcumCode(null, \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"10.uN.s/(cm.m2)\"), \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"%{Activity}\"), \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"[mi_us]\"), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeNotValid() {\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(null), \"elementName\");\n+            fail();\n+        }\n+        catch (IllegalStateException e) {}\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(\"{invalid{annotation}}\"), \"elementName\");\n+            fail();\n+        }\n+        catch (IllegalStateException e) {}\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(\"invalid space\"), \"elementName\");\n+            fail();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTYxMjY3", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-470961267", "createdAt": "2020-08-19T21:02:59Z", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMjo1OVrOHDY-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMjo1OVrOHDY-eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjk4Ng==", "bodyText": "I'm surprised it didn't hit Location as well.", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473316986", "createdAt": "2020-08-19T21:02:59Z", "author": {"login": "prb112"}, "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "diffHunk": "@@ -1260,6 +1261,8 @@ private String getSyntaxBasedValueSetValidationMethod(String valueSet, String fi\n         String suffix = fieldType + (isRepeating ? \"s\" : \"\");\n         if (ALL_LANG_VALUE_SET_URL.equals(valueSet)) {\n             return \"checkLanguage\" + suffix;\n+        } else if (UCUM_UNITS_VALUE_SET_URL.equals(valueSet)) {\n+            return \"checkUcum\" + suffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTYzNDgw", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-470963480", "createdAt": "2020-08-19T21:04:33Z", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowNDozM1rOHDZCoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowNDozM1rOHDZCoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODA0OQ==", "bodyText": "It'd be great to turn this on / and off like we've done with some other validation features.\nThat way we have an opportunity to still extract or tell someone how to extract bad data.", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473318049", "createdAt": "2020-08-19T21:04:33Z", "author": {"login": "prb112"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                }\n+                checkUcumCode(ucumCoding.getCode(), elementName);\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDM2NzQx", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-471036741", "createdAt": "2020-08-19T23:46:23Z", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo0NjoyM1rOHDgucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo0NjoyM1rOHDgucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0Mzk1NA==", "bodyText": "This could be refactored a little into one if statement and the else could be the checkUcumCode (it feels super nested)  also ucumCoding.getSystem is this ever null on 355? maybe just combine this with 354 and 355", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473443954", "createdAt": "2020-08-19T23:46:23Z", "author": {"login": "prb112"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDQxNDUz", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-471041453", "createdAt": "2020-08-20T00:01:05Z", "commit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDowMTowNVrOHDhWBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDowMTowNVrOHDhWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ1NDA4NQ==", "bodyText": "when the for loop succeeds and the coding is checked it can throw an illegalState?  I don't think it should return  elementName as part of the String.format, it's difficult to  back track in the error to the actual failing element", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473454085", "createdAt": "2020-08-20T00:01:05Z", "author": {"login": "prb112"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                }\n+                checkUcumCode(ucumCoding.getCode(), elementName);\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {\n+        if (ucumCodeableConcept != null) {\n+            if (ucumCodeableConcept.getCoding() != null) {\n+                for (Coding coding : ucumCodeableConcept.getCoding()) {\n+                    if (coding != null) {\n+                        try {\n+                            checkUcumCoding(coding, elementName);\n+                            return;\n+                        }\n+                        catch (IllegalStateException e) {}\n+                    }\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a Coding with a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7725fe034c64adb4b24ad68ae8347b183214727c"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "author": {"user": {"login": "michaelwschroeder", "name": "Michael W Schroeder"}}, "url": "https://github.com/IBM/FHIR/commit/bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "committedDate": "2020-08-21T18:45:14Z", "message": "Issue #694 - Update validation per new rules in issue #1421\n\nSigned-off-by: Mike Schroeder <mschroed@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzc0NDg0", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-472774484", "createdAt": "2020-08-21T19:38:43Z", "commit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTozODo0M1rOHE5olw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTozODo0M1rOHE5olw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwMDYzMQ==", "bodyText": "Will checkLanguageCodeableConcept(...) method be updated with similar logic to this method?", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474900631", "createdAt": "2020-08-21T19:38:43Z", "author": {"login": "tbieste"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +302,109 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if any code in the list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if any coding in the list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                } else {\n+                    checkUcumCode(ucumCoding.getCode(), elementName);\n+                }\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"Coding does not contain a UCUM system of '%s' and a valid UCUM code\", UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if andy codeable concept in the list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax,\n+     * or at least one coding with no system or code element specified, but containing a\n+     * data-absent-reason extension.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {\n+        if (ucumCodeableConcept != null) {\n+            if (ucumCodeableConcept.getCoding() != null) {\n+                for (Coding coding : ucumCodeableConcept.getCoding()) {\n+                    if (hasSystemOrCodeElements(coding)) {\n+                        try {\n+                            checkUcumCoding(coding, elementName);\n+                            return;\n+                        } catch (IllegalStateException e) {}\n+                    } else if (hasDataAbsentReasonExtension(coding)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzc5NTMy", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-472779532", "createdAt": "2020-08-21T19:48:17Z", "commit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODI5MTM5", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-472829139", "createdAt": "2020-08-21T21:29:14Z", "commit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTI1NDE3", "url": "https://github.com/IBM/FHIR/pull/1430#pullrequestreview-472925417", "createdAt": "2020-08-22T13:14:14Z", "commit": {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1399, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}