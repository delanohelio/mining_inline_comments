{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDQxMTI5", "number": 803, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1MzowMFrODpE-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozNlrODpNORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzk5NzgzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1MzowMFrOF4Bkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1MzowMFrOF4Bkmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.fine(\"Validation warnings for input resource: \" + info);\n          \n          \n            \n                                logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n          \n      \n    \n    \n  \n\nI suggest adding a delimiter", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290330", "createdAt": "2020-03-18T11:53:00Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAwMTU5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDowOVrOF4Bm7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDowOVrOF4Bm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDkyNw==", "bodyText": "needless nesting of else and if,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (logger.isLoggable(Level.FINE)) {\n          \n          \n            \n                        } else if (logger.isLoggable(Level.FINE)) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290927", "createdAt": "2020-03-18T11:54:09Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAwMjEwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDoxOVrOF4BnQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDoyOFrOF4BnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394291011", "createdAt": "2020-03-18T11:54:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTA4OA==", "bodyText": "you may have to reformat", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394291088", "createdAt": "2020-03-18T11:54:28Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTAxMQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAwOTE3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NjoyOVrOF4Brrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo0MToxMVrOF4FbAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg==", "bodyText": "please update the documentation to explain the new value", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292142", "createdAt": "2020-03-18T11:56:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -45,6 +45,7 @@\n     public static final String IMPORT_PARTITTION_WORKITEM = \"import.partiton.workitem\";\n     public static final String IMPORT_PARTITTION_RESOURCE_TYPE = \"import.partiton.resourcetype\";\n     public static final String IMPORT_FHIR_STORAGE_TYPE = \"import.fhir.storagetype\";\n+    public static final String IMPORT_FHIR_IS_VALIDATION_ON = \"import.fhir.validation\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MjY1Mg==", "bodyText": "yes, I have not drafted the document for import yet, do have plan to add them. let me open an issue for this.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394352652", "createdAt": "2020-03-18T13:40:06Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -45,6 +45,7 @@\n     public static final String IMPORT_PARTITTION_WORKITEM = \"import.partiton.workitem\";\n     public static final String IMPORT_PARTITTION_RESOURCE_TYPE = \"import.partiton.resourcetype\";\n     public static final String IMPORT_FHIR_STORAGE_TYPE = \"import.fhir.storagetype\";\n+    public static final String IMPORT_FHIR_IS_VALIDATION_ON = \"import.fhir.validation\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MzQxMQ==", "bodyText": "#809", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394353411", "createdAt": "2020-03-18T13:41:11Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -45,6 +45,7 @@\n     public static final String IMPORT_PARTITTION_WORKITEM = \"import.partiton.workitem\";\n     public static final String IMPORT_PARTITTION_RESOURCE_TYPE = \"import.partiton.resourcetype\";\n     public static final String IMPORT_FHIR_STORAGE_TYPE = \"import.fhir.storagetype\";\n+    public static final String IMPORT_FHIR_IS_VALIDATION_ON = \"import.fhir.validation\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAxMjQ4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NzozNlrOF4Bt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1ODo1NFrOF4GMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ==", "bodyText": "what is unchecked below?", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292729", "createdAt": "2020-03-18T11:57:36Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1OTk3OQ==", "bodyText": "List fhirResourceList = (List) objResJasonList;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394359979", "createdAt": "2020-03-18T13:50:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDMzNg==", "bodyText": "changed to suppress the line instead of the whole function", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394360336", "createdAt": "2020-03-18T13:51:11Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NjAwOA==", "bodyText": "sounds good, made a slight comment on JSON", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394366008", "createdAt": "2020-03-18T13:58:54Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAxNTg3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1ODozOFrOF4BwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1ODozOFrOF4BwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MzI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n          \n            \n                        isValidationOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n      \n    \n    \n  \n\nspelling", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394293266", "createdAt": "2020-03-18T11:58:38Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n+        boolean isValidtionOn = false;\n+        if (fhirValidation != null) {\n+            isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAyNDE3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMToxOFrOF4B1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OToxMFrOF4LWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ==", "bodyText": "if this is a constant, it'll always be true or false... put this on the same line as line 149, and combine the logic with an AND (which is what it's doing)", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394294629", "createdAt": "2020-03-18T12:01:18Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MjUxMg==", "bodyText": "good catch", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394362512", "createdAt": "2020-03-18T13:54:06Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MjE0OQ==", "bodyText": "I did this is to prevent the notused warning of eclipse of putting them together ...", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394372149", "createdAt": "2020-03-18T14:07:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MzY0Mg==", "bodyText": "I think it's best to include it on the same line.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394373642", "createdAt": "2020-03-18T14:09:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDQ0MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450441", "createdAt": "2020-03-18T15:49:10Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAyNjM3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjowNFrOF4B28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjowNFrOF4B28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n          \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStreamForImportError());\n          \n      \n    \n    \n  \n\nplease dont use 4", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295026", "createdAt": "2020-03-18T12:02:04Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAyNzEzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjoyMVrOF4B3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjozNlrOF4B37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTE2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n          \n          \n            \n                                    chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295165", "createdAt": "2020-03-18T12:02:21Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTI3OA==", "bodyText": "You can also statically import the constants.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295278", "createdAt": "2020-03-18T12:02:36Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTE2NQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzMzE2OnYy", "diffSide": "LEFT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDoyOVrOF4B7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OToxOFrOF4LWZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng==", "bodyText": "Not if you want Milliseconds, you can just pass the unit into java.time\nTimeUnit.NANOSECONDS.toMillis(VALUE);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296246", "createdAt": "2020-03-18T12:04:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -44,7 +49,7 @@ public void afterJob() {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - jobExecution.getStartTime().getTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODY4Mg==", "bodyText": "nice, I like this!!", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394378682", "createdAt": "2020-03-18T14:16:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -44,7 +49,7 @@ public void afterJob() {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - jobExecution.getStartTime().getTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDUzMg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450532", "createdAt": "2020-03-18T15:49:18Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -44,7 +49,7 @@ public void afterJob() {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - jobExecution.getStartTime().getTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzNDczOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDo1OVrOF4B8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OToyNVrOF4LW0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw==", "bodyText": "best to use TimeUnit, you get someone else to do these conversions.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296517", "createdAt": "2020-03-18T12:04:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -29,9 +35,15 @@\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n+    /**\n+     * The number of nanoseconds in a second.\n+     */\n+    private static final double NANOS = 1000 * Constants.NANOMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODk1NA==", "bodyText": "nice, I like this!", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394378954", "createdAt": "2020-03-18T14:16:43Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -29,9 +35,15 @@\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n+    /**\n+     * The number of nanoseconds in a second.\n+     */\n+    private static final double NANOS = 1000 * Constants.NANOMS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDY0MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450641", "createdAt": "2020-03-18T15:49:25Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -29,9 +35,15 @@\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n+    /**\n+     * The number of nanoseconds in a second.\n+     */\n+    private static final double NANOS = 1000 * Constants.NANOMS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzNTQ0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNToxM1rOF4B9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OTozNVrOF4LXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjYzNw==", "bodyText": "please change 2 to To", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296637", "createdAt": "2020-03-18T12:05:13Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -68,25 +80,45 @@\n      */\n     private static String cosFile2Break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDgxNQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450815", "createdAt": "2020-03-18T15:49:35Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -68,25 +80,45 @@\n      */\n     private static String cosFile2Break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjYzNw=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzNjQyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTozMVrOF4B93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OTo0MlrOF4LXzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc5Nw==", "bodyText": "Change to To", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296797", "createdAt": "2020-03-18T12:05:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -135,7 +167,7 @@ public void parseArgs(String[] args) {\n                     cosCredentialIbm = args[i];\n                 }\n                 else {\n-                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm(Y/N) argument at posn: \" + i);\n                 }\n                 break;\n             case \"--cosFile2Break\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDg5NA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450894", "createdAt": "2020-03-18T15:49:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -135,7 +167,7 @@ public void parseArgs(String[] args) {\n                     cosCredentialIbm = args[i];\n                 }\n                 else {\n-                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm(Y/N) argument at posn: \" + i);\n                 }\n                 break;\n             case \"--cosFile2Break\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc5Nw=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzNzgxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTo1NFrOF4B-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OTo1MFrOF4LYQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ==", "bodyText": "best to leave these parameters as lower case and not mixed case", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297015", "createdAt": "2020-03-18T12:05:54Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -154,6 +194,14 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n                 }\n                 break;\n+            case \"--numberOfTotalResources\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM4MzczNg==", "bodyText": "make sense!", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394383736", "createdAt": "2020-03-18T14:23:00Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -154,6 +194,14 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n                 }\n                 break;\n+            case \"--numberOfTotalResources\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTAxMA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451010", "createdAt": "2020-03-18T15:49:50Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -154,6 +194,14 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n                 }\n                 break;\n+            case \"--numberOfTotalResources\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzODI5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjowN1rOF4B_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo0OTo1OFrOF4LYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzA5OQ==", "bodyText": "change 4 to for", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297099", "createdAt": "2020-03-18T12:06:07Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTEwNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451107", "createdAt": "2020-03-18T15:49:58Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzA5OQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDAzODgyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjoyMFrOF4B_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjozMFrOF4B_yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzE5OQ==", "bodyText": "use the diamond operator\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<String>();\n          \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<>();", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297199", "createdAt": "2020-03-18T12:06:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzI4OA==", "bodyText": "mixed usage with line 232", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297288", "createdAt": "2020-03-18T12:06:30Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzE5OQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0MTc2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzoyMFrOF4CBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyMjo1MFrOF4PWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg==", "bodyText": "If you are splitting resources into separate files, how do you ensure that the same resource or ID is in the same file?", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297712", "createdAt": "2020-03-18T12:07:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NTU5MA==", "bodyText": "the tool doesn't really keep all the duplicated resources, it only keep one of them for now.\ne.g, in Organization, they are more than 2K lines with the exactly the same contents, the tool will only keep one of them.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394345590", "createdAt": "2020-03-18T13:29:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTUxNw==", "bodyText": "right - it's not a duplicate resource though... it's a historic resource.\nIs the tool removing the historic resource? e.g.\nif there are two versions, it'll only insert version 2?", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394349517", "createdAt": "2020-03-18T13:35:25Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDI0Ng==", "bodyText": "In the organization data set, there is no version info in the resource, they are simply duplicated lines of the same contents ... the tool simply keep the first one it runs into and drops all the others.  I thought about making the tool better/smarter to be able to move all duplicated/historic resources into the same file, but because the data set could be huge which could cause huge memory consumption to track which Id is store in which file, so this is why I just made the tool simply for now drop the others resources with the same ids ...", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394414246", "createdAt": "2020-03-18T15:02:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxODE4OQ==", "bodyText": "but It's not bad idea to enhance this tool in the future to make it a real fhir data pre-processing tool, e.g, not only put the resources with the same id into the same file, but also can validate the resource etc ...", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394418189", "createdAt": "2020-03-18T15:07:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjMwNg==", "bodyText": "Is this tool only used in testing?  perhaps move it to src/test/\nnot the src/main", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394512306", "createdAt": "2020-03-18T17:16:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNjEyOQ==", "bodyText": "the tool itself is not for any test purpose, I used it mainly as an utility tool to break the huge one piece COS file into multiple to allow them to be able to processed by multiple partitions in parallel ...", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394516129", "createdAt": "2020-03-18T17:22:50Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0MzU3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzo1MFrOF4CCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1MDo0OFrOF4LbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA==", "bodyText": "should still wrap this in a try-catch-close", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298008", "createdAt": "2020-03-18T12:07:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTcyNw==", "bodyText": "makes sense even though closing a ByteArrayOutputStream does nothing.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451727", "createdAt": "2020-03-18T15:50:43Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTc5NA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451794", "createdAt": "2020-03-18T15:50:48Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0NDk2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODoxMFrOF4CDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODoxMFrOF4CDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {\n          \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numForSeg, isSegBySize)) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298206", "createdAt": "2020-03-18T12:08:10Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+                       } catch (Exception ioe) {\n+                           throw ioe;\n+                       }\n+                    num4Seg = totalNum/numberOfFiles;\n+                }\n+            }\n \n             item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             try (S3ObjectInputStream s3InStream = item.getObjectContent();\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+                if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0NzAwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODo0NFrOF4CEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1MTowMlrOF4Lb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODUyMQ==", "bodyText": "line spacing looks strange, please check spacing", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298521", "createdAt": "2020-03-18T12:08:44Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTk2NQ==", "bodyText": "good catch, done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451965", "createdAt": "2020-03-18T15:51:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODUyMQ=="}, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0NzgwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOTowMVrOF4CFGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOTowMVrOF4CFGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        long num4Seg;\n          \n          \n            \n                        long numForSeg;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298649", "createdAt": "2020-03-18T12:09:01Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0ODMxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToxMlrOF4CFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToxMlrOF4CFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    isMore2Read = false;\n          \n          \n            \n                                    isMoreToRead = false;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298730", "createdAt": "2020-03-18T12:09:12Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                    || (segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                    || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                    || !isMore2Read) {\n+                String segName = cosFile2Break + \"_seg\" + segNum;\n+                if (uploadId == null) {\n+                    uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                }\n \n-                    if (bufferStream.size() > 0) {\n-                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n-                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n-                        bufferStream.reset();\n-                    }\n+                if (bufferStream.size() > 0) {\n+                    dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                            new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                    bufferStream.reset();\n+                }\n \n-                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n-                            || !isMore2Read) {\n-                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n-                        logger.info(\"Finished writting for \" + segName);\n-                        lineRed = 0;\n-                        segNum++;\n-                        uploadId = null;\n-                        partNum = 1;\n-                        dataPackTags.clear();\n+                if ((segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                        || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                        || !isMore2Read) {\n+                    BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                    logger.info(\"Finished writting for \" + segName);\n+                    lineRed = 0;\n+                    segNum++;\n+                    if (segNum == numberOfFiles && isMore2Read) {\n+                        isMore2Read = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0OTA1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToyOFrOF4CF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToyOFrOF4CF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean isMore2Read = true;\n          \n          \n            \n                    boolean isMoreToRead = true;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298873", "createdAt": "2020-03-18T12:09:28Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ1NTgxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1ODozM1rOF4GLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NDozOVrOF4Lnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ==", "bodyText": "line 141, please change objResJasonList to objResJsonList", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394365759", "createdAt": "2020-03-18T13:58:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDg5Ng==", "bodyText": "ha, good catch, typical typo error! maybe I did thought about Jason at that time point. :)", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394454896", "createdAt": "2020-03-18T15:54:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ=="}, "originalCommit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDk3MA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394454970", "createdAt": "2020-03-18T15:54:39Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ=="}, "originalCommit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTE5MDU4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo0MDoxOVrOF4NoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMjowOFrOF4RN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ==", "bodyText": "this is used", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394487825", "createdAt": "2020-03-18T16:40:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MDY2Ng==", "bodyText": "", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394490666", "createdAt": "2020-03-18T16:44:28Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MTAzNw==", "bodyText": "if remove the suppress, we will get this ^^^^^", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394491037", "createdAt": "2020-03-18T16:45:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzQ1NA==", "bodyText": "I think that's the right behavior to display.\nby hiding it, we'll not get the warnings.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513454", "createdAt": "2020-03-18T17:18:43Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NjY4MQ==", "bodyText": "OK, I can remove the suppress", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394546681", "createdAt": "2020-03-18T18:12:08Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI1MjQwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NTowMFrOF4OPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NTowMFrOF4OPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Nzk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } catch (FHIRValidationException|FHIROperationException e) {\n          \n          \n            \n                            } catch (FHIRValidationException | FHIROperationException e) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394497970", "createdAt": "2020-03-18T16:55:00Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -137,26 +151,34 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         // This doesn't really start the transaction, because the transaction has already been started by the JavaBatch\n         // framework at this time point.\n         txn.enroll();\n-        for (Object objResJasonList : arg0) {\n-            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+        for (Object objResJsonList : arg0) {\n+            @SuppressWarnings(\"unchecked\")\n+            List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidationOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        if (operationOutcome != null) {\n-                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStream4Import());\n-                            chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n-                        }\n+                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI1OTg1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Njo0N1rOF4OUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODoxNlrOF4OYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTE2Nw==", "bodyText": "pushImportOperationOutcomes2COS ?\nis this the right log 2 COS??", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499167", "createdAt": "2020-03-18T16:56:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDE2OA==", "bodyText": "it is", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500168", "createdAt": "2020-03-18T16:58:16Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTE2Nw=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2MTA0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzowNlrOF4OVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzowNlrOF4OVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n          \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNumForOperationOutcomes(chunkData.getPartNumForOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499360", "createdAt": "2020-03-18T16:57:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2MjIwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzoyMFrOF4OV1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzoyMFrOF4OV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n          \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNumForOperationOutcomes()));", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499541", "createdAt": "2020-03-18T16:57:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2MzI0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzozN1rOF4OWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzozN1rOF4OWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n          \n          \n            \n                        if (chunkData.getUploadIdForFailureOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499713", "createdAt": "2020-03-18T16:57:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2Mzc4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo0N1rOF4OW5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo0N1rOF4OW5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                            chunkData.setUploadIdForFailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499814", "createdAt": "2020-03-18T16:57:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2NDkzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo1OVrOF4OXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo1OVrOF4OXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTk4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                chunkData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499984", "createdAt": "2020-03-18T16:57:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2NzIyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODozM1rOF4OZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODozM1rOF4OZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n          \n          \n            \n                            logger.fine(\"pushImportOperationOutcomesToCOS: \" + chunkData.getBufferStreamForImport().size()", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500381", "createdAt": "2020-03-18T16:58:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2ODMzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0OVrOF4OZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0OVrOF4OZzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueIDForImportFailureOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500558", "createdAt": "2020-03-18T16:58:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2OTM1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTowM1rOF4Oacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTowM1rOF4Oacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDcyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                        chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500722", "createdAt": "2020-03-18T16:59:03Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n+                    chunkData.getBufferStreamForImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n             chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3MzE0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1N1rOF4Oc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1N1rOF4Oc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeUnit time = TimeUnit.NANOSECONDS;\n          \n          \n            \n                \n          \n      \n    \n    \n  \n\nNo need to cache this at all.   put it in line on 37", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501354", "createdAt": "2020-03-18T16:59:57Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -19,6 +20,9 @@\n \n public class ImportJobListener implements JobListener {\n     private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n+    private TimeUnit time = TimeUnit.NANOSECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3NTEwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDoyNVrOF4OeLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOToxNVrOF4PNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTY3OQ==", "bodyText": "call TimeUnit directly", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501679", "createdAt": "2020-03-18T17:00:25Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -85,6 +89,7 @@ public void afterJob() {\n \n     @Override\n     public void beforeJob() {\n+        currentExecutionStartTimeInMS = time.toMillis(System.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzgwMw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513803", "createdAt": "2020-03-18T17:19:15Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -85,6 +89,7 @@ public void afterJob() {\n \n     @Override\n     public void beforeJob() {\n+        currentExecutionStartTimeInMS = time.toMillis(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTY3OQ=="}, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3NjE1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDozN1rOF4Oexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDozN1rOF4Oexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501830", "createdAt": "2020-03-18T17:00:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n-                            partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n+                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3NjYxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo0NlrOF4OfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo0NlrOF4OfHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n          \n          \n            \n                                partitionSummaryData.getDataPacksForOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501917", "createdAt": "2020-03-18T17:00:46Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3NzU5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo1OVrOF4OfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo1OVrOF4OfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502076", "createdAt": "2020-03-18T17:00:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3ODY1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMToxNVrOF4OgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMToxNVrOF4OgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502237", "createdAt": "2020-03-18T17:01:15Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3OTc5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTozM1rOF4OhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTozM1rOF4OhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                                    partitionSummaryData.setUploadIdForOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502424", "createdAt": "2020-03-18T17:01:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI4MDc3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTo0OFrOF4Ohsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTo0OFrOF4Ohsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n          \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502578", "createdAt": "2020-03-18T17:01:48Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI4MTcyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjowNlrOF4OiXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjowNlrOF4OiXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502750", "createdAt": "2020-03-18T17:02:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI4MjY4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjoxOVrOF4Oi9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjoxOVrOF4Oi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjkwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502902", "createdAt": "2020-03-18T17:02:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI4Mzc1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjozM1rOF4OjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjozM1rOF4OjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzA2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n          \n          \n            \n                            if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394503065", "createdAt": "2020-03-18T17:02:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n                 if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM0NzU2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOToyMlrOF4PNyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOToyMlrOF4PNyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzg2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportFailureOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513864", "createdAt": "2020-03-18T17:19:22Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM0ODU1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozNlrOF4POcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozNlrOF4POcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNDAzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), partitionSummaryData.getDataPacksForFailureOperationOutcomes());", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394514032", "createdAt": "2020-03-18T17:19:36Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 124, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}