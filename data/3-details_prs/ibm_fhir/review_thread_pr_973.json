{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTQ3Njky", "number": 973, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0OToyOFrOD17iLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDowMTowOVrOD3x9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODc2NTI2OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/README.MD", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0OToyOFrOGLmzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0OToyOFrOGLmzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMzIzNw==", "bodyText": "I think we should steer users toward the \"alternative\" approach...no need to push to dockerhub just to test the nats stuff", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414823237", "createdAt": "2020-04-24T19:49:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODc3MzE1OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/README.MD", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo1MTo0MVrOGLm3jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjo1MTozMlrOGNSavA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDMzMw==", "bodyText": "An alternative would be to modify the docker-compose file to include a bind mount which mounts the test config at the proper directory:\nversion: '3.7'\nservices:\n\n  fhir-server:\n    image: ibmcom/ibm-fhir-server\n    hostname: fhir\n    volumes:\n      - type: bind\n        source: ./path/to/test/config\n        target: /opt/ol/wlp/usr/servers/fhir-server/config/default\n        read_only: true\n    ...", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414824333", "createdAt": "2020-04-24T19:51:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  \n+ \n+```\n+Example: \n+docker cp ./fhir-server-config.json fhir_server:/opt/ol/wlp/usr/servers/fhir-server/config/default/fhir-server-config.json\n+```        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDg3NA==", "bodyText": "Thats the approach we use in our end-to-end tests in our CI pipeline (see build/docker in the project root)", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414824874", "createdAt": "2020-04-24T19:52:34Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  \n+ \n+```\n+Example: \n+docker cp ./fhir-server-config.json fhir_server:/opt/ol/wlp/usr/servers/fhir-server/config/default/fhir-server-config.json\n+```        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDMzMw=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTQyMQ==", "bodyText": "OK, I used this approach to test the changes, so I just went ahead and updated your PR with this.  However, this README still needs to get updated to indicate this approach.  Basically the user can go right to the following step: cd and docker-compose up", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414901421", "createdAt": "2020-04-24T22:38:52Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  \n+ \n+```\n+Example: \n+docker cp ./fhir-server-config.json fhir_server:/opt/ol/wlp/usr/servers/fhir-server/config/default/fhir-server-config.json\n+```        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDMzMw=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4NjQyOA==", "bodyText": "And now I moved the test stuff into the build dir, so the steps became:\n\nexecute build/pre-integration-test-docker.sh\nrun node fhir-server-test/src/test/nodejs/nats-subscriber.js\nput or post some resources to verify\nexecute build/post-integration-test-docker.sh\n\nI talked to Carole and we think to maybe just add step 2 to the build/README-DB2.md for now.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416586428", "createdAt": "2020-04-28T12:51:32Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  \n+ \n+```\n+Example: \n+docker cp ./fhir-server-config.json fhir_server:/opt/ol/wlp/usr/servers/fhir-server/config/default/fhir-server-config.json\n+```        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNDMzMw=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODk1MjU4OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo0MTowN1rOGLodAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMzoxNVrOGMo_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MDMwNA==", "bodyText": "Its funny because we literally just changed all our other keystores from JKS to PKCS12.\nCan NATS work with PKCS12 or it really needs JKS?", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414850304", "createdAt": "2020-04-24T20:41:07Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}\n+\n+/* \n+* Modified from original NATS documentation @ https://docs.nats.io/developing-with-nats/security/tls\n+*\n+* This example requires certificates to be in the java keystore format (.jks).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwNzc3NA==", "bodyText": "The .jks keystore and truststore files we create are of type pkcs12, so I believe we could just change the name to .p12.  That should be easy enough to test.\nUpdate: tested successfully with names changed to .p12 to match the fact that they were already .p12.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415907774", "createdAt": "2020-04-27T15:23:15Z", "author": {"login": "ccorley"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}\n+\n+/* \n+* Modified from original NATS documentation @ https://docs.nats.io/developing-with-nats/security/tls\n+*\n+* This example requires certificates to be in the java keystore format (.jks).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MDMwNA=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTAwMjkyOnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config/config/default/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDo1NToyOVrOGLo5kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyODozMlrOGM2SnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NzYxOQ==", "bodyText": "docker-compose question:  if liberty can reach all the nodes on 4222, do we even need to map those in the default docker-compose?\nfor example, currently it has:\n\n4222:4222\n4223:4222\n4224:4222", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414857619", "createdAt": "2020-04-24T20:55:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config.json", "diffHunk": "@@ -56,6 +56,18 @@\n                     \"max.block.ms\": \"60000\",\n                     \"max.in.flight.requests.per.connection\": \"5\"\n                 }\n+            },\n+            \"nats\": {\n+                \"enabled\": false,\n+                \"cluster\": \"nats-streaming\",\n+                \"channel\": \"fhirNotifications\",\n+                \"clientId\": \"fhir-server\",\n+                \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzI5NA==", "bodyText": "ok, after testing it, I'm think we should use a default config that matches the test:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n          \n          \n            \n                            \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414867294", "createdAt": "2020-04-24T21:14:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config.json", "diffHunk": "@@ -56,6 +56,18 @@\n                     \"max.block.ms\": \"60000\",\n                     \"max.in.flight.requests.per.connection\": \"5\"\n                 }\n+            },\n+            \"nats\": {\n+                \"enabled\": false,\n+                \"cluster\": \"nats-streaming\",\n+                \"channel\": \"fhirNotifications\",\n+                \"clientId\": \"fhir-server\",\n+                \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NzYxOQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgyMDY5NQ==", "bodyText": "The idea behind using 4222 for all NATS servers is that, because the FHIR server is on the same docker network as NATS, we can use the internal port number for each NATS service, which is 4222 in each container.  I'm a bit surprised that the combination of service name + external port number (4222,4223,4224) works.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415820695", "createdAt": "2020-04-27T13:39:26Z", "author": {"login": "ccorley"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config.json", "diffHunk": "@@ -56,6 +56,18 @@\n                     \"max.block.ms\": \"60000\",\n                     \"max.in.flight.requests.per.connection\": \"5\"\n                 }\n+            },\n+            \"nats\": {\n+                \"enabled\": false,\n+                \"cluster\": \"nats-streaming\",\n+                \"channel\": \"fhirNotifications\",\n+                \"clientId\": \"fhir-server\",\n+                \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NzYxOQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTU5Nw==", "bodyText": "totally agree it should use the internal port (and not the external one).  but it seems to me like nats-node2 and nats-node3 are actually listening on internal ports 4223 and 4224 (and not 4222)", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416125597", "createdAt": "2020-04-27T20:28:32Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config.json", "diffHunk": "@@ -56,6 +56,18 @@\n                     \"max.block.ms\": \"60000\",\n                     \"max.in.flight.requests.per.connection\": \"5\"\n                 }\n+            },\n+            \"nats\": {\n+                \"enabled\": false,\n+                \"cluster\": \"nats-streaming\",\n+                \"channel\": \"fhirNotifications\",\n+                \"clientId\": \"fhir-server\",\n+                \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NzYxOQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTEyNjMzOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTozMjoyNFrOGLp_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzo0MDoyNlrOGMjusQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        - 4222:4222\n          \n          \n            \n                        - 6222:6222\n          \n          \n            \n                        - 4222:4222", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414875465", "createdAt": "2020-04-24T21:32:24Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NjgxMg==", "bodyText": "seems like 6222 is the \"backend\" port and so no need to expose it on the host?  please correct me if I'm wrong", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414876812", "createdAt": "2020-04-24T21:35:31Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTQ2NQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgyMTQ4OQ==", "bodyText": "6222 is an HTTP port, but we don't use it for this example, so it can be excluded.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415821489", "createdAt": "2020-04-27T13:40:26Z", "author": {"login": "ccorley"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTQ2NQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTEyNzExOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTozMjo0MFrOGLp_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNjoxMFrOGM2Mnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        - 4224:4222\n          \n          \n            \n                        - 6224:6222\n          \n          \n            \n                        - 4224:4224", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414875582", "createdAt": "2020-04-24T21:32:40Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222\n+    nats-node3:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node3\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-3.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4224:4222\n+            - 6224:6222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NzEyOQ==", "bodyText": "I think its actually listening on 4224 and not 4222", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414877129", "createdAt": "2020-04-24T21:36:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222\n+    nats-node3:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node3\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-3.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4224:4222\n+            - 6224:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTU4Mg=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgyMjQyNQ==", "bodyText": "The external port is 4224, but the internal port is 4222, so 4224:4222 is correct.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415822425", "createdAt": "2020-04-27T13:41:38Z", "author": {"login": "ccorley"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222\n+    nats-node3:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node3\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-3.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4224:4222\n+            - 6224:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTU4Mg=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDA2Mw==", "bodyText": "nats-node3     | [1] 2020/04/24 21:39:41.002469 [INF] Listening for client connections on 0.0.0.0:4224\nnats-node3     | [1] 2020/04/24 21:39:41.002510 [INF] Server id is NCPFPS637V2OS77UF453BC7VRAKBHHA7BBCXE3DV3Q7ISDQGEEA3QJYB\nnats-node3     | [1] 2020/04/24 21:39:41.002524 [INF] Server is ready", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416124063", "createdAt": "2020-04-27T20:26:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222\n+    nats-node3:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node3\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-3.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4224:4222\n+            - 6224:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTU4Mg=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTEyNzYxOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTozMjo1MVrOGLqADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNToxM1rOGM2KPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        - 4223:4222\n          \n          \n            \n                        - 6223:6222\n          \n          \n            \n                        - 4223:4223", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414875661", "createdAt": "2020-04-24T21:32:51Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NzA0Mw==", "bodyText": "I think its actually listening on 4223 and not 4222", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414877043", "createdAt": "2020-04-24T21:36:00Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTY2MQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgyMjgxNw==", "bodyText": "The external port is 4223, but the internal port is 4222, so 4223:4222 is correct.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415822817", "createdAt": "2020-04-27T13:42:07Z", "author": {"login": "ccorley"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTY2MQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMzQ1Mw==", "bodyText": "Are you sure?  I was basing my assumption on the output from the node which says:\nnats-node2     | [1] 2020/04/24 21:31:08.402708 [INF] Listening for client connections on 0.0.0.0:4223\nnats-node2     | [1] 2020/04/24 21:31:08.402753 [INF] Server id is NC5Y56VKV3ECEDMNHBM7LALWBSTWQ2ZSBSPVOMFXJJPZGXRCOKTS5SAO\nnats-node2     | [1] 2020/04/24 21:31:08.402770 [INF] Server is ready```", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416123453", "createdAt": "2020-04-27T20:25:13Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/resources/nats/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+version: \"3.7\"\n+networks:\n+  main:\n+    driver: bridge\n+    ipam:\n+      config:\n+        - subnet: 172.19.0.0/24\n+      driver: default\n+services:\n+    nats-node1:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node1\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-1.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4222:4222\n+            - 6222:6222\n+    nats-node2:\n+        image: nats-streaming:0.17.0\n+        container_name: nats-node2\n+        volumes:\n+            - .:/nats\n+        command: --config /nats/config-2.conf\n+        networks:\n+            - main\n+        ports:\n+            - 4223:4222\n+            - 6223:6222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTY2MQ=="}, "originalCommit": {"oid": "3ac11d1c8ab4f7995acfa130570bfab6ca97212e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTMxMzA1OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0MDoxNFrOGLrmKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozOTowNlrOGOE8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTgwMw==", "bodyText": "the version is in fhir-parent dependencyManagement, so no need to repeat it here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>2.2.3</version>", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414901803", "createdAt": "2020-04-24T22:40:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyMzM3NQ==", "bodyText": "I need to retest if I am going to remove this.  I'd rather leave it for now.  I had previously tried removing the dependencies altogether and that broke the build.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416723375", "createdAt": "2020-04-28T15:47:01Z", "author": {"login": "ccorley"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTgwMw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTMzMQ==", "bodyText": "you need the dependencies, but you don't need to specify the version because the versions are managed in the \"dependencyManagement\" section of the parent pom.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417325331", "createdAt": "2020-04-29T13:44:26Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTgwMw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDIwNg==", "bodyText": "removed the version", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417414206", "createdAt": "2020-04-29T15:39:06Z", "author": {"login": "ccorley"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTgwMw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTMxMzU3OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0MDoyNlrOGLrmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozODo1OFrOGOE7xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTg4Mw==", "bodyText": "the version is in fhir-parent dependencyManagement, so no need to repeat it here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>2.6.7</version>", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r414901883", "createdAt": "2020-04-24T22:40:26Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>jnats</artifactId>\n+            <version>2.6.7</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyODU0NQ==", "bodyText": "Leaving this for now to avoid rebuilding and retesting.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r416728545", "createdAt": "2020-04-28T15:53:54Z", "author": {"login": "ccorley"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>jnats</artifactId>\n+            <version>2.6.7</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTg4Mw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTQ4Mw==", "bodyText": "you need the dependencies, but you don't need to specify the version because the versions are managed in the \"dependencyManagement\" section of the parent pom.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417325483", "createdAt": "2020-04-29T13:44:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>jnats</artifactId>\n+            <version>2.6.7</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTg4Mw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDA4NQ==", "bodyText": "removed the version", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417414085", "createdAt": "2020-04-29T15:38:58Z", "author": {"login": "ccorley"}, "path": "fhir-notification-nats/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.1.1-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+\n+    <artifactId>fhir-notification-nats</artifactId>\n+    <description>IBM FHIR Server Notifications for NATS</description>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-notification</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>java-nats-streaming</artifactId>\n+            <version>2.2.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.nats</groupId>\n+            <artifactId>jnats</artifactId>\n+            <version>2.6.7</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMTg4Mw=="}, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM2MjQ2OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/README.MD", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyNzoyMFrOGMggfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyNzoyMFrOGMggfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2ODcwMQ==", "bodyText": "We try to add the follow text to the end of all our markdown pages:\nFHIR\u00ae is the registered trademark of HL7 and is used with the permission of HL7.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r415768701", "createdAt": "2020-04-27T12:27:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,98 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.jks\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.jks\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+For use with the test configuration in the next section, set \"enabled\" to true and make no other changes.\n+\n+## Create a simple NATS cluster for testing\n+\n+In the directory fhir-server-test/src/test/resources/nats you will find the files to set up a basic NATS cluster and IBM FHIR Server on the same docker network.  Follow these steps to test:\n+\n+* Build your IBM FHIR image with the NATS configuration discussed above and publish it to Docker Hub.  Edit the fhir_server service image in fhir-server-test/src/test/resources/nats/docker-compose.yml to point to this new image.  \n+\n+\n+```  \n+fhir_server:  \n+\timage: <your-repo>/<your-image>  \n+```  \n+\n+\n+Note: As an alternative to building and publishing your own image, you can start an IBM FHIR Server image that contains the NATS publisher functionality, then copy the updated configuration file containing the above changes into the IBM FHIR container and restart the container.  \n+ \n+```\n+Example: \n+docker cp ./fhir-server-config.json fhir_server:/opt/ol/wlp/usr/servers/fhir-server/config/default/fhir-server-config.json\n+```        \n+\n+* Start the NATS cluster and IBM FHIR server.  \n+\n+```\n+cd fhir-server-test/src/test/resources/nats\n+docker-compose up -d\n+```  \n+\n+You can view the logs with:  \n+\n+```\n+docker-compose logs -f  \n+```\n+\n+* Start the NATS subscriber using [Node.js](https://nodejs.org/en/download/).  \n+\n+```  \n+npm install node-nats-streaming  \n+node nats-subscriber  \n+```  \n+\n+* POST a patient record to IBM FHIR server and observe the NATS message received by the subscriber in the console output.\n+\n+\n+## Use TLS (advanced)\n+\n+To use TLS (which you must do if your NATS cluster requires TLS) set \"useTLS\" to true in fhir-server-config.json and provide client truststore and keystore locations and passwords as the remaining config values.  Furthermore, to use TLS to connect to a NATS cluster, that NATS cluster must be enabled to use TLS.  The example above does not use TLS.\n+\n+### Create a truststore and keystore\n+\n+On MacOS, install the [mkcert tool](https://github.com/FiloSottile/mkcert) with `brew install mkcert`, then follow these steps to create a Java keystore and truststore for use with NATS.  You also need Java keytool and openssl installed. Set change-password to be any value. \n+\n+```shell\n+# Install the CA locally\n+./mkcert -install \n+ \n+# Create the cert to use for the IBM FHIR Server client connection\n+./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n+\n+# Create the java trust store\n+keytool -keystore nats.client.truststore.jks -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt -storetype pkcs12\n+\n+# Convert the cert from .pem to pkcs12\n+cat ./fhir-key.pem ./fhir-cert.pem > combined.pem\n+openssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password -passout pass:change-password\n+\n+# Import the pkcs12 cert into a new keystore\n+keytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 -destkeystore nats.client.keystore.jks -srcstorepass change-password -deststorepass change-password\n+\n+# Import the CA cert into the keystore & clean up\n+keytool -keystore nats.client.keystore.jks -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt\n+rm cert.p12 combined.pem  \n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2158c4b96680d53d9ead60dfd846affdf27642"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjY3NTc0OnYy", "diffSide": "RIGHT", "path": "build/README-DB2.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1NToxOVrOGOAAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MTo1N1rOGOFEZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMzQ0MA==", "bodyText": "lets give the full path to the executable and add a note about building it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber`.  \n          \n          \n            \n                Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node fhir-server-test/src/main/nodejs/nats-subscriber.js`.  If this is your first time, install the dependencies first by installing [Node.js](https://nodejs.org/en/download) (if not already installed) and running `(cd fhir-server-test/src/main/nodejs/ && npm install)`", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417333440", "createdAt": "2020-04-29T13:55:19Z", "author": {"login": "lmsurpre"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,16 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n     ```sh\n     build/pre-integration-test-docker.sh\n-    ```\n-2. Run the tests\n+    ```  \n+    Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9354170d201426360027bbc15e1272d12083198"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MDcxMg==", "bodyText": "We have to add a package.json and should add package-lock.json.  Also, the current location of nats-subscriber.js is: fhir-server-test/src/test/nodejs/nats-subscriber.js", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417380712", "createdAt": "2020-04-29T14:55:06Z", "author": {"login": "ccorley"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,16 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n     ```sh\n     build/pre-integration-test-docker.sh\n-    ```\n-2. Run the tests\n+    ```  \n+    Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMzQ0MA=="}, "originalCommit": {"oid": "f9354170d201426360027bbc15e1272d12083198"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDc0Nw==", "bodyText": "no need to use package-lock.json here, so just added package.json.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417414747", "createdAt": "2020-04-29T15:39:48Z", "author": {"login": "ccorley"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,16 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n     ```sh\n     build/pre-integration-test-docker.sh\n-    ```\n-2. Run the tests\n+    ```  \n+    Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMzQ0MA=="}, "originalCommit": {"oid": "f9354170d201426360027bbc15e1272d12083198"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNjI5NA==", "bodyText": "great, i thought i had copied that over when i moved the client to fhir-server-test/src/main/nodejs but i must have dropped it by accident", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417416294", "createdAt": "2020-04-29T15:41:57Z", "author": {"login": "lmsurpre"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,16 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n     ```sh\n     build/pre-integration-test-docker.sh\n-    ```\n-2. Run the tests\n+    ```  \n+    Note: If you are testing NATS notifications, invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMzQ0MA=="}, "originalCommit": {"oid": "f9354170d201426360027bbc15e1272d12083198"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjY4OTI2OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1Nzo1M1rOGOAI1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1Nzo1M1rOGOAI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzNTUxMA==", "bodyText": "good catch!", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417335510", "createdAt": "2020-04-29T13:57:53Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1429,9 +1470,9 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/bulkdata/applicationName`| string|Fixed value, always set to fhir-bulkimportexport-webapp |\n |`fhirServer/bulkdata/moduleName`|string| Fixed value, always set to fhir-bulkimportexport.war |\n |`fhirServer/bulkdata/jobParameters/cos.bucket.name`|string|Object store bucket name |\n-|`fhirServer/bulkdata/jobParameters/cos.location`|Object store location |\n-|`fhirServer/bulkdata/jobParameters/cos.endpointurl`| Object store end point url |\n-|`fhirServer/bulkdata/jobParameters/credential.ibm`| If use IBM credential, \"Y\" or \"N\" |\n+|`fhirServer/bulkdata/jobParameters/cos.location`|string|Object store location |\n+|`fhirServer/bulkdata/jobParameters/cos.endpointurl`|string|Object store end point url |\n+|`fhirServer/bulkdata/jobParameters/credential.ibm`|string|If use IBM credential, \"Y\" or \"N\" |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9354170d201426360027bbc15e1272d12083198"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMwOTE1OnYy", "diffSide": "RIGHT", "path": "build/README-DB2.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxMDozN1rOGOGUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxMDozN1rOGOGUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNjc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            From the root of the project (aka the \"WORKSPACE\"):  \n          \n          \n            \n            1. Set up and start the containers  \n          \n          \n            \n                ```sh  \n          \n          \n            \n                build/pre-integration-test-docker.sh  \n          \n          \n            \n            From the root of the project (aka the \"WORKSPACE\"):\n          \n          \n            \n            1. Set up and start the containers \n          \n          \n            \n                ```sh\n          \n          \n            \n                build/pre-integration-test-docker.sh", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417436761", "createdAt": "2020-04-29T16:10:37Z", "author": {"login": "prb112"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,18 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n-    ```sh\n-    build/pre-integration-test-docker.sh\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n+    ```sh  \n+    build/pre-integration-test-docker.sh  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMwOTkxOnYy", "diffSide": "RIGHT", "path": "build/README-DB2.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxMDo1MVrOGOGU7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxMDo1MVrOGOGU7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNjkxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ```  \n          \n          \n            \n                ```", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417436911", "createdAt": "2020-04-29T16:10:51Z", "author": {"login": "prb112"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,18 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n-    ```sh\n-    build/pre-integration-test-docker.sh\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n+    ```sh  \n+    build/pre-integration-test-docker.sh  \n     ```\n-2. Run the tests\n+    \n+   Note: If you are testing NATS notifications, invoke the NATS subscriber via `node fhir-server-test/src/test/nodejs/nats-subscriber`.  If this is your first time, install the dependencies first by installing [Node.js](https://nodejs.org/en/download) (if not already installed) and running `(cd fhir-server-test/src/test/nodejs && npm install)`.  \n+    \n+2. Run the tests. \n     ```sh\n     mvn test -DskipTests=false -f fhir-server-test\n-    ```\n+    ```  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMxNDI1OnYy", "diffSide": "RIGHT", "path": "build/README-DB2.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxMTo1NVrOGOGX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNTowOVrOGOGgMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNzY1MQ==", "bodyText": "( is intentional?  also matching )", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417437651", "createdAt": "2020-04-29T16:11:55Z", "author": {"login": "prb112"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,18 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n-    ```sh\n-    build/pre-integration-test-docker.sh\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n+    ```sh  \n+    build/pre-integration-test-docker.sh  \n     ```\n-2. Run the tests\n+    \n+   Note: If you are testing NATS notifications, invoke the NATS subscriber via `node fhir-server-test/src/test/nodejs/nats-subscriber`.  If this is your first time, install the dependencies first by installing [Node.js](https://nodejs.org/en/download) (if not already installed) and running `(cd fhir-server-test/src/test/nodejs && npm install)`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzOTM4Mw==", "bodyText": "yes, its to change the dir for just the scope of the single sub-command", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417439383", "createdAt": "2020-04-29T16:14:28Z", "author": {"login": "lmsurpre"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,18 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n-    ```sh\n-    build/pre-integration-test-docker.sh\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n+    ```sh  \n+    build/pre-integration-test-docker.sh  \n     ```\n-2. Run the tests\n+    \n+   Note: If you are testing NATS notifications, invoke the NATS subscriber via `node fhir-server-test/src/test/nodejs/nats-subscriber`.  If this is your first time, install the dependencies first by installing [Node.js](https://nodejs.org/en/download) (if not already installed) and running `(cd fhir-server-test/src/test/nodejs && npm install)`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNzY1MQ=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzOTc5NA==", "bodyText": "alternatively, if read as a parenthetical, the user can just cd to that dir to install the client, then change back", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417439794", "createdAt": "2020-04-29T16:15:09Z", "author": {"login": "lmsurpre"}, "path": "build/README-DB2.md", "diffHunk": "@@ -11,15 +11,18 @@ Running fhir server integration tests using docker db2.\n \n ## Run\n \n-From the root of the project (aka the \"WORKSPACE\"):\n-1. Set up and start the containers\n-    ```sh\n-    build/pre-integration-test-docker.sh\n+From the root of the project (aka the \"WORKSPACE\"):  \n+1. Set up and start the containers  \n+    ```sh  \n+    build/pre-integration-test-docker.sh  \n     ```\n-2. Run the tests\n+    \n+   Note: If you are testing NATS notifications, invoke the NATS subscriber via `node fhir-server-test/src/test/nodejs/nats-subscriber`.  If this is your first time, install the dependencies first by installing [Node.js](https://nodejs.org/en/download) (if not already installed) and running `(cd fhir-server-test/src/test/nodejs && npm install)`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNzY1MQ=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMyOTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNTozN1rOGOGhcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNTozN1rOGOGhcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n          \n          \n            \n            The [NATS](http://nats.io) implementation of the notification service publishes notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as shown in the following example:", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417440113", "createdAt": "2020-04-29T16:15:37Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzMDQxOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNTo1N1rOGOGiUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNTo1N1rOGOGiUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \u2026\n          \n          \n            \n                        ...", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417440336", "createdAt": "2020-04-29T16:15:57Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzMTEwOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjowN1rOGOGi0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjowN1rOGOGi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \u2026\n          \n          \n            \n                    ...", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417440465", "createdAt": "2020-04-29T16:16:07Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzMzU1OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjozNVrOGOGkMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjozNVrOGOGkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDgxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Set the `fhirServer/notifications/nats/enabled` property to true and provide the name of your NATS cluster for the value of `fhirServer/notifications/nats/cluster`.  You may leave `fhirServer/notifications/nats/channel` and `fhirServer/notifications/nats/clientId` as defined.  Provide the URL for one or more NATS servers as the value for `fhirServer/notifications/nats/servers`. \n          \n          \n            \n            \n          \n          \n            \n            Set the `fhirServer/notifications/nats/enabled` property to true and provide the name of your NATS cluster for the value of `fhirServer/notifications/nats/cluster`.  You may leave `fhirServer/notifications/nats/channel` and `fhirServer/notifications/nats/clientId` as defined.  Provide the URL for one or more NATS servers as the value for `fhirServer/notifications/nats/servers`.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417440817", "createdAt": "2020-04-29T16:16:35Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026\n+            \"nats\": {\n+\t\t        \"enabled\": true,\n+\t\t        \"cluster\": \"nats-streaming\",\n+\t\t        \"channel\": \"fhirNotifications\",\n+\t\t        \"clientId\": \"fhir-server\",\n+\t\t        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",\n+\t\t        \"useTLS\": false,\n+\t\t        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+\t\t        \"truststorePassword\": \"change-password\",\n+\t\t        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+\t\t        \"keystorePassword\": \"change-password\"\n+    }\n+        \u2026\n+    }\n+}\n+```\n+Set the `fhirServer/notifications/nats/enabled` property to true and provide the name of your NATS cluster for the value of `fhirServer/notifications/nats/cluster`.  You may leave `fhirServer/notifications/nats/channel` and `fhirServer/notifications/nats/clientId` as defined.  Provide the URL for one or more NATS servers as the value for `fhirServer/notifications/nats/servers`. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzOTExOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNzo1MlrOGOGnqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNzo1MlrOGOGnqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MTcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t        \"useTLS\": false,\n          \n          \n            \n            \t\t        \"useTLS\": true,\n          \n      \n    \n    \n  \n\nI suggest giving the TLS example.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417441704", "createdAt": "2020-04-29T16:17:52Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026\n+            \"nats\": {\n+\t\t        \"enabled\": true,\n+\t\t        \"cluster\": \"nats-streaming\",\n+\t\t        \"channel\": \"fhirNotifications\",\n+\t\t        \"clientId\": \"fhir-server\",\n+\t\t        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",\n+\t\t        \"useTLS\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzOTc2OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxODowM1rOGOGoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxODoxNFrOGOGorw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MTgxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \u2026\n          \n          \n            \n                    ...", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417441817", "createdAt": "2020-04-29T16:18:03Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026\n+            \"nats\": {\n+\t\t        \"enabled\": true,\n+\t\t        \"cluster\": \"nats-streaming\",\n+\t\t        \"channel\": \"fhirNotifications\",\n+\t\t        \"clientId\": \"fhir-server\",\n+\t\t        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",\n+\t\t        \"useTLS\": false,\n+\t\t        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+\t\t        \"truststorePassword\": \"change-password\",\n+\t\t        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+\t\t        \"keystorePassword\": \"change-password\"\n+    }\n+        \u2026", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MTk2Nw==", "bodyText": "Ellipsis are hard to see", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417441967", "createdAt": "2020-04-29T16:18:14Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026\n+            \"nats\": {\n+\t\t        \"enabled\": true,\n+\t\t        \"cluster\": \"nats-streaming\",\n+\t\t        \"channel\": \"fhirNotifications\",\n+\t\t        \"clientId\": \"fhir-server\",\n+\t\t        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",\n+\t\t        \"useTLS\": false,\n+\t\t        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+\t\t        \"truststorePassword\": \"change-password\",\n+\t\t        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+\t\t        \"keystorePassword\": \"change-password\"\n+    }\n+        \u2026", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MTgxNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM0MjUzOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxODo0NFrOGOGp6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxODo0NFrOGOGp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MjI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To store a value requiring security (such as a password), you can use Liberty's securityUtility command to encode the value. See Section 3.1 Encoded passwords for details.\n          \n          \n            \n            To store a value requiring security, such as a password, use Liberty's `securityUtility` command to encode the value. See Section 3.1 Encoded passwords for details.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417442281", "createdAt": "2020-04-29T16:18:44Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -547,6 +547,37 @@ Before you enable Kafka notifications, it's important to understand the topology\n \n On the other hand, if you have two completely independent FHIR server instances, then you should configure each one with its own topic name.\n \n+### 4.2.3 NATS\n+The [NATS](http://nats.io) implementation of the notification service will publish notification event messages to a NATS streaming cluster. To configure the NATS notification publisher, configure properties in the `fhir-server-config.json` file as indicated in the following example:\n+\n+```\n+{\n+    \"fhirServer\":{\n+        \u2026\n+        \"notifications\":{\n+            \u2026\n+            \"nats\": {\n+\t\t        \"enabled\": true,\n+\t\t        \"cluster\": \"nats-streaming\",\n+\t\t        \"channel\": \"fhirNotifications\",\n+\t\t        \"clientId\": \"fhir-server\",\n+\t\t        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224\",\n+\t\t        \"useTLS\": false,\n+\t\t        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+\t\t        \"truststorePassword\": \"change-password\",\n+\t\t        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+\t\t        \"keystorePassword\": \"change-password\"\n+    }\n+        \u2026\n+    }\n+}\n+```\n+Set the `fhirServer/notifications/nats/enabled` property to true and provide the name of your NATS cluster for the value of `fhirServer/notifications/nats/cluster`.  You may leave `fhirServer/notifications/nats/channel` and `fhirServer/notifications/nats/clientId` as defined.  Provide the URL for one or more NATS servers as the value for `fhirServer/notifications/nats/servers`. \n+\n+To use TLS to connect to your NATS cluster, set `fhirServer/notifications/nats/useTLS` to true and provide client truststore and keystore locations and passwords as the remaining config values. Ensure that your NATS cluster is configured for TLS client connections.\n+\n+To store a value requiring security (such as a password), you can use Liberty's securityUtility command to encode the value. See Section 3.1 Encoded passwords for details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM0NjE0OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxOToyNVrOGOGsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxOToyNVrOGOGsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MjgzNA==", "bodyText": "worthy mentioning that there is only 1 channel for all tenants?\n@lmsurpre", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417442834", "createdAt": "2020-04-29T16:19:25Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1412,6 +1443,16 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/notifications/kafka/enabled`|boolean|A boolean flag which indicates whether or not kafka notifications are enabled.|\n |`fhirServer/notifications/kafka/topicName`|string|The name of the topic to which kafka notification event messages should be published.|\n |`fhirServer/notifications/kafka/connectionProperties`|property list|A group of connection properties used to configure the KafkaProducer. These properties are used as-is when instantiating the KafkaProducer used by the FHIR server for publishing notification event messages.|\n+|`fhirServer/notifications/nats/enabled`|boolean|A boolean flag which indicates whether or not NATS notifications are enabled.|\n+|`fhirServer/notifications/nats/cluster`|string|The name of the NATS streaming cluster to which to connect.|\n+|`fhirServer/notifications/nats/channel`|string|The name of the NATS channel on which NATS notification event messages are to be published.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM0NzQ1OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxOTo0NFrOGOGs6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxOTo0NFrOGOGs6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MzA0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`fhirServer/notifications/nats/truststorePassword`|string|The password for the  truststore.|\n          \n          \n            \n            |`fhirServer/notifications/nats/truststorePassword`|string|The password for the truststore.|", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417443048", "createdAt": "2020-04-29T16:19:44Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1412,6 +1443,16 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/notifications/kafka/enabled`|boolean|A boolean flag which indicates whether or not kafka notifications are enabled.|\n |`fhirServer/notifications/kafka/topicName`|string|The name of the topic to which kafka notification event messages should be published.|\n |`fhirServer/notifications/kafka/connectionProperties`|property list|A group of connection properties used to configure the KafkaProducer. These properties are used as-is when instantiating the KafkaProducer used by the FHIR server for publishing notification event messages.|\n+|`fhirServer/notifications/nats/enabled`|boolean|A boolean flag which indicates whether or not NATS notifications are enabled.|\n+|`fhirServer/notifications/nats/cluster`|string|The name of the NATS streaming cluster to which to connect.|\n+|`fhirServer/notifications/nats/channel`|string|The name of the NATS channel on which NATS notification event messages are to be published.|\n+|`fhirServer/notifications/nats/clientId`|string|The name to use for the connections to the NATS streaming cluster.|\n+|`fhirServer/notifications/nats/servers`|string|The URL of one or more NATS servers in the NATS streaming cluster.|\n+|`fhirServer/notifications/nats/useTLS`|boolean|A boolean flag which indicates whether or not to use TLS for connections to the NATS streaming cluster.|\n+|`fhirServer/notifications/nats/truststoreLocation`|string|The file location of the truststore to use for TLS.|\n+|`fhirServer/notifications/nats/truststorePassword`|string|The password for the  truststore.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM1Mjk2OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyMToxMVrOGOGwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMTo1MFrOGOIZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0Mzk2NA==", "bodyText": "just a thought to switch to true\nit's a preferred security posture", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417443964", "createdAt": "2020-04-29T16:21:11Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1465,6 +1506,16 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/notifications/kafka/enabled`|false|\n |`fhirServer/notifications/kafka/topicName`|fhirNotifications|\n |`fhirServer/notifications/kafka/connectionProperties`|`{}`|\n+|`fhirServer/notifications/nats/enabled`|false|\n+|`fhirServer/notifications/nats/cluster`|nats-streaming|\n+|`fhirServer/notifications/nats/channel`|fhirNotifications|\n+|`fhirServer/notifications/nats/clientId`|fhir-server|\n+|`fhirServer/notifications/nats/servers`|nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224|\n+|`fhirServer/notifications/nats/useTLS`|false|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MDc2MQ==", "bodyText": "i kinda gave it a pass since its new/experimental, but i suppose you're right.  the default should be secure.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417470761", "createdAt": "2020-04-29T17:01:50Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1465,6 +1506,16 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/notifications/kafka/enabled`|false|\n |`fhirServer/notifications/kafka/topicName`|fhirNotifications|\n |`fhirServer/notifications/kafka/connectionProperties`|`{}`|\n+|`fhirServer/notifications/nats/enabled`|false|\n+|`fhirServer/notifications/nats/cluster`|nats-streaming|\n+|`fhirServer/notifications/nats/channel`|fhirNotifications|\n+|`fhirServer/notifications/nats/clientId`|fhir-server|\n+|`fhirServer/notifications/nats/servers`|nats://nats-node1:4222,nats://nats-node2:4223,nats://nats-node3:4224|\n+|`fhirServer/notifications/nats/useTLS`|false|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0Mzk2NA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM1NzM5OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyMjowN1rOGOGzFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1NTo0NlrOGOn9BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NDYyOA==", "bodyText": "have we tested that this is tenant specific?\nhow is this valid given the fact the channel is not tenant?", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417444628", "createdAt": "2020-04-29T16:22:07Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1509,6 +1560,16 @@ must restart the server for that change to take effect.\n |`fhirServer/notifications/kafka/enabled`|Y|Y|\n |`fhirServer/notifications/kafka/topicName`|N|N|\n |`fhirServer/notifications/kafka/connectionProperties`|N|N|\n+|`fhirServer/notifications/nats/enabled`|N|N|\n+|`fhirServer/notifications/nats/cluster`|Y|N|\n+|`fhirServer/notifications/nats/channel`|N|N|\n+|`fhirServer/notifications/nats/clientId`|N|N|\n+|`fhirServer/notifications/nats/servers`|Y|N|\n+|`fhirServer/notifications/nats/useTLS`|N|N|\n+|`fhirServer/notifications/nats/truststoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/truststorePassword`|Y|N|\n+|`fhirServer/notifications/nats/keystoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/keystorePassword`|Y|N|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NzA1MQ==", "bodyText": "Actually the channel could be tenant-specific, since it is configurable.  Probably worth a discussion about how the notification system would behave in a multi-tenant environment.  If there is fhir-server-config.json and nats notification class instance per tenant, then channel and client-id could be tenant-specific.  I was viewing that column from the perspective of whether a single tenant would need to change that value to something specific for that tenant, which is where the 'N's came from.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417477051", "createdAt": "2020-04-29T17:11:49Z", "author": {"login": "ccorley"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1509,6 +1560,16 @@ must restart the server for that change to take effect.\n |`fhirServer/notifications/kafka/enabled`|Y|Y|\n |`fhirServer/notifications/kafka/topicName`|N|N|\n |`fhirServer/notifications/kafka/connectionProperties`|N|N|\n+|`fhirServer/notifications/nats/enabled`|N|N|\n+|`fhirServer/notifications/nats/cluster`|Y|N|\n+|`fhirServer/notifications/nats/channel`|N|N|\n+|`fhirServer/notifications/nats/clientId`|N|N|\n+|`fhirServer/notifications/nats/servers`|Y|N|\n+|`fhirServer/notifications/nats/useTLS`|N|N|\n+|`fhirServer/notifications/nats/truststoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/truststorePassword`|Y|N|\n+|`fhirServer/notifications/nats/keystoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/keystorePassword`|Y|N|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NDYyOA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4Nzg0NQ==", "bodyText": "what we mean by \"tenant-specific\" here is whether the properties will be read from the tenant-specific config file if they are set there.  In this case, the nats notifier reads these properties during server startup (FHIRServletContextListener.contextInitialized), so we want an N in this column.  I've already committed the change, so this one is now resolved.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417987845", "createdAt": "2020-04-30T12:55:46Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1509,6 +1560,16 @@ must restart the server for that change to take effect.\n |`fhirServer/notifications/kafka/enabled`|Y|Y|\n |`fhirServer/notifications/kafka/topicName`|N|N|\n |`fhirServer/notifications/kafka/connectionProperties`|N|N|\n+|`fhirServer/notifications/nats/enabled`|N|N|\n+|`fhirServer/notifications/nats/cluster`|Y|N|\n+|`fhirServer/notifications/nats/channel`|N|N|\n+|`fhirServer/notifications/nats/clientId`|N|N|\n+|`fhirServer/notifications/nats/servers`|Y|N|\n+|`fhirServer/notifications/nats/useTLS`|N|N|\n+|`fhirServer/notifications/nats/truststoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/truststorePassword`|Y|N|\n+|`fhirServer/notifications/nats/keystoreLocation`|Y|N|\n+|`fhirServer/notifications/nats/keystorePassword`|Y|N|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NDYyOA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM2NDUyOnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/README.MD", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNDowMlrOGOG3yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNDowMlrOGOG3yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NTgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417445834", "createdAt": "2020-04-29T16:24:02Z", "author": {"login": "prb112"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,57 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+## Test NATS Notifications\n+Manually invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber` and POST or PUT a patient record to the IBM FHIR Server to test the NATS notification module.\n+\n+## Use TLS (Advanced)\n+To use TLS (which you must do if your NATS streaming cluster requires TLS) set \"useTLS\" to true in fhir-server-config.json and provide client truststore and keystore locations and passwords as the remaining config values.  Furthermore, to use TLS to connect to a NATS cluster, that NATS cluster must be enabled to use TLS.  The example above does not use TLS.\n+\n+### Create a truststore and keystore\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM3ODEyOnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/README.MD", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNzoyNFrOGOHAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1NjowMlrOGOn9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```shell\n          \n          \n            \n            # Install the CA locally\n          \n          \n            \n            ./mkcert -install \n          \n          \n            \n             \n          \n          \n            \n            # Create the cert to use for the IBM FHIR Server client connection\n          \n          \n            \n            ./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n          \n          \n            \n            \n          \n          \n            \n            # Create the java trust store\n          \n          \n            \n            keytool -keystore nats.client.truststore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt -storetype pkcs12\n          \n          \n            \n            \n          \n          \n            \n            # Convert the cert from .pem to pkcs12\n          \n          \n            \n            cat ./fhir-key.pem ./fhir-cert.pem > combined.pem\n          \n          \n            \n            openssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password -passout pass:change-password\n          \n          \n            \n            \n          \n          \n            \n            # Import the pkcs12 cert into a new keystore\n          \n          \n            \n            keytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 -destkeystore nats.client.keystore.p12 -srcstorepass change-password -deststorepass change-password\n          \n          \n            \n            \n          \n          \n            \n            # Import the CA cert into the keystore & clean up\n          \n          \n            \n            keytool -keystore nats.client.keystore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt\n          \n          \n            \n            rm cert.p12 combined.pem  \n          \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            1. Install the CA locally\n          \n          \n            \n            ```shell\n          \n          \n            \n            ./mkcert -install \n          \n      \n    \n    \n  \n\n\nCreate the cert to use for the IBM FHIR Server client connection\n\n./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n\nCreate the java trust store\n\nkeytool -keystore nats.client.truststore.p12 -alias CARoot -import -file ./rootCA.pem -storepass \\\n    change-password -noprompt -storetype pkcs12\n\nConvert the cert from pem to pkcs12\n\ncat ./fhir-key.pem ./fhir-cert.pem > combined.pem\nopenssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password \\\n    -passout pass:change-password\n\nImport the pkcs12 cert into a new keystore\n\nkeytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 \\\n   -destkeystore nats.client.keystore.p12 -srcstorepass change-password -deststorepass \\\n   change-password\n\nImport the CA cert into the keystore & clean up\n\nkeytool -keystore nats.client.keystore.p12 -alias CARoot -import -file ./rootCA.pem -storepass \\\n    change-password -noprompt\nrm cert.p12 combined.pem", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417448027", "createdAt": "2020-04-29T16:27:24Z", "author": {"login": "prb112"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,57 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+## Test NATS Notifications\n+Manually invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber` and POST or PUT a patient record to the IBM FHIR Server to test the NATS notification module.\n+\n+## Use TLS (Advanced)\n+To use TLS (which you must do if your NATS streaming cluster requires TLS) set \"useTLS\" to true in fhir-server-config.json and provide client truststore and keystore locations and passwords as the remaining config values.  Furthermore, to use TLS to connect to a NATS cluster, that NATS cluster must be enabled to use TLS.  The example above does not use TLS.\n+\n+### Create a truststore and keystore\n+\n+On MacOS, install the [mkcert tool](https://github.com/FiloSottile/mkcert) with `brew install mkcert`, then follow these steps to create a Java keystore and truststore for use with NATS.  You also need Java keytool and openssl installed. Set change-password to be any value. \n+\n+```shell\n+# Install the CA locally\n+./mkcert -install \n+ \n+# Create the cert to use for the IBM FHIR Server client connection\n+./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n+\n+# Create the java trust store\n+keytool -keystore nats.client.truststore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt -storetype pkcs12\n+\n+# Convert the cert from .pem to pkcs12\n+cat ./fhir-key.pem ./fhir-cert.pem > combined.pem\n+openssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password -passout pass:change-password\n+\n+# Import the pkcs12 cert into a new keystore\n+keytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 -destkeystore nats.client.keystore.p12 -srcstorepass change-password -deststorepass change-password\n+\n+# Import the CA cert into the keystore & clean up\n+keytool -keystore nats.client.keystore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt\n+rm cert.p12 combined.pem  \n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzUxMA==", "bodyText": "i think this suggestion hit a bug with the github suggestion feature...the second ``` closed the suggestion", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417467510", "createdAt": "2020-04-29T16:56:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,57 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+## Test NATS Notifications\n+Manually invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber` and POST or PUT a patient record to the IBM FHIR Server to test the NATS notification module.\n+\n+## Use TLS (Advanced)\n+To use TLS (which you must do if your NATS streaming cluster requires TLS) set \"useTLS\" to true in fhir-server-config.json and provide client truststore and keystore locations and passwords as the remaining config values.  Furthermore, to use TLS to connect to a NATS cluster, that NATS cluster must be enabled to use TLS.  The example above does not use TLS.\n+\n+### Create a truststore and keystore\n+\n+On MacOS, install the [mkcert tool](https://github.com/FiloSottile/mkcert) with `brew install mkcert`, then follow these steps to create a Java keystore and truststore for use with NATS.  You also need Java keytool and openssl installed. Set change-password to be any value. \n+\n+```shell\n+# Install the CA locally\n+./mkcert -install \n+ \n+# Create the cert to use for the IBM FHIR Server client connection\n+./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n+\n+# Create the java trust store\n+keytool -keystore nats.client.truststore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt -storetype pkcs12\n+\n+# Convert the cert from .pem to pkcs12\n+cat ./fhir-key.pem ./fhir-cert.pem > combined.pem\n+openssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password -passout pass:change-password\n+\n+# Import the pkcs12 cert into a new keystore\n+keytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 -destkeystore nats.client.keystore.p12 -srcstorepass change-password -deststorepass change-password\n+\n+# Import the CA cert into the keystore & clean up\n+keytool -keystore nats.client.keystore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt\n+rm cert.p12 combined.pem  \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODAyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4ODAwMA==", "bodyText": "i manually applied the suggested change", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417988000", "createdAt": "2020-04-30T12:56:02Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/README.MD", "diffHunk": "@@ -0,0 +1,57 @@\n+# fhir-notification-nats\n+\n+The fhir-notification-nats module is designed to publish patient records to a [NATS](http://nats.io) streaming cluster for pub/sub, so published patient records can be consumed by designated downstream applications.  \n+\n+## Configure IBM FHIR\n+In fhir-server/liberty-config/config/default/fhir-server-config.json, find the default NATS configuration shown here:  \n+\n+```json\n+    \"nats\": {\n+        \"enabled\": false,\n+        \"cluster\": \"nats-streaming\",\n+        \"channel\": \"fhirNotifications\",\n+        \"clientId\": \"fhir-server\",\n+        \"servers\": \"nats://nats-node1:4222,nats://nats-node2:4222,nats://nats-node3:4222\",\n+        \"useTLS\": false,\n+        \"truststoreLocation\": \"resources/security/nats.client.truststore.p12\",\n+        \"truststorePassword\": \"change-password\",\n+        \"keystoreLocation\": \"resources/security/nats.client.keystore.p12\",\n+        \"keystorePassword\": \"change-password\"\n+    }\n+```\n+ \n+Set \"enabled\" to true and provide the name of your NATS cluster for the value of \"cluster\".  You can leave \"channel\" and \"clientId\" as defined.  Provide the URL for one or more NATS servers as the value for \"servers\". See the \"Use TLS\" section below for a discussion of the TLS settings, if required.  \n+\n+## Test NATS Notifications\n+Manually invoke fhir-server-test/src/test/nodejs/nats-subscriber.js via `node nats-subscriber` and POST or PUT a patient record to the IBM FHIR Server to test the NATS notification module.\n+\n+## Use TLS (Advanced)\n+To use TLS (which you must do if your NATS streaming cluster requires TLS) set \"useTLS\" to true in fhir-server-config.json and provide client truststore and keystore locations and passwords as the remaining config values.  Furthermore, to use TLS to connect to a NATS cluster, that NATS cluster must be enabled to use TLS.  The example above does not use TLS.\n+\n+### Create a truststore and keystore\n+\n+On MacOS, install the [mkcert tool](https://github.com/FiloSottile/mkcert) with `brew install mkcert`, then follow these steps to create a Java keystore and truststore for use with NATS.  You also need Java keytool and openssl installed. Set change-password to be any value. \n+\n+```shell\n+# Install the CA locally\n+./mkcert -install \n+ \n+# Create the cert to use for the IBM FHIR Server client connection\n+./mkcert -cert-file fhir-cert.pem -key-file fhir-key.pem localhost 127.0.0.1. \n+\n+# Create the java trust store\n+keytool -keystore nats.client.truststore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt -storetype pkcs12\n+\n+# Convert the cert from .pem to pkcs12\n+cat ./fhir-key.pem ./fhir-cert.pem > combined.pem\n+openssl pkcs12 -export -in combined.pem -out cert.p12 -passin pass:change-password -passout pass:change-password\n+\n+# Import the pkcs12 cert into a new keystore\n+keytool -importkeystore -srckeystore cert.p12 -srcstoretype pkcs12 -deststoretype pkcs12 -destkeystore nats.client.keystore.p12 -srcstorepass change-password -deststorepass change-password\n+\n+# Import the CA cert into the keystore & clean up\n+keytool -keystore nats.client.keystore.p12 -alias CARoot -import -file ./rootCA.pem -storepass change-password -noprompt\n+rm cert.p12 combined.pem  \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODAyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM4NjUwOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/nodejs/package.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyOToyNlrOGOHFkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyOToyNlrOGOHFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0OTM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"description\": \"A nats.js subscriber for IBM FHIR notifications\",\n          \n          \n            \n                \"description\": \"A nats.js subscriber for IBM FHIR Server notifications\",", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417449361", "createdAt": "2020-04-29T16:29:26Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/nodejs/package.json", "diffHunk": "@@ -0,0 +1,9 @@\n+{\n+    \"name\": \"nats-subscriber\",\n+    \"version\": \"1.0.0\",\n+    \"description\": \"A nats.js subscriber for IBM FHIR notifications\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM5MTMxOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozMDozNlrOGOHIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoxNzo1N1rOGOwovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            stan.on('connect', function () {\n          \n          \n            \n              console.log('Waiting for incoming messages...Ctrl-C to exit');\n          \n          \n            \n              let opts = stan.subscriptionOptions().setStartWithLastReceived()\n          \n          \n            \n              subscription = stan.subscribe('FHIRNotificationEvent', opts)\n          \n          \n            \n              subscription.on('message', function (msg) {\n          \n          \n            \n                console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n          \n          \n            \n              })\n          \n          \n            \n            })\n          \n          \n            \n            \n          \n          \n            \n            stan.on('close', function() {\n          \n          \n            \n              process.exit()\n          \n          \n            \n            })\n          \n          \n            \n            \n          \n          \n            \n            function cleanup() {\n          \n          \n            \n              subscription.unsubscribe();\n          \n          \n            \n              subscription.on('unsubscribed', function() {\n          \n          \n            \n                console.log('\\nUnsubscribed and closing connection');\n          \n          \n            \n                stan.close();\n          \n          \n            \n              })\n          \n          \n            \n            }\n          \n          \n            \n            stan.on('connect', function () {\n          \n          \n            \n              console.log('Waiting for incoming messages...Ctrl-C to exit')\n          \n          \n            \n              let opts = stan.subscriptionOptions().setStartWithLastReceived()\n          \n          \n            \n              subscription = stan.subscribe('FHIRNotificationEvent', opts)\n          \n          \n            \n              subscription.on('message', function (msg) {\n          \n          \n            \n                console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData())\n          \n          \n            \n              })\n          \n          \n            \n            })\n          \n          \n            \n            \n          \n          \n            \n            stan.on('close', function() {\n          \n          \n            \n              process.exit()\n          \n          \n            \n            })\n          \n          \n            \n            \n          \n          \n            \n            function cleanup() {\n          \n          \n            \n              subscription.unsubscribe()\n          \n          \n            \n              subscription.on('unsubscribed', function() {\n          \n          \n            \n                console.log('\\nUnsubscribed and closing connection')\n          \n          \n            \n                stan.close()\n          \n          \n            \n              })\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nconsistency on the line endings", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417450127", "createdAt": "2020-04-29T16:30:36Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjU4Nw==", "bodyText": "we don't have any code style recommendations for javascript...this is our first one :-)\nthat said, I agree it should be internally consistent if possible.\npersonally, i prefer to always have the ; at the end...mostly because i don't care to think about the cases where its needed vs not needed", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417462587", "createdAt": "2020-04-29T16:49:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTgwNA==", "bodyText": "as do I, I think it should be consistent.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417465804", "createdAt": "2020-04-29T16:54:24Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MDg0Mw==", "bodyText": "I learned to give up the ';' on my last project, but it was tough.  Looks like a couple snuck in here anyway, but my goal was to not use any.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417470843", "createdAt": "2020-04-29T17:01:58Z", "author": {"login": "ccorley"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNTI4MA==", "bodyText": "I ended up adding the ';' in everywhere to address paul's comment.  I'd also be fine with removing them all, but I didn't see your comment until I had already added them.  :-)", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r418125280", "createdAt": "2020-04-30T16:10:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMDEwOQ==", "bodyText": "That's fine and probably what most will be comfortable with.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r418130109", "createdAt": "2020-04-30T16:17:57Z", "author": {"login": "ccorley"}, "path": "fhir-server-test/src/test/nodejs/nats-subscriber.js", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env node\n+\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+\"use-strict\";\n+\n+var server = 'nats://127.0.0.1:4222'\n+var stan = require('node-nats-streaming').connect('nats-streaming', 'nats-subscriber', server);\n+var subscription\n+\n+stan.on('connect', function () {\n+  console.log('Waiting for incoming messages...Ctrl-C to exit');\n+  let opts = stan.subscriptionOptions().setStartWithLastReceived()\n+  subscription = stan.subscribe('FHIRNotificationEvent', opts)\n+  subscription.on('message', function (msg) {\n+    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getSubject() + ' ' + msg.getData());\n+  })\n+})\n+\n+stan.on('close', function() {\n+  process.exit()\n+})\n+\n+function cleanup() {\n+  subscription.unsubscribe();\n+  subscription.on('unsubscribed', function() {\n+    console.log('\\nUnsubscribed and closing connection');\n+    stan.close();\n+  })\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDEyNw=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzM5NTA0OnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config/config/default/fhir-server-config-db2.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozMTozMVrOGOHK_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0NzoxMFrOGOHyaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDc1MA==", "bodyText": "do we want to default to this for all? or selectively change it for the build?", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417450750", "createdAt": "2020-04-29T16:31:31Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-db2.json", "diffHunk": "@@ -9,6 +9,56 @@\n             \"checkReferenceTypes\": true,\n             \"conditionalDeleteMaxNumber\": 10\n         },\n+        \"notifications\": {\n+            \"common\": {\n+                \"__comment_includeResourceTypes\": [\n+                    \"QuestionnaireResponse\",\n+                    \"CarePlan\",\n+                    \"MedicationAdministration\",\n+                    \"Device\",\n+                    \"DeviceComponent\",\n+                    \"DeviceMetric\",\n+                    \"MedicationOrder\",\n+                    \"Observation\"\n+                ]\n+            },\n+            \"websocket\": {\n+                \"enabled\": true\n+            },\n+            \"kafka\": {\n+                \"enabled\": false,\n+                \"topicName\": \"fhirNotifications\",\n+                \"connectionProperties\": {\n+                    \"group.id\": \"securing-kafka-group\",\n+                    \"bootstrap.servers\": \"localhost:9093\",\n+                    \"security.protocol\": \"SSL\",\n+                    \"ssl.truststore.location\": \"resources/security/kafka.client.truststore.p12\",\n+                    \"ssl.truststore.password\": \"change-password\",\n+                    \"ssl.keystore.location\": \"resources/security/kafka.client.keystore.p12\",\n+                    \"ssl.keystore.password\": \"change-password\",\n+                    \"ssl.key.password\": \"change-password\",\n+                    \"ssl.truststore.type\": \"PKCS12\",\n+                    \"ssl.keystore.type\": \"PKCS12\",\n+                    \"acks\": \"all\",\n+                    \"retries\": \"60\",\n+                    \"request.timeout.ms\": \"10000\",\n+                    \"max.block.ms\": \"60000\",\n+                    \"max.in.flight.requests.per.connection\": \"5\"\n+                }\n+            },\n+            \"nats\": {\n+                \"enabled\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MDQ3OQ==", "bodyText": "fhir-server-config-db2.json is the config used in our CI, so thats where I enabled it.  originally i had introduced a separate fhir-server-config-nats.json (and was gonna have a separate job for it in github actions), but I decided just to combine it with fhir-server-config-db2.json instead.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417460479", "createdAt": "2020-04-29T16:46:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-db2.json", "diffHunk": "@@ -9,6 +9,56 @@\n             \"checkReferenceTypes\": true,\n             \"conditionalDeleteMaxNumber\": 10\n         },\n+        \"notifications\": {\n+            \"common\": {\n+                \"__comment_includeResourceTypes\": [\n+                    \"QuestionnaireResponse\",\n+                    \"CarePlan\",\n+                    \"MedicationAdministration\",\n+                    \"Device\",\n+                    \"DeviceComponent\",\n+                    \"DeviceMetric\",\n+                    \"MedicationOrder\",\n+                    \"Observation\"\n+                ]\n+            },\n+            \"websocket\": {\n+                \"enabled\": true\n+            },\n+            \"kafka\": {\n+                \"enabled\": false,\n+                \"topicName\": \"fhirNotifications\",\n+                \"connectionProperties\": {\n+                    \"group.id\": \"securing-kafka-group\",\n+                    \"bootstrap.servers\": \"localhost:9093\",\n+                    \"security.protocol\": \"SSL\",\n+                    \"ssl.truststore.location\": \"resources/security/kafka.client.truststore.p12\",\n+                    \"ssl.truststore.password\": \"change-password\",\n+                    \"ssl.keystore.location\": \"resources/security/kafka.client.keystore.p12\",\n+                    \"ssl.keystore.password\": \"change-password\",\n+                    \"ssl.key.password\": \"change-password\",\n+                    \"ssl.truststore.type\": \"PKCS12\",\n+                    \"ssl.keystore.type\": \"PKCS12\",\n+                    \"acks\": \"all\",\n+                    \"retries\": \"60\",\n+                    \"request.timeout.ms\": \"10000\",\n+                    \"max.block.ms\": \"60000\",\n+                    \"max.in.flight.requests.per.connection\": \"5\"\n+                }\n+            },\n+            \"nats\": {\n+                \"enabled\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDc1MA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MDg0Mw==", "bodyText": "fhir-server-config.json still has nats disabled by default", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417460843", "createdAt": "2020-04-29T16:47:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-db2.json", "diffHunk": "@@ -9,6 +9,56 @@\n             \"checkReferenceTypes\": true,\n             \"conditionalDeleteMaxNumber\": 10\n         },\n+        \"notifications\": {\n+            \"common\": {\n+                \"__comment_includeResourceTypes\": [\n+                    \"QuestionnaireResponse\",\n+                    \"CarePlan\",\n+                    \"MedicationAdministration\",\n+                    \"Device\",\n+                    \"DeviceComponent\",\n+                    \"DeviceMetric\",\n+                    \"MedicationOrder\",\n+                    \"Observation\"\n+                ]\n+            },\n+            \"websocket\": {\n+                \"enabled\": true\n+            },\n+            \"kafka\": {\n+                \"enabled\": false,\n+                \"topicName\": \"fhirNotifications\",\n+                \"connectionProperties\": {\n+                    \"group.id\": \"securing-kafka-group\",\n+                    \"bootstrap.servers\": \"localhost:9093\",\n+                    \"security.protocol\": \"SSL\",\n+                    \"ssl.truststore.location\": \"resources/security/kafka.client.truststore.p12\",\n+                    \"ssl.truststore.password\": \"change-password\",\n+                    \"ssl.keystore.location\": \"resources/security/kafka.client.keystore.p12\",\n+                    \"ssl.keystore.password\": \"change-password\",\n+                    \"ssl.key.password\": \"change-password\",\n+                    \"ssl.truststore.type\": \"PKCS12\",\n+                    \"ssl.keystore.type\": \"PKCS12\",\n+                    \"acks\": \"all\",\n+                    \"retries\": \"60\",\n+                    \"request.timeout.ms\": \"10000\",\n+                    \"max.block.ms\": \"60000\",\n+                    \"max.in.flight.requests.per.connection\": \"5\"\n+                }\n+            },\n+            \"nats\": {\n+                \"enabled\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDc1MA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQwODQ1OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozNDo1MFrOGOHTLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1NzowNFrOGOoAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1Mjg0NQ==", "bodyText": "this is system specific and not tenant specific.  Best to change the docs to reflect that.\nI also suggest using a seamless naming convention, truststore-pw and truststore_pwd are different names.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417452845", "createdAt": "2020-04-29T16:34:50Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +142,32 @@ public void contextInitialized(ServletContextEvent event) {\n                 log.info(\"Bypassing Kafka notification init.\");\n             }\n \n+            // If NATS notifications are enabled, start up our NATS notification publisher.\n+            Boolean natsEnabled = fhirConfig.getBooleanProperty(PROPERTY_NATS_ENABLED, Boolean.FALSE);\n+            if (natsEnabled) {\n+                // Retrieve the cluster ID.\n+                String clusterId = fhirConfig.getStringProperty(PROPERTY_NATS_CLUSTER, DEFAULT_NATS_CLUSTER);\n+                // Retrieve the channel name.\n+                String channelName = fhirConfig.getStringProperty(PROPERTY_NATS_CHANNEL, DEFAULT_NATS_CHANNEL);\n+                // Retrieve the NATS client ID.\n+                String clientId = fhirConfig.getStringProperty(PROPERTY_NATS_CLIENT, DEFAULT_NATS_CLIENT);\n+                // Retrieve the server URL.\n+                String servers = fhirConfig.getStringProperty(PROPERTY_NATS_SERVERS);\n+\n+                // Gather up the NATS TLS properties.\n+                Properties tlsProps = new Properties();\n+                tlsProps.setProperty(\"useTLS\", fhirConfig.getBooleanProperty(PROPERTY_NATS_TLS_ENABLED).toString());\n+                tlsProps.setProperty(\"truststore\", fhirConfig.getStringProperty(PROPERTY_NATS_TRUSTSTORE));\n+                tlsProps.setProperty(\"truststore-pw\", fhirConfig.getStringProperty(PROPERTY_NATS_TRUSTSTORE_PW));\n+                tlsProps.setProperty(\"keystore\", fhirConfig.getStringProperty(PROPERTY_NATS_KEYSTORE));\n+                tlsProps.setProperty(\"keystore-pw\", fhirConfig.getStringProperty(PROPERTY_NATS_KEYSTORE_PW));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4ODcxNg==", "bodyText": "docs are updated.  naming can be addressed at some future date if needed.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417988716", "createdAt": "2020-04-30T12:57:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +142,32 @@ public void contextInitialized(ServletContextEvent event) {\n                 log.info(\"Bypassing Kafka notification init.\");\n             }\n \n+            // If NATS notifications are enabled, start up our NATS notification publisher.\n+            Boolean natsEnabled = fhirConfig.getBooleanProperty(PROPERTY_NATS_ENABLED, Boolean.FALSE);\n+            if (natsEnabled) {\n+                // Retrieve the cluster ID.\n+                String clusterId = fhirConfig.getStringProperty(PROPERTY_NATS_CLUSTER, DEFAULT_NATS_CLUSTER);\n+                // Retrieve the channel name.\n+                String channelName = fhirConfig.getStringProperty(PROPERTY_NATS_CHANNEL, DEFAULT_NATS_CHANNEL);\n+                // Retrieve the NATS client ID.\n+                String clientId = fhirConfig.getStringProperty(PROPERTY_NATS_CLIENT, DEFAULT_NATS_CLIENT);\n+                // Retrieve the server URL.\n+                String servers = fhirConfig.getStringProperty(PROPERTY_NATS_SERVERS);\n+\n+                // Gather up the NATS TLS properties.\n+                Properties tlsProps = new Properties();\n+                tlsProps.setProperty(\"useTLS\", fhirConfig.getBooleanProperty(PROPERTY_NATS_TLS_ENABLED).toString());\n+                tlsProps.setProperty(\"truststore\", fhirConfig.getStringProperty(PROPERTY_NATS_TRUSTSTORE));\n+                tlsProps.setProperty(\"truststore-pw\", fhirConfig.getStringProperty(PROPERTY_NATS_TRUSTSTORE_PW));\n+                tlsProps.setProperty(\"keystore\", fhirConfig.getStringProperty(PROPERTY_NATS_KEYSTORE));\n+                tlsProps.setProperty(\"keystore-pw\", fhirConfig.getStringProperty(PROPERTY_NATS_KEYSTORE_PW));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1Mjg0NQ=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQxMTczOnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozNTo0NVrOGOHVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1ODowN1rOGOoCzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MzQwMQ==", "bodyText": "break this out, or put in a nested class.\nThis breaks some static source code analysis tools.\nThe Extension doesn't make sense to me here.\nThe best step is just to make this private methods in the class.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417453401", "createdAt": "2020-04-29T16:35:45Z", "author": {"login": "prb112"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}\n+\n+/* \n+* Modified from original NATS documentation @ https://docs.nats.io/developing-with-nats/security/tls\n+*\n+* openssl is used to generate a pkcs12 file (.p12) from client-cert.pem and client-key.pem.\n+* The resulting file is then imported into a java keystore using keytool which is part of java jdk.\n+* keytool is also used to import the CA certificate rootCA.pem into the truststore.  \n+*/\n+class SSLUtils extends FHIRNotificationNATSPublisher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4OTMyNQ==", "bodyText": "Paul mentioned this one was addressed.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417989325", "createdAt": "2020-04-30T12:58:07Z", "author": {"login": "lmsurpre"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}\n+\n+/* \n+* Modified from original NATS documentation @ https://docs.nats.io/developing-with-nats/security/tls\n+*\n+* openssl is used to generate a pkcs12 file (.p12) from client-cert.pem and client-key.pem.\n+* The resulting file is then imported into a java keystore using keytool which is part of java jdk.\n+* keytool is also used to import the CA certificate rootCA.pem into the truststore.  \n+*/\n+class SSLUtils extends FHIRNotificationNATSPublisher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MzQwMQ=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODE2ODY5OnYy", "diffSide": "RIGHT", "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDowMTowOVrOGOO1sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDowMTo0MlrOGOO2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NjM3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n                /*\n          \n          \n            \n                 * Modified from original NATS documentation @ https://docs.nats.io/developing-with-nats/security/tls\n          \n          \n            \n                 * openssl is used to generate a pkcs12 file (.p12) from client-cert.pem and client-key.pem.\n          \n          \n            \n                 * The resulting file is then imported into a java keystore using keytool which is part of java jdk.\n          \n          \n            \n                 * keytool is also used to import the CA certificate rootCA.pem into the truststore.\n          \n          \n            \n                 */\n          \n          \n            \n                private static KeyStore loadKeystore(String path, String password) throws Exception {\n          \n          \n            \n                    KeyStore store = KeyStore.getInstance(\"PKCS12\");\n          \n          \n            \n                    try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(path));) {\n          \n          \n            \n                        store.load(in, password.toCharArray());\n          \n          \n            \n                    }\n          \n          \n            \n                    return store;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static KeyManager[] createKeyManagers(Properties tlsProps) throws Exception {\n          \n          \n            \n                    KeyStore store = loadKeystore(tlsProps.getProperty(\"keystore\"), tlsProps.getProperty(\"keystore-pw\"));\n          \n          \n            \n                    KeyManagerFactory factory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n          \n          \n            \n                    factory.init(store, tlsProps.getProperty(\"keystore-pw\").toCharArray());\n          \n          \n            \n                    return factory.getKeyManagers();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static TrustManager[] createTrustManagers(Properties tlsProps) throws Exception {\n          \n          \n            \n                    KeyStore store = loadKeystore(tlsProps.getProperty(\"truststore\"), tlsProps.getProperty(\"truststore-pw\"));\n          \n          \n            \n                    TrustManagerFactory factory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n          \n          \n            \n                    factory.init(store);\n          \n          \n            \n                    return factory.getTrustManagers();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static SSLContext createSSLContext(Properties tlsProps) throws Exception {\n          \n          \n            \n                    SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n          \n          \n            \n                    ctx.init(createKeyManagers(tlsProps), createTrustManagers(tlsProps), new SecureRandom());\n          \n          \n            \n                    return ctx;\n          \n          \n            \n                }\n          \n          \n            \n            }", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417576370", "createdAt": "2020-04-29T20:01:09Z", "author": {"login": "prb112"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NjY5Nw==", "bodyText": "I tried doing a wider edit, but ran into github comments issues.  apologies for deleting another one.\nThis should address my concerns.", "url": "https://github.com/IBM/FHIR/pull/973#discussion_r417576697", "createdAt": "2020-04-29T20:01:42Z", "author": {"login": "prb112"}, "path": "fhir-notification-nats/src/main/java/com/ibm/fhir/notifications/nats/impl/FHIRNotificationNATSPublisher.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.notifications.nats.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.nats.client.Connection;\n+import io.nats.client.Nats;\n+import io.nats.streaming.AckHandler;\n+import io.nats.streaming.NatsStreaming;\n+import io.nats.streaming.Options;\n+import io.nats.streaming.StreamingConnection;\n+import io.nats.streaming.StreamingConnectionFactory;\n+\n+import com.ibm.fhir.notification.FHIRNotificationEvent;\n+import com.ibm.fhir.notification.FHIRNotificationService;\n+import com.ibm.fhir.notification.FHIRNotificationSubscriber;\n+import com.ibm.fhir.notification.exception.FHIRNotificationException;\n+import com.ibm.fhir.notification.util.FHIRNotificationUtil;\n+\n+/**\n+ * This class implements the FHIR server notification service via a NATS channel.\n+ */\n+public class FHIRNotificationNATSPublisher implements FHIRNotificationSubscriber {\n+    private static final Logger log = Logger.getLogger(FHIRNotificationNATSPublisher.class.getName());\n+    private static FHIRNotificationService service = FHIRNotificationService.getInstance();\n+\n+    private StreamingConnection sc = null;\n+    private AckHandler acb = null;\n+    private String channelName = null;\n+\n+    // \"Hide\" the default constructor.\n+    protected FHIRNotificationNATSPublisher() {\n+    }\n+\n+    public FHIRNotificationNATSPublisher(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"constructor\");\n+        try {\n+            init(clusterId, channelName, clientId, servers, tlsProps);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"constructor\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any required initialization to allow us to publish events to the channel.\n+     */\n+    private void init(String clusterId, String channelName, String clientId, String servers, Properties tlsProps) {\n+        log.entering(this.getClass().getName(), \"init\");\n+\n+        SSLContext ctx = null;\n+\n+        try {\n+            this.channelName = channelName;\n+            if (log.isLoggable(Level.FINER)) {\n+                log.finer(\"ClusterId: \" + clusterId);\n+                log.finer(\"Channel name: \" + channelName);\n+                log.finer(\"ClientId: \" + clientId);\n+                log.finer(\"Servers: \" + servers);\n+            }\n+\n+            // Make sure that the properties file contains the expected properties.\n+            if (clusterId == null || channelName == null || clientId == null || servers == null || servers.length() == 0) {\n+                throw new IllegalStateException(\"Config property missing from the NATS connection properties.\");\n+            }\n+\n+            if (Boolean.parseBoolean(tlsProps.getProperty(\"useTLS\"))) {\n+                // Make sure that the tls properties are set.\n+                if (tlsProps.getProperty(\"truststore\") == null || tlsProps.getProperty(\"truststore-pw\") == null || \n+                    tlsProps.getProperty(\"keystore\") == null || tlsProps.getProperty(\"keystore-pw\") == null) {\n+                    throw new IllegalStateException(\"TLS config property missing from the NATS connection properties.\");\n+                }\n+\n+                ctx = SSLUtils.createSSLContext(tlsProps);\n+            }\n+\n+            // Create the NATS client connection options\n+            io.nats.client.Options.Builder builder = new io.nats.client.Options.Builder();\n+            builder.maxReconnects(-1);\n+            builder.connectionName(channelName);\n+            builder.servers(servers.split(\",\"));\n+            if (ctx != null) {\n+                builder.sslContext(ctx);\n+            }\n+            io.nats.client.Options natsOptions = builder.build();\n+\n+            // Create the NATS connection and the streaming connection\n+            Connection nc = Nats.connect(natsOptions);\n+            Options streamingOptions = new Options.Builder().natsConn(nc).build();\n+            sc = NatsStreaming.connect(clusterId, clientId, streamingOptions);\n+\n+            // Create the publish callback\n+            acb = new AckHandler() {\n+                @Override\n+                public void onAck(String nuid, Exception ex) {\n+                    log.finer(\"Received ACK for guid: \" + nuid);\n+                    if (ex != null && log.isLoggable(Level.SEVERE)) {\n+                        log.log(Level.SEVERE, \"Error in server ack for guid \" + nuid + \": \" + ex.getMessage(), ex);\n+                    }\n+                }\n+            };\n+\n+            // Register this NATS implementation as a \"subscriber\" with our Notification Service.\n+            // This means that our \"notify\" method will be called when the server publishes an event.\n+            service.subscribe(this);\n+            log.info(\"Initialized NATS publisher for channel '\" + channelName + \"' using servers: '\" + servers + \"'.\");\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception while initializing NATS publisher.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"init\");\n+        }\n+    }\n+\n+    /**\n+     * Performs any necessary \"shutdown\" logic to disconnect from the channel.\n+     */\n+    public void shutdown() {\n+        log.entering(this.getClass().getName(), \"shutdown\");\n+\n+        try {\n+            if (log.isLoggable(Level.FINE)) {   \n+                log.fine(\"Shutting down NATS publisher for channel: '\" + channelName + \"'.\");\n+            }\n+            if (sc != null) {\n+               sc.close();\n+            }\n+        } catch (Throwable t) {\n+            String msg = \"Caught exception shutting down NATS publisher for channel: '\" + channelName + \"'.\";\n+            log.log(Level.SEVERE, msg, t);\n+            throw new IllegalStateException(msg, t);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"shutdown\");\n+        }\n+    }\n+\n+    /**\n+     * Publishes an event to NATS.\n+     */\n+    @Override\n+    public void notify(FHIRNotificationEvent event) throws FHIRNotificationException {\n+        log.entering(this.getClass().getName(), \"notify\");\n+        String jsonString = null;\n+        try {\n+            jsonString = FHIRNotificationUtil.toJsonString(event, true);\n+\n+            if (log.isLoggable(Level.FINE)) { \n+                log.fine(\"Publishing NATS notification event to channel '\" + channelName + \"',\\nmessage: '\" + jsonString + \"'.\");\n+            }\n+            \n+            sc.publish(\"FHIRNotificationEvent\", jsonString.getBytes(), acb);\n+    \n+            if (log.isLoggable(Level.FINE)) {\n+                log.fine(\"Published NATS notification event to channel '\" + channelName + \"'\");\n+            }\n+        } catch (Throwable e) {\n+            String msg = buildNotificationErrorMessage(channelName, (jsonString == null ? \"<null>\" : jsonString));\n+            log.log(Level.SEVERE, msg , e);\n+            throw new FHIRNotificationException(msg, e);\n+        } finally {\n+            log.exiting(this.getClass().getName(), \"notify\");\n+        }\n+    }\n+    \n+    /**\n+     * Builds a formatted error message to indicate a notification publication failure.\n+     */\n+    private String buildNotificationErrorMessage(String channelName, String notificationEvent) {\n+        return String.format(\"NATS publication failure; channel '%s'\\nNotification event: '%s'\\n.\", channelName, notificationEvent);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NjM3MA=="}, "originalCommit": {"oid": "4d1f4c39f94ab7611db08b6066ac6e3478467163"}, "originalPosition": 188}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}