{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTE2MDYy", "number": 740, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMjozOFrODksA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTowNlrODkso-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzk2NDUzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMjozOFrOFxJdQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1NDoyNVrOFxLqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTQ5MQ==", "bodyText": "date\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387079491", "createdAt": "2020-03-03T15:02:38Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NDY4MQ==", "bodyText": "ha, good catch. will change", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387084681", "createdAt": "2020-03-03T15:10:19Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTQ5MQ=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNTUyNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387115527", "createdAt": "2020-03-03T15:54:25Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTQ5MQ=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzk3NDgzOnYy", "diffSide": "RIGHT", "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTowMlrOFxJjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxODo0MVrOFxKIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTA4OA==", "bodyText": "it's not really an override? it's a specific implementation", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387081088", "createdAt": "2020-03-03T15:05:02Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -767,15 +768,16 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+                    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODgzMA==", "bodyText": "en... interesting... this was not added by me, let me try to remove it and see", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387088830", "createdAt": "2020-03-03T15:16:13Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -767,15 +768,16 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTA4OA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDYwMA==", "bodyText": "can not be removed, it's always be added back automatically. and the function is abstract, so seems have to override.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387090600", "createdAt": "2020-03-03T15:18:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -767,15 +768,16 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTA4OA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzk3ODAyOnYy", "diffSide": "RIGHT", "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTo0M1rOFxJlcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxMTozNVrOFxJ07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTU4Ng==", "bodyText": "addRequestHeaders - where does this come from what does it do?", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387081586", "createdAt": "2020-03-03T15:05:43Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -452,10 +452,11 @@ public FHIRResponse searchAll(FHIRParameters parameters, boolean isPost, FHIRReq\n         } else {\n             endpoint = endpoint.path(\"_search\");\n             builder = endpoint.request(getDefaultMimeType());\n+            builder = addRequestHeaders(builder, headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NTU1MA==", "bodyText": "this is used for adding the tenant and datastore headers.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387085550", "createdAt": "2020-03-03T15:11:35Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -452,10 +452,11 @@ public FHIRResponse searchAll(FHIRParameters parameters, boolean isPost, FHIRReq\n         } else {\n             endpoint = endpoint.path(\"_search\");\n             builder = endpoint.request(getDefaultMimeType());\n+            builder = addRequestHeaders(builder, headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTU4Ng=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODAyMzQzOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxNTo1OFrOFxKA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1NDowNVrOFxLpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA==", "bodyText": "Should the test be renamed to indicate that it is testing a different tenant?", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387088634", "createdAt": "2020-03-03T15:15:58Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODk2OA==", "bodyText": "maybe event a comment explaining what is happening", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387088968", "createdAt": "2020-03-03T15:16:24Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MjUzOA==", "bodyText": "I wanted to just enable it for tenant specific test, but I don't want to change the default behavior - testing the default ds of the default tenant.    I just want to change the tenant in my local to do some simple performance tests against my test tenants.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387092538", "createdAt": "2020-03-03T15:21:35Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mjk5NA==", "bodyText": "good point, let me add comments", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387092994", "createdAt": "2020-03-03T15:22:13Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNTMyMA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387115320", "createdAt": "2020-03-03T15:54:05Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA1MTUzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjowNlrOFxKRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNDoxNlrOFxKYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MjkyNw==", "bodyText": "I don't think this is necessary... Let it naturally fall out.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387092927", "createdAt": "2020-03-03T15:22:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            long end = System.nanoTime();\n+            logger.info(String.format(\"Total Resources: %d, Took: %6.3f seconds\", totalNum, (end-start)/NANOS));\n+        }\n+        catch (Exception x) {\n+            logger.log(Level.SEVERE, \"Failed to run\", x);\n+        }\n+        finally {\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDYyNA==", "bodyText": "I added this on purpose for running inside eclipse, without this, in my tests, eclipse always shows the app is not finished - very annoying.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387094624", "createdAt": "2020-03-03T15:24:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            long end = System.nanoTime();\n+            logger.info(String.format(\"Total Resources: %d, Took: %6.3f seconds\", totalNum, (end-start)/NANOS));\n+        }\n+        catch (Exception x) {\n+            logger.log(Level.SEVERE, \"Failed to run\", x);\n+        }\n+        finally {\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MjkyNw=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA1MzU3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjozNVrOFxKTCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1Mzo0MVrOFxLoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MzI1OQ==", "bodyText": "Use a logger", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387093259", "createdAt": "2020-03-03T15:22:35Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNTA0NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387115045", "createdAt": "2020-03-03T15:53:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MzI1OQ=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA2MzM0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNDoyMVrOFxKYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1MzozMVrOFxLnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDY4NA==", "bodyText": "There are a lot of System.exits here... .throw an exception, and handle one time.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387094684", "createdAt": "2020-03-03T15:24:21Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwNDMxMQ==", "bodyText": "make sense", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387104311", "createdAt": "2020-03-03T15:38:07Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDY4NA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNDkzOA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387114938", "createdAt": "2020-03-03T15:53:31Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDY4NA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA2NzEzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTowNlrOFxKa1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1MzoyMFrOFxLnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTI1NA==", "bodyText": "Elaborate as to why it's being done, and what the case for using it is... recommendation, not a requirement of the review.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387095254", "createdAt": "2020-03-03T15:25:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTYyMA==", "bodyText": "let me add comments", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387099620", "createdAt": "2020-03-03T15:31:08Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTI1NA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNDc4Mw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387114783", "createdAt": "2020-03-03T15:53:20Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTI1NA=="}, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 273, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}