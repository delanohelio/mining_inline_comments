{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODQyNzU4", "number": 1030, "title": "issue #945 Add SPs support to PostgreSql and enable paremeterNameId and codesystemId caches", "bodyText": "To improve postgresql and derby performance:\n(1) Enabled store procedure for postgresql.\n(2) Enhanced schema tool to support stored procedure for postgresql.\n(3) Updated readme of the schema tool with stored procedure support for postgresql.\n(4) Enabled ParameterNameId cache and CodeSystemId cache for both postgresql and derby.\nPer test results, the bulkdata import rate doubled after enabling SPs, and enabling the caches increased the rate to another five times. so totally it performs at least 10 times better now.", "createdAt": "2020-05-06T02:18:30Z", "url": "https://github.com/IBM/FHIR/pull/1030", "merged": true, "mergeCommit": {"oid": "e5e8a50e951b526f7643adca6e00d9df221275c9"}, "closed": true, "closedAt": "2020-05-08T00:04:28Z", "author": {"login": "albertwang-ibm"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceANmgAH2gAyNDEzODQyNzU4OjMzNWJkYWYxZTg1MDY5NWE5ZjRlNDhlZGUwNjgzNjVhZjU3ZmEwOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfCZgKAH2gAyNDEzODQyNzU4OmNlZGZmZGQwZGYzZmUxN2FjNGQ2YmIxNmZkNWNhOTY0N2IxOWEwNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "335bdaf1e850695a9f4e48ede068365af57fa093", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/335bdaf1e850695a9f4e48ede068365af57fa093", "committedDate": "2020-05-04T14:18:40Z", "message": "Merge pull request #1017 from IBM/issue-945\n\nIssue 945"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27dc620d90c6831fe50ad359b89404a558fa84f9", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/27dc620d90c6831fe50ad359b89404a558fa84f9", "committedDate": "2020-05-06T00:26:10Z", "message": "Merge branch 'albert-master' into issue-945"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d14972b64e0253241270f3bd58dc1be318dd31bc", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/d14972b64e0253241270f3bd58dc1be318dd31bc", "committedDate": "2020-05-06T00:26:22Z", "message": "Merge pull request #1028 from IBM/issue-945\n\nIssue 945"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/b7ab6c3e372bbdc19b7224fb24966c4e461154c6", "committedDate": "2020-05-06T02:17:25Z", "message": "issue #945 SP support for postgresql inital code drop\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTE5MDY2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406519066", "createdAt": "2020-05-06T11:23:50Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMzo1MFrOGROhCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMzo1MFrOGROhCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxNjgxMQ==", "bodyText": "I do not think this should be in place of createOrReplaceProcedure.  There should be a new method for createOrReplaceFunction. Functions are a common db mechanism, I think this should remain as 153, and a new element for createOrReplaceFunction should be added.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420716811", "createdAt": "2020-05-06T11:23:50Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -150,7 +150,22 @@ public void dropType(String schemaName, String typeName) {\n \n     @Override\n     public void createOrReplaceProcedure(String schemaName, String procedureName, Supplier<String> supplier) {\n-        warnOnce(MessageKey.CREATE_PROC, \"Create procedure not supported in PostgreSql\");\n+        final String objectName = DataDefinitionUtil.getQualifiedName(schemaName, procedureName);\n+        logger.info(\"Create or replace procedure \" + objectName);\n+\n+        // Build the create procedure DDL and apply it\n+        final StringBuilder ddl = new StringBuilder();\n+        ddl.append(\"CREATE OR REPLACE FUNCTION \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTE5NDA5", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406519409", "createdAt": "2020-05-06T11:24:25Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyNDoyNVrOGROiNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyNDoyNVrOGROiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxNzEwOA==", "bodyText": "what does the line separator get you, a pretty print?", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420717108", "createdAt": "2020-05-06T11:24:25Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -150,7 +150,22 @@ public void dropType(String schemaName, String typeName) {\n \n     @Override\n     public void createOrReplaceProcedure(String schemaName, String procedureName, Supplier<String> supplier) {\n-        warnOnce(MessageKey.CREATE_PROC, \"Create procedure not supported in PostgreSql\");\n+        final String objectName = DataDefinitionUtil.getQualifiedName(schemaName, procedureName);\n+        logger.info(\"Create or replace procedure \" + objectName);\n+\n+        // Build the create procedure DDL and apply it\n+        final StringBuilder ddl = new StringBuilder();\n+        ddl.append(\"CREATE OR REPLACE FUNCTION \");\n+        ddl.append(objectName);\n+        ddl.append(System.lineSeparator());\n+        ddl.append(supplier.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIxNTcz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406521573", "createdAt": "2020-05-06T11:27:57Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyNzo1N1rOGROohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyNzo1N1rOGROohQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxODcyNQ==", "bodyText": "merge 73, 74 to oneline", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420718725", "createdAt": "2020-05-06T11:27:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIxNjcz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406521673", "createdAt": "2020-05-06T11:28:05Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODowNlrOGROoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODowNlrOGROoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxODc4OQ==", "bodyText": "merge to one line", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420718789", "createdAt": "2020-05-06T11:28:06Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIxODQ0", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406521844", "createdAt": "2020-05-06T11:28:22Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODoyMlrOGROpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODoyMlrOGROpYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxODk0NQ==", "bodyText": "merge to oneline", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420718945", "createdAt": "2020-05-06T11:28:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return systemId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param codeSystem\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getCodeSystemId(String codeSystem) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {\n+        final String METHODNAME = \"cleanup(PreparedStatement, Connection)\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql1 = \"SELECT code_system_id FROM code_systems WHERE code_system_name = ?\";\n+        FHIRPersistenceDBCleanupException ce;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql1)) {\n-            stmt.setString(1, codeSystem);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n+        if (stmt != null) {\n+            try {\n+                stmt.close();\n             }\n-            else {\n-                result = null;\n+            catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIxOTM0", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406521934", "createdAt": "2020-05-06T11:28:31Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODozMVrOGROppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyODozMVrOGROppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxOTAxNQ==", "bodyText": "merge to oneline", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420719015", "createdAt": "2020-05-06T11:28:31Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return systemId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param codeSystem\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getCodeSystemId(String codeSystem) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {\n+        final String METHODNAME = \"cleanup(PreparedStatement, Connection)\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql1 = \"SELECT code_system_id FROM code_systems WHERE code_system_name = ?\";\n+        FHIRPersistenceDBCleanupException ce;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql1)) {\n-            stmt.setString(1, codeSystem);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n+        if (stmt != null) {\n+            try {\n+                stmt.close();\n             }\n-            else {\n-                result = null;\n+            catch (Throwable e) {\n+                ce =  new FHIRPersistenceDBCleanupException(\"Failure closing PreparedStatement.\",e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);\n             }\n         }\n-        catch (SQLException e) {\n-            throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n+        if(connection != null && this.getConnection() == null) {\n+            try {\n+                connection.close();\n+            }\n+            catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIyNjIw", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406522620", "createdAt": "2020-05-06T11:29:33Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyOTozM1rOGROrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyOTozM1rOGROrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxOTU2NQ==", "bodyText": "Why are you forceabling closing this? It's part of a pool?", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420719565", "createdAt": "2020-05-06T11:29:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return systemId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param codeSystem\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getCodeSystemId(String codeSystem) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {\n+        final String METHODNAME = \"cleanup(PreparedStatement, Connection)\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql1 = \"SELECT code_system_id FROM code_systems WHERE code_system_name = ?\";\n+        FHIRPersistenceDBCleanupException ce;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql1)) {\n-            stmt.setString(1, codeSystem);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n+        if (stmt != null) {\n+            try {\n+                stmt.close();\n             }\n-            else {\n-                result = null;\n+            catch (Throwable e) {\n+                ce =  new FHIRPersistenceDBCleanupException(\"Failure closing PreparedStatement.\",e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);\n             }\n         }\n-        catch (SQLException e) {\n-            throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n+        if(connection != null && this.getConnection() == null) {\n+            try {\n+                connection.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIyNzE1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406522715", "createdAt": "2020-05-06T11:29:42Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyOTo0MlrOGROsJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyOTo0MlrOGROsJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxOTY1Mg==", "bodyText": "this method is confusing to me", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420719652", "createdAt": "2020-05-06T11:29:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +23,95 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_CODE_SYSTEM_ID, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, systemName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read code system id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n+                systemId = stmt.getInt(2);\n             }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n         }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return systemId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param codeSystem\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getCodeSystemId(String codeSystem) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTIzOTA5", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406523909", "createdAt": "2020-05-06T11:31:42Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMTo0MlrOGROvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMTo0MlrOGROvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMDU3OA==", "bodyText": "Add a different set and use the contains.\nCall it STORED_PROCEDURE_ENABLED and add to the set.\nThis is very hard to figure out if we constantly add.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420720578", "createdAt": "2020-05-06T11:31:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -638,7 +639,7 @@ protected void createFhirSchemas() {\n      * into the FHIR resource tables\n      */\n     protected void updateProcedures() {\n-        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType) || DbType.POSTGRESQL == dbType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI0NTY4", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406524568", "createdAt": "2020-05-06T11:32:46Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMjo0NlrOGROxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMjo0NlrOGROxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTA3Mg==", "bodyText": "this is a repeated pattern, I'd suggest adding a single helper method available to all classes.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420721072", "createdAt": "2020-05-06T11:32:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -651,7 +652,12 @@ protected void updateProcedures() {\n             try (Connection c = createConnection()) {\n                 try {\n                     JdbcTarget target = new JdbcTarget(c);\n-                    Db2Adapter adapter = new Db2Adapter(target);\n+                    IDatabaseAdapter adapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI0ODU1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406524855", "createdAt": "2020-05-06T11:33:14Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMzoxNFrOGROyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMzoxNFrOGROyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTI4NQ==", "bodyText": "same line", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420721285", "createdAt": "2020-05-06T11:33:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,101 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param parameterName\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_PARAMETER_NAME, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, parameterName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read/store parameter name id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n+                parameterNameId = stmt.getInt(2);\n             }\n         }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return parameterNameId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param parameterName\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getParameterId(String parameterName) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {\n+        final String METHODNAME = \"cleanup(PreparedStatement, Connection)\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql = \"SELECT parameter_name_id FROM parameter_names WHERE parameter_name = ?\";\n+        FHIRPersistenceDBCleanupException ce;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql)) {\n-            stmt.setString(1, parameterName);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n-            }  else {\n-                result = null;\n+        if (stmt != null) {\n+            try {\n+                stmt.close();\n+            }\n+            catch (Throwable e) {\n+                ce =  new FHIRPersistenceDBCleanupException(\"Failure closing PreparedStatement.\",e);\n+                log.log(Level.SEVERE, ce.getMessage(), ce);\n             }\n         }\n-        catch (SQLException x) {\n-            throw new FHIRPersistenceDataAccessException(\"parameterName=\" + parameterName, x);\n+        if(connection != null && this.getConnection() == null) {\n+            try {\n+                connection.close();\n+            }\n+            catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI0OTI5", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406524929", "createdAt": "2020-05-06T11:33:20Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMzoyMVrOGROyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMzoyMVrOGROyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTM0MQ==", "bodyText": "same line", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420721341", "createdAt": "2020-05-06T11:33:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,101 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param parameterName\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_PARAMETER_NAME, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, parameterName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read/store parameter name id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n+                parameterNameId = stmt.getInt(2);\n             }\n         }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return parameterNameId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param parameterName\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getParameterId(String parameterName) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {\n+        final String METHODNAME = \"cleanup(PreparedStatement, Connection)\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql = \"SELECT parameter_name_id FROM parameter_names WHERE parameter_name = ?\";\n+        FHIRPersistenceDBCleanupException ce;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql)) {\n-            stmt.setString(1, parameterName);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n-            }  else {\n-                result = null;\n+        if (stmt != null) {\n+            try {\n+                stmt.close();\n+            }\n+            catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI1NTg2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406525586", "createdAt": "2020-05-06T11:34:27Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDoyOFrOGRO03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDoyOFrOGRO03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTg4Nw==", "bodyText": "once again, it's a pool, this is a confusing method, when is it called, why is it called, why is it used.\nThe preparedstatement should be autocloseable.\nIn fact in this case, I think it should be removed all together.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420721887", "createdAt": "2020-05-06T11:34:28Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,101 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param parameterName\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_PARAMETER_NAME, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, parameterName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read/store parameter name id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n+                parameterNameId = stmt.getInt(2);\n             }\n         }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {\n+            this.cleanup(null, getConnection());\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        return parameterNameId;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param parameterName\n-     * @return the database id, or null if the named record is not found\n-     * @throws FHIRPersistenceDataAccessException\n+     * Closes the passed PreparedStatement and Connection objects.\n+     * @param stmt\n+     * @param connection\n      */\n-    protected Integer getParameterId(String parameterName) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    protected void cleanup(PreparedStatement stmt, Connection connection)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI1Njg2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406525686", "createdAt": "2020-05-06T11:34:35Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDozNVrOGRO1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDozNVrOGRO1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTk1Ng==", "bodyText": "same line", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420721956", "createdAt": "2020-05-06T11:34:35Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,101 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param parameterName\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_PARAMETER_NAME, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, parameterName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read/store parameter name id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n+                parameterNameId = stmt.getInt(2);\n             }\n         }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n+        catch (Throwable e) {\n+            throw new FHIRPersistenceDataAccessException(errMsg,e);\n+        }\n+        finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI1NzUx", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406525751", "createdAt": "2020-05-06T11:34:41Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDo0MVrOGRO1cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNDo0MVrOGRO1cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjAzMw==", "bodyText": "same line", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722033", "createdAt": "2020-05-06T11:34:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,101 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBCleanupException;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n     }\n \n+    /**\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param parameterName\n+     * @return The generated id of the stored system.\n+     * @throws FHIRPersistenceDataAccessException\n+     */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.\n+            currentSchema = getConnection().getSchema().trim();\n+            stmtString = String.format(SQL_CALL_ADD_PARAMETER_NAME, currentSchema);\n+            try (CallableStatement stmt = getConnection().prepareCall(stmtString)) {\n+                stmt.setString(1, parameterName);\n+                stmt.registerOutParameter(2, Types.INTEGER);\n+                dbCallStartTime = System.nanoTime();\n+                stmt.execute();\n+                dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+                if (log.isLoggable(Level.FINE)) {\n+                        log.fine(\"DB read/store parameter name id complete. executionTime=\" + dbCallDuration + \"ms\");\n                 }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n+                parameterNameId = stmt.getInt(2);\n             }\n         }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n+        catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2MzU0", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526354", "createdAt": "2020-05-06T11:35:37Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTozN1rOGRO3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTozN1rOGRO3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjUyOQ==", "bodyText": "it says postgres above, why does it state db2 on this line.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722529", "createdAt": "2020-05-06T11:35:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -367,31 +369,72 @@ public void buildSchema(PhysicalDataModel model) {\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_PARAMETER_NAME,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_RESOURCE_TYPE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_ANY_RESOURCE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        // Add stored procedures/functions for postgresql.\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_CODE_SYSTEM,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_PARAMETER_NAME,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2Mzk1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526395", "createdAt": "2020-05-06T11:35:41Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo0MVrOGRO3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo0MVrOGRO3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjU1OA==", "bodyText": "it says postgres above, why does it state db2 on this line.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722558", "createdAt": "2020-05-06T11:35:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -367,31 +369,72 @@ public void buildSchema(PhysicalDataModel model) {\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_PARAMETER_NAME,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_RESOURCE_TYPE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_ANY_RESOURCE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        // Add stored procedures/functions for postgresql.\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_CODE_SYSTEM,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2NDYx", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526461", "createdAt": "2020-05-06T11:35:49Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo0OVrOGRO3qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo0OVrOGRO3qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjYwMg==", "bodyText": "it says postgres above, why does it state db2 on this line.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722602", "createdAt": "2020-05-06T11:35:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -367,31 +369,72 @@ public void buildSchema(PhysicalDataModel model) {\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_PARAMETER_NAME,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_RESOURCE_TYPE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_ANY_RESOURCE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        // Add stored procedures/functions for postgresql.\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_CODE_SYSTEM,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_PARAMETER_NAME,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_RESOURCE_TYPE,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2NTE4", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526518", "createdAt": "2020-05-06T11:35:54Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo1NFrOGRO31g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNTo1NFrOGRO31g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjY0Ng==", "bodyText": "it says postgres above, why does it state db2 on this line.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722646", "createdAt": "2020-05-06T11:35:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -367,31 +369,72 @@ public void buildSchema(PhysicalDataModel model) {\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_PARAMETER_NAME,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_RESOURCE_TYPE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_ANY_RESOURCE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        // Add stored procedures/functions for postgresql.\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_CODE_SYSTEM,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_PARAMETER_NAME,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_RESOURCE_TYPE,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        pd = model.addProcedure(this.schemaName,\n+                ADD_ANY_RESOURCE,\n+                FhirSchemaConstants.INITIAL_VERSION,\n+                () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase()\n+                        + \"_\" + DbType.POSTGRESQL.value() + \".sql\", null),\n+                Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n+                procedurePrivileges, DbType.DB2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2Njk3", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526697", "createdAt": "2020-05-06T11:36:10Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNjoxMFrOGRO4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNjoxMFrOGRO4ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjc4OA==", "bodyText": "This should be in a different method specific to functions.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722788", "createdAt": "2020-05-06T11:36:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -367,31 +369,72 @@ public void buildSchema(PhysicalDataModel model) {\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_PARAMETER_NAME,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_PARAMETER_NAME.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, parameterNamesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_RESOURCE_TYPE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_RESOURCE_TYPE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n         pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n \n         pd = model.addProcedure(this.schemaName,\n                 ADD_ANY_RESOURCE,\n                 FhirSchemaConstants.INITIAL_VERSION,\n                 () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_ANY_RESOURCE.toLowerCase() + \".sql\", null),\n                 Arrays.asList(fhirSequence, resourceTypesTable, allTablesComplete),\n-                procedurePrivileges);\n+                procedurePrivileges,\n+                DbType.DB2);\n+        pd.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+\n+        // Add stored procedures/functions for postgresql.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI2OTQw", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406526940", "createdAt": "2020-05-06T11:36:32Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNjozM1rOGRO5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNjozM1rOGRO5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMjk5Nw==", "bodyText": "please remove this.\nyou NEVER get here anymore.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420722997", "createdAt": "2020-05-06T11:36:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_any_resource.sql", "diffHunk": "@@ -44,6 +44,11 @@ BEGIN\n --  DECLARE CONTINUE HANDLER FOR NOT FOUND          SET v_not_found = 1;\n   DECLARE CONTINUE HANDLER FOR c_duplicate        SET v_duplicate = 1;\n \n+  -- Stop right here if we don't have a valid tenant\n+  IF (fhir_admin.sv_tenant_id IS NULL) THEN\n+  \tSIGNAL SQLSTATE '99401' SET MESSAGE_TEXT = 'NOT AUTHORIZED: INVALID TENANT ID OR TENANT KEY';\n+  END IF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI3Mzk3", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406527397", "createdAt": "2020-05-06T11:37:17Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzoxN1rOGRO6ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzoxN1rOGRO6ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMzM1OA==", "bodyText": "add copyright", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420723358", "createdAt": "2020-05-06T11:37:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_any_resource_postgresql.sql", "diffHunk": "@@ -0,0 +1,178 @@\n+( IN p_resource_type                 VARCHAR( 36),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI3Njg0", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406527684", "createdAt": "2020-05-06T11:37:47Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzo0N1rOGRO7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzo0N1rOGRO7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMzYyMw==", "bodyText": "add copyright", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420723623", "createdAt": "2020-05-06T11:37:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_code_system_postgresql.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+( IN p_code_system_name  VARCHAR(255),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI3ODA2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406527806", "createdAt": "2020-05-06T11:37:59Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzo1OVrOGRO8Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozNzo1OVrOGRO8Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMzcxNQ==", "bodyText": "Add copyright", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420723715", "createdAt": "2020-05-06T11:37:59Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_parameter_name_postgresql.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+( IN p_parameter_name    VARCHAR(255),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI3OTA5", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406527909", "createdAt": "2020-05-06T11:38:09Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODowOVrOGRO8VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODowOVrOGRO8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMzc5Ng==", "bodyText": "formatting", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420723796", "createdAt": "2020-05-06T11:38:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_parameter_name_postgresql.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+( IN p_parameter_name    VARCHAR(255),\n+     OUT p_parameter_name_id     INT)\n+    LANGUAGE plpgsql\n+     AS $$\n+BEGIN\n+\t\n+\tSELECT parameter_name_id INTO p_parameter_name_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI4MDk0", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406528094", "createdAt": "2020-05-06T11:38:25Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODoyNVrOGRO84A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODoyNVrOGRO84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMzkzNg==", "bodyText": "please REMOVE this", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420723936", "createdAt": "2020-05-06T11:38:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_resource_type.sql", "diffHunk": "@@ -19,6 +19,11 @@ BEGIN\n   DECLARE CONTINUE HANDLER FOR NOT FOUND          SET v_not_found = 1;\n   DECLARE CONTINUE HANDLER FOR c_duplicate        SET v_duplicate = 1;\n \n+  -- Stop right here if we don't have a valid tenant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI4MjEz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406528213", "createdAt": "2020-05-06T11:38:36Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODozN1rOGRO9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozODozN1rOGRO9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNDA0Mw==", "bodyText": "copyright", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420724043", "createdAt": "2020-05-06T11:38:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_resource_type_postgresql.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+( IN p_resource_type     VARCHAR(255),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI5MDU1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406529055", "createdAt": "2020-05-06T11:39:55Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozOTo1NlrOGRPAJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozOTo1NlrOGRPAJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNDc3Mw==", "bodyText": "I like the semantics. makes it much cleaner.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420724773", "createdAt": "2020-05-06T11:39:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_parameter_name_postgresql.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+( IN p_parameter_name    VARCHAR(255),\n+     OUT p_parameter_name_id     INT)\n+    LANGUAGE plpgsql\n+     AS $$\n+BEGIN\n+\t\n+\tSELECT parameter_name_id INTO p_parameter_name_id\n+    FROM {{SCHEMA_NAME}}.parameter_names\n+    WHERE parameter_name = p_parameter_name;\n+    \n+    IF p_parameter_name_id IS NULL\n+    THEN\n+      SELECT NEXTVAL('{{SCHEMA_NAME}}.fhir_ref_sequence') INTO p_parameter_name_id;\n+      INSERT INTO {{SCHEMA_NAME}}.parameter_names (parameter_name_id, parameter_name)\n+         VALUES (p_parameter_name_id, p_parameter_name) ON CONFLICT DO NOTHING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTI5MjA2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406529206", "createdAt": "2020-05-06T11:40:09Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MDowOVrOGRPAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MDowOVrOGRPAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNDg5NA==", "bodyText": "formatting", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420724894", "createdAt": "2020-05-06T11:40:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/resources/add_code_system_postgresql.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+( IN p_code_system_name  VARCHAR(255),\n+     OUT p_code_system_id        INT)\n+    LANGUAGE plpgsql\n+    AS $$\n+  \n+  BEGIN\n+  \n+\tSELECT code_system_id INTO p_code_system_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMxMjEx", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406531211", "createdAt": "2020-05-06T11:43:08Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzowOFrOGRPGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzowOFrOGRPGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNjI4MQ==", "bodyText": "throws don't match.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420726281", "createdAt": "2020-05-06T11:43:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -78,13 +82,104 @@ public PostgreSqlResourceDAO(TransactionSynchronizationRegistry trxSynchRegistry\n      * @throws FHIRPersistenceDBConnectException\n      * @throws FHIRPersistenceVersionIdMismatchException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMxMjQx", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406531241", "createdAt": "2020-05-06T11:43:11Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzoxMVrOGRPGIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzoxMVrOGRPGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNjMwNA==", "bodyText": "Why is this here?  prior methodology?", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420726304", "createdAt": "2020-05-06T11:43:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -78,13 +82,104 @@ public PostgreSqlResourceDAO(TransactionSynchronizationRegistry trxSynchRegistry\n      * @throws FHIRPersistenceDBConnectException\n      * @throws FHIRPersistenceVersionIdMismatchException\n      */\n+//    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMxNDkz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406531493", "createdAt": "2020-05-06T11:43:36Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzozNlrOGRPG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MzozNlrOGRPG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNjUyNA==", "bodyText": "signature doesnt' match since the ParameterDao is passed in", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420726524", "createdAt": "2020-05-06T11:43:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -78,13 +82,104 @@ public PostgreSqlResourceDAO(TransactionSynchronizationRegistry trxSynchRegistry\n      * @throws FHIRPersistenceDBConnectException\n      * @throws FHIRPersistenceVersionIdMismatchException\n      */\n+//    @Override\n+//    public Resource  insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)\n+//            throws FHIRPersistenceException {\n+//        final String METHODNAME = \"insert\";\n+//        logger.entering(CLASSNAME, METHODNAME);\n+//\n+//        Connection connection = null;\n+//        Integer resourceTypeId;\n+//        Timestamp lastUpdated;\n+//        boolean acquiredFromCache;\n+//        long dbCallStartTime;\n+//        double dbCallDuration;\n+//\n+//        try {\n+//            connection = this.getConnection();\n+//\n+//            this.fhirRefSequenceDAO = new FhirRefSequenceDAOImpl(connection);\n+//            this.parameterNameDAO = new PostgreSqlParameterNamesDAO(connection, fhirRefSequenceDAO);\n+//            this.codeSystemDAO = new PostgreSqlCodeSystemDAO(connection, fhirRefSequenceDAO);\n+//\n+//            // Get resourceTypeId from ResourceTypesCache first.\n+//            resourceTypeId = ResourceTypesCache.getResourceTypeId(resource.getResourceType());\n+//            // If no found, then get resourceTypeId from local newResourceTypeIds in case this id is already in newResourceTypeIds\n+//            // but has not been updated to ResourceTypesCache yet. newResourceTypeIds is updated to ResourceTypesCache only when the\n+//            // current transaction is committed.\n+//            if (resourceTypeId == null) {\n+//                resourceTypeId = getResourceTypeIdFromCandidatorsCache(resource.getResourceType());\n+//            }\n+//\n+//            if (resourceTypeId == null) {\n+//                acquiredFromCache = false;\n+//                resourceTypeId = getOrCreateResourceType(resource.getResourceType(), connection);\n+//                this.addResourceTypeCacheCandidate(resource.getResourceType(), resourceTypeId);\n+//            } else {\n+//                acquiredFromCache = true;\n+//            }\n+//\n+//            if (logger.isLoggable(Level.FINE)) {\n+//                logger.fine(\"resourceType=\" + resource.getResourceType() + \"  resourceTypeId=\" + resourceTypeId +\n+//                         \"  acquiredFromCache=\" + acquiredFromCache + \"  tenantDatastoreCacheName=\" + ResourceTypesCache.getCacheNameForTenantDatastore());\n+//            }\n+//\n+//            lastUpdated = resource.getLastUpdated();\n+//            dbCallStartTime = System.nanoTime();\n+//\n+//            final String sourceKey = UUID.randomUUID().toString();\n+//\n+//            long resourceId = this.storeResource(resource.getResourceType(),\n+//                parameters,\n+//                resource.getLogicalId(),\n+//                resource.getData(),\n+//                lastUpdated,\n+//                resource.isDeleted(),\n+//                sourceKey,\n+//                resource.getVersionId(),\n+//                connection\n+//                );\n+//            dbCallDuration = (System.nanoTime() - dbCallStartTime)/1e6;\n+//\n+//            resource.setId(resourceId);\n+//            if (logger.isLoggable(Level.FINE)) {\n+//                logger.fine(\"Successfully inserted Resource. id=\" + resource.getId() + \" executionTime=\" + dbCallDuration + \"ms\");\n+//            }\n+//        } catch(FHIRPersistenceDBConnectException | FHIRPersistenceDataAccessException e) {\n+//            throw e;\n+//        } catch(SQLIntegrityConstraintViolationException e) {\n+//            FHIRPersistenceFKVException fx = new FHIRPersistenceFKVException(\"Encountered FK violation while inserting Resource.\");\n+//            throw severe(logger, fx, e);\n+//        } catch(SQLException e) {\n+//            if (\"99001\".equals(e.getSQLState())) {\n+//                // this is just a concurrency update, so there's no need to log the SQLException here\n+//                throw new FHIRPersistenceVersionIdMismatchException(\"Encountered version id mismatch while inserting Resource\");\n+//            } else {\n+//                FHIRPersistenceException fx = new FHIRPersistenceException(\"SQLException encountered while inserting Resource.\");\n+//                throw severe(logger, fx, e);\n+//            }\n+//        } catch(Throwable e) {\n+//            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure inserting Resource.\");\n+//            throw severe(logger, fx, e);\n+//        } finally {\n+//            this.cleanup(null, connection);\n+//            logger.exiting(CLASSNAME, METHODNAME);\n+//        }\n+//\n+//        return resource;\n+//    }\n+\n+\n     @Override\n-    public Resource  insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)\n+    public Resource insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)\n             throws FHIRPersistenceException {\n-        final String METHODNAME = \"insert\";\n+        final String METHODNAME = \"insert(Resource, List<ExtractedParameterValue>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMxODkz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406531893", "createdAt": "2020-05-06T11:44:17Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NDoxN1rOGRPISg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NDoxN1rOGRPISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNjg1OA==", "bodyText": "this is very strange to me", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420726858", "createdAt": "2020-05-06T11:44:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -143,14 +253,14 @@ public Resource  insert(Resource resource, List<ExtractedParameterValue> paramet\n                 // this is just a concurrency update, so there's no need to log the SQLException here\n                 throw new FHIRPersistenceVersionIdMismatchException(\"Encountered version id mismatch while inserting Resource\");\n             } else {\n-                FHIRPersistenceException fx = new FHIRPersistenceException(\"SQLException encountered while inserting Resource.\");\n+                FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"SQLException encountered while inserting Resource.\");\n                 throw severe(logger, fx, e);\n             }\n         } catch(Throwable e) {\n             FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(\"Failure inserting Resource.\");\n             throw severe(logger, fx, e);\n         } finally {\n-            this.cleanup(null, connection);\n+            this.cleanup(stmt, connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMyNzg1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406532785", "createdAt": "2020-05-06T11:45:42Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NTo0MlrOGRPLWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NTo0MlrOGRPLWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNzY0Mw==", "bodyText": "removal candidate?", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420727643", "createdAt": "2020-05-06T11:45:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -191,241 +301,241 @@ public Resource  insert(Resource resource, List<ExtractedParameterValue> paramet\n      * @return the resource_id for the entry we created\n      * @throws Exception\n      */\n-    public long storeResource(String tablePrefix, List<ExtractedParameterValue> parameters, String p_logical_id, byte[] p_payload, Timestamp p_last_updated, boolean p_is_deleted,\n-        String p_source_key, Integer p_version, Connection conn) throws Exception {\n-\n-        final String METHODNAME = \"storeResource() for \" + tablePrefix + \" resource\";\n-        logger.entering(CLASSNAME, METHODNAME);\n-\n-        Long v_logical_resource_id = null;\n-        Long v_current_resource_id = null;\n-        Long v_resource_id = null;\n-        Integer v_resource_type_id = null;\n-        boolean v_new_resource = false;\n-        boolean v_not_found = false;\n-        boolean v_duplicate = false;\n-        int v_version = 0;\n-        int v_insert_version = 0;\n-\n-        String v_resource_type = tablePrefix;\n-\n-        // Map the resource type name to the normalized id value in the database\n-        v_resource_type_id = getResourceTypeId(v_resource_type, conn);\n-        if (v_resource_type_id == null) {\n-            // programming error, as this should've been created earlier\n-            throw new IllegalStateException(\"resource type not found: \" + v_resource_type);\n-        }\n-\n-        // Get a lock at the system-wide logical resource level.\n-        final String SELECT_FOR_UPDATE = \"SELECT logical_resource_id FROM logical_resources WHERE resource_type_id = ? AND logical_id = ? FOR UPDATE\";\n-        try (PreparedStatement stmt = conn.prepareStatement(SELECT_FOR_UPDATE)) {\n-            stmt.setInt(1, v_resource_type_id);\n-            stmt.setString(2, p_logical_id);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                v_logical_resource_id = rs.getLong(1);\n-            } else {\n-                v_not_found = true;\n-                v_logical_resource_id = -1L; // just to be careful\n-            }\n-        }\n-\n-        // Create the logical resource if we don't have it already\n-        if (v_not_found) {\n-            // grab the id we want to use for the new logical resource instance\n-            final String sql2 = \"SELECT nextval('fhir_sequence')\";\n-            try (PreparedStatement stmt = conn.prepareStatement(sql2)) {\n-                ResultSet res = stmt.executeQuery();\n-                if (res.next()) {\n-                    v_logical_resource_id = res.getLong(1);\n-                } else {\n-                    // not going to happen, unless someone butchers the statement being executed\n-                    throw new IllegalStateException(\"VALUES failed to return a row: \" + sql2);\n-                }\n-            }\n-\n-            try {\n-                // insert the system-wide logical resource record.\n-                final String sql3 = \"INSERT INTO logical_resources (logical_resource_id, resource_type_id, logical_id) VALUES (?, ?, ?)\";\n-                try (PreparedStatement stmt = conn.prepareStatement(sql3)) {\n-                    // bind parameters\n-                    stmt.setLong(1, v_logical_resource_id);\n-                    stmt.setInt(2, v_resource_type_id);\n-                    stmt.setString(3, p_logical_id);\n-                    stmt.executeUpdate();\n-                }\n-            } catch (SQLException e) {\n-                if (translator.isDuplicate(e)) {\n-                    v_duplicate = true;\n-                }  else {\n-                    throw e;\n-                }\n-            }\n-\n-            /**\n-             * remember that we have a concurrent system...so there is a possibility\n-             * that another thread snuck in before us and created the logical resource. This\n-             * is easy to handle, just turn around and read it\n-             */\n-            if (v_duplicate) {\n-                try (PreparedStatement stmt = conn.prepareStatement(SELECT_FOR_UPDATE)) {\n-                    // bind parameters\n-                    stmt.setInt(1, v_resource_type_id);\n-                    stmt.setString(2, p_logical_id);\n-                    ResultSet res = stmt.executeQuery();\n-                    if (res.next()) {\n-                        v_logical_resource_id = res.getLong(1);\n-                    } else {\n-                        // Extremely unlikely as we should never delete logical resource records\n-                        throw new IllegalStateException(\"Logical resource was deleted: \" + tablePrefix + \"/\" + p_logical_id);\n-                    }\n-                }\n-            } else {\n-                v_new_resource = true;\n-\n-                // Insert the resource-specific logical resource record. Remember that logical_id is denormalized\n-                // so it gets stored again here for convenience\n-                final String sql3 = \"INSERT INTO \" + tablePrefix + \"_logical_resources (logical_resource_id, logical_id) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = conn.prepareStatement(sql3)) {\n-                    // bind parameters\n-                    stmt.setLong(1, v_logical_resource_id);\n-                    stmt.setString(2, p_logical_id);\n-                    stmt.executeUpdate();\n-                }\n-            }\n-        }\n-\n-        if (!v_new_resource) {\n-            // existing resource.  We need to know the current version from the\n-            // resource-specific logical resources table.\n-            final String sql3 = \"SELECT current_resource_id FROM \" + tablePrefix + \"_logical_resources WHERE logical_resource_id = ?\";\n-            try (PreparedStatement stmt = conn.prepareStatement(sql3)) {\n-                stmt.setLong(1, v_logical_resource_id);\n-                ResultSet rs = stmt.executeQuery();\n-                if (rs.next()) {\n-                    v_current_resource_id = rs.getLong(1);\n-                } else {\n-                    // This database is broken, because we shouldn't have logical_resource records without\n-                    // corresponding resource-specific logical_resource records.\n-                    throw new SQLException(\"Logical_id record '\" + p_logical_id + \"' missing for resource \" + tablePrefix);\n-                }\n-            }\n-\n-            // so if we are storing a specific version, do a quick check to make\n-            // sure that this version doesn't currently exist. This is only done when processing\n-            // replication messages which might be duplicated. We want the operation to be idempotent,\n-            // so if the resource already exists, we don't need to do anything else.\n-\n-            if (p_version != null) {\n-                final String sqlStmt = \"SELECT resource_id FROM \" + tablePrefix + \"_resources dr WHERE dr.logical_resource_id = ? AND dr.version_id = ?\";\n-                try (PreparedStatement stmt = conn.prepareStatement(sqlStmt)) {\n-                    // bind parameters\n-                    stmt.setLong(1, v_logical_resource_id);\n-                    stmt.setLong(2, p_version);\n-                    ResultSet res = stmt.executeQuery();\n-                    if (res.next()) {\n-                        // this version of this resource already exists, so we bail out right away\n-                        v_resource_id = res.getLong(1);\n-                        return v_resource_id;\n-                    }\n-                }\n-            }\n-\n-            // Grab the version value for the current version (identified by v_current_resource_id)\n-            final String sql4 = \"SELECT version_id FROM \" + tablePrefix + \"_resources WHERE resource_id = ?\";\n-            try (PreparedStatement stmt = conn.prepareStatement(sql4)) {\n-                stmt.setLong(1, v_current_resource_id);\n-                ResultSet res = stmt.executeQuery();\n-                if (res.next()) {\n-                    v_version = res.getInt(1);\n-                } else {\n-                    throw new IllegalStateException(\"current resource not found: \"\n-                            + tablePrefix + \"_resources.resource_id=\" + v_current_resource_id);\n-                }\n-            }\n-\n-            //If we have been passed a version number, this means that this is a replicated\n-            //resource, and so we only need to delete parameters if the given version is\n-            // later than the current version\n-            if (p_version == null || p_version > v_version) {\n-                // existing resource, so need to delete all its parameters\n-                // delete composites first, or else the foreign keys there restrict deletes on referenced tables\n-                deleteFromParameterTable(conn, tablePrefix + \"_composites\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_str_values\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_number_values\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_date_values\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_latlng_values\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_token_values\", v_logical_resource_id);\n-                deleteFromParameterTable(conn, tablePrefix + \"_quantity_values\", v_logical_resource_id);\n-            }\n-        }\n-\n-        // Persist the data using the given version number if required\n-        if (p_version != null) {\n-            v_insert_version = p_version;\n-        } else {\n-            // remember we have a write (update) lock on the logical version, so we can safely calculate\n-            // the next version value here\n-            v_insert_version = v_version + 1;\n-\n-        }\n-\n-        /**\n-         * Create the new resource version.\n-         * uses last_updated time from the app-server, so we have consistency between the various DAOs\n-         */\n-        String sql2 = \"SELECT nextval('fhir_sequence')\";\n-        try (PreparedStatement stmt = conn.prepareStatement(sql2)) {\n-            ResultSet res = stmt.executeQuery();\n-            if (res.next()) {\n-                v_resource_id = res.getLong(1); //Assign result of the above query\n-            } else {\n-                // unlikely\n-                throw new IllegalStateException(\"no row returned: \" + sql2);\n-            }\n-        }\n-\n-        // Finally we get to the big resource data insert\n-        String sql3 = \"INSERT INTO \" + tablePrefix + \"_resources (resource_id, logical_resource_id, version_id, data, last_updated, is_deleted) \"\n-                + \"VALUES (?,?,?,?,?,?)\";\n-        try (PreparedStatement stmt = conn.prepareStatement(sql3)) {\n-            // bind parameters\n-            stmt.setLong(1, v_resource_id);\n-            stmt.setLong(2, v_logical_resource_id);\n-            stmt.setInt(3, v_insert_version);\n-            stmt.setBytes(4, p_payload);\n-            stmt.setTimestamp(5, p_last_updated, UTC);\n-            stmt.setString(6, p_is_deleted ? \"Y\" : \"N\");\n-            stmt.executeUpdate();\n-        }\n-\n-        if (p_version == null || p_version > v_version) {\n-            //only update the logical resource if the resource we are adding supercedes the\n-            //current resource\n-            String sql4 = \"UPDATE \" + tablePrefix + \"_logical_resources SET current_resource_id = ? WHERE logical_resource_id = ?\";\n-            try (PreparedStatement stmt = conn.prepareStatement(sql4)) {\n-                // bind parameters\n-                stmt.setLong(1, v_resource_id);\n-                stmt.setLong(2, v_logical_resource_id);\n-                stmt.executeUpdate();\n-            }\n-\n-            // To keep things simple for the postgresql use-case, we just use a visitor to\n-            // handle inserts of parameters directly in the resource parameter tables.\n-            // Note we don't get any parameters for the resource soft-delete operation\n-            if (parameters != null) {\n-                // postgresql doesn't support partitioned multi-tenancy, so we disable it on the DAO:\n-                try (ParameterVisitorBatchDAO pvd = new ParameterVisitorBatchDAO(conn, null, tablePrefix, false, v_logical_resource_id, 100,\n-                    new ParameterNameCacheAdapter(parameterNameDAO), new CodeSystemCacheAdapter(codeSystemDAO))) {\n-                    for (ExtractedParameterValue p: parameters) {\n-                        p.accept(pvd);\n-                    }\n-                }\n-            }\n-        }\n-        logger.exiting(CLASSNAME, METHODNAME);\n-        return v_resource_id;\n-    }\n+//    public long storeResource(String tablePrefix, List<ExtractedParameterValue> parameters, String p_logical_id, byte[] p_payload, Timestamp p_last_updated, boolean p_is_deleted,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 467}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTMzNjU1", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-406533655", "createdAt": "2020-05-06T11:47:04Z", "commit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NzowNVrOGRPOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0NzowNVrOGRPOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyODM1NQ==", "bodyText": "really strange to me.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r420728355", "createdAt": "2020-05-06T11:47:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -479,17 +589,62 @@ public int getOrCreateResourceType(String resourceTypeName, Connection conn) thr\n \n         // Create the resource if we don't have it already (set by the continue handler)\n         if (result == null) {\n-            result = fhirRefSequenceDAO.nextValue();\n-\n-            final String INS = \"INSERT INTO resource_types (resource_type_id, resource_type) VALUES (?, ?)\";\n-            try (PreparedStatement stmt = conn.prepareStatement(INS)) {\n-                // bind parameters\n-                stmt.setInt(1, result);\n-                stmt.setString(2, resourceTypeName);\n-                stmt.executeUpdate();\n+            try {\n+                result = fhirRefSequenceDAO.nextValue();\n+                final String INS = \"INSERT INTO resource_types (resource_type_id, resource_type) VALUES (?, ?)\";\n+                try (PreparedStatement stmt = conn.prepareStatement(INS)) {\n+                    // bind parameters\n+                    stmt.setInt(1, result);\n+                    stmt.setString(2, resourceTypeName);\n+                    stmt.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                throw e;\n             }\n         }\n \n         return result;\n     }\n+\n+\n+    @Override\n+    public Integer readResourceTypeId(String resourceType) throws FHIRPersistenceDBConnectException, FHIRPersistenceDataAccessException  {\n+        final String METHODNAME = \"readResourceTypeId\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        Connection connection = null;\n+        CallableStatement stmt = null;\n+        Integer resourceTypeId = null;\n+        String currentSchema;\n+        String stmtString;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n+\n+        try {\n+            connection = this.getConnection();\n+            currentSchema = connection.getSchema().trim();\n+            stmtString = String.format(SQL_READ_RESOURCE_TYPE, currentSchema);\n+            stmt = connection.prepareCall(stmtString);\n+            stmt.setString(1, resourceType);\n+            stmt.registerOutParameter(2, Types.INTEGER);\n+            dbCallStartTime = System.nanoTime();\n+            stmt.execute();\n+            dbCallDuration = (System.nanoTime()-dbCallStartTime)/1e6;\n+            if (logger.isLoggable(Level.FINER)) {\n+                logger.finer(\"DB read resource type id complete. executionTime=\" + dbCallDuration + \"ms\");\n+            }\n+            resourceTypeId = stmt.getInt(2);\n+        } catch(FHIRPersistenceDBConnectException e) {\n+            throw e;\n+        } catch (Throwable e) {\n+            final String errMsg = \"Failure storing Resource type name id: name=\" + resourceType;\n+            FHIRPersistenceDataAccessException fx = new FHIRPersistenceDataAccessException(errMsg);\n+            throw severe(logger, fx, e);\n+        } finally {\n+            this.cleanup(stmt, connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ab6c3e372bbdc19b7224fb24966c4e461154c6"}, "originalPosition": 769}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ed39c897f68e68efa55901be929721cba5d33c", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/81ed39c897f68e68efa55901be929721cba5d33c", "committedDate": "2020-05-06T16:06:15Z", "message": "issue #945 remove changes to DB2 SPs\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33a5fba1b62504c0c52918853ce048c9275c36f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a33a5fba1b62504c0c52918853ce048c9275c36f", "committedDate": "2020-05-06T16:07:27Z", "message": "Merge pull request #1034 from IBM/issue-945\n\nIssue 945"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb66eed2b4f878145556c1ddb8fd51ea481604cf", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/fb66eed2b4f878145556c1ddb8fd51ea481604cf", "committedDate": "2020-05-06T18:33:12Z", "message": "Merge pull request #1037 from IBM/issue-945\n\nIssue 945 - sync with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49cc2920a957bfc31c7d6490751e089d8afd2165", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/49cc2920a957bfc31c7d6490751e089d8afd2165", "committedDate": "2020-05-07T01:59:41Z", "message": "issue #945 enable caches for postgresql and derby\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191abc117e55d6f9c38cec7cc1fb8d8e95f3f927", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/191abc117e55d6f9c38cec7cc1fb8d8e95f3f927", "committedDate": "2020-05-07T04:13:01Z", "message": "issue #945 update 1 per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f31e8de502ff9aeaf5937f4cd20903a1ac1b440", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/2f31e8de502ff9aeaf5937f4cd20903a1ac1b440", "committedDate": "2020-05-07T12:32:53Z", "message": "issue #945 update 2 per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dccb3972d197e99b3a9b93dddb5f21d3b56e6b0e", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/dccb3972d197e99b3a9b93dddb5f21d3b56e6b0e", "committedDate": "2020-05-07T15:56:44Z", "message": "issue #945 update schema procedure tool for pgsql\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/b9320124879c57b243f085c591275ccb7131bbcc", "committedDate": "2020-05-07T16:11:02Z", "message": "issue #945 minor code style updates\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc2Mzk4", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407676398", "createdAt": "2020-05-07T17:16:32Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNjozMlrOGSIYcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNjozMlrOGSIYcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NDg4MA==", "bodyText": "If there isn't going to be a split. I suggest changing the name of this to addProcedureAndFunctions", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421664880", "createdAt": "2020-05-07T17:16:32Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/PhysicalDataModel.java", "diffHunk": "@@ -247,8 +247,8 @@ public void removeTenantPartitions(IDatabaseAdapter adapter, String schemaName,\n      * @return\n      */\n     public ProcedureDef addProcedure(String schemaName, String objectName, int version, Supplier<String> templateProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc3MDI3", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407677027", "createdAt": "2020-05-07T17:17:26Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNzoyNlrOGSIabA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNzoyNlrOGSIabA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NTM4OA==", "bodyText": "I suggest changing the interface to createOrReplaceProcedureAndFunctions", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421665388", "createdAt": "2020-05-07T17:17:26Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -150,7 +150,24 @@ public void dropType(String schemaName, String typeName) {\n \n     @Override\n     public void createOrReplaceProcedure(String schemaName, String procedureName, Supplier<String> supplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjgwNzAy", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407680702", "createdAt": "2020-05-07T17:22:27Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjoyN1rOGSIl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjoyN1rOGSIl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODMxOQ==", "bodyText": ", 2020", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421668319", "createdAt": "2020-05-07T17:22:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -7,19 +7,25 @@\n package com.ibm.fhir.persistence.jdbc.dao.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjgxNzAy", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407681702", "createdAt": "2020-05-07T17:23:48Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo0OFrOGSIpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo0OFrOGSIpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTEzNg==", "bodyText": "same line as previous close", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421669136", "createdAt": "2020-05-07T17:23:48Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -110,16 +116,28 @@ public ParameterDAOImpl(Connection managedConnection) {\n      */\n     @Override\n     public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDBConnectException, FHIRPersistenceDataAccessException  {\n-        final String METHODNAME = \"readParameterNameId\";\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n         log.entering(CLASSNAME, METHODNAME);\n \n         Connection connection = null;\n \n         try {\n             connection = this.getConnection();\n-            ParameterNameDAO pnd = new ParameterNameDAOImpl(connection);\n+            String dbProductName = connection.getMetaData().getDatabaseProductName().toLowerCase();\n+            ParameterNameDAO pnd;\n+            if (dbProductName.equals(DbType.POSTGRESQL.value())) {\n+                pnd = new PostgreSqlParameterNamesDAO(connection);\n+            } else if (dbProductName.contains(DbType.DERBY.value())) {\n+                pnd = new DerbyParameterNamesDAO(connection);\n+            } else {\n+                pnd = new ParameterNameDAOImpl(connection);\n+            }\n+\n             return pnd.readOrAddParameterNameId(parameterName);\n         }\n+        catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjgxNzgz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407681783", "createdAt": "2020-05-07T17:23:56Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo1NlrOGSIpUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo1NlrOGSIpUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTIwMA==", "bodyText": "same line as previous", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421669200", "createdAt": "2020-05-07T17:23:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -137,15 +155,27 @@ public int readOrAddParameterNameId(String parameterName) throws FHIRPersistence\n      */\n     @Override\n     public int readOrAddCodeSystemId(String codeSystemName) throws FHIRPersistenceDBConnectException, FHIRPersistenceDataAccessException   {\n-        final String METHODNAME = \"storeCodeSystemId\";\n+        final String METHODNAME = \"readOrAddCodeSystemId\";\n         log.entering(CLASSNAME, METHODNAME);\n \n         Connection connection = null;\n         try {\n             connection = this.getConnection();\n-            CodeSystemDAO csd = new CodeSystemDAOImpl(connection);\n+            String dbProductName = connection.getMetaData().getDatabaseProductName().toLowerCase();\n+            CodeSystemDAO csd;\n+            if (dbProductName.equals(DbType.POSTGRESQL.value())) {\n+                csd = new PostgreSqlCodeSystemDAO(connection);\n+            } else if (dbProductName.contains(DbType.DERBY.value())) {\n+                csd = new DerbyCodeSystemDAO(connection);\n+            } else {\n+                csd = new CodeSystemDAOImpl(connection);\n+            }\n+\n             return csd.readOrAddCodeSystem(codeSystemName);\n         }\n+        catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjgyNTE2", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407682516", "createdAt": "2020-05-07T17:24:54Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDo1NFrOGSIrhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDo1NFrOGSIrhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If no found, then get ParameterNameId from local newParameterNameIds in case this id is already in newParameterNameIds\n          \n          \n            \n                    // If not found, then get ParameterNameId from local newParameterNameIds in case this id is already in newParameterNameIds", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421669764", "createdAt": "2020-05-07T17:24:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterDAOImpl.java", "diffHunk": "@@ -216,6 +246,19 @@ public void addParameterNamesCacheCandidate(String parameterName, Integer parame\n \n     }\n \n+\n+    protected  Integer getParameterNameIdFromCaches(String parameterName) {\n+        // Get ParameterNameId from ParameterNameIdCache first.\n+        Integer parameterNameId = ParameterNamesCache.getParameterNameId(parameterName);\n+        // If no found, then get ParameterNameId from local newParameterNameIds in case this id is already in newParameterNameIds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5effe479f2dd32a2e5707f6d2f656a5dfff7d752", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/5effe479f2dd32a2e5707f6d2f656a5dfff7d752", "committedDate": "2020-05-07T17:25:53Z", "message": "issue #945 update schema tool\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjgzNDkz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407683493", "createdAt": "2020-05-07T17:26:05Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNjowNVrOGSIuXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNjowNVrOGSIuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDQ5NQ==", "bodyText": ", 2020", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421670495", "createdAt": "2020-05-07T17:26:05Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterNameDAOImpl.java", "diffHunk": "@@ -22,21 +22,21 @@\n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg0MDQz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407684043", "createdAt": "2020-05-07T17:26:46Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNjo0NlrOGSIwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNjo0NlrOGSIwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDk0OA==", "bodyText": ", 2020", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421670948", "createdAt": "2020-05-07T17:26:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyCodeSystemDAO.java", "diffHunk": "@@ -28,47 +28,45 @@\n      * @param c\n      * @param fsd\n      */\n-    public DerbyCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg0NDQx", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407684441", "createdAt": "2020-05-07T17:27:16Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNzoxN1rOGSIxVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNzoxN1rOGSIxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MTI1NA==", "bodyText": ", 2020", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421671254", "createdAt": "2020-05-07T17:27:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyParameterNamesDAO.java", "diffHunk": "@@ -21,23 +21,24 @@\n  */\n public class DerbyParameterNamesDAO extends ParameterNameDAOImpl {\n     private final FhirRefSequenceDAO fhirRefSequenceDAO;\n-    \n-    public DerbyParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg1MTY4", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407685168", "createdAt": "2020-05-07T17:28:12Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyODoxMlrOGSIzbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyODoxMlrOGSIzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MTc4OQ==", "bodyText": "why does codeSystemCacheAdapter now get the parameterDao?", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421671789", "createdAt": "2020-05-07T17:28:12Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/DerbyResourceDAO.java", "diffHunk": "@@ -437,7 +423,7 @@ public long storeResource(String tablePrefix, List<ExtractedParameterValue> para\n             if (parameters != null) {\n                 // Derby doesn't support partitioned multi-tenancy, so we disable it on the DAO:\n                 try (ParameterVisitorBatchDAO pvd = new ParameterVisitorBatchDAO(conn, null, tablePrefix, false, v_logical_resource_id, 100,\n-                    new ParameterNameCacheAdapter(parameterNameDAO), new CodeSystemCacheAdapter(codeSystemDAO))) {\n+                    new ParameterNameCacheAdapter(parameterDao), new CodeSystemCacheAdapter(parameterDao))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg2MDkw", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407686090", "createdAt": "2020-05-07T17:29:23Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyOToyM1rOGSI2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyOToyM1rOGSI2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MjYwNw==", "bodyText": "I think logically this should go in the catch block.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421672607", "createdAt": "2020-05-07T17:29:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlCodeSystemDAO.java", "diffHunk": "@@ -21,84 +21,59 @@\n  *\n  */\n public class PostgreSqlCodeSystemDAO extends CodeSystemDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlCodeSystemDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlCodeSystemDAO.class.getName();\n+    private static final String SQL_CALL_ADD_CODE_SYSTEM_ID = \"{CALL %s.add_code_system(?, ?)}\";\n \n     /**\n      * Public constructor\n      * @param c\n      * @param fsd\n      */\n-    public PostgreSqlCodeSystemDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlCodeSystemDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n-    }\n-\n-    @Override\n-    public int readOrAddCodeSystem(String codeSystem) throws FHIRPersistenceDataAccessException   {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getCodeSystemId(codeSystem);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                String INS = \"INSERT INTO code_systems (code_system_id, code_system_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, codeSystem);\n-                    stmt.executeUpdate();\n-                }\n-            }\n-            catch (SQLException e) {\n-                if (\"23505\".equals(e.getSQLState())) {\n-                    // another thread snuck in and created the record, so we need to fetch the correct id\n-                    result = getCodeSystemId(codeSystem);\n-\n-                    if (result == null) {\n-                        // This would be truly weird, but we protect against it anyway\n-                        throw new IllegalStateException(\"No code system returned after duplicate found!\");\n-                    }\n-                }\n-                else {\n-                    throw new FHIRPersistenceDataAccessException(\"codeSystem=\" + codeSystem, e);\n-                }\n-            }\n-\n-        }\n-\n-        // There's no way result can be null here, so we're OK returning an int\n-        return result;\n     }\n \n     /**\n-     * Read the id for the named type\n-     * @param codeSystem\n-     * @return the database id, or null if the named record is not found\n+     * Calls a stored procedure to read the system contained in the passed Parameter in the Code_Systems table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n+     * @param systemName\n+     *\n+     * @return The generated id of the stored system.\n      * @throws FHIRPersistenceDataAccessException\n      */\n-    protected Integer getCodeSystemId(String codeSystem) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n-\n-        String sql1 = \"SELECT code_system_id FROM code_systems WHERE code_system_name = ?\";\n-\n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql1)) {\n-            stmt.setString(1, codeSystem);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n-            }\n-            else {\n-                result = null;\n+    @Override\n+    public int readOrAddCodeSystem(String systemName) throws FHIRPersistenceDataAccessException   {\n+        final String METHODNAME = \"readOrAddCodeSystem\";\n+        log.entering(CLASSNAME, METHODNAME);\n+\n+        int systemId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing code system id: name=\" + systemName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg2ODM3", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407686837", "createdAt": "2020-05-07T17:30:22Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMDoyMlrOGSI49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMDoyMlrOGSI49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzIwNA==", "bodyText": "It should be set by the connection.\nWe can enforce this as part of the creation of the datasource", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421673204", "createdAt": "2020-05-07T17:30:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlParameterNamesDAO.java", "diffHunk": "@@ -6,75 +6,63 @@\n \n package com.ibm.fhir.persistence.jdbc.postgresql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterNameDAOImpl;\n import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n \n public class PostgreSqlParameterNamesDAO extends ParameterNameDAOImpl {\n-    private final FhirRefSequenceDAO fhirRefSequenceDAO;\n+    private static final Logger log = Logger.getLogger(PostgreSqlParameterNamesDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlParameterNamesDAO.class.getName();\n+    private static final String SQL_CALL_ADD_PARAMETER_NAME = \"{CALL %s.add_parameter_name(?, ?)}\";\n \n-    public PostgreSqlParameterNamesDAO(Connection c, FhirRefSequenceDAO fsd) {\n+    public PostgreSqlParameterNamesDAO(Connection c) {\n         super(c);\n-        this.fhirRefSequenceDAO = fsd;\n-    }\n-\n-    @Override\n-    public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n-        // As the system is concurrent, we have to handle cases where another thread\n-        // might create the entry after we selected and found nothing\n-        Integer result = getParameterId(parameterName);\n-\n-        // Create the resource if we don't have it already (set by the continue handler)\n-        if (result == null) {\n-            try {\n-                result = fhirRefSequenceDAO.nextValue();\n-\n-                final String INS = \"INSERT INTO parameter_names (parameter_name_id, parameter_name) VALUES (?, ?)\";\n-                try (PreparedStatement stmt = getConnection().prepareStatement(INS)) {\n-                    // bind parameters\n-                    stmt.setInt(1, result);\n-                    stmt.setString(2, parameterName);\n-                    stmt.executeUpdate();\n-                }\n-            } catch (SQLException e) {\n-                throw new FHIRPersistenceDataAccessException(\"Error while getting or inserting parameterName '\" + parameterName + \"'\", e);\n-            }\n-        }\n-\n-        // cannot be null, so safe to return as an int\n-        return result;\n     }\n \n     /**\n-     * Read the id for the named type\n+     * Calls a stored procedure to read the name contained in the passed Parameter in the Parameter_Names table.\n+     * If it's not in the DB, it will be stored and a unique id will be returned.\n      * @param parameterName\n-     * @return the database id, or null if the named record is not found\n+     * @return The generated id of the stored system.\n      * @throws FHIRPersistenceDataAccessException\n      */\n-    protected Integer getParameterId(String parameterName) throws FHIRPersistenceDataAccessException {\n-        Integer result;\n+    @Override\n+    public int readOrAddParameterNameId(String parameterName) throws FHIRPersistenceDataAccessException  {\n+        final String METHODNAME = \"readOrAddParameterNameId\";\n+        log.entering(CLASSNAME, METHODNAME);\n \n-        String sql = \"SELECT parameter_name_id FROM parameter_names WHERE parameter_name = ?\";\n+        int parameterNameId;\n+        String currentSchema;\n+        String stmtString;\n+        String errMsg = \"Failure storing search parameter name id: name=\" + parameterName;\n+        long dbCallStartTime;\n+        double dbCallDuration;\n \n-        try (PreparedStatement stmt = getConnection().prepareStatement(sql)) {\n-            stmt.setString(1, parameterName);\n-            ResultSet rs = stmt.executeQuery();\n-            if (rs.next()) {\n-                result = rs.getInt(1);\n-            }  else {\n-                result = null;\n+        try {\n+            // TODO: schema should be known by application. Fix to avoid an extra round-trip.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg3MDYz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407687063", "createdAt": "2020-05-07T17:30:41Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMDo0MVrOGSI5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMDo0MVrOGSI5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzM5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Update the stored procedures for FHIRDATA (and not FHIR_ADMIN) (Db2 and PostgreSQL)\n          \n          \n            \n            ### Update the stored procedures and functions for FHIRDATA (and not FHIR_ADMIN) (Db2 and PostgreSQL)", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421673397", "createdAt": "2020-05-07T17:30:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/README.md", "diffHunk": "@@ -195,14 +195,25 @@ Note, you may want to add a tenant key when a key is lost or needs to be changed\n \n Use `--tenant-key-file tenant.key.file` to direct the action to read the tenant-key from file.  If the file exists the tenant key (up to 44 characters is read from the file.  If the file does not exist, the generated tenantKey is written out to the file.\n \n-### Update the stored procedures for FHIRDATA (and not FHIR_ADMIN) (Db2 only)\n+### Update the stored procedures for FHIRDATA (and not FHIR_ADMIN) (Db2 and PostgreSQL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg3NzQw", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407687740", "createdAt": "2020-05-07T17:31:36Z", "commit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMTozN1rOGSI70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMTozN1rOGSI70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzkzNg==", "bodyText": "Nice the function doing a lot of work.", "url": "https://github.com/IBM/FHIR/pull/1030#discussion_r421673936", "createdAt": "2020-05-07T17:31:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceDAO.java", "diffHunk": "@@ -93,43 +90,54 @@ public Resource  insert(Resource resource, List<ExtractedParameterValue> paramet\n \n         try {\n             connection = this.getConnection();\n-\n-            this.fhirRefSequenceDAO = new FhirRefSequenceDAOImpl(connection);\n-            this.parameterNameDAO = new PostgreSqlParameterNamesDAO(connection, fhirRefSequenceDAO);\n-            this.codeSystemDAO = new PostgreSqlCodeSystemDAO(connection, fhirRefSequenceDAO);\n-\n             resourceTypeId = getResourceTypeIdFromCaches(resource.getResourceType());\n             if (resourceTypeId == null) {\n                 acquiredFromCache = false;\n-                resourceTypeId = getOrCreateResourceType(resource.getResourceType(), connection);\n+                resourceTypeId = this.readResourceTypeId(resource.getResourceType());\n                 this.addResourceTypeCacheCandidate(resource.getResourceType(), resourceTypeId);\n             } else {\n                 acquiredFromCache = true;\n             }\n-\n-            if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"resourceType=\" + resource.getResourceType() + \"  resourceTypeId=\" + resourceTypeId +\n+            if (logger.isLoggable(Level.FINER)) {\n+                logger.finer(\"resourceType=\" + resource.getResourceType() + \"  resourceTypeId=\" + resourceTypeId +\n                          \"  acquiredFromCache=\" + acquiredFromCache + \"  tenantDatastoreCacheName=\" + ResourceTypesCache.getCacheNameForTenantDatastore());\n             }\n \n+            // TODO avoid the round-trip and use the configured data schema name\n+            currentSchema = connection.getSchema().trim();\n+            stmtString = String.format(SQL_INSERT_WITH_PARAMETERS, currentSchema);\n+            stmt = connection.prepareCall(stmtString);\n+            stmt.setString(1, resource.getResourceType());\n+            stmt.setString(2, resource.getLogicalId());\n+            stmt.setBytes(3, resource.getData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9320124879c57b243f085c591275ccb7131bbcc"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjkyMDYz", "url": "https://github.com/IBM/FHIR/pull/1030#pullrequestreview-407692063", "createdAt": "2020-05-07T17:37:25Z", "commit": {"oid": "5effe479f2dd32a2e5707f6d2f656a5dfff7d752"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f22d7c0d87041ebba81e57c25f70f60dd94ce5f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/4f22d7c0d87041ebba81e57c25f70f60dd94ce5f", "committedDate": "2020-05-07T18:24:21Z", "message": "issue #945 updates per review  comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cedffdd0df3fe17ac4d6bb16fd5ca9647b19a041", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/cedffdd0df3fe17ac4d6bb16fd5ca9647b19a041", "committedDate": "2020-05-07T19:25:24Z", "message": "issue #945 log change\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 443, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}