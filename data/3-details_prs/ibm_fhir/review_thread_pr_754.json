{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjM4NTY1", "number": 754, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowNToyN1rODlCTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NTozOVrODlMlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYxNTYzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowNToyN1rOFxsctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxMzo0OVrOFxuzDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mjc4OQ==", "bodyText": "This should be changed so the logic is expressed as part of the loops condition.\nConvert to a do-while if necessary...\nAlso - FYI - https://wiki.sei.cmu.edu/confluence/display/java/MSC01-J.+Do+not+use+an+empty+infinite+loop\nit's something to avoid", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387652789", "createdAt": "2020-03-04T13:05:27Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -137,7 +137,7 @@ public static void listBuckets(AmazonS3 cosClient) {\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n-        while (resReader.ready()) {\n+        while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDUzNQ==", "bodyText": "yeah, good point. I forgot I used the same pattern in the COS break tool", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387664535", "createdAt": "2020-03-04T13:27:13Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -137,7 +137,7 @@ public static void listBuckets(AmazonS3 cosClient) {\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n-        while (resReader.ready()) {\n+        while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mjc4OQ=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTI3OA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387691278", "createdAt": "2020-03-04T14:13:49Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -137,7 +137,7 @@ public static void listBuckets(AmazonS3 cosClient) {\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n-        while (resReader.ready()) {\n+        while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mjc4OQ=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYyMjA5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowNzoyNFrOFxsgbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxODowM1rOFxz9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mzc0Mg==", "bodyText": "At the top of this class, please remove the comment above the package declaration.\n/**\n * Constants for the JavaBatch Jobs.\n */", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387653742", "createdAt": "2020-03-04T13:07:24Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -30,7 +30,9 @@\n     public static final byte[] NDJSON_LINESEPERATOR = \"\\r\\n\".getBytes();\n \n     public static final int IMPORT_MAX_PARTITIONPROCESSING_THREADNUMBER = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTM3Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387691372", "createdAt": "2020-03-04T14:14:00Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -30,7 +30,9 @@\n     public static final byte[] NDJSON_LINESEPERATOR = \"\\r\\n\".getBytes();\n \n     public static final int IMPORT_MAX_PARTITIONPROCESSING_THREADNUMBER = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mzc0Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNzM2Mw==", "bodyText": "Albert, I think you removed the wrong one.  We want to keep the javadoc on the class, but remove the extra one that was in the wrong place.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387717363", "createdAt": "2020-03-04T14:53:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -30,7 +30,9 @@\n     public static final byte[] NDJSON_LINESEPERATOR = \"\\r\\n\".getBytes();\n \n     public static final int IMPORT_MAX_PARTITIONPROCESSING_THREADNUMBER = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mzc0Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDAxOA==", "bodyText": "Right - not about this comment - it was at the top of the class (I scanned the copyrights and found it)", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387720018", "createdAt": "2020-03-04T14:57:30Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -30,7 +30,9 @@\n     public static final byte[] NDJSON_LINESEPERATOR = \"\\r\\n\".getBytes();\n \n     public static final int IMPORT_MAX_PARTITIONPROCESSING_THREADNUMBER = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mzc0Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3NTkxMQ==", "bodyText": "ha, done! thanks!", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387775911", "createdAt": "2020-03-04T16:18:03Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -30,7 +30,9 @@\n     public static final byte[] NDJSON_LINESEPERATOR = \"\\r\\n\".getBytes();\n \n     public static final int IMPORT_MAX_PARTITIONPROCESSING_THREADNUMBER = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Mzc0Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYzMzc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMDo1M1rOFxsnXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxODozN1rOFxz_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTUxOQ==", "bodyText": "I don't think this is the right approach.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387655519", "createdAt": "2020-03-04T13:10:53Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +89,14 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    /**\n+     * Use this only if the transaction is not started and managed by us, e.g, by JavaBatch framework.\n+     */\n+    public void commit2() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3NjM0Mw==", "bodyText": "changed to use existing commit()", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387776343", "createdAt": "2020-03-04T16:18:37Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +89,14 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    /**\n+     * Use this only if the transaction is not started and managed by us, e.g, by JavaBatch framework.\n+     */\n+    public void commit2() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTUxOQ=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYzOTk4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMjoyNVrOFxsrDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxODo0N1rOFxz_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjQ2MA==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387656460", "createdAt": "2020-03-04T13:12:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -17,16 +17,16 @@\n  */\n public class FHIRTransactionHelper {\n     private static final Logger log = Logger.getLogger(FHIRTransactionHelper.class.getName());\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3NjQ1NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387776455", "createdAt": "2020-03-04T16:18:47Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -17,16 +17,16 @@\n  */\n public class FHIRTransactionHelper {\n     private static final Logger log = Logger.getLogger(FHIRTransactionHelper.class.getName());\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjQ2MA=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0MTMyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMjo0N1rOFxsr4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMTo0OVrOFxuXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjY3Mg==", "bodyText": "I don't think this is the right approach.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387656672", "createdAt": "2020-03-04T13:12:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -38,12 +38,13 @@ public void begin() throws FHIRPersistenceException {\n                 txn.begin();\n                 txnStarted = true;\n             } else {\n-                log.fine(\"Transaction is already active on current thread...\");\n+                log.fine(\"Transaction is already active on current thread, get Db connection only ...\");\n+                txn.begin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2ODg1NQ==", "bodyText": "your suggestion?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387668855", "createdAt": "2020-03-04T13:35:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -38,12 +38,13 @@ public void begin() throws FHIRPersistenceException {\n                 txn.begin();\n                 txnStarted = true;\n             } else {\n-                log.fine(\"Transaction is already active on current thread...\");\n+                log.fine(\"Transaction is already active on current thread, get Db connection only ...\");\n+                txn.begin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjY3Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDIzNQ==", "bodyText": "I think you have unintended consequences.  I'm not offering a suggestion here.  I think John should review", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387684235", "createdAt": "2020-03-04T14:01:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -38,12 +38,13 @@ public void begin() throws FHIRPersistenceException {\n                 txn.begin();\n                 txnStarted = true;\n             } else {\n-                log.fine(\"Transaction is already active on current thread...\");\n+                log.fine(\"Transaction is already active on current thread, get Db connection only ...\");\n+                txn.begin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjY3Mg=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0MjU4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMzoxM1rOFxsssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzozNDowNVrOFxtZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Njg4Mw==", "bodyText": "I don't think close Connection should be in the FHIRPersistenceTransaction", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387656883", "createdAt": "2020-03-04T13:13:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -12,33 +12,36 @@\n  * This interface represents a transaction within the FHIR persistence layer.\n  */\n public interface FHIRPersistenceTransaction {\n-    \n+\n     /**\n      * Returns true iff an active transaction exists within the current thread's context.\n      */\n     boolean isActive() throws FHIRPersistenceException;\n-    \n+\n     /**\n      * Begin a new transaction on the current thread.\n      * @throws Exception\n      */\n     void begin() throws FHIRPersistenceException;\n-    \n+\n     /**\n      * Commit the current thread's transaction.\n      * @throws Exception\n      */\n     void commit() throws FHIRPersistenceException;\n-    \n+\n+\n+    void closeConnection() throws FHIRPersistenceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2ODI1Nw==", "bodyText": "then I need a new tag/field in the implementation class, this should also work.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387668257", "createdAt": "2020-03-04T13:34:05Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -12,33 +12,36 @@\n  * This interface represents a transaction within the FHIR persistence layer.\n  */\n public interface FHIRPersistenceTransaction {\n-    \n+\n     /**\n      * Returns true iff an active transaction exists within the current thread's context.\n      */\n     boolean isActive() throws FHIRPersistenceException;\n-    \n+\n     /**\n      * Begin a new transaction on the current thread.\n      * @throws Exception\n      */\n     void begin() throws FHIRPersistenceException;\n-    \n+\n     /**\n      * Commit the current thread's transaction.\n      * @throws Exception\n      */\n     void commit() throws FHIRPersistenceException;\n-    \n+\n+\n+    void closeConnection() throws FHIRPersistenceException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1Njg4Mw=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0MzQ3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMzozMVrOFxstPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMTo0MVrOFx0H5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzAyMA==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387657020", "createdAt": "2020-03-04T13:13:31Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -12,33 +12,36 @@\n  * This interface represents a transaction within the FHIR persistence layer.\n  */\n public interface FHIRPersistenceTransaction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3ODUzMw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387778533", "createdAt": "2020-03-04T16:21:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceTransaction.java", "diffHunk": "@@ -12,33 +12,36 @@\n  * This interface represents a transaction within the FHIR persistence layer.\n  */\n public interface FHIRPersistenceTransaction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzAyMA=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0NTc2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNDowNVrOFxsujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMjo0MlrOFx0K-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzM1Ng==", "bodyText": "It should use only txn.commit\nif a behavior needs to change, then change in txn.commit", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387657356", "createdAt": "2020-03-04T13:14:05Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {\n                     logger.warning(\"Failed to import due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n+            // Release the DB connection.\n+            // This doesn't really commit the transaction, because the transaction was started and will be committed\n+            // by the JavaBatch framework.\n+            txn.commit2();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NjkwOQ==", "bodyText": "have not found a way to change inside commit without adding new field to the transaction to tell the commit to only drop it's connection without commit the user transaction. but I can do so if need.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387666909", "createdAt": "2020-03-04T13:31:35Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {\n                     logger.warning(\"Failed to import due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n+            // Release the DB connection.\n+            // This doesn't really commit the transaction, because the transaction was started and will be committed\n+            // by the JavaBatch framework.\n+            txn.commit2();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzM1Ng=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3OTMyMQ==", "bodyText": "changed to close the connection inside existing commit method", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387779321", "createdAt": "2020-03-04T16:22:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {\n                     logger.warning(\"Failed to import due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n+            // Release the DB connection.\n+            // This doesn't really commit the transaction, because the transaction was started and will be committed\n+            // by the JavaBatch framework.\n+            txn.commit2();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzM1Ng=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0NjU5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNDoyMFrOFxsvDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyMjoyMlrOFx2b3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzQ4Ng==", "bodyText": "Why the conversion to Exception?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387657486", "createdAt": "2020-03-04T13:14:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNTIxOA==", "bodyText": "I thought I shoulld catch the ioexception also here, but after think it over again, I think I should keep it unchanged, and allow the framework to fail the transaction if IOException happens.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387815218", "createdAt": "2020-03-04T17:20:21Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzQ4Ng=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNjQxNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387816414", "createdAt": "2020-03-04T17:22:22Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -149,16 +148,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NzQ4Ng=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY1NjcxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNzoxM1rOFxs1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMzoxOFrOFx0MdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1OTA3OA==", "bodyText": "any particular reason for this change? 421/422 can now be on one line", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387659078", "createdAt": "2020-03-04T13:17:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -418,8 +418,8 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n \n         try {\n             checkModifiers(searchContext);\n-            queryBuilder = new JDBCQueryBuilder((ParameterDAO) this.getParameterDao(),\n-                                                (ResourceDAO) this.getResourceDao());\n+            queryBuilder = new JDBCQueryBuilder(this.getParameterDao(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3OTcwMQ==", "bodyText": "ugly, this is by my eclipse automatically", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387779701", "createdAt": "2020-03-04T16:23:18Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -418,8 +418,8 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp) t\n \n         try {\n             checkModifiers(searchContext);\n-            queryBuilder = new JDBCQueryBuilder((ParameterDAO) this.getParameterDao(),\n-                                                (ResourceDAO) this.getResourceDao());\n+            queryBuilder = new JDBCQueryBuilder(this.getParameterDao(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1OTA3OA=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY2MTIyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxODo0MFrOFxs4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNTozNFrOFx0SZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1OTgwNw==", "bodyText": "I personally don't think this is the right place or the correct change.  If you are getting it from a pool, the pool should manage the closing of the connection in this case.  In particular, this is coming from the jdbc/fhirProxyDataSource ... I think this has unintended consequences.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387659807", "createdAt": "2020-03-04T13:18:40Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1522,33 +1526,49 @@ public FHIRPersistenceTransaction getTransaction() {\n     public boolean isDeleteSupported() {\n         return true;\n     }\n-    \n+\n     private FHIRDbDAO getBaseDao() {\n         return baseDao;\n     }\n-    \n+\n     private void setBaseDao(FHIRDbDAO baseDao) {\n         this.baseDao = baseDao;\n     }\n-    \n+\n     private Connection getManagedConnection() {\n         return managedConnection;\n     }\n \n     private void setManagedConnection(Connection managedConnection) {\n         this.managedConnection = managedConnection;\n     }\n-    \n+\n     private OperationOutcome buildOKOperationOutcome() {\n         return FHIRUtil.buildOperationOutcome(\"All OK\", IssueType.INFORMATIONAL, IssueSeverity.INFORMATION);\n     }\n \n     private OperationOutcome buildErrorOperationOutcome() {\n         return FHIRUtil.buildOperationOutcome(\"The database connection was not valid\", IssueType.NO_STORE, IssueSeverity.ERROR);\n     }\n-    \n+\n     private Connection createConnection() throws FHIRPersistenceDBConnectException {\n         FHIRDbDAOImpl dao = new FHIRDbDAOImpl();\n         return dao.getConnection();\n     }\n+\n+    @Override\n+    public void closeConnection() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 1157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MTIyMQ==", "bodyText": "The same in our commit method which closes the sharedConnection, I believe the close() is just return the connection to the connection pool instead of closing the real connection to the DB.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387781221", "createdAt": "2020-03-04T16:25:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1522,33 +1526,49 @@ public FHIRPersistenceTransaction getTransaction() {\n     public boolean isDeleteSupported() {\n         return true;\n     }\n-    \n+\n     private FHIRDbDAO getBaseDao() {\n         return baseDao;\n     }\n-    \n+\n     private void setBaseDao(FHIRDbDAO baseDao) {\n         this.baseDao = baseDao;\n     }\n-    \n+\n     private Connection getManagedConnection() {\n         return managedConnection;\n     }\n \n     private void setManagedConnection(Connection managedConnection) {\n         this.managedConnection = managedConnection;\n     }\n-    \n+\n     private OperationOutcome buildOKOperationOutcome() {\n         return FHIRUtil.buildOperationOutcome(\"All OK\", IssueType.INFORMATIONAL, IssueSeverity.INFORMATION);\n     }\n \n     private OperationOutcome buildErrorOperationOutcome() {\n         return FHIRUtil.buildOperationOutcome(\"The database connection was not valid\", IssueType.NO_STORE, IssueSeverity.ERROR);\n     }\n-    \n+\n     private Connection createConnection() throws FHIRPersistenceDBConnectException {\n         FHIRDbDAOImpl dao = new FHIRDbDAOImpl();\n         return dao.getConnection();\n     }\n+\n+    @Override\n+    public void closeConnection() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1OTgwNw=="}, "originalCommit": {"oid": "72c43c512b21bc20c8044ddd86b6756a82308f5c"}, "originalPosition": 1157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMyOTI0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowMzozOFrOFxzYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowOTo0MFrOFxzn8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2NjMxMQ==", "bodyText": "remind me why we're skipping lines again?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387766311", "createdAt": "2020-03-04T16:03:38Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -137,21 +137,21 @@ public static void listBuckets(AmazonS3 cosClient) {\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n-        while (resReader.ready()) {\n-            String resLine = resReader.readLine();\n-            lineRed++;\n-            if (resLine == null) {\n-                break;\n-            }\n-            if (lineRed <= numOfLinesToSkip) {\n-                continue;\n-            }\n-            fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-            exported++;\n-            if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                break;\n+        String resLine = null;\n+        do {\n+            resLine = resReader.readLine();\n+            if (resLine != null) {\n+                lineRed++;\n+                if (lineRed <= numOfLinesToSkip) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9f44656b617ad1812b4cbc37ad17c3c8ffb1fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MDM1Mg==", "bodyText": "we support either reuse the inputstream or not reuse the inputstream, it's controlled by a switch, if we don't reuse the input stream, then the skipnumber will not be 0.    currently, I set the switch to on to reuse the inputstrean across all the chunk processing.  I could remove the \"not reuse\" codes if I find in the future that they are not really needed any more.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387770352", "createdAt": "2020-03-04T16:09:40Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -137,21 +137,21 @@ public static void listBuckets(AmazonS3 cosClient) {\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n-        while (resReader.ready()) {\n-            String resLine = resReader.readLine();\n-            lineRed++;\n-            if (resLine == null) {\n-                break;\n-            }\n-            if (lineRed <= numOfLinesToSkip) {\n-                continue;\n-            }\n-            fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-            exported++;\n-            if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                break;\n+        String resLine = null;\n+        do {\n+            resLine = resReader.readLine();\n+            if (resLine != null) {\n+                lineRed++;\n+                if (lineRed <= numOfLinesToSkip) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2NjMxMQ=="}, "originalCommit": {"oid": "8e9f44656b617ad1812b4cbc37ad17c3c8ffb1fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzIwMzExOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMjozMVrOFx8Dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMzowMVrOFx8Www==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODUxNQ==", "bodyText": "maybe unenroll ?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387908515", "createdAt": "2020-03-04T20:12:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -157,9 +158,13 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n         }\n+        // Release the DB connection.\n+        // This doesn't really commit the transaction, because the transaction was started and will be committed\n+        // by the JavaBatch framework.\n+        txn.unEnroll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb429628bc97ec67b63f308ed6f5636a028fed2f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTE2OQ==", "bodyText": "ha, OK. I will follow the dictionary.", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387911169", "createdAt": "2020-03-04T20:18:14Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -157,9 +158,13 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n         }\n+        // Release the DB connection.\n+        // This doesn't really commit the transaction, because the transaction was started and will be committed\n+        // by the JavaBatch framework.\n+        txn.unEnroll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODUxNQ=="}, "originalCommit": {"oid": "eb429628bc97ec67b63f308ed6f5636a028fed2f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMzQxMQ==", "bodyText": "done! thanks!", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387913411", "createdAt": "2020-03-04T20:23:01Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -157,9 +158,13 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 }\n-\n             }\n         }\n+        // Release the DB connection.\n+        // This doesn't really commit the transaction, because the transaction was started and will be committed\n+        // by the JavaBatch framework.\n+        txn.unEnroll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODUxNQ=="}, "originalCommit": {"oid": "eb429628bc97ec67b63f308ed6f5636a028fed2f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzMwMTEyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NTozMlrOFx8_uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMDoxMFrOFx-B_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzg5Nw==", "bodyText": "javadoc?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387923897", "createdAt": "2020-03-04T20:45:32Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTI4MQ==", "bodyText": "added description in the interface definition, didn't want to duplicate it..", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387925281", "createdAt": "2020-03-04T20:48:17Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzg5Nw=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDMzNA==", "bodyText": "the issue is this doesn't implement the interface so it needs its own javadoc", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387934334", "createdAt": "2020-03-04T21:06:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzg5Nw=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjA0OA==", "bodyText": "OK, let me add", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387936048", "createdAt": "2020-03-04T21:10:08Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzg5Nw=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MDg2MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387940861", "createdAt": "2020-03-04T21:20:10Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzg5Nw=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzMwMTU1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NTozOVrOFx8__A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMDoyMFrOFx-CWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzk2NA==", "bodyText": "javadoc?", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387923964", "createdAt": "2020-03-04T20:45:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {\n+        if (txn != null) {\n+            txn.enroll();\n+        }\n+    }\n+\n+    public void unenroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTE0Mw==", "bodyText": "added description in the interface definition, didn't want to duplicate it...", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387925143", "createdAt": "2020-03-04T20:48:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {\n+        if (txn != null) {\n+            txn.enroll();\n+        }\n+    }\n+\n+    public void unenroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzk2NA=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDI3Mg==", "bodyText": "the issue is this doesn't implement the interface so it needs its own javadoc", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387934272", "createdAt": "2020-03-04T21:06:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {\n+        if (txn != null) {\n+            txn.enroll();\n+        }\n+    }\n+\n+    public void unenroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzk2NA=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNTk4Ng==", "bodyText": "OK, let me add", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387935986", "createdAt": "2020-03-04T21:10:00Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {\n+        if (txn != null) {\n+            txn.enroll();\n+        }\n+    }\n+\n+    public void unenroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzk2NA=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MDk1NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/754#discussion_r387940955", "createdAt": "2020-03-04T21:20:20Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/main/java/com/ibm/fhir/persistence/helper/FHIRTransactionHelper.java", "diffHunk": "@@ -88,4 +88,17 @@ public void rollback() {\n             }\n         }\n     }\n+\n+    public void enroll() throws FHIRPersistenceException {\n+        if (txn != null) {\n+            txn.enroll();\n+        }\n+    }\n+\n+    public void unenroll() throws FHIRPersistenceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyMzk2NA=="}, "originalCommit": {"oid": "3e02c3ce9ddb9415fc9a50512950b03add218fe8"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}