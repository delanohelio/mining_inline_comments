{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTA5NTE1", "number": 940, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo0NTowMlrODzQtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjoxMDo0MlrODzTN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc3NzQ2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo0NTowMlrOGHuF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTowNTozN1rOGIjUuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0ODM5Mw==", "bodyText": "not sure if assigning a random id to resource with null id is the right approach.  because assigning random id doesn't help to preserver the relation between resources. so I chose to regard those resource with empty id as invalid resources which will be handled by the exception handler codes automatically.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410748393", "createdAt": "2020-04-18T20:45:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -188,12 +189,18 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n+                    String id = fhirResource.getId();\n+                    if (id == null) {\n+                        id = UUID.randomUUID().toString();\n+                    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyMDUzNg==", "bodyText": "You have confirmed my thoughts.  I have removed and added a comment.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411620536", "createdAt": "2020-04-20T19:05:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -188,12 +189,18 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n+                    String id = fhirResource.getId();\n+                    if (id == null) {\n+                        id = UUID.randomUUID().toString();\n+                    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0ODM5Mw=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc3ODkzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo0Njo1NVrOGHuGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxMTozNVrOGIjiVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0ODU3MQ==", "bodyText": "need to remove the space.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410748571", "createdAt": "2020-04-18T20:46:55Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNDAyMg==", "bodyText": "Fixed", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411624022", "createdAt": "2020-04-20T19:11:35Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0ODU3MQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc4NDc1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo1Mjo0MVrOGHuJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxMjozN1rOGIjktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTI1MA==", "bodyText": "not sure if any change made to the 2 above function ...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410749250", "createdAt": "2020-04-18T20:52:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNDYyOQ==", "bodyText": "made camelcase, and originally I had moved base64 processing around.\nShould be ok- now, no changes, just formatting and names", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411624629", "createdAt": "2020-04-20T19:12:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTI1MA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc4NzY4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo1NToxNFrOGHuKjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxMzo0OVrOGIjn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTU4MQ==", "bodyText": "changing the codes to 3 lines seems a little bit weird for me.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410749581", "createdAt": "2020-04-18T20:55:14Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }\n \n     @Override\n     public PartitionPlan mapPartitions() throws Exception {\n-        JsonReader reader = Json.createReader(new StringReader(\n-                new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n+        JsonReader reader =\n+                Json.createReader(new StringReader(\n+                        new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNTQyNg==", "bodyText": "I removed a logger between them at one point.  I was concerned I had bad data. I figured the Logger was no longer necessary.  The three lines is based on the line wrapping at 120 characters.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411625426", "createdAt": "2020-04-20T19:13:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }\n \n     @Override\n     public PartitionPlan mapPartitions() throws Exception {\n-        JsonReader reader = Json.createReader(new StringReader(\n-                new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n+        JsonReader reader =\n+                Json.createReader(new StringReader(\n+                        new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTU4MQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc4ODM0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMDo1NjoxMlrOGHuK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTowMlrOGIjqOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTY2NA==", "bodyText": "because dsType is only used once, so, not really sure if it's good to use a local variable for it.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410749664", "createdAt": "2020-04-18T20:56:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }\n \n     @Override\n     public PartitionPlan mapPartitions() throws Exception {\n-        JsonReader reader = Json.createReader(new StringReader(\n-                new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n+        JsonReader reader =\n+                Json.createReader(new StringReader(\n+                        new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n         JsonArray dataSourceArray = reader.readArray();\n         reader.close();\n \n-        List<FhirDataSource> fhirDataSources = getFhirDataSources(dataSourceArray, BulkImportDataSourceStorageType.from(dataSourceStorageType));\n-\n+        BulkImportDataSourceStorageType dsType = BulkImportDataSourceStorageType.from(dataSourceStorageType);\n+        List<FhirDataSource> fhirDataSources = getFhirDataSources(dataSourceArray, dsType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjA0MQ==", "bodyText": "I split them as I was debugging and needed to log out.  I can move it back", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411626041", "createdAt": "2020-04-20T19:15:02Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionMapper.java", "diffHunk": "@@ -130,128 +137,137 @@\n     String cosCredentialIbm;\n \n     public ImportPartitionMapper() {\n-\n+        // No Operation\n     }\n \n-\n-    class FhirDataSource\n-    {\n+    class FhirDataSource {\n         private String type;\n         private String url;\n \n         public FhirDataSource(String type, String url) {\n             super();\n             this.type = type;\n-            this.url = url;\n+            this.url  = url;\n         }\n \n         public String getType() {\n             return type;\n         }\n+\n         public void setType(String type) {\n             this.type = type;\n         }\n+\n         public String getUrl() {\n             return url;\n         }\n+\n         public void setUrl(String url) {\n             this.url = url;\n         }\n-     };\n-\n-     private List<FhirDataSource> getFhirDataSourcesForObjectStore(String DSTypeInfo, String DSDataLocationInfo) throws Exception {\n-         String nextToken = null;\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         // Create a COS/S3 client if it's not created yet.\n-         if (cosClient == null) {\n-             cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n-\n-             if (cosClient == null) {\n-                 logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n-                 throw new Exception(\"Failed to get CosClient!!\");\n-             } else {\n-                 logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n-             }\n-         }\n-         if (cosBucketName == null) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n-             return fhirDataSources;\n-         }else {\n-             logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n-         }\n-         cosBucketName = cosBucketName.toLowerCase();\n-         if (!cosClient.doesBucketExistV2(cosBucketName)) {\n-             logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n-             BulkDataUtils.listBuckets(cosClient);\n-             return fhirDataSources;\n-         }\n-\n-         ListObjectsV2Result result = null;\n-         do {\n-             if (result != null) {\n-                 nextToken = result.getNextContinuationToken();\n-             }\n-             ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n-                     .withContinuationToken(nextToken);\n-             result = cosClient.listObjectsV2(request);\n-             for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n-                 boolean isToBeProccessed = false;\n-                 if (DSDataLocationInfo != null && !DSDataLocationInfo.trim().isEmpty()) {\n-                     if (objectSummary.getKey().startsWith(DSDataLocationInfo.trim())) {\n-                         isToBeProccessed = true;\n-                     }\n-                 } else {\n-                     isToBeProccessed = true;\n-                 }\n-                 if (isToBeProccessed) {\n-                     logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey() + \") - \" + objectSummary.getSize()\n-                             + \" bytes.\");\n-                     if (objectSummary.getSize() > 0) {\n-                         fhirDataSources.add(new FhirDataSource(DSTypeInfo, objectSummary.getKey()));\n-                     }\n-                 }\n-             }\n-         } while (result != null && result.isTruncated());\n-\n-         return fhirDataSources;\n-     }\n-\n-\n-     private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type) throws Exception\n-     {\n-         List<FhirDataSource> fhirDataSources = new ArrayList<>();\n-         for (JsonValue jsonValue : dataSourceArray) {\n-             JsonObject dataSourceInfo = jsonValue.asJsonObject();\n-             String DSTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n-             String DSDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n-\n-             switch (type) {\n-             case HTTPS:\n-             case FILE:\n-                 fhirDataSources.add(new FhirDataSource(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             case AWSS3:\n-             case IBMCOS:\n-                 fhirDataSources.addAll(getFhirDataSourcesForObjectStore(DSTypeInfo, DSDataLocationInfo));\n-                 break;\n-             default:\n-                 break;\n-             }\n-         }\n-\n-         return fhirDataSources;\n-     }\n \n+        @Override\n+        public String toString() {\n+            return \"FhirDataSource [type=\" + type + \", url=\" + url + \"]\";\n+        }\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSourcesForObjectStore(String dsTypeInfo, String dsDataLocationInfo)\n+            throws Exception {\n+        String nextToken = null;\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        // Create a COS/S3 client if it's not created yet.\n+        if (cosClient == null) {\n+            cosClient =\n+                    BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n+                            cosLocation);\n+\n+            if (cosClient == null) {\n+                logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get CosClient!\");\n+            }\n+        }\n+        if (cosBucketName == null) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Failed to get BucketName!\");\n+            return fhirDataSources;\n+        } else {\n+            logger.finer(\"getFhirDataSourcesForObjectStore: Succeed get BucketName!\");\n+        }\n+        cosBucketName = cosBucketName.toLowerCase();\n+        if (!cosClient.doesBucketExistV2(cosBucketName)) {\n+            logger.warning(\"getFhirDataSourcesForObjectStore: Bucket '\" + cosBucketName + \"' not found!\");\n+            BulkDataUtils.listBuckets(cosClient);\n+            return fhirDataSources;\n+        }\n+\n+        ListObjectsV2Result result = null;\n+        do {\n+            if (result != null) {\n+                nextToken = result.getNextContinuationToken();\n+            }\n+            ListObjectsV2Request request =\n+                    new ListObjectsV2Request().withBucketName(cosBucketName).withMaxKeys(1000)\n+                            .withContinuationToken(nextToken);\n+            result = cosClient.listObjectsV2(request);\n+            for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\n+                boolean isToBeProccessed = false;\n+                if (dsDataLocationInfo != null && !dsDataLocationInfo.trim().isEmpty()) {\n+                    if (objectSummary.getKey().startsWith(dsDataLocationInfo.trim())) {\n+                        isToBeProccessed = true;\n+                    }\n+                } else {\n+                    isToBeProccessed = true;\n+                }\n+                if (isToBeProccessed) {\n+                    logger.info(\"getFhirDataSourcesForObjectStore: ObjectStorge Object(\" + objectSummary.getKey()\n+                            + \") - \" + objectSummary.getSize() + \" bytes.\");\n+                    if (objectSummary.getSize() > 0) {\n+                        fhirDataSources.add(new FhirDataSource(dsTypeInfo, objectSummary.getKey()));\n+                    }\n+                }\n+            }\n+        } while (result != null && result.isTruncated());\n+\n+        return fhirDataSources;\n+    }\n+\n+    private List<FhirDataSource> getFhirDataSources(JsonArray dataSourceArray, BulkImportDataSourceStorageType type)\n+            throws Exception {\n+        List<FhirDataSource> fhirDataSources = new ArrayList<>();\n+        for (JsonValue jsonValue : dataSourceArray) {\n+            JsonObject dataSourceInfo = jsonValue.asJsonObject();\n+            String dsTypeInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_TYPE);\n+            String dsDataLocationInfo = dataSourceInfo.getString(Constants.IMPORT_INPUT_RESOURCE_URL);\n+\n+            switch (type) {\n+            case HTTPS:\n+            case FILE:\n+                fhirDataSources.add(new FhirDataSource(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                fhirDataSources.addAll(getFhirDataSourcesForObjectStore(dsTypeInfo, dsDataLocationInfo));\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+\n+        return fhirDataSources;\n+    }\n \n     @Override\n     public PartitionPlan mapPartitions() throws Exception {\n-        JsonReader reader = Json.createReader(new StringReader(\n-                new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n+        JsonReader reader =\n+                Json.createReader(new StringReader(\n+                        new String(Base64.getDecoder().decode(dataSourcesInfo), StandardCharsets.UTF_8)));\n         JsonArray dataSourceArray = reader.readArray();\n         reader.close();\n \n-        List<FhirDataSource> fhirDataSources = getFhirDataSources(dataSourceArray, BulkImportDataSourceStorageType.from(dataSourceStorageType));\n-\n+        BulkImportDataSourceStorageType dsType = BulkImportDataSourceStorageType.from(dataSourceStorageType);\n+        List<FhirDataSource> fhirDataSources = getFhirDataSources(dataSourceArray, dsType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0OTY2NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDc5Mjc4OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/BulkDataConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTowMToyNFrOGHuM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTo0OVrOGIjsHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MDIwNg==", "bodyText": "the wrapping seems strange to me, I'm not sure what's the correct pattern, but we do need a unified pattern for this.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410750206", "createdAt": "2020-04-18T21:01:24Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/BulkDataConstants.java", "diffHunk": "@@ -23,6 +23,13 @@\n \n     // Import\n     public static final String INPUT_FORMAT = MEDIA_TYPE_ND_JSON;\n+    public static final List<String> INPUT_FORMATS = Collections.unmodifiableList(Arrays.asList(INPUT_FORMAT));\n+    public static final List<String> STORAGE_TYPES =\n+            Collections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjUyNg==", "bodyText": "it's at 120 Characters. and based on the tab stop", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411626526", "createdAt": "2020-04-20T19:15:49Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/BulkDataConstants.java", "diffHunk": "@@ -23,6 +23,13 @@\n \n     // Import\n     public static final String INPUT_FORMAT = MEDIA_TYPE_ND_JSON;\n+    public static final List<String> INPUT_FORMATS = Collections.unmodifiableList(Arrays.asList(INPUT_FORMAT));\n+    public static final List<String> STORAGE_TYPES =\n+            Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MDIwNg=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgwODk5OnYy", "diffSide": "RIGHT", "path": ".github/workflows/build.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMToxODoxOVrOGHuUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNjoxM1rOGIjtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjExMg==", "bodyText": "maybe not needed now", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410752112", "createdAt": "2020-04-18T21:18:19Z", "author": {"login": "albertwang-ibm"}, "path": ".github/workflows/build.yml", "diffHunk": "@@ -250,6 +250,7 @@ jobs:\n         containerId=$(docker ps -a | grep fhir | cut -d ' ' -f 1)\n         if [[ -z \"${containerId}\" ]]; then\n             echo \"Warning: Could not find fhir container!!!\"\n+            bash build/docker/docker-cleanup.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjYyNg==", "bodyText": "I removed it.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411626626", "createdAt": "2020-04-20T19:16:00Z", "author": {"login": "prb112"}, "path": ".github/workflows/build.yml", "diffHunk": "@@ -250,6 +250,7 @@ jobs:\n         containerId=$(docker ps -a | grep fhir | cut -d ' ' -f 1)\n         if [[ -z \"${containerId}\" ]]; then\n             echo \"Warning: Could not find fhir container!!!\"\n+            bash build/docker/docker-cleanup.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjExMg=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjc2OQ==", "bodyText": "I thought I had cleaned it out... I was wrong... Thanks.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411626769", "createdAt": "2020-04-20T19:16:13Z", "author": {"login": "prb112"}, "path": ".github/workflows/build.yml", "diffHunk": "@@ -250,6 +250,7 @@ jobs:\n         containerId=$(docker ps -a | grep fhir | cut -d ' ' -f 1)\n         if [[ -z \"${containerId}\" ]]; then\n             echo \"Warning: Could not find fhir container!!!\"\n+            bash build/docker/docker-cleanup.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjExMg=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgwOTM1OnYy", "diffSide": "RIGHT", "path": ".github/workflows/build.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMToxODozNlrOGHuUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMToxODozNlrOGHuUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjE1Nw==", "bodyText": "maybe not needed now", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410752157", "createdAt": "2020-04-18T21:18:36Z", "author": {"login": "albertwang-ibm"}, "path": ".github/workflows/build.yml", "diffHunk": "@@ -305,6 +306,7 @@ jobs:\n         containerId=$(docker ps -a | grep fhir | cut -d ' ' -f 1)\n         if [[ -z \"${containerId}\" ]]; then\n             echo \"Warning: Could not find fhir container!!!\"\n+            bash build/docker/docker-cleanup.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgwOTY1OnYy", "diffSide": "RIGHT", "path": "build/docker/docker-cleanup.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMToxODo1M1rOGHuUxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNjoyNVrOGIjtkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjE5Ng==", "bodyText": "maybe not needed now", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410752196", "createdAt": "2020-04-18T21:18:53Z", "author": {"login": "albertwang-ibm"}, "path": "build/docker/docker-cleanup.sh", "diffHunk": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjg5Nw==", "bodyText": "I thought I had cleaned it out... I was wrong... Thanks.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411626897", "createdAt": "2020-04-20T19:16:25Z", "author": {"login": "prb112"}, "path": "build/docker/docker-cleanup.sh", "diffHunk": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MjE5Ng=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgxNjA2OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/ImportOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMToyNjoyOVrOGHuXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyMjoyNFrOGIj7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1Mjk2OQ==", "bodyText": "what's the meaning of import type here? can not find the definition in spec.\nexport has system, group and patient types, not sure if import type is appropriate for import.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410752969", "createdAt": "2020-04-18T21:26:29Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/ImportOperation.java", "diffHunk": "@@ -43,7 +48,31 @@ protected OperationDefinition buildOperationDefinition() {\n     protected Parameters doInvoke(FHIROperationContext operationContext, Class<? extends Resource> resourceType,\n             String logicalId, String versionId, Parameters parameters, FHIRResourceHelpers resourceHelper)\n             throws FHIROperationException {\n-        String jobId = BulkDataUtil.checkAndValidateJob(parameters);\n-        return BulkDataFactory.getTenantInstance().importBulkData(jobId, parameters, operationContext, resourceHelper);\n+        // Checks the Import Type \n+        checkImportType(operationContext.getType());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMDQwMg==", "bodyText": "This is strictly the ResourceType.\nIt's checking that it is a valid Resource Type\nIt's checking this... type (string, required) FHIR resource type", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411630402", "createdAt": "2020-04-20T19:22:24Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/ImportOperation.java", "diffHunk": "@@ -43,7 +48,31 @@ protected OperationDefinition buildOperationDefinition() {\n     protected Parameters doInvoke(FHIROperationContext operationContext, Class<? extends Resource> resourceType,\n             String logicalId, String versionId, Parameters parameters, FHIRResourceHelpers resourceHelper)\n             throws FHIROperationException {\n-        String jobId = BulkDataUtil.checkAndValidateJob(parameters);\n-        return BulkDataFactory.getTenantInstance().importBulkData(jobId, parameters, operationContext, resourceHelper);\n+        // Checks the Import Type \n+        checkImportType(operationContext.getType());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1Mjk2OQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgyMDQxOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/StatusOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTozMTowOVrOGHuZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyMzoxMlrOGIj9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MzQ4MQ==", "bodyText": "is checkAndValidateJob the same for both export and import? if yes, not sure it's in BulkDataExportUtil ...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410753481", "createdAt": "2020-04-18T21:31:09Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/StatusOperation.java", "diffHunk": "@@ -51,13 +51,13 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n             String method = (String) operationContext.getProperty(FHIROperationContext.PROPNAME_METHOD_TYPE);\n             if (\"DELETE\".equalsIgnoreCase(method)) {\n                 // Assume GET or POST\n-                String job = BulkDataUtil.checkAndValidateJob(parameters);\n+                String job = BulkDataExportUtil.checkAndValidateJob(parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMDg3OQ==", "bodyText": "It's in BulkDataExportUtil.  It's the same code in both, I intentionally left the code there. We could always refactor to a general BulkDataUtil", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411630879", "createdAt": "2020-04-20T19:23:12Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/StatusOperation.java", "diffHunk": "@@ -51,13 +51,13 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n             String method = (String) operationContext.getProperty(FHIROperationContext.PROPNAME_METHOD_TYPE);\n             if (\"DELETE\".equalsIgnoreCase(method)) {\n                 // Assume GET or POST\n-                String job = BulkDataUtil.checkAndValidateJob(parameters);\n+                String job = BulkDataExportUtil.checkAndValidateJob(parameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MzQ4MQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgyMDkyOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/StatusOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTozMTozN1rOGHuaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTozMTozN1rOGHuaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1MzU0MQ==", "bodyText": "is checkAndValidateJob the same for both export and import? if yes, not sure it's in BulkDataExportUtil ...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410753541", "createdAt": "2020-04-18T21:31:37Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/StatusOperation.java", "diffHunk": "@@ -51,13 +51,13 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n             String method = (String) operationContext.getProperty(FHIROperationContext.PROPNAME_METHOD_TYPE);\n             if (\"DELETE\".equalsIgnoreCase(method)) {\n                 // Assume GET or POST\n-                String job = BulkDataUtil.checkAndValidateJob(parameters);\n+                String job = BulkDataExportUtil.checkAndValidateJob(parameters);\n                 // For now, we're going to execute the status update, and check. \n                 // If Base, Export Status (Else Invalid)\n                 return BulkDataFactory.getTenantInstance().delete(job, operationContext);\n             } else {\n                 // Assume GET or POST\n-                String job = BulkDataUtil.checkAndValidateJob(parameters);\n+                String job = BulkDataExportUtil.checkAndValidateJob(parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgzOTMwOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTo0OTozMlrOGHuh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTo0OTozMlrOGHuh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NTU4MQ==", "bodyText": "PUT /ibm/api/batch/jobinstances/job instance id?action=stop\nDELETE /ibm/api/batch/jobinstances/job instance id\n(1) always use jobinstanceId instead of jobexecution id to stop or delete a job.\n(2) if the job is running, deleting it directly will fail, so have to stop it first, and the delete it.\nIn the spec, there is no \"stop\" and then continue the stopped job.   so bulkdata delete = javabatch stop + delete.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410755581", "createdAt": "2020-04-18T21:49:32Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -314,17 +319,16 @@ public PollingLocationResponse status(String job) throws Exception {\n     public void delete(String job) throws Exception {\n         // Example: https://localhost:9443/ibm/api/batch/jobexecutions/9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDgzOTM4OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTo0OTo0NFrOGHuiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTo0OTo0NFrOGHuiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NTU5Mg==", "bodyText": "we can not delete a running javabatch job, we have to stop it first and then delete it.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410755592", "createdAt": "2020-04-18T21:49:44Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -334,12 +338,14 @@ public void delete(String job) throws Exception {\n             // The tenant is known, and now we need to query to delete the Job.\n             r = target.request().delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDg4MDYzOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjoyMjoxMVrOGHuzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODowNDowNlrOGJRcfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MDA2NA==", "bodyText": "did some quick tests, and seems the space is added in the request to javabatch. the defensive codes here is good!", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410760064", "createdAt": "2020-04-18T22:22:11Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -373,8 +380,11 @@ private PollingLocationResponse process(BulkExportJobExecutionResponse response)\n         String baseCosUrl = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_ENDPOINT);\n         String bucket = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_BUCKET);\n \n-        // Request\n-        String request = \"$export?_type=\" + resourceTypes;\n+        // Request - somewhere along the way a space is injected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MTAwOQ==", "bodyText": "just found it's by line 206\nString resourceType = String.join(\", \", types);", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410761009", "createdAt": "2020-04-18T22:28:31Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -373,8 +380,11 @@ private PollingLocationResponse process(BulkExportJobExecutionResponse response)\n         String baseCosUrl = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_ENDPOINT);\n         String bucket = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_BUCKET);\n \n-        // Request\n-        String request = \"$export?_type=\" + resourceTypes;\n+        // Request - somewhere along the way a space is injected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MDA2NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3NjE4OA==", "bodyText": "Fixed", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412376188", "createdAt": "2020-04-21T18:04:06Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -373,8 +380,11 @@ private PollingLocationResponse process(BulkExportJobExecutionResponse response)\n         String baseCosUrl = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_ENDPOINT);\n         String bucket = properties.get(BulkDataConfigUtil.JOB_PARAMETERS_BUCKET);\n \n-        // Request\n-        String request = \"$export?_type=\" + resourceTypes;\n+        // Request - somewhere along the way a space is injected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MDA2NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkwNzY2OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo0MDo1OFrOGHu_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo0MDo1OFrOGHu_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MzAxMQ==", "bodyText": "we have to discuss and pass the import results from the javabatch job via exit status of the job.\nit's a little bit more complicated then the export results, for export, the exit status is very simple as in this example:\nPatient[5000,200],Obervation[5000,400], and the detail export details(including urls and counts) are generated in the export operation side.\nFor import, according to the spec, we have to pass much more info from the import job to the operation codes - e.g, we may have to pass the inputUrl and count together, or we will have to use something like a consistent sequence number for the inputUrl to uniquely identify the inputUrl.  we we will also have to pass the url to the error .ndjson for the inputUrl, or at least with a tag to tell that there is error during the import, and operation code can generate the url which aligns with the error ndjson gernated in the job side.\nMaybe a simple pattern like this to pass the import status from the job to operation:\n[5000,0],[6000,30]\nmeans the first inputUrl all imported successfully with total 5000 resources.\nand the second inputUrl imported 6000 resources, but with 30 import failures.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410763011", "createdAt": "2020-04-18T22:40:58Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -404,6 +414,84 @@ private PollingLocationResponse process(BulkExportJobExecutionResponse response)\n             }\n             result.setOutput(outputList);\n         }\n+\n+        if (\"COMPLETED\".contentEquals(exitStatus) && request.contains(\"$import\")) {\n+            // Currently there is no output", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTEwNjYwOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobExecutionResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTowNzo0NVrOGHwTPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0OToxN1rOGJQyxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NDU3NA==", "bodyText": "because this class is used for both import and export, so seems better to rename the class to something like BulkDataJobExecutionResponse?", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410784574", "createdAt": "2020-04-19T01:07:45Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobExecutionResponse.java", "diffHunk": "@@ -326,6 +330,16 @@ public BulkExportJobExecutionResponse build() {\n             response.setJobParameters(jobParameter);\n             return response;\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTUwOQ==", "bodyText": "JobExecutionResponse is now the name.  I renamed all BulkExportJob", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412365509", "createdAt": "2020-04-21T17:49:17Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobExecutionResponse.java", "diffHunk": "@@ -326,6 +330,16 @@ public BulkExportJobExecutionResponse build() {\n             response.setJobParameters(jobParameter);\n             return response;\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NDU3NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTEwOTU4OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobInstanceRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTowOTo1N1rOGHwUfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0OTo0NFrOGJQz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NDg5Mg==", "bodyText": "because this class is used by both import and export, so seems better to change to something like BulkDataJobInstanceRequest?", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410784892", "createdAt": "2020-04-19T01:09:57Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobInstanceRequest.java", "diffHunk": "@@ -172,11 +176,20 @@ public Builder fhirTypeFilters(String fhirTypeFilters) {\n             return this;\n         }\n \n+        public Builder fhirDataSourcesInfo(List<Input> inputs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTgyMQ==", "bodyText": "same change", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412365821", "createdAt": "2020-04-21T17:49:44Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/BulkExportJobInstanceRequest.java", "diffHunk": "@@ -172,11 +176,20 @@ public Builder fhirTypeFilters(String fhirTypeFilters) {\n             return this;\n         }\n \n+        public Builder fhirDataSourcesInfo(List<Input> inputs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NDg5Mg=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTExODY4OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/PollingLocationResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMToxNzo0NVrOGHwYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1MDoyNlrOGJQ1yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NTg0OQ==", "bodyText": "too many empty lines in this file, better to remove some of them.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410785849", "createdAt": "2020-04-19T01:17:45Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/PollingLocationResponse.java", "diffHunk": "@@ -95,47 +117,111 @@ public void setCount(String count) {\n             this.count = count;\n         }\n \n+        public String getInputUrl() {\n+            return inputUrl;\n+        }\n+\n+        public void setInputUrl(String inputUrl) {\n+            this.inputUrl = inputUrl;\n+        }\n+\n         @Override\n         public String toString() {\n-            return \"{ \\\"type\\\" : \\\"\" + type + \"\\\", \\\"url\\\": \\\"\" + url + \"\\\", \\\"count\\\": \" + count + \"}\";\n+            return \"Output [type=\" + type + \", url=\" + url + \", count=\" + count + \", inputUrl=\" + inputUrl + \"]\";\n         }\n \n-    }\n+        /*\n+         * This is an internal only class not intended to be used out of bulkdata.\n+         * The class serializes the Output into a JSON object.\n+         */\n+        public static class Writer {\n+            private Writer() {\n+                // No Operation\n+            }\n \n-    public String toJsonString() {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append(\"{\");\n-        builder.append(\"\\n\");\n+            public static void generate(JsonGenerator generatorOutput, Output output) throws IOException {\n+                generatorOutput.writeStartObject();\n+                if (output.getType() != null) {\n+                    generatorOutput.write(\"type\", output.getType());\n+                }\n \n-        if (transactionTime != null) {\n-            builder.append(\"\\\"transactionTime\\\": \\\"\");\n-            builder.append(getTransactionTime());\n-            builder.append(\"\\\"\");\n-            builder.append(\",\");\n-        }\n+                if (output.getUrl() != null) {\n+                    generatorOutput.write(\"url\", output.getUrl());\n+                }\n \n-        if (request != null) {\n-            builder.append(\"\\\"request\\\": \\\"\");\n-            builder.append(getRequest());\n-            builder.append(\"\\\"\");\n-            builder.append(\",\");\n-        }\n+                if (output.getCount() != null) {\n+                    generatorOutput.write(\"count\", Long.parseLong(output.getCount()));\n+\n+                }\n \n-        if (requiresAccessToken != null) {\n-            builder.append(\"\\\"requiresAccessToken\\\": \");\n-            builder.append(Boolean.toString(getRequiresAccessToken()));\n-            builder.append(\"\");\n-            builder.append(\",\");\n+                if (output.getInputUrl() != null) {\n+                    generatorOutput.write(\"inputUrl\", output.getInputUrl());\n+\n+                }\n+\n+                generatorOutput.writeEnd();\n+            }\n         }\n+    }\n \n-        builder.append(\"\\\"output\\\" : [\");\n-        if (getOutput() != null) {\n-            builder.append(getOutput().stream().map(s -> s.toString()).collect(Collectors.joining(\",\")));\n+    /*\n+     * This is an internal only class not intended to be used out of bulkdata.\n+     * The class serializes the PollingLocationResponse into a JSON object.\n+     */\n+    public static class Writer {\n+        private Writer() {\n+            // No Operation\n         }\n-        builder.append(\"]\");\n \n-        builder.append(\"\\n\");\n-        builder.append(\"}\");\n-        return builder.toString();\n+        public static String generate(PollingLocationResponse response) throws IOException {\n+            Boolean pretty =\n+                    FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_DEFAULT_PRETTY_PRINT, false);\n+            final Map<java.lang.String, Object> properties =\n+                    Collections.singletonMap(JsonGenerator.PRETTY_PRINTING, pretty);\n+            final JsonGeneratorFactory factory = Json.createGeneratorFactory(properties);\n+\n+            String o = \"{}\";\n+            try (StringWriter writer = new StringWriter();) {\n+                try (JsonGenerator generator = factory.createGenerator(writer);) {\n+\n+                    generator.writeStartObject();\n+                    if (response.getTransactionTime() != null) {\n+                        generator.write(\"transactionTime\", response.getTransactionTime());\n+                    }\n+\n+                    if (response.getRequest() != null) {\n+                        generator.write(\"request\", response.getRequest());\n+                    }\n+\n+                    if (response.getRequiresAccessToken() != null) {\n+                        generator.write(\"requiresAccessToken\", response.getRequiresAccessToken());\n+                    }\n+\n+                    if (response.getOutput() != null) {\n+                        // outputs the output array.\n+                        generator.writeStartArray(\"output\");\n+                        for (Output output : response.getOutput()) {\n+                            Output.Writer.generate(generator, output);\n+                        }\n+                        generator.writeEnd();\n+                    }\n+\n+                    if (response.getError() != null) {\n+                        // outputs the output array.\n+                        generator.writeStartArray(\"error\");\n+                        for (Output output : response.getError()) {\n+                            Output.Writer.generate(generator, output);\n+                        }\n+                        generator.writeEnd();\n+                    }\n+\n+                    generator.writeEnd();\n+\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NjI4MQ==", "bodyText": "cleaned up", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412366281", "createdAt": "2020-04-21T17:50:26Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/model/PollingLocationResponse.java", "diffHunk": "@@ -95,47 +117,111 @@ public void setCount(String count) {\n             this.count = count;\n         }\n \n+        public String getInputUrl() {\n+            return inputUrl;\n+        }\n+\n+        public void setInputUrl(String inputUrl) {\n+            this.inputUrl = inputUrl;\n+        }\n+\n         @Override\n         public String toString() {\n-            return \"{ \\\"type\\\" : \\\"\" + type + \"\\\", \\\"url\\\": \\\"\" + url + \"\\\", \\\"count\\\": \" + count + \"}\";\n+            return \"Output [type=\" + type + \", url=\" + url + \", count=\" + count + \", inputUrl=\" + inputUrl + \"]\";\n         }\n \n-    }\n+        /*\n+         * This is an internal only class not intended to be used out of bulkdata.\n+         * The class serializes the Output into a JSON object.\n+         */\n+        public static class Writer {\n+            private Writer() {\n+                // No Operation\n+            }\n \n-    public String toJsonString() {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append(\"{\");\n-        builder.append(\"\\n\");\n+            public static void generate(JsonGenerator generatorOutput, Output output) throws IOException {\n+                generatorOutput.writeStartObject();\n+                if (output.getType() != null) {\n+                    generatorOutput.write(\"type\", output.getType());\n+                }\n \n-        if (transactionTime != null) {\n-            builder.append(\"\\\"transactionTime\\\": \\\"\");\n-            builder.append(getTransactionTime());\n-            builder.append(\"\\\"\");\n-            builder.append(\",\");\n-        }\n+                if (output.getUrl() != null) {\n+                    generatorOutput.write(\"url\", output.getUrl());\n+                }\n \n-        if (request != null) {\n-            builder.append(\"\\\"request\\\": \\\"\");\n-            builder.append(getRequest());\n-            builder.append(\"\\\"\");\n-            builder.append(\",\");\n-        }\n+                if (output.getCount() != null) {\n+                    generatorOutput.write(\"count\", Long.parseLong(output.getCount()));\n+\n+                }\n \n-        if (requiresAccessToken != null) {\n-            builder.append(\"\\\"requiresAccessToken\\\": \");\n-            builder.append(Boolean.toString(getRequiresAccessToken()));\n-            builder.append(\"\");\n-            builder.append(\",\");\n+                if (output.getInputUrl() != null) {\n+                    generatorOutput.write(\"inputUrl\", output.getInputUrl());\n+\n+                }\n+\n+                generatorOutput.writeEnd();\n+            }\n         }\n+    }\n \n-        builder.append(\"\\\"output\\\" : [\");\n-        if (getOutput() != null) {\n-            builder.append(getOutput().stream().map(s -> s.toString()).collect(Collectors.joining(\",\")));\n+    /*\n+     * This is an internal only class not intended to be used out of bulkdata.\n+     * The class serializes the PollingLocationResponse into a JSON object.\n+     */\n+    public static class Writer {\n+        private Writer() {\n+            // No Operation\n         }\n-        builder.append(\"]\");\n \n-        builder.append(\"\\n\");\n-        builder.append(\"}\");\n-        return builder.toString();\n+        public static String generate(PollingLocationResponse response) throws IOException {\n+            Boolean pretty =\n+                    FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_DEFAULT_PRETTY_PRINT, false);\n+            final Map<java.lang.String, Object> properties =\n+                    Collections.singletonMap(JsonGenerator.PRETTY_PRINTING, pretty);\n+            final JsonGeneratorFactory factory = Json.createGeneratorFactory(properties);\n+\n+            String o = \"{}\";\n+            try (StringWriter writer = new StringWriter();) {\n+                try (JsonGenerator generator = factory.createGenerator(writer);) {\n+\n+                    generator.writeStartObject();\n+                    if (response.getTransactionTime() != null) {\n+                        generator.write(\"transactionTime\", response.getTransactionTime());\n+                    }\n+\n+                    if (response.getRequest() != null) {\n+                        generator.write(\"request\", response.getRequest());\n+                    }\n+\n+                    if (response.getRequiresAccessToken() != null) {\n+                        generator.write(\"requiresAccessToken\", response.getRequiresAccessToken());\n+                    }\n+\n+                    if (response.getOutput() != null) {\n+                        // outputs the output array.\n+                        generator.writeStartArray(\"output\");\n+                        for (Output output : response.getOutput()) {\n+                            Output.Writer.generate(generator, output);\n+                        }\n+                        generator.writeEnd();\n+                    }\n+\n+                    if (response.getError() != null) {\n+                        // outputs the output array.\n+                        generator.writeStartArray(\"error\");\n+                        for (Output output : response.getError()) {\n+                            Output.Writer.generate(generator, output);\n+                        }\n+                        generator.writeEnd();\n+                    }\n+\n+                    generator.writeEnd();\n+\n+                }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NTg0OQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTEzNzE2OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTozMToyNVrOGHwf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTozMToyNVrOGHwf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NzgzOQ==", "bodyText": "Interesting and nice FHIRPath usage here!!", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410787839", "createdAt": "2020-04-19T01:31:25Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.operation.bulkdata.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.operation.bulkdata.BulkDataConstants;\n+import com.ibm.fhir.operation.bulkdata.model.type.Input;\n+import com.ibm.fhir.operation.bulkdata.model.type.StorageDetail;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+/**\n+ * BulkData Import Util captures common methods\n+ */\n+public class BulkDataImportUtil {\n+    private BulkDataImportUtil() {\n+        // No Operation\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, Throwable cause, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg, cause).withIssue(ooi);\n+    }\n+\n+    public static String retrieveInputFormat(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputFormat (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_FORMAT.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null\n+                        && parameter.getValue().is(com.ibm.fhir.model.type.String.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    // Check the MediaType\n+                    String val = parameter.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n+                    if (BulkDataConstants.INPUT_FORMATS.contains(val)) {\n+                        return val;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputFormat' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static String retrieveInputSource(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputSource (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_SOURCE.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null && parameter.getValue().is(com.ibm.fhir.model.type.Uri.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    return parameter.getValue().as(com.ibm.fhir.model.type.Uri.class).getValue();\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputSource' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static List<Input> retrieveInputs(Parameters parameters) throws FHIROperationException {\n+        // Parameter: input (required)\n+        List<Input> inputs = new ArrayList<>();\n+\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTEzODI4OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTozMjozN1rOGHwgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1MDo0N1rOGJQ26g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4Nzk2MQ==", "bodyText": "should we add 5 as a constant?", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410787961", "createdAt": "2020-04-19T01:32:37Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.operation.bulkdata.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.operation.bulkdata.BulkDataConstants;\n+import com.ibm.fhir.operation.bulkdata.model.type.Input;\n+import com.ibm.fhir.operation.bulkdata.model.type.StorageDetail;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+/**\n+ * BulkData Import Util captures common methods\n+ */\n+public class BulkDataImportUtil {\n+    private BulkDataImportUtil() {\n+        // No Operation\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, Throwable cause, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg, cause).withIssue(ooi);\n+    }\n+\n+    public static String retrieveInputFormat(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputFormat (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_FORMAT.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null\n+                        && parameter.getValue().is(com.ibm.fhir.model.type.String.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    // Check the MediaType\n+                    String val = parameter.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n+                    if (BulkDataConstants.INPUT_FORMATS.contains(val)) {\n+                        return val;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputFormat' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static String retrieveInputSource(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputSource (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_SOURCE.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null && parameter.getValue().is(com.ibm.fhir.model.type.Uri.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    return parameter.getValue().as(com.ibm.fhir.model.type.Uri.class).getValue();\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputSource' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static List<Input> retrieveInputs(Parameters parameters) throws FHIROperationException {\n+        // Parameter: input (required)\n+        List<Input> inputs = new ArrayList<>();\n+\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        EvaluationContext evaluationContext = new EvaluationContext(parameters);\n+\n+        try {\n+            Collection<FHIRPathNode> result = evaluator.evaluate(evaluationContext, \"parameter.where(name = 'input')\");\n+\n+            Iterator<FHIRPathNode> iter = result.iterator();\n+            while (iter.hasNext()) {\n+                FHIRPathElementNode node = (FHIRPathElementNode) iter.next();\n+\n+                // Resource Types extracted and Type is verified.\n+                EvaluationContext evaluationContextPartType = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartType =\n+                        evaluator.evaluate(evaluationContextPartType, \"part.where(name = 'type').value\");\n+                String type =\n+                        ((FHIRPathElementNode) resultPartType.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.String.class).getValue();\n+\n+                // Checks if not valid, and throws exception\n+                if (!ModelSupport.isResourceType(type)) {\n+                    throw buildExceptionWithIssue(\"$import invalid Resource Type 'input'\", IssueType.INVALID);\n+                }\n+\n+                // Resource URL extracted.\n+                EvaluationContext evaluationContextPartUrl = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartUrl =\n+                        evaluator.evaluate(evaluationContextPartUrl, \"part.where(name = 'url').value\");\n+                String url =\n+                        ((FHIRPathElementNode) resultPartUrl.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.Url.class).getValue();\n+\n+                // Verify Url is allowed\n+                verifyUrlAllowed(url);\n+\n+                // Add to the Inputs List\n+                inputs.add(new Input(type, url));\n+            }\n+        } catch (FHIRPathException e) {\n+            throw buildExceptionWithIssue(\"$import invalid parameters with expression in 'input'\", e,\n+                    IssueType.INVALID);\n+        }\n+\n+        if (inputs.isEmpty()) {\n+            throw buildExceptionWithIssue(\"$import requires 'input' is not found\", IssueType.INVALID);\n+        }\n+\n+        checkAllowedTotalSizeForTenantOrSystem(inputs.size());\n+        return inputs;\n+    }\n+\n+    /**\n+     * check the allowed total size for tenant and system\n+     * \n+     * @param inputSize\n+     * @throws FHIROperationException\n+     */\n+    public static void checkAllowedTotalSizeForTenantOrSystem(Integer inputSize) throws FHIROperationException {\n+        Integer tenantCount =\n+                FHIRConfigHelper.getIntProperty(FHIRConfiguration.PROPERTY_BULKDATA_BATCHJOB_MAX_INPUT_PER_TENANT, 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NjU3MA==", "bodyText": "Yes, adding now", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412366570", "createdAt": "2020-04-21T17:50:47Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.operation.bulkdata.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.operation.bulkdata.BulkDataConstants;\n+import com.ibm.fhir.operation.bulkdata.model.type.Input;\n+import com.ibm.fhir.operation.bulkdata.model.type.StorageDetail;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+/**\n+ * BulkData Import Util captures common methods\n+ */\n+public class BulkDataImportUtil {\n+    private BulkDataImportUtil() {\n+        // No Operation\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, Throwable cause, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg, cause).withIssue(ooi);\n+    }\n+\n+    public static String retrieveInputFormat(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputFormat (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_FORMAT.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null\n+                        && parameter.getValue().is(com.ibm.fhir.model.type.String.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    // Check the MediaType\n+                    String val = parameter.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n+                    if (BulkDataConstants.INPUT_FORMATS.contains(val)) {\n+                        return val;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputFormat' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static String retrieveInputSource(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputSource (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_SOURCE.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null && parameter.getValue().is(com.ibm.fhir.model.type.Uri.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    return parameter.getValue().as(com.ibm.fhir.model.type.Uri.class).getValue();\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputSource' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static List<Input> retrieveInputs(Parameters parameters) throws FHIROperationException {\n+        // Parameter: input (required)\n+        List<Input> inputs = new ArrayList<>();\n+\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        EvaluationContext evaluationContext = new EvaluationContext(parameters);\n+\n+        try {\n+            Collection<FHIRPathNode> result = evaluator.evaluate(evaluationContext, \"parameter.where(name = 'input')\");\n+\n+            Iterator<FHIRPathNode> iter = result.iterator();\n+            while (iter.hasNext()) {\n+                FHIRPathElementNode node = (FHIRPathElementNode) iter.next();\n+\n+                // Resource Types extracted and Type is verified.\n+                EvaluationContext evaluationContextPartType = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartType =\n+                        evaluator.evaluate(evaluationContextPartType, \"part.where(name = 'type').value\");\n+                String type =\n+                        ((FHIRPathElementNode) resultPartType.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.String.class).getValue();\n+\n+                // Checks if not valid, and throws exception\n+                if (!ModelSupport.isResourceType(type)) {\n+                    throw buildExceptionWithIssue(\"$import invalid Resource Type 'input'\", IssueType.INVALID);\n+                }\n+\n+                // Resource URL extracted.\n+                EvaluationContext evaluationContextPartUrl = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartUrl =\n+                        evaluator.evaluate(evaluationContextPartUrl, \"part.where(name = 'url').value\");\n+                String url =\n+                        ((FHIRPathElementNode) resultPartUrl.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.Url.class).getValue();\n+\n+                // Verify Url is allowed\n+                verifyUrlAllowed(url);\n+\n+                // Add to the Inputs List\n+                inputs.add(new Input(type, url));\n+            }\n+        } catch (FHIRPathException e) {\n+            throw buildExceptionWithIssue(\"$import invalid parameters with expression in 'input'\", e,\n+                    IssueType.INVALID);\n+        }\n+\n+        if (inputs.isEmpty()) {\n+            throw buildExceptionWithIssue(\"$import requires 'input' is not found\", IssueType.INVALID);\n+        }\n+\n+        checkAllowedTotalSizeForTenantOrSystem(inputs.size());\n+        return inputs;\n+    }\n+\n+    /**\n+     * check the allowed total size for tenant and system\n+     * \n+     * @param inputSize\n+     * @throws FHIROperationException\n+     */\n+    public static void checkAllowedTotalSizeForTenantOrSystem(Integer inputSize) throws FHIROperationException {\n+        Integer tenantCount =\n+                FHIRConfigHelper.getIntProperty(FHIRConfiguration.PROPERTY_BULKDATA_BATCHJOB_MAX_INPUT_PER_TENANT, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4Nzk2MQ=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE0NzU3OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTozOToyMFrOGHwkWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1MzoxOFrOGJQ-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4ODk1NA==", "bodyText": "this means e.g, for https input url, user will have to change server config to add the BaseUrl for it first, maybe better to make the check to be configurable, like by default enable, but user can choose to disable the check.", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410788954", "createdAt": "2020-04-19T01:39:20Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.operation.bulkdata.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.operation.bulkdata.BulkDataConstants;\n+import com.ibm.fhir.operation.bulkdata.model.type.Input;\n+import com.ibm.fhir.operation.bulkdata.model.type.StorageDetail;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+/**\n+ * BulkData Import Util captures common methods\n+ */\n+public class BulkDataImportUtil {\n+    private BulkDataImportUtil() {\n+        // No Operation\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, Throwable cause, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg, cause).withIssue(ooi);\n+    }\n+\n+    public static String retrieveInputFormat(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputFormat (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_FORMAT.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null\n+                        && parameter.getValue().is(com.ibm.fhir.model.type.String.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    // Check the MediaType\n+                    String val = parameter.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n+                    if (BulkDataConstants.INPUT_FORMATS.contains(val)) {\n+                        return val;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputFormat' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static String retrieveInputSource(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputSource (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_SOURCE.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null && parameter.getValue().is(com.ibm.fhir.model.type.Uri.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    return parameter.getValue().as(com.ibm.fhir.model.type.Uri.class).getValue();\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputSource' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static List<Input> retrieveInputs(Parameters parameters) throws FHIROperationException {\n+        // Parameter: input (required)\n+        List<Input> inputs = new ArrayList<>();\n+\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        EvaluationContext evaluationContext = new EvaluationContext(parameters);\n+\n+        try {\n+            Collection<FHIRPathNode> result = evaluator.evaluate(evaluationContext, \"parameter.where(name = 'input')\");\n+\n+            Iterator<FHIRPathNode> iter = result.iterator();\n+            while (iter.hasNext()) {\n+                FHIRPathElementNode node = (FHIRPathElementNode) iter.next();\n+\n+                // Resource Types extracted and Type is verified.\n+                EvaluationContext evaluationContextPartType = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartType =\n+                        evaluator.evaluate(evaluationContextPartType, \"part.where(name = 'type').value\");\n+                String type =\n+                        ((FHIRPathElementNode) resultPartType.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.String.class).getValue();\n+\n+                // Checks if not valid, and throws exception\n+                if (!ModelSupport.isResourceType(type)) {\n+                    throw buildExceptionWithIssue(\"$import invalid Resource Type 'input'\", IssueType.INVALID);\n+                }\n+\n+                // Resource URL extracted.\n+                EvaluationContext evaluationContextPartUrl = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartUrl =\n+                        evaluator.evaluate(evaluationContextPartUrl, \"part.where(name = 'url').value\");\n+                String url =\n+                        ((FHIRPathElementNode) resultPartUrl.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.Url.class).getValue();\n+\n+                // Verify Url is allowed\n+                verifyUrlAllowed(url);\n+\n+                // Add to the Inputs List\n+                inputs.add(new Input(type, url));\n+            }\n+        } catch (FHIRPathException e) {\n+            throw buildExceptionWithIssue(\"$import invalid parameters with expression in 'input'\", e,\n+                    IssueType.INVALID);\n+        }\n+\n+        if (inputs.isEmpty()) {\n+            throw buildExceptionWithIssue(\"$import requires 'input' is not found\", IssueType.INVALID);\n+        }\n+\n+        checkAllowedTotalSizeForTenantOrSystem(inputs.size());\n+        return inputs;\n+    }\n+\n+    /**\n+     * check the allowed total size for tenant and system\n+     * \n+     * @param inputSize\n+     * @throws FHIROperationException\n+     */\n+    public static void checkAllowedTotalSizeForTenantOrSystem(Integer inputSize) throws FHIROperationException {\n+        Integer tenantCount =\n+                FHIRConfigHelper.getIntProperty(FHIRConfiguration.PROPERTY_BULKDATA_BATCHJOB_MAX_INPUT_PER_TENANT, 5);\n+        if (tenantCount == null || tenantCount < inputSize) {\n+            throw buildExceptionWithIssue(\n+                    \"$import maximum input per bulkdata import request 'fhirServer/bulkdata/maxInputPerRequest'\",\n+                    IssueType.INVALID);\n+        }\n+    }\n+\n+    /**\n+     * verify url is allowed\n+     * \n+     * @param url\n+     * @throws FHIROperationException\n+     */\n+    public static void verifyUrlAllowed(String url) throws FHIROperationException {\n+        List<String> baseUrls =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2ODQyOA==", "bodyText": "I don't think this is a good defensive practice.  best to have them enter", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r412368428", "createdAt": "2020-04-21T17:53:18Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/util/BulkDataImportUtil.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.operation.bulkdata.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.ibm.fhir.config.FHIRConfigHelper;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.operation.bulkdata.BulkDataConstants;\n+import com.ibm.fhir.operation.bulkdata.model.type.Input;\n+import com.ibm.fhir.operation.bulkdata.model.type.StorageDetail;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+/**\n+ * BulkData Import Util captures common methods\n+ */\n+public class BulkDataImportUtil {\n+    private BulkDataImportUtil() {\n+        // No Operation\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg).withIssue(ooi);\n+    }\n+\n+    public static FHIROperationException buildExceptionWithIssue(String msg, Throwable cause, IssueType issueType)\n+            throws FHIROperationException {\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n+        return new FHIROperationException(msg, cause).withIssue(ooi);\n+    }\n+\n+    public static String retrieveInputFormat(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputFormat (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_FORMAT.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null\n+                        && parameter.getValue().is(com.ibm.fhir.model.type.String.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    // Check the MediaType\n+                    String val = parameter.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n+                    if (BulkDataConstants.INPUT_FORMATS.contains(val)) {\n+                        return val;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputFormat' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static String retrieveInputSource(Parameters parameters) throws FHIROperationException {\n+        // Parameter: inputSource (required)\n+        // If there are multiple entries, the processing only takes the first entry.\n+        if (parameters != null) {\n+            for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                if (BulkDataConstants.PARAM_INPUT_SOURCE.equals(parameter.getName().getValue())\n+                        && parameter.getValue() != null && parameter.getValue().is(com.ibm.fhir.model.type.Uri.class)) {\n+                    // If the parameter isn't passed, use application/fhir+ndjson\n+                    return parameter.getValue().as(com.ibm.fhir.model.type.Uri.class).getValue();\n+                }\n+            }\n+        }\n+\n+        throw buildExceptionWithIssue(\"$import requires 'inputSource' is not found\", IssueType.INVALID);\n+    }\n+\n+    public static List<Input> retrieveInputs(Parameters parameters) throws FHIROperationException {\n+        // Parameter: input (required)\n+        List<Input> inputs = new ArrayList<>();\n+\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        EvaluationContext evaluationContext = new EvaluationContext(parameters);\n+\n+        try {\n+            Collection<FHIRPathNode> result = evaluator.evaluate(evaluationContext, \"parameter.where(name = 'input')\");\n+\n+            Iterator<FHIRPathNode> iter = result.iterator();\n+            while (iter.hasNext()) {\n+                FHIRPathElementNode node = (FHIRPathElementNode) iter.next();\n+\n+                // Resource Types extracted and Type is verified.\n+                EvaluationContext evaluationContextPartType = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartType =\n+                        evaluator.evaluate(evaluationContextPartType, \"part.where(name = 'type').value\");\n+                String type =\n+                        ((FHIRPathElementNode) resultPartType.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.String.class).getValue();\n+\n+                // Checks if not valid, and throws exception\n+                if (!ModelSupport.isResourceType(type)) {\n+                    throw buildExceptionWithIssue(\"$import invalid Resource Type 'input'\", IssueType.INVALID);\n+                }\n+\n+                // Resource URL extracted.\n+                EvaluationContext evaluationContextPartUrl = new EvaluationContext(node.element());\n+                Collection<FHIRPathNode> resultPartUrl =\n+                        evaluator.evaluate(evaluationContextPartUrl, \"part.where(name = 'url').value\");\n+                String url =\n+                        ((FHIRPathElementNode) resultPartUrl.iterator().next()).element()\n+                                .as(com.ibm.fhir.model.type.Url.class).getValue();\n+\n+                // Verify Url is allowed\n+                verifyUrlAllowed(url);\n+\n+                // Add to the Inputs List\n+                inputs.add(new Input(type, url));\n+            }\n+        } catch (FHIRPathException e) {\n+            throw buildExceptionWithIssue(\"$import invalid parameters with expression in 'input'\", e,\n+                    IssueType.INVALID);\n+        }\n+\n+        if (inputs.isEmpty()) {\n+            throw buildExceptionWithIssue(\"$import requires 'input' is not found\", IssueType.INVALID);\n+        }\n+\n+        checkAllowedTotalSizeForTenantOrSystem(inputs.size());\n+        return inputs;\n+    }\n+\n+    /**\n+     * check the allowed total size for tenant and system\n+     * \n+     * @param inputSize\n+     * @throws FHIROperationException\n+     */\n+    public static void checkAllowedTotalSizeForTenantOrSystem(Integer inputSize) throws FHIROperationException {\n+        Integer tenantCount =\n+                FHIRConfigHelper.getIntProperty(FHIRConfiguration.PROPERTY_BULKDATA_BATCHJOB_MAX_INPUT_PER_TENANT, 5);\n+        if (tenantCount == null || tenantCount < inputSize) {\n+            throw buildExceptionWithIssue(\n+                    \"$import maximum input per bulkdata import request 'fhirServer/bulkdata/maxInputPerRequest'\",\n+                    IssueType.INVALID);\n+        }\n+    }\n+\n+    /**\n+     * verify url is allowed\n+     * \n+     * @param url\n+     * @throws FHIROperationException\n+     */\n+    public static void verifyUrlAllowed(String url) throws FHIROperationException {\n+        List<String> baseUrls =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4ODk1NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE2Njg0OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/test/java/com/ibm/fhir/operation/support/bulkdata/helpers/ImportOperationParametersGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1MzozM1rOGHwsZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1MzozM1rOGHwsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTAxMg==", "bodyText": "The contentEncoding parameter for https storageDetail in the Spec is a little bit strange for me, because per my understanding, this contentencoding info should be in the response header when accessing the https url, so seems doesn't make too much sense to add it to the storageDetail.\nMaybe reasonable for other storage types which don't have such build-in contentencoding info...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410791012", "createdAt": "2020-04-19T01:53:33Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/test/java/com/ibm/fhir/operation/support/bulkdata/helpers/ImportOperationParametersGenerator.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.operation.support.bulkdata.helpers;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.resource.Parameters.Parameter;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Url;\n+\n+/**\n+ * \n+ */\n+public class ImportOperationParametersGenerator {\n+\n+    public ImportOperationParametersGenerator() {\n+        // No Operation\n+    }\n+\n+    public Parameters generateParameters(String inputFormat, String inputSource, String type, String url,\n+            String storageType)\n+            throws FHIRGeneratorException, IOException {\n+        List<Parameter> parameters = new ArrayList<>();\n+\n+        // Required: inputFormat\n+        parameters.add(Parameter.builder().name(string(\"inputFormat\")).value(string(inputFormat)).build());\n+\n+        // Required: inputSource - where it came from. \n+        parameters.add(Parameter.builder().name(string(\"inputSource\")).value(Uri.uri(inputSource)).build());\n+\n+        // Required: Input Values\n+        Parameter part1 = Parameter.builder().name(string(\"type\")).value(string(type)).build();\n+        Parameter part2 = Parameter.builder().name(string(\"url\")).value(Url.of(url)).build();\n+\n+        // Required: Input\n+        Parameter inputParameter =\n+                Parameter.builder().name(string(\"input\")).part(part1, part2)\n+                        .build();\n+        parameters.add(inputParameter);\n+\n+        inputParameter =\n+                Parameter.builder().name(string(\"input\")).part(part1, part2)\n+                        .build();\n+        parameters.add(inputParameter);\n+\n+        // Optional: Storage Detail\n+        Parameter part5 =\n+                Parameter.builder().name(string(\"contentEncoding\")).value(string(\"gzip\")).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE2OTc0OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/test/java/com/ibm/fhir/operation/support/bulkdata/helpers/ImportOperationDefinitionGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1NjoxMlrOGHwtdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1NjoxMlrOGHwtdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTI4NA==", "bodyText": "nice and cool generator!", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410791284", "createdAt": "2020-04-19T01:56:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/test/java/com/ibm/fhir/operation/support/bulkdata/helpers/ImportOperationDefinitionGenerator.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.operation.support.bulkdata.helpers;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.OperationDefinition;\n+import com.ibm.fhir.model.resource.OperationDefinition.Parameter;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.ContactDetail;\n+import com.ibm.fhir.model.type.ContactPoint;\n+import com.ibm.fhir.model.type.Markdown;\n+import com.ibm.fhir.model.type.Narrative;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Xhtml;\n+import com.ibm.fhir.model.type.code.ContactPointSystem;\n+import com.ibm.fhir.model.type.code.FHIRAllTypes;\n+import com.ibm.fhir.model.type.code.NarrativeStatus;\n+import com.ibm.fhir.model.type.code.OperationKind;\n+import com.ibm.fhir.model.type.code.OperationParameterUse;\n+import com.ibm.fhir.model.type.code.PublicationStatus;\n+\n+/**\n+ * ImportOperationDefGeneratorMain is used to generate the OperationDefinition for the BulkData Import Operation.\n+ */\n+public class ImportOperationDefinitionGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE3Njk0OnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/test/resources/testdata/config/default/fhir-server-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMToyMFrOGHwwWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMToyMFrOGHwwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjAyNw==", "bodyText": "for import, do you want a COS implementation or https implementation?", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792027", "createdAt": "2020-04-19T02:01:20Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-operation-bulkdata/src/test/resources/testdata/config/default/fhir-server-config.json", "diffHunk": "@@ -0,0 +1,28 @@\n+{\n+    \"__comment\": \"FHIR Server - Bulk Data - Test Configuration\",\n+    \"fhirServer\": {\n+        \"bulkdata\": {\n+            \"bulkDataBatchJobIdEncryptionKey\": \"change-password\",\n+            \"applicationName\": \"fhir-bulkimportexport-webapp\",\n+            \"moduleName\": \"fhir-bulkimportexport.war\",\n+            \"jobParameters\": {\n+                \"cos.bucket.name\": \"fhir-r4-connectathon\",\n+                \"cos.location\": \"us\",\n+                \"cos.endpointurl\": \"fake\",\n+                \"fhir.tenant\": \"default\",\n+                \"cos.credential.ibm\": \"Y\",\n+                \"cos.api.key\": \"fake\",\n+                \"cos.srvinst.id\": \"fake\"\n+            },\n+            \"implementation_type\": \"cos\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4MzIxOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNjoyM1rOGHwy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNjoyM1rOGHwy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjY5OA==", "bodyText": "too many spaces", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792698", "createdAt": "2020-04-19T02:06:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -188,11 +199,11 @@ public void testCreate2Patients() throws Exception {\n         savedPatientId = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new patient and verify it.\n-        response = target.path(\"Patient/\" + savedPatientId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response       = target.path(\"Patient/\" + savedPatientId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4MzY4OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzowM1rOGHwzLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzowM1rOGHwzLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjc1MQ==", "bodyText": "one unneeded space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792751", "createdAt": "2020-04-19T02:07:03Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -188,11 +199,11 @@ public void testCreate2Patients() throws Exception {\n         savedPatientId = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new patient and verify it.\n-        response = target.path(\"Patient/\" + savedPatientId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response       = target.path(\"Patient/\" + savedPatientId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n \n         // Create 2nd Patient.\n-        entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        entity   = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4Mzk5OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzoyMFrOGHwzUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzoyMFrOGHwzUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjc4NA==", "bodyText": "too many spaces...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792784", "createdAt": "2020-04-19T02:07:20Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -204,12 +215,12 @@ public void testCreate2Patients() throws Exception {\n         savedPatientId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new patient and verify it.\n-        response = target.path(\"Patient/\" + savedPatientId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response        = target.path(\"Patient/\" + savedPatientId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NDY1OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzo1MlrOGHwzmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzo1MlrOGHwzmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjg1Nw==", "bodyText": "unneeded spaces", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792857", "createdAt": "2020-04-19T02:07:52Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -250,7 +261,7 @@ public void testGroup() throws Exception {\n         savedGroupId = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response     = target.path(\"Group/\" + savedGroupId).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NTA4OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODoxMFrOGHwzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODoxMFrOGHwzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkwNA==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792904", "createdAt": "2020-04-19T02:08:10Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -259,16 +270,18 @@ public void testGroup() throws Exception {\n         // (2) Build a new Group with patient2 and the above group only as members.\n         ArrayList<Member> members = new ArrayList<>();\n         group = group.toBuilder().member(members).build();\n-        Member member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId2)).build())\n-                .build();\n+        Member member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId2)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId)).build())\n-                .build();\n+        member =\n+                Member.builder().entity(Reference.builder()\n+                        .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId)).build()).build();\n         members.add(member);\n-        group = group.toBuilder().member(members).build();\n-        entity = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        group    = group.toBuilder().member(members).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NTIxOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODoxN1rOGHwz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODoxN1rOGHwz1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkxOQ==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792919", "createdAt": "2020-04-19T02:08:17Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -259,16 +270,18 @@ public void testGroup() throws Exception {\n         // (2) Build a new Group with patient2 and the above group only as members.\n         ArrayList<Member> members = new ArrayList<>();\n         group = group.toBuilder().member(members).build();\n-        Member member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId2)).build())\n-                .build();\n+        Member member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId2)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId)).build())\n-                .build();\n+        member =\n+                Member.builder().entity(Reference.builder()\n+                        .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId)).build()).build();\n         members.add(member);\n-        group = group.toBuilder().member(members).build();\n-        entity = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        group    = group.toBuilder().member(members).build();\n+        entity   = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NTI0OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODoyNFrOGHwz2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNzozNFrOGIjwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkyMw==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792923", "createdAt": "2020-04-19T02:08:24Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNzU2OQ==", "bodyText": "fixed, I was playing with save and alignment", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411627569", "createdAt": "2020-04-20T19:17:34Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkyMw=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NTM1OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODozNVrOGHwz6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODo1NFrOGIjzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkzNw==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792937", "createdAt": "2020-04-19T02:08:35Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n         responseGroup = response.readEntity(Group.class);\n         assertNotNull(responseGroup);\n         assertTrue(responseGroup.getMember().size() == 2);\n \n         // (3) Modify the first group to contain the second group and patient1 only, this creates a circle reference situation.\n         members.clear();\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n+                        .build();\n         members.add(member);\n-        group = group.toBuilder().id(savedGroupId).member(members).build();\n+        group    = group.toBuilder().id(savedGroupId).member(members).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyODQyMQ==", "bodyText": "fixed, I was playing with save and alignment", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411628421", "createdAt": "2020-04-20T19:18:54Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n         responseGroup = response.readEntity(Group.class);\n         assertNotNull(responseGroup);\n         assertTrue(responseGroup.getMember().size() == 2);\n \n         // (3) Modify the first group to contain the second group and patient1 only, this creates a circle reference situation.\n         members.clear();\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n+                        .build();\n         members.add(member);\n-        group = group.toBuilder().id(savedGroupId).member(members).build();\n+        group    = group.toBuilder().id(savedGroupId).member(members).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkzNw=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NTcyOnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowODo0M1rOGHw0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNzo0MlrOGIjwhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjk3NA==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410792974", "createdAt": "2020-04-19T02:08:43Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n         responseGroup = response.readEntity(Group.class);\n         assertNotNull(responseGroup);\n         assertTrue(responseGroup.getMember().size() == 2);\n \n         // (3) Modify the first group to contain the second group and patient1 only, this creates a circle reference situation.\n         members.clear();\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n+                        .build();\n         members.add(member);\n-        group = group.toBuilder().id(savedGroupId).member(members).build();\n+        group    = group.toBuilder().id(savedGroupId).member(members).build();\n \n         // Update the patient and verify the response.\n-        entity = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        entity   = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNzY1NA==", "bodyText": "fixed, I was playing with save and alignment", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411627654", "createdAt": "2020-04-20T19:17:42Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -280,26 +293,30 @@ public void testGroup() throws Exception {\n         savedGroupId2 = getLocationLogicalId(response);\n \n         // Next, call the 'read' API to retrieve the new group and verify it.\n-        response = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        response      = target.path(\"Group/\" + savedGroupId2).request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n         responseGroup = response.readEntity(Group.class);\n         assertNotNull(responseGroup);\n         assertTrue(responseGroup.getMember().size() == 2);\n \n         // (3) Modify the first group to contain the second group and patient1 only, this creates a circle reference situation.\n         members.clear();\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Patient/\" + savedPatientId)).build())\n+                        .build();\n         members.add(member);\n-        member = Member.builder().entity(Reference.builder()\n-                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n-                .build();\n+        member =\n+                Member.builder()\n+                        .entity(Reference.builder()\n+                                .reference(com.ibm.fhir.model.type.String.of(\"Group/\" + savedGroupId2)).build())\n+                        .build();\n         members.add(member);\n-        group = group.toBuilder().id(savedGroupId).member(members).build();\n+        group    = group.toBuilder().id(savedGroupId).member(members).build();\n \n         // Update the patient and verify the response.\n-        entity = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        entity   = Entity.entity(group, FHIRMediaType.APPLICATION_FHIR_JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjk3NA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4NzA2OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowOTo0NVrOGHw0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODoyOFrOGIjyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzEzMA==", "bodyText": "overall, seems there are many unneeded spaces before \"=\" ...", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410793130", "createdAt": "2020-04-19T02:09:45Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -366,42 +385,44 @@ public void testGroupExport() throws Exception {\n     private void checkGroupExportStatus() throws InterruptedException {\n         Response response;\n         do {\n-            response =\n-                doGet(exportStatusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n+            response = doGet(exportStatusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n             // 202 accept means the request is still under processing\n             // 200 mean export is finished\n-            assertTrue(response.getStatus() == 200 || response.getStatus() == 202);\n+            assertTrue(response.getStatus() == Response.Status.OK.getStatusCode()\n+                    || response.getStatus() == Response.Status.ACCEPTED.getStatusCode());\n             Thread.sleep(5000);\n-        } while (response.getStatus() == 202);\n+        } while (response.getStatus() == Response.Status.ACCEPTED.getStatusCode());\n \n-        assertEquals(response.getStatus(), 200);\n+        assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n         // Export finished successfully, we should be about to find the \"output\" part in the message body\n         // which includes all the COS objects download urls.\n         String body = response.readEntity(String.class);\n         assertTrue(body.contains(\"output\"));\n         // Find and try the first download link\n-        String downloadUrl = body.substring(body.lastIndexOf(\"\\\"output\\\" :\"));\n+        String downloadUrl = body.substring(body.lastIndexOf(\"\\\"output\\\":\"));\n         int endIndex = downloadUrl.indexOf(\".ndjson\") + 7;\n         downloadUrl = downloadUrl.substring(downloadUrl.indexOf(\"https\"), endIndex);\n-        System.out.println(\"downloadUrl = \" + downloadUrl);\n+        if (DEBUG) {\n+            System.out.println(\"downloadUrl = \" + downloadUrl);\n+        }\n         WebTarget client = ClientBuilder.newClient().target(downloadUrl);\n         response = client.request().get(Response.class);\n-        assertEquals(response.getStatus(), 200);\n+        assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n         // Verify to make sure there are Groups, Condition and Observation in the output\n         // (1) Verify that there is one condition exported\n         assertTrue(body.contains(\"Condition_1.ndjson\"));\n         String conditionStr = body.substring(body.lastIndexOf(\"Condition_1.ndjson\"));\n         conditionStr = conditionStr.substring(0, conditionStr.indexOf(\"}\") + 1);\n-        assertTrue(conditionStr.contains(\"\\\"count\\\": 1}\"));\n+        assertTrue(conditionStr.contains(\"\\\"count\\\": 1\"));\n         // (2) Verify that there is one observation exported\n         assertTrue(body.contains(\"Observation_1.ndjson\"));\n         String observationStr = body.substring(body.lastIndexOf(\"Observation_1.ndjson\"));\n         observationStr = observationStr.substring(0, observationStr.indexOf(\"}\") + 1);\n-        assertTrue(observationStr.contains(\"\\\"count\\\": 1}\"));\n+        assertTrue(observationStr.contains(\"\\\"count\\\": 1\"));\n         // (3) Verify that there are 2 groups exported\n         assertTrue(body.contains(\"Group_1.ndjson\"));\n         String groupStr = body.substring(body.lastIndexOf(\"Group_1.ndjson\"));\n         groupStr = groupStr.substring(0, groupStr.indexOf(\"}\") + 1);\n-        assertTrue(groupStr.contains(\"\\\"count\\\": 2}\"));\n+        assertTrue(groupStr.contains(\"\\\"count\\\": 2\"));\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyODEzNA==", "bodyText": "fixed, I was playing with save and alignment", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411628134", "createdAt": "2020-04-20T19:18:28Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ExportOperationTest.java", "diffHunk": "@@ -366,42 +385,44 @@ public void testGroupExport() throws Exception {\n     private void checkGroupExportStatus() throws InterruptedException {\n         Response response;\n         do {\n-            response =\n-                doGet(exportStatusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n+            response = doGet(exportStatusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n             // 202 accept means the request is still under processing\n             // 200 mean export is finished\n-            assertTrue(response.getStatus() == 200 || response.getStatus() == 202);\n+            assertTrue(response.getStatus() == Response.Status.OK.getStatusCode()\n+                    || response.getStatus() == Response.Status.ACCEPTED.getStatusCode());\n             Thread.sleep(5000);\n-        } while (response.getStatus() == 202);\n+        } while (response.getStatus() == Response.Status.ACCEPTED.getStatusCode());\n \n-        assertEquals(response.getStatus(), 200);\n+        assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n         // Export finished successfully, we should be about to find the \"output\" part in the message body\n         // which includes all the COS objects download urls.\n         String body = response.readEntity(String.class);\n         assertTrue(body.contains(\"output\"));\n         // Find and try the first download link\n-        String downloadUrl = body.substring(body.lastIndexOf(\"\\\"output\\\" :\"));\n+        String downloadUrl = body.substring(body.lastIndexOf(\"\\\"output\\\":\"));\n         int endIndex = downloadUrl.indexOf(\".ndjson\") + 7;\n         downloadUrl = downloadUrl.substring(downloadUrl.indexOf(\"https\"), endIndex);\n-        System.out.println(\"downloadUrl = \" + downloadUrl);\n+        if (DEBUG) {\n+            System.out.println(\"downloadUrl = \" + downloadUrl);\n+        }\n         WebTarget client = ClientBuilder.newClient().target(downloadUrl);\n         response = client.request().get(Response.class);\n-        assertEquals(response.getStatus(), 200);\n+        assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n         // Verify to make sure there are Groups, Condition and Observation in the output\n         // (1) Verify that there is one condition exported\n         assertTrue(body.contains(\"Condition_1.ndjson\"));\n         String conditionStr = body.substring(body.lastIndexOf(\"Condition_1.ndjson\"));\n         conditionStr = conditionStr.substring(0, conditionStr.indexOf(\"}\") + 1);\n-        assertTrue(conditionStr.contains(\"\\\"count\\\": 1}\"));\n+        assertTrue(conditionStr.contains(\"\\\"count\\\": 1\"));\n         // (2) Verify that there is one observation exported\n         assertTrue(body.contains(\"Observation_1.ndjson\"));\n         String observationStr = body.substring(body.lastIndexOf(\"Observation_1.ndjson\"));\n         observationStr = observationStr.substring(0, observationStr.indexOf(\"}\") + 1);\n-        assertTrue(observationStr.contains(\"\\\"count\\\": 1}\"));\n+        assertTrue(observationStr.contains(\"\\\"count\\\": 1\"));\n         // (3) Verify that there are 2 groups exported\n         assertTrue(body.contains(\"Group_1.ndjson\"));\n         String groupStr = body.substring(body.lastIndexOf(\"Group_1.ndjson\"));\n         groupStr = groupStr.substring(0, groupStr.indexOf(\"}\") + 1);\n-        assertTrue(groupStr.contains(\"\\\"count\\\": 2}\"));\n+        assertTrue(groupStr.contains(\"\\\"count\\\": 2\"));\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzEzMA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTE4ODA2OnYy", "diffSide": "RIGHT", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ImportOperationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjoxMDo0MlrOGHw1GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODozOVrOGIjy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzI0MA==", "bodyText": "space", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r410793240", "createdAt": "2020-04-19T02:10:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ImportOperationTest.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.core.FHIRMediaType;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.resource.Parameters.Parameter;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.test.TestUtil;\n+import com.ibm.fhir.model.type.HumanName;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Url;\n+\n+/**\n+ * These tests exercise the $import operation a bulkdata proposal\n+ * \n+ * <pre>\n+ * curl -k -X POST -u \"fhiruser:change-password\" -H 'Content-Type: application/fhir+json' 'https://localhost:9443/fhir-server/api/v4/$import' -d '{\n+    \"resourceType\": \"Parameters\",\n+    \"id\": \"30321130-5032-49fb-be54-9b8b82b2445a\",\n+    \"parameter\": [\n+        {\n+            \"name\": \"inputFormat\",\n+            \"valueString\": \"application/fhir+ndjson\"\n+        },\n+        {\n+            \"name\": \"inputSource\",\n+            \"valueUri\": \"https://localhost:9443/source-fhir-server\"\n+        },\n+        {\n+            \"name\": \"input\",\n+            \"part\": [\n+                {\n+                    \"name\": \"type\",\n+                    \"valueString\": \"Patient\"\n+                },\n+                {\n+                    \"name\": \"url\",\n+                    \"valueUrl\": \"test-import.ndjson\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"storageDetail\",\n+            \"valueString\": \"ibm-cos\"\n+        }\n+    ]\n+}'\n+\n+grab content-location\n+\n+curl 'https://localhost:9443/fhir-server/api/v4/$bulkdata-status?job=FvHrLGPv0oKZNyLzBnY5iA%3D%3D' -k -u \"fhiruser:change-password\" -v\n+ * </pre>\n+ */\n+public class ImportOperationTest extends FHIRServerTestBase {\n+    // Test Specific\n+    public static final String TEST_GROUP_NAME = \"import-operation\";\n+    public static final boolean ON = true;\n+    public static final boolean DEBUG = false;\n+\n+    // URLs to call against the instance\n+    public static final String BASE_VALID_URL = \"/$import\";\n+    public static final String BASE_VALID_STATUS_URL = \"/$bulkdata-status\";\n+    public static final String FORMAT = \"application/fhir+ndjson\";\n+\n+    private Parameters generateParameters(String inputFormat, String inputSource, String resourceType, String url)\n+            throws FHIRGeneratorException, IOException {\n+        List<Parameter> parameters = new ArrayList<>();\n+\n+        // Required: inputFormat\n+        parameters.add(Parameter.builder().name(string(\"inputFormat\")).value(string(inputFormat)).build());\n+\n+        // Required: inputSource - where it came from. \n+        parameters.add(Parameter.builder().name(string(\"inputSource\")).value(Uri.uri(inputSource)).build());\n+\n+        // Required: Input Values\n+        Parameter part1 = Parameter.builder().name(string(\"type\")).value(string(resourceType)).build();\n+        Parameter part2 = Parameter.builder().name(string(\"url\")).value(Url.of(url)).build();\n+\n+        // Required: Input (relative to bucket)\n+        Parameter inputParameter = Parameter.builder().name(string(\"input\")).part(part1, part2).build();\n+        parameters.add(inputParameter);\n+\n+        // Optional: Storage Detail\n+        Parameter storageDetailParameter =\n+                Parameter.builder().name(string(\"storageDetail\")).value(string(\"ibm-cos\")).build();\n+        parameters.add(storageDetailParameter);\n+\n+        Parameters.Builder builder = Parameters.builder();\n+        builder.id(UUID.randomUUID().toString());\n+        builder.parameter(parameters);\n+        Parameters ps = builder.build();\n+\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(ps, writer);\n+            if (DEBUG) {\n+                System.out.println(writer.toString());\n+            }\n+        }\n+        return ps;\n+    }\n+\n+    /**\n+     * add query parameter list\n+     */\n+    public WebTarget addQueryParameterList(WebTarget target, String header, List<String> vals) {\n+        if (header != null && vals != null && !vals.isEmpty()) {\n+            target = target.queryParam(header, vals.stream().collect(Collectors.joining(\",\")));\n+        }\n+        return target;\n+    }\n+\n+    /**\n+     * adds the query parameter\n+     */\n+    public WebTarget addQueryParameter(WebTarget target, String header, String val) {\n+        if (header != null && val != null) {\n+            target = target.queryParam(header, val);\n+        }\n+        return target;\n+    }\n+\n+    public Response doGet(String path, String mimeType) {\n+        WebTarget target = getWebTarget();\n+        target = target.path(path);\n+        return target.request(mimeType).get(Response.class);\n+    }\n+\n+    public Response doPost(String path, String inputFormat, String inputSource, String resourceType, String url)\n+            throws FHIRGeneratorException, IOException {\n+        WebTarget target = getWebTarget();\n+        target = target.path(path);\n+        if (DEBUG) {\n+            System.out.println(\"URL -> \" + target.getUri());\n+        }\n+        Parameters parameters = generateParameters(inputFormat, inputSource, resourceType, url);\n+        Entity<Parameters> entity = Entity.entity(parameters, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        return target.request(FHIRMediaType.APPLICATION_FHIR_JSON).post(entity, Response.class);\n+    }\n+\n+    public Response polling(String statusUrl) throws InterruptedException {\n+        int status = 202;\n+        int totalTime = 0;\n+        Response response = null;\n+        while (Response.Status.ACCEPTED.getStatusCode() == status) {\n+            response = doGet(statusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n+            // 202 accept means the request is still under processing\n+            // 200 mean export is finished\n+            status   = response.getStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyODI4MA==", "bodyText": "fixed, I was playing with save and alignment", "url": "https://github.com/IBM/FHIR/pull/940#discussion_r411628280", "createdAt": "2020-04-20T19:18:39Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ImportOperationTest.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test;\n+\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.core.FHIRMediaType;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.resource.Parameters.Parameter;\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.test.TestUtil;\n+import com.ibm.fhir.model.type.HumanName;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Url;\n+\n+/**\n+ * These tests exercise the $import operation a bulkdata proposal\n+ * \n+ * <pre>\n+ * curl -k -X POST -u \"fhiruser:change-password\" -H 'Content-Type: application/fhir+json' 'https://localhost:9443/fhir-server/api/v4/$import' -d '{\n+    \"resourceType\": \"Parameters\",\n+    \"id\": \"30321130-5032-49fb-be54-9b8b82b2445a\",\n+    \"parameter\": [\n+        {\n+            \"name\": \"inputFormat\",\n+            \"valueString\": \"application/fhir+ndjson\"\n+        },\n+        {\n+            \"name\": \"inputSource\",\n+            \"valueUri\": \"https://localhost:9443/source-fhir-server\"\n+        },\n+        {\n+            \"name\": \"input\",\n+            \"part\": [\n+                {\n+                    \"name\": \"type\",\n+                    \"valueString\": \"Patient\"\n+                },\n+                {\n+                    \"name\": \"url\",\n+                    \"valueUrl\": \"test-import.ndjson\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"storageDetail\",\n+            \"valueString\": \"ibm-cos\"\n+        }\n+    ]\n+}'\n+\n+grab content-location\n+\n+curl 'https://localhost:9443/fhir-server/api/v4/$bulkdata-status?job=FvHrLGPv0oKZNyLzBnY5iA%3D%3D' -k -u \"fhiruser:change-password\" -v\n+ * </pre>\n+ */\n+public class ImportOperationTest extends FHIRServerTestBase {\n+    // Test Specific\n+    public static final String TEST_GROUP_NAME = \"import-operation\";\n+    public static final boolean ON = true;\n+    public static final boolean DEBUG = false;\n+\n+    // URLs to call against the instance\n+    public static final String BASE_VALID_URL = \"/$import\";\n+    public static final String BASE_VALID_STATUS_URL = \"/$bulkdata-status\";\n+    public static final String FORMAT = \"application/fhir+ndjson\";\n+\n+    private Parameters generateParameters(String inputFormat, String inputSource, String resourceType, String url)\n+            throws FHIRGeneratorException, IOException {\n+        List<Parameter> parameters = new ArrayList<>();\n+\n+        // Required: inputFormat\n+        parameters.add(Parameter.builder().name(string(\"inputFormat\")).value(string(inputFormat)).build());\n+\n+        // Required: inputSource - where it came from. \n+        parameters.add(Parameter.builder().name(string(\"inputSource\")).value(Uri.uri(inputSource)).build());\n+\n+        // Required: Input Values\n+        Parameter part1 = Parameter.builder().name(string(\"type\")).value(string(resourceType)).build();\n+        Parameter part2 = Parameter.builder().name(string(\"url\")).value(Url.of(url)).build();\n+\n+        // Required: Input (relative to bucket)\n+        Parameter inputParameter = Parameter.builder().name(string(\"input\")).part(part1, part2).build();\n+        parameters.add(inputParameter);\n+\n+        // Optional: Storage Detail\n+        Parameter storageDetailParameter =\n+                Parameter.builder().name(string(\"storageDetail\")).value(string(\"ibm-cos\")).build();\n+        parameters.add(storageDetailParameter);\n+\n+        Parameters.Builder builder = Parameters.builder();\n+        builder.id(UUID.randomUUID().toString());\n+        builder.parameter(parameters);\n+        Parameters ps = builder.build();\n+\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(ps, writer);\n+            if (DEBUG) {\n+                System.out.println(writer.toString());\n+            }\n+        }\n+        return ps;\n+    }\n+\n+    /**\n+     * add query parameter list\n+     */\n+    public WebTarget addQueryParameterList(WebTarget target, String header, List<String> vals) {\n+        if (header != null && vals != null && !vals.isEmpty()) {\n+            target = target.queryParam(header, vals.stream().collect(Collectors.joining(\",\")));\n+        }\n+        return target;\n+    }\n+\n+    /**\n+     * adds the query parameter\n+     */\n+    public WebTarget addQueryParameter(WebTarget target, String header, String val) {\n+        if (header != null && val != null) {\n+            target = target.queryParam(header, val);\n+        }\n+        return target;\n+    }\n+\n+    public Response doGet(String path, String mimeType) {\n+        WebTarget target = getWebTarget();\n+        target = target.path(path);\n+        return target.request(mimeType).get(Response.class);\n+    }\n+\n+    public Response doPost(String path, String inputFormat, String inputSource, String resourceType, String url)\n+            throws FHIRGeneratorException, IOException {\n+        WebTarget target = getWebTarget();\n+        target = target.path(path);\n+        if (DEBUG) {\n+            System.out.println(\"URL -> \" + target.getUri());\n+        }\n+        Parameters parameters = generateParameters(inputFormat, inputSource, resourceType, url);\n+        Entity<Parameters> entity = Entity.entity(parameters, FHIRMediaType.APPLICATION_FHIR_JSON);\n+        return target.request(FHIRMediaType.APPLICATION_FHIR_JSON).post(entity, Response.class);\n+    }\n+\n+    public Response polling(String statusUrl) throws InterruptedException {\n+        int status = 202;\n+        int totalTime = 0;\n+        Response response = null;\n+        while (Response.Status.ACCEPTED.getStatusCode() == status) {\n+            response = doGet(statusUrl, FHIRMediaType.APPLICATION_FHIR_JSON);\n+            // 202 accept means the request is still under processing\n+            // 200 mean export is finished\n+            status   = response.getStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzI0MA=="}, "originalCommit": {"oid": "edce37272d37c1310e32a19fbd445793e12d5557"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4959, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}