{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODkzMzc1", "number": 782, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoxMzozMVrODoLSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NTowNVrODoV44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU0NTA3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoxMzozMVrOF2kclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoxMzozMVrOF2kclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NDU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n          \n          \n            \n            The `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  If the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392764564", "createdAt": "2020-03-16T03:13:31Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU1MjU3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoyMDo0MVrOF2khQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoyMDo0MVrOF2khQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NTc2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n          \n          \n            \n            The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema to which the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392765760", "createdAt": "2020-03-16T03:20:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU2MDg2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoyODoyMFrOF2kmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxNDo0MlrOF2zoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzA1Mw==", "bodyText": "Note sure what this line is trying to say.  Maybe just leave it at \"changes to the ADMIN schema are not supported at this time\"?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392767053", "createdAt": "2020-03-16T03:28:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxMzM0Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393013342", "createdAt": "2020-03-16T13:14:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzA1Mw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU2MTYxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoyODo1M1rOF2kmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0ODowOFrOF2un-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzE2Ng==", "bodyText": "Not sure I get this one either", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392767166", "createdAt": "2020-03-16T03:28:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTMyMQ==", "bodyText": "If you remove an UniqueIndex, and have previously applied to a database, you must remove\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n          \n          \n            \n            If the UniqueIndex or ForeignKeyConstraint is removed, and the constraint has been previously applied to a database, the active schema must be updated, and the object must be dropped.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392931321", "createdAt": "2020-03-16T10:48:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzE2Ng=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU2MjYxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzoyOTo1MFrOF2kncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxMzo0MVrOF2zmEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzM0NQ==", "bodyText": "should the example just below this show the setVersion thing?  if not, maybe change the order so that the snippet comes before the comment about setVersion?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392767345", "createdAt": "2020-03-16T03:29:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxMjc1Mw==", "bodyText": "I forgot to add it! - added inline", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393012753", "createdAt": "2020-03-16T13:13:41Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzM0NQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU2MzM4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzozMDoyNVrOF2kn3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxNToyMFrOF2zpqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzQ1NQ==", "bodyText": "incomplete", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392767455", "createdAt": "2020-03-16T03:30:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxMzY3NQ==", "bodyText": "removed", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393013675", "createdAt": "2020-03-16T13:15:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NzQ1NQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU2NjY5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzozMzoyOFrOF2kp-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0NjozMVrOF2ukUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2Nzk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n          \n          \n            \n            If you change the stored procedure signature, you MUST drop the stored procedure before applying the stored procedure to the database.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392767993", "createdAt": "2020-03-16T03:33:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2ODEzNA==", "bodyText": "Also, is this different than any other stored procedure?\nWhy is it that it must be dropped instead of updated/replaced in-place?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392768134", "createdAt": "2020-03-16T03:34:12Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2Nzk5Mw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMDM4NA==", "bodyText": "you may recall we hit this before.  If the method has say three input, and you try dropping it, you must use the specific signature to drop it.  The code currently tries to create a new unique method, leaving two in place, not one.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392930384", "createdAt": "2020-03-16T10:46:31Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2Nzk5Mw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU3MzU1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo0MDoxN1rOF2kuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0MTozNFrOF20pMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2OTA4MQ==", "bodyText": "What is the TENANT(1) under PARTITION?\nWhat is the TENANT under FHIR_SEQUENCE?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392769081", "createdAt": "2020-03-16T03:40:17Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyOTkzOA==", "bodyText": "clarified, and removed...", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393029938", "createdAt": "2020-03-16T13:41:34Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2OTA4MQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU3ODQwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo0NDoyMFrOF2kxDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0NDoxN1rOF20wAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2OTgwNA==", "bodyText": "Why do the search-related tables have both a simple name (e.g. STRING VALUES) and a real name (e.g. <RESOURCE>_STR_VALUES) whereas RESOURCE and LOGICAL RESOURCE tables do not?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392769804", "createdAt": "2020-03-16T03:44:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MDE0NQ==", "bodyText": "also would be neat if we could move that Extracted Search Parameter Values label between the RESOURCE/LOGICAL_RESOURCE tables and the search tables as the current location seems to indicate its a label about how the tables relate to their Indices...", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392770145", "createdAt": "2020-03-16T03:46:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2OTgwNA=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzMTY4Mg==", "bodyText": "clarified, that was an oversight for the first one.\nthe second one is addressed", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393031682", "createdAt": "2020-03-16T13:44:17Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2OTgwNA=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU4MTU0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo0Njo1M1rOF2ky5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyMDoxMFrOF2z1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MDI3Ng==", "bodyText": "probably just my lack of db2 knowledge here, but whats the unit?  is there a simple explanation of \"EXTENTSIZE\" we could pop here so that folks like me don't need to go look it up to see why its relevant?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392770276", "createdAt": "2020-03-16T03:46:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjYxNg==", "bodyText": "added", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393016616", "createdAt": "2020-03-16T13:20:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MDI3Ng=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU5MTY3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo1NTo0N1rOF2k4xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozOToxOVrOF20juA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MTc4MQ==", "bodyText": "Maybe just say its created via fhir-persistence-schema and point at the https://github.com/IBM/FHIR/tree/master/fhir-persistence-schema README for this part?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392771781", "createdAt": "2020-03-16T03:55:47Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyODUzNg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393028536", "createdAt": "2020-03-16T13:39:19Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MTc4MQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDU5NDAwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMzo1NzoxOVrOF2k6Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1MDozNlrOF2utdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MjA5OQ==", "bodyText": "Why?\nMaybe just say \"we don't expect it will need to be changed, modified, or migrated\"?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392772099", "createdAt": "2020-03-16T03:57:19Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjcyNw==", "bodyText": "There are some hard assumptions on the tablespace.  I'll update the words, but I think it's important to convey the fact it should never be changed in this code.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392932727", "createdAt": "2020-03-16T10:50:36Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MjA5OQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYwMTEwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDowMzozM1rOF2k-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyMzoyMVrOF2z8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MzE3Nw==", "bodyText": "Maybe a note to indicate that this is different from the resource logical ids?\nMaybe something like this:\n\nUsed to assign a database-internal id for each logical FHIR resource. This differs from the Resource.id associated with each resource in that its internal to the database and unique across resource types.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392773177", "createdAt": "2020-03-16T04:03:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxODUxOQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393018519", "createdAt": "2020-03-16T13:23:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MzE3Nw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYwMjcxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDowNToxN1rOF2k_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDowNToxN1rOF2k_Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MzQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n          \n          \n            \n            Do not remove any of the tenant sequences; these sequences must provide unique, non-cycled integer values for the persistence layer to work properly.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392773442", "createdAt": "2020-03-16T04:05:17Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYwNjAxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDowODoyNlrOF2lBKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNzo1MlrOF20gOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MzkyOA==", "bodyText": "I suggest removing line 194, or at least moving it elsewhere.  Line 196 seems like it refers back to it, but I think its actually referring to the paragraph before it.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392773928", "createdAt": "2020-03-16T04:08:26Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNzY0Mg==", "bodyText": "cleaned this up.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393027642", "createdAt": "2020-03-16T13:37:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MzkyOA=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYwOTUyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxMTozN1rOF2lDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxMTozN1rOF2lDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NDQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Common reasons to modify the Resource's tables are: \n          \n          \n            \n            Common reasons to modify the Resource tables are:", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392774459", "createdAt": "2020-03-16T04:11:37Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYxMTU1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxMzo0MVrOF2lEew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNToyNVrOF20aMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NDc3OQ==", "bodyText": "As the column types, changes are changed in any column\n\nI didn't get what this was trying to say", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392774779", "createdAt": "2020-03-16T04:13:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjA5OA==", "bodyText": "I revised", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393026098", "createdAt": "2020-03-16T13:35:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NDc3OQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYxNDkxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxNjoyN1rOF2lGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxNjoyN1rOF2lGbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n          \n          \n            \n                - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on `SearchParameter.code`).", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392775278", "createdAt": "2020-03-16T04:16:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYxNzA2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxODoxOFrOF2lHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxMDo1NlrOF2zf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n          \n          \n            \n                - If there is a new SearchParameter (with a new `code`) added to the system, the SearchParameter values are only updated if/when the resource is updated.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392775595", "createdAt": "2020-03-16T04:18:18Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTc3Nw==", "bodyText": "We should probably have an open issue for this one...we've talked about ways to add a \"re-index\" feature but it hasn't become a top priority yet.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392775777", "createdAt": "2020-03-16T04:19:15Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTU5NQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxMTE4Mg==", "bodyText": "FHIR Search - Search Re-indexing #789 is now open", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393011182", "createdAt": "2020-03-16T13:10:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTU5NQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYxOTMyOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxOTo1M1rOF2lI5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNTo0NVrOF20bEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTkxMQ==", "bodyText": "incomplete", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392775911", "createdAt": "2020-03-16T04:19:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjMyMA==", "bodyText": "I completed the statement.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393026320", "createdAt": "2020-03-16T13:35:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTkxMQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYyMDUzOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyMDo1NVrOF2lJoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozMzoxNVrOF20VLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjA5Nw==", "bodyText": "combine this with the statement on line 239?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392776097", "createdAt": "2020-03-16T04:20:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNDgxMw==", "bodyText": "done.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393024813", "createdAt": "2020-03-16T13:33:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjA5Nw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYyMjY1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyMjoyMlrOF2lKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyMzozNlrOF2lLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n          \n          \n            \n            Each of these tables has row-level permissions based on the conditional READ-only global variable `SV_TENANT_ID`. For example, for AUDITEVENT_COMPOSITES:", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392776395", "createdAt": "2020-03-16T04:22:22Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjU2MA==", "bodyText": "also, what does \"conditional\" mean in this sentence?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392776560", "createdAt": "2020-03-16T04:23:36Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjM5NQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYyNTM4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyNToxMlrOF2lMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyNToxMlrOF2lMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3Njc5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These permissions should not be removed, migrated, altered or changed.\n          \n          \n            \n            For security reasons, these permissions should not be removed, migrated, or altered.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392776796", "createdAt": "2020-03-16T04:25:12Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYyNjQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyNjowNVrOF2lM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyNjowNVrOF2lM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3Njk1Ng==", "bodyText": "maybe update FHIRAPP to FHIRDATA just to match the other examples?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392776956", "createdAt": "2020-03-16T04:26:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYyOTE5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyODozM1rOF2lOkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyOTo0MFrOF20MMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzM2Mw==", "bodyText": "What is it trying to say?  Which schema is add_parameter_name, add_resource_type, and add_any_resource in?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392777363", "createdAt": "2020-03-16T04:28:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyMjUxMw==", "bodyText": "I clarified.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393022513", "createdAt": "2020-03-16T13:29:40Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzM2Mw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYzNTM5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDozMzoyMFrOF2lSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyNzo1N1rOF20H5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODI1Mw==", "bodyText": "What is \"buildSchema\" ?   I don't see that one mentioned at https://github.com/IBM/FHIR/tree/master/fhir-persistence-schema#execute-the-fhir-persistence-schema-command-line-interface-cli ...is it the same as the update-proc action?", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392778253", "createdAt": "2020-03-16T04:33:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyMTQxNA==", "bodyText": "I clarified", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393021414", "createdAt": "2020-03-16T13:27:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODI1Mw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYzNjkxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDozNDozNlrOF2lS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyNDozOVrOF2z_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODQ3OQ==", "bodyText": "Same comment as above...just wondering if this is just a reminder about \"normal\" procedure stuff or something special about ours.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392778479", "createdAt": "2020-03-16T04:34:36Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxOTMyNA==", "bodyText": "clarified", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393019324", "createdAt": "2020-03-16T13:24:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODQ3OQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDYzOTc5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDozNjozNVrOF2lUjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDozNjozNVrOF2lUjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODg5Mw==", "bodyText": "akward change of tense.  maybe something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n          \n          \n            \n            The Db2 data definition secures data access using `GRANT` predicates. To update or change, use the `--grant-to` predicate to apply the grants.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392778893", "createdAt": "2020-03-16T04:36:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDY0NDI3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo0MDoyOVrOF2lXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo0NToyMFrOF2laxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTU4MQ==", "bodyText": "Not sure what belongs here vs on the wiki (e.g. https://github.com/IBM/FHIR/wiki/IBM-FHIR-Server-on-DB2---SQL-Tips)...", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392779581", "createdAt": "2020-03-16T04:40:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n+\n+If a grant is removed from the Java code, a manual process must be followed to remove or change the grant for the corresponding tables, procedures and variables. \n+\n+## References\n+The following are useful references for inspecting and understanding the Db2 data definition, and checking the current configurations, and useful links. \n+\n+### References: SQL Queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MDQ4NA==", "bodyText": "I think we should be very choosy about what goes here and we should include information about why you might want to run each of them.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392780484", "createdAt": "2020-03-16T04:45:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n+\n+If a grant is removed from the Java code, a manual process must be followed to remove or change the grant for the corresponding tables, procedures and variables. \n+\n+## References\n+The following are useful references for inspecting and understanding the Db2 data definition, and checking the current configurations, and useful links. \n+\n+### References: SQL Queries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTU4MQ=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDY0NjQwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo0MjoyMFrOF2lYgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1NDoyNVrOF2u1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTkwNw==", "bodyText": "Maybe remove this one?  I'm really not sure when you'd want to do it and it doesn't seem germane to managing schema migrations.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392779907", "createdAt": "2020-03-16T04:42:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n+\n+If a grant is removed from the Java code, a manual process must be followed to remove or change the grant for the corresponding tables, procedures and variables. \n+\n+## References\n+The following are useful references for inspecting and understanding the Db2 data definition, and checking the current configurations, and useful links. \n+\n+### References: SQL Queries\n+Included are useful queries to debug the Schema. \n+\n+#### Tablespace: Check the EXTENTSIZE for a tablespace\n+**Query**\n+``` sql\n+SELECT EXTENTSIZE FROM syscat.tablespaces WHERE tbspace = 'FHIR_TS'\n+```\n+**Result**\n+``` sql\n+EXTENTSIZE\n+-----------\n+          4\n+  1 record(s) selected.\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDc3MQ==", "bodyText": "it is helpful to check the exntsize, I've removed per your request", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392934771", "createdAt": "2020-03-16T10:54:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n+\n+If a grant is removed from the Java code, a manual process must be followed to remove or change the grant for the corresponding tables, procedures and variables. \n+\n+## References\n+The following are useful references for inspecting and understanding the Db2 data definition, and checking the current configurations, and useful links. \n+\n+### References: SQL Queries\n+Included are useful queries to debug the Schema. \n+\n+#### Tablespace: Check the EXTENTSIZE for a tablespace\n+**Query**\n+``` sql\n+SELECT EXTENTSIZE FROM syscat.tablespaces WHERE tbspace = 'FHIR_TS'\n+```\n+**Result**\n+``` sql\n+EXTENTSIZE\n+-----------\n+          4\n+  1 record(s) selected.\n+```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTkwNw=="}, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYyMTk3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1MToxNVrOF2uu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1MToxNVrOF2uu6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMzA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The tenant tablespace is created one time and should not be changed, modified or migrated. \n          \n          \n            \n            The tenant `tablespace` is created one time and no changes to the tablespace are expected.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392933096", "createdAt": "2020-03-16T10:51:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYzMTI3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1Mzo1NFrOF2u0Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1Mzo1NFrOF2u0Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### Tablespace: Check the EXTENTSIZE for a tablespace\n          \n          \n            \n            **Query**\n          \n          \n            \n            ``` sql\n          \n          \n            \n            SELECT EXTENTSIZE FROM syscat.tablespaces WHERE tbspace = 'FHIR_TS'\n          \n          \n            \n            ```\n          \n          \n            \n            **Result**\n          \n          \n            \n            ``` sql\n          \n          \n            \n            EXTENTSIZE\n          \n          \n            \n            -----------\n          \n          \n            \n                      4\n          \n          \n            \n              1 record(s) selected.\n          \n          \n            \n            ```", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392934503", "createdAt": "2020-03-16T10:53:54Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The actions `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  These actions, if the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other. \n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, the object must be removed. \n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant tablespace is created one time and should not be changed, modified or migrated. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n+    ON FHIRAPP.AUDITEVENT_COMPOSITES FOR ROWS\n+    WHERE FHIRAPP.AUDITEVENT_COMPOSITES.MT_ID = FHIR_ADMIN.SV_TENANT_ID \n+    ENFORCED FOR ALL ACCESS ENABLE ;\n+```\n+\n+These permissions should not be removed, migrated, altered or changed.\n+\n+## Managing Stored Procedures\n+\n+`FHIRDATA.ADD_CODE_SYSTEM` is created in the default schema.  The stored procedures `add_code_system`, `add_parameter_name`, `add_resource_type`, and `add_any_resource`.\n+\n+If updates are made to the `add_code_system.sql`, the `FhirSchemaGenerator.buildSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+ProcedureDef pd = model.addProcedure(this.schemaName, \n+    ADD_CODE_SYSTEM, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, schemaName, ADD_CODE_SYSTEM.toLowerCase() + \".sql\", null), \n+    Arrays.asList(fhirSequence, codeSystemsTable, allTablesComplete), \n+    procedurePrivileges);\n+```\n+\n+When the `fhir-persistence-schema` buildSchema is executed, the **INSERT**, **SELECT**, **UPDATE**, **DELETE** grant is applied again, and the procedures are updated. Each Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure, before applying the updated stored procedure to the database. \n+\n+## Managing GRANTS\n+The Db2 data definition secures data access using `GRANT` predicates, and updated and changed using the `--grant-to` predicate to apply the grants. \n+\n+If a grant is removed from the Java code, a manual process must be followed to remove or change the grant for the corresponding tables, procedures and variables. \n+\n+## References\n+The following are useful references for inspecting and understanding the Db2 data definition, and checking the current configurations, and useful links. \n+\n+### References: SQL Queries\n+Included are useful queries to debug the Schema. \n+\n+#### Tablespace: Check the EXTENTSIZE for a tablespace\n+**Query**\n+``` sql\n+SELECT EXTENTSIZE FROM syscat.tablespaces WHERE tbspace = 'FHIR_TS'\n+```\n+**Result**\n+``` sql\n+EXTENTSIZE\n+-----------\n+          4\n+  1 record(s) selected.\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe36952e9cccef9a09913273e0e4c396404a6f6"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTkwNDM3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyMzowMVrOF2xfAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyMzowMVrOF2xfAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk3ODE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT\n          \n          \n            \n            CREATE PERMISSION FHIRDATA.AUDITEVENT_COMPOSITES_TENANT", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r392978178", "createdAt": "2020-03-16T12:23:01Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,289 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  If the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema to which the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other.\n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANT_KEYS` and the corresponding indices. \n+\n+If the UniqueIndex or ForeignKeyConstraint is removed, and the constraint has been previously applied to a database, the active schema must be updated, and the object must be dropped.\n+\n+## Managing PROCEDURE\n+\n+`FHIR_ADMIN.set_tenant` is created in the FHIR_ADMIN schema.  The stored procedure is a \n+\n+If updates are made to the `set_tenant.sql`, the `FhirSchemaGenerator.buildAdminSchema`'s FhirSchemaConstants.INITIAL_VERSION must be updated to the next highest integer (in this case 2). \n+\n+``` java\n+// The set_tenant procedure can be created after all the admin tables are done\n+ProcedureDef setTenant = model.addProcedure(this.adminSchemaName, \n+    SET_TENANT, \n+    FhirSchemaConstants.INITIAL_VERSION, \n+    () -> SchemaGeneratorUtil.readTemplate(adminSchemaName, adminSchemaName, SET_TENANT.toLowerCase() + \".sql\", null), \n+    Arrays.asList(allAdminTablesComplete), \n+    procedurePrivileges);\n+        setTenant.addTag(SCHEMA_GROUP_TAG, ADMIN_GROUP);\n+```\n+\n+When the `fhir-persistence-schema` updateProcedure is executed, the READ grant is applied again, and the procedure is updated. The Procedure privilege is reset upon re-executing the action. \n+\n+If you change the stored procedure signature, you MUST drop the stored procedure before applying the stored procedure to the database. \n+\n+----------------------------------------------------------------\n+\n+# Schema: Tenant Data \n+\n+The schema is based on the resources and types identified in the `ModelSupport.getResourceTypes()`.  Each resource has a set of supporting tables for FHIR Search Parameters. \n+\n+> ![mt-table.png](mt-table.png)\n+\n+## Managing the TABLESPACE\n+\n+Each tenant receives a tenant specific tablespace. The tablespace is managed automatically with a default EXTENTSIZE of 128.  \n+\n+The schema is created in the multi-tenant schema `CreateSchemas` action, such as `FHIRDATA`.  When the schema is created a base schema is created with `UpdateSchema` action.  The `AllocateTenant` action provisions the schema in the tenant's table space for instance, `TS_TENANT1`.  \n+\n+Each tenant is allocated a partition based on the MT_ID and assigned to a tablespace. \n+\n+The tenant `tablespace` is created one time and no changes to the tablespace are expected. \n+\n+## Managing the SEQUENCES\n+\n+Each tenant has a two tenant specific sequences. These sequences are created a single time, and are NOT replaced or upgraded at any point in time. \n+\n+| Sequence Name | Description |\n+|----------|---------------------------------------------|\n+| `fhir_sequence` | The logical id in the database, used for storing each FHIR Resource |\n+| `fhir_ref_sequence` | The reference sequence is a logical id for Parameter Names, Code Systems and Resource Types tables |\n+\n+The stored procedures `add_resource_type`, `add_parameter_name`, `add_code_system`, and `add_any_resource` use the value to uniquely store the resource or supporting data element. \n+\n+Do not remove any of the tenant sequences, the sequence must provide unique, non-cycled integer values for the persistence layer to work properly. \n+\n+## Managing TABLE \n+\n+Each resource has a RESOURCE and LOGICAL RESOURCE table. `_LOGICAL_RESOURCES` has one record per logical resource.  `_RESOURCES` has one record for each version of each logical resource. \n+\n+For example, VISIONPRESCRIPTION has: \n+\n+```\n+VISIONPRESCRIPTION_RESOURCES\n+VISIONPRESCRIPTION_LOGICAL_RESOURCES\n+```\n+\n+The data definition has several reference tables to support FHIR Search for each Resoruce type.\n+\n+| Search Parameter Types | Search Value Table | Description |\n+|----------|----------|---------------------------------------------|\n+| [Number](https://www.hl7.org/fhir/r4/search.html#number) | **`<RESOURCE>`_NUMBER_VALUES** | Numerical Search for FHIR |\n+| [Date/DateTime](https://www.hl7.org/fhir/r4/search.html#date) | **`<RESOURCE>`_DATE_VALUES** | Date, DateTime Search for FHIR |\n+| [String](https://www.hl7.org/fhir/r4/search.html#string)<br> [Uri](https://www.hl7.org/fhir/r4/search.html#uri)<br> [Reference](https://www.hl7.org/fhir/r4/search.html#reference)| **`<RESOURCE>`_STR_VALUES** | String Search for FHIR |\n+| [Token](https://www.hl7.org/fhir/r4/search.html#token) | **`<RESOURCE>`_TOKEN_VALUES** | Token Search for FHIR |\n+| [Composite](https://www.hl7.org/fhir/r4/search.html#composite) | **`<RESOURCE>`_COMPOSITES** | Token Search for FHIR |\n+| [Quantity](https://www.hl7.org/fhir/r4/search.html#quantity) | **`<RESOURCE>`_QUANTITY_VALUES** | Quantity Search for FHIR |\n+| [Positional](https://www.hl7.org/fhir/r4/location.html#positional) | **`<RESOURCE>`_LATLNG_VALUES** | Positional (near) Search for FHIR |\n+\n+For instance, for VISIONPRESCRIPTION there are: \n+\n+```\n+VISIONPRESCRIPTION_NUMBER_VALUES\n+VISIONPRESCRIPTION_DATE_VALUES\n+VISIONPRESCRIPTION_STR_VALUES\n+VISIONPRESCRIPTION_TOKEN_VALUES\n+VISIONPRESCRIPTION_COMPOSITES\n+VISIONPRESCRIPTION_QUANTITY_VALUES\n+VISIONPRESCRIPTION_LATLNG_VALUES\n+```\n+\n+There are also additional tables to support search: `LOGICAL_RESOURCE`, `RESOURCE_TYPES` and `PARAMETER_NAMES` These tables are paritioned, and are specific for each tenant. \n+\n+Each of these tables follows a common pattern, and are defined in the `FHIRResourceTableGroup.java`. \n+\n+For any changes to any tables or indices, the table definition must be updated to a more recent version, one must update the table definition. For instance, for `addStrValues` one must increment the `setVersion` number: \n+\n+``` java\n+// Parameters are tied to the logical resource\n+Table tbl = Table.builder(schemaName, tableName)\n+    .setVersion(2)\n+    .addTag(FhirSchemaTags.RESOURCE_TYPE, prefix)\n+    .setTenantColumnName(MT_ID)\n+    .addBigIntColumn(             ROW_ID,      false)\n+    .addIntColumn(     PARAMETER_NAME_ID,      false)\n+    .addVarcharColumn(         STR_VALUE, msb,  true)\n+    .addVarcharColumn(   STR_VALUE_LCASE, msb,  true)\n+    .addBigIntColumn(LOGICAL_RESOURCE_ID,      false)\n+    .addIndex(IDX + tableName + \"_PSR\", PARAMETER_NAME_ID, STR_VALUE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_PLR\", PARAMETER_NAME_ID, STR_VALUE_LCASE, LOGICAL_RESOURCE_ID)\n+    .addIndex(IDX + tableName + \"_RPS\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE)\n+    .addIndex(IDX + tableName + \"_RPL\", LOGICAL_RESOURCE_ID, PARAMETER_NAME_ID, STR_VALUE_LCASE)\n+    .addPrimaryKey(PK + tableName, ROW_ID)\n+    .setIdentityColumn(ROW_ID, Generated.BY_DEFAULT)\n+    .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+    .addForeignKeyConstraint(FK + tableName + \"_RID\", schemaName, logicalResourcesTable, LOGICAL_RESOURCE_ID)\n+    .setTablespace(fhirTablespace)\n+    .addPrivileges(resourceTablePrivileges)\n+    .enableAccessControl(this.sessionVariable)\n+    .build(model);\n+```\n+\n+If a new resource is added to the specification, the schema utility automatically provisions it on the next execution of the update schema actions. \n+\n+Common reasons to modify the Resource's tables are: \n+- **Specification Change (Version-to-Version changes)**\n+    - The Resources are saved as Blobs in the database, and are transparent to the FHIR Version changes. The changes from version-to-version are resilient to field add-remove changes, type changes, and resources additions.  This migration must be done manually.\n+    - Resource removals must be done manually. \n+- **Column Attribute Changes (Space, Value Type)**\n+    - As the column types, changes are changed in any column, a specific alter statement must be executed on the table, and constraints must be changed or relaxed. This migration must be done manually.\n+- **Index - Add or Remove or Update**\n+    - As indices are removed from the table definition, the removed indices must be manually dropped for each Resource table. \n+    - As indices are added to the table definition, the version of the table must be updated, and the index must be applied and updated manually.\n+- **Constraint Updates** If there are Foreign Key updates, the changes must be applied manually and reflected in the code base. \n+- **Search Parameter Changes (Specification and Tenant)**\n+    - If the the parameter type or code is changed, the PARAMETERS_NAME and the corresponding table must be updated to remove references to the removed parameter (based on code). \n+    - If there is a new SearchParameter with `code` newly added to the system, the Search Parameter value entry is only updated when the resource is updated. \n+\n+For each of the above changes, the version of the table must be incremented. \n+\n+The resource table stores the FHIR resource as a compressed blob, changes to the specification or extensions should only impact Search values. \n+\n+The tables have various indices - PrimaryKey, Index and UniqueIndex. These indices are created as part of the Java object - Table.  These \n+\n+If a modification is made to a Search Parameter (addition, removal), then the resource uses the existing search parameter values until a new version of the resource is processed.\n+\n+Each of these tables has row-level permissions based on the conditional READ-only global variable, such as: \n+\n+``` sql\n+CREATE PERMISSION FHIRAPP.AUDITEVENT_COMPOSITES_TENANT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a649287c8e654bd9516016a10e9197e6dc961c41"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI4MjU2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NTowNVrOF21L1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxMDoxNlrOF21zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzODgwNQ==", "bodyText": "Sorry, I maybe should have been more specific...was thinking this might be a higher-level statement about all the objects in the admin schema and not specific to the TEANANT_KEYS table", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393038805", "createdAt": "2020-03-16T13:55:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,287 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  If the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema to which the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other.\n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS\n+    .setVersion(2)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+Changes to the FHIR_ADMIN schem are not supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c9dbfd22a759a543a9d7d6644eea187e011e12"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzODk3MQ==", "bodyText": "Also, note the missing a in schema.", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393038971", "createdAt": "2020-03-16T13:55:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,287 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  If the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema to which the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other.\n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS\n+    .setVersion(2)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+Changes to the FHIR_ADMIN schem are not supported.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzODgwNQ=="}, "originalCommit": {"oid": "d8c9dbfd22a759a543a9d7d6644eea187e011e12"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0OTAzNQ==", "bodyText": "Fixed", "url": "https://github.com/IBM/FHIR/pull/782#discussion_r393049035", "createdAt": "2020-03-16T14:10:16Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/DB2SchemaMigration.md", "diffHunk": "@@ -0,0 +1,287 @@\n+# The IBM FHIR Server - Db2 Schema Migration and Schema Management\n+\n+This document outlines the migration and management of changes in the IBM FHIR Server schema. These cover the supporting Java code and the supporting SQL. There are three core projects which are referenced: \n+\n+| Project | Description |\n+|----------|---------------------------------------------|\n+| `fhir-model` | The HL7 FHIR model - generated Java code |\n+| `fhir-database-utils` | The SQL/database constructs used to create SQL compliant statements |\n+| `fhir-persistence-schema` | The code bridges the model and database-utils |\n+\n+The schema generate the following object types, and require specific managements: \n+\n+- DB2 PACKAGE\n+- TABLESPACES\n+- SCHEMA \n+- GLOBAL VARIABLE \n+- INDEX \n+- PERMISSION \n+- PROCEDURE \n+- SEQUENCE \n+- TABLE\n+- TABLE CONSTRAINT \n+\n+----------------------------------------------------------------\n+# Schema: FHIR_ADMIN\n+\n+The Schema FHIR_ADMIN is an administrative schema. \n+\n+## Managing TABLESPACES\n+\n+There are multiple TABLESPACES used. For the administrative tablesspaces, the `FHIR_TS` tablespace is created with automatic storage.  The tablespace is managed automatically with a default EXTENTSIZE of 4.  \n+\n+The `FHIR_TS` tablespace is created one time and should not be changed. \n+\n+## Managing SEQUENCES\n+\n+The FHIR_ADMIN schema has a single sequence - `TENANT_SEQUENCE`. \n+The sequence is created a single time, and is NOT replaced or upgraded at any point in time. \n+\n+The `fhir-persistence-schema` actions - `Allocate Tenant - AddTenantDAO` and `Add Tenant - AddTenantKeyDAO` depend on `next value for`.  If the sequence is removed, the `TENANT_SEQUENCE` must be manually recreated starting with an integer higher than the `TENANTS.MT_ID` and `TENANT_KEYS.TENANT_KEY_ID` otherwise a conflict with the PRIMARY_KEY in the `FHIR_ADMIN` tables occurs. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group.  If you recreate the sequence, you must recreate the `USE` permission. \n+\n+## Managing GLOBAL VARIABLE \n+\n+The `FHIR_ADMIN.SV_TENANT_ID` is the only variable in the FHIR_ADMIN schema.  The variable is set in `FHIRSchemaGenerator.addVariable`, and should not be updated or removed. \n+\n+The variable privileges (grants) are updated one time, and applied to `FHIRUSER` group. \n+\n+## Managing TABLE\n+There are three administrative tables in `FHIR_ADMIN`. These table definitions are more completely described in [DB2MultiTenancy.md](DB2MultiTenancy.md). \n+\n+**Table: VERSION_HISTORY**\n+\n+Before any table or schema object is created, the `VERSION_HISTORY` table is created using `CreateVersionHistory.createTableIfNeeded(adminSchemaName, adapter);`  This table includes VERSION_HISTORY for resources created in the schema. If an object in the schema is updated, then the VERSION_HISTORY table must be updated to track the changes. \n+\n+The `VERSION_HISTORY` table enables Tenant version isolation, so upgrades and patches are separately applied to the schema to which the tenant belongs. Specifically, if the tenant shares the table definitions with another client, the patching is applied to both tenants at the same time.  If the tenant has a specific schema, the table definitions may be updated independent of each other.\n+\n+The `CreateVersionHistory` class controls the creation the `VERSION_HISTORY` table. Importantly, the VERISON_HISTORY table does not support migrations and changes. The Primary Key has a corresponding index `PK_VERSION_HISTORY`, and the code does not support updating the index. \n+\n+This table is an administrative table and should not require updating and migration. \n+\n+**Table: TENANTS**\n+\n+The `FHIR_ADMIN.TENANTS` table maps a given tenant to the Multi-Tenant ID (MT_ID) for the given tenant.  The MT_ID is subsequently used to restrict row access based on the matching value. \n+\n+`AdminSchemaGenerator.addTenantTable` method adds the TENANT table, and updates to this table definition requries a change to the setVersion (incrementing by 1). A corresponding change must be made to `FHIRSchemaGenerator.addTenantTable` method.\n+\n+``` java\n+this.tenantsTable = Table.builder(adminSchemaName, TENANTS)\n+    .setVersion(1)\n+    .addIntColumn(            MT_ID,             false)\n+    .addVarcharColumn(      TENANT_NAME,        36,  false)\n+    .addVarcharColumn(    TENANT_STATUS,        16,  false)\n+    .addUniqueIndex(IDX + \"TENANT_TN\", TENANT_NAME)\n+    .addPrimaryKey(\"TENANT_PK\", MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+If this table is updated, the changes must be manually apply the migration steps to the `TENANTS` and the corresponding indices. \n+\n+**Table: TENANT_KEYS**\n+\n+The Tenant Keys table stores a hashed version of the tenant specific key. Upon creating a session and calling the SET_TENANT procedure, the SET_TENANT queries the incoming key against the TENANT_KEYS database to map to a specific tenant MT_ID. \n+\n+`AdminSchemaGenerator.addTenantKeysTable` method adds the TENANT_KEYS table, and updates to this table definition requries a change to the setVersion (incrementing by 1).\n+\n+``` java\n+this.tenantKeysTable = Table.builder(adminSchemaName, TENANT_KEYS\n+    .setVersion(2)\n+    .addIntColumn(        TENANT_KEY_ID,             false)\n+    .addIntColumn(                MT_ID,             false)\n+    .addVarcharColumn(      TENANT_SALT,        44,  false)\n+    .addVarbinaryColumn(    TENANT_HASH,        32,  false)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_SALT\", TENANT_SALT)\n+    .addUniqueIndex(IDX + \"TENANT_KEY_TIDH\", MT_ID, TENANT_HASH)\n+    .addPrimaryKey(\"TENANT_KEY_PK\", TENANT_KEY_ID)\n+    .addForeignKeyConstraint(FK + TENANT_KEYS + \"_TNID\", adminSchemaName, TENANTS, MT_ID)\n+    .setTablespace(fhirTablespace)\n+    .build(model);\n+```\n+\n+Changes to the FHIR_ADMIN schem are not supported.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzODgwNQ=="}, "originalCommit": {"oid": "d8c9dbfd22a759a543a9d7d6644eea187e011e12"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}