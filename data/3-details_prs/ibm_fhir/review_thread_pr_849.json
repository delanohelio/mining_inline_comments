{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTc0MjMy", "number": 849, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMzoxMVrODrOjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzozMVrODro-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjUzNzIxOnYy", "diffSide": "RIGHT", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMzoxMVrOF7cjRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMzoxMVrOF7cjRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3ODA4NQ==", "bodyText": "Totally get why it was missed!", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397878085", "createdAt": "2020-03-25T14:03:11Z", "author": {"login": "prb112"}, "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -213,6 +213,10 @@ public String submit(Instant since, List<String> types, Map<String, String> prop\n             builder.fhirSearchFromDate(\"1970-01-01\");\n         }\n \n+        if (properties.get(BulkDataConstants.PARAM_TYPE_FILTER) != null) {\n+            builder.fhirTypeFilters(properties.get(BulkDataConstants.PARAM_TYPE_FILTER));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjU1ODY1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNzo1NFrOF7cw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyMToyM1rOF7dYpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MTU5NA==", "bodyText": "why would it be null?", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397881594", "createdAt": "2020-03-25T14:07:54Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTc1MA==", "bodyText": "just for code safety, routine check. :)", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397891750", "createdAt": "2020-03-25T14:21:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MTU5NA=="}, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjU2MzIyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowODo1MVrOF7cz0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyMTo0NVrOF7dZ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MjMyMA==", "bodyText": "so this ends in a warning... does the whole job fail?", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397882320", "createdAt": "2020-03-25T14:08:51Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                            } catch (FHIRGeneratorException e) {\n+                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MjA1MA==", "bodyText": "just logging and continue.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397892050", "createdAt": "2020-03-25T14:21:45Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                            } catch (FHIRGeneratorException e) {\n+                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MjMyMA=="}, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjU4NTM3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoxMzo0OVrOF7dBwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNzozMFrOF7dsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            List<String> searchCreteria = new ArrayList<>();\n          \n          \n            \n                            List<String> searchCriteria = new ArrayList<>();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397885888", "createdAt": "2020-03-25T14:13:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -110,18 +121,23 @@ public ChunkReader() {\n \n     private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n+        if (searchParametersForResoureTypes == null ) {\n+            searchParametersForResoureTypes = BulkDataUtils.getSearchParemetersFromTypeFilters(fhirTypeFilters);\n+        }\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                }\n                 List<String> searchCreteria = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MjQ2NQ==", "bodyText": "ha, good catch, let me refactor in my eclipse.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397892465", "createdAt": "2020-03-25T14:22:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -110,18 +121,23 @@ public ChunkReader() {\n \n     private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n+        if (searchParametersForResoureTypes == null ) {\n+            searchParametersForResoureTypes = BulkDataUtils.getSearchParemetersFromTypeFilters(fhirTypeFilters);\n+        }\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                }\n                 List<String> searchCreteria = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA=="}, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjgzMA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397896830", "createdAt": "2020-03-25T14:27:30Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -110,18 +121,23 @@ public ChunkReader() {\n \n     private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n+        if (searchParametersForResoureTypes == null ) {\n+            searchParametersForResoureTypes = BulkDataUtils.getSearchParemetersFromTypeFilters(fhirTypeFilters);\n+        }\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                }\n                 List<String> searchCreteria = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA=="}, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjU5MDM1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoxNDo1MFrOF7dE2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNzoyM1rOF7dsDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> searchCreteria = new ArrayList<String>();\n          \n          \n            \n                    List<String> searchCriteria = new ArrayList<String>();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397886681", "createdAt": "2020-03-25T14:14:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -194,11 +212,16 @@ public Object readItem() throws Exception {\n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+        }\n+\n         List<String> searchCreteria = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjcxNw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397896717", "createdAt": "2020-03-25T14:27:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -194,11 +212,16 @@ public Object readItem() throws Exception {\n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+        }\n+\n         List<String> searchCreteria = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjY4MQ=="}, "originalCommit": {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgwOTQ5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowMzoxNlrOF8Fz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1Mzo1N1rOF8H-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ==", "bodyText": "Is there a specific HashSet method you are using? or best to make use of Set", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398554069", "createdAt": "2020-03-26T13:03:16Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -48,34 +50,43 @@\n  */\n public class ChunkReader extends AbstractItemReader {\n     private final static Logger logger = Logger.getLogger(ChunkReader.class.getName());\n-    int pageNum = 1;\n-    int indexOfCurrentResourceType = 0;\n+    protected int pageNum = 1;\n+    protected int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n-    int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    protected int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n \n-    private FHIRPersistence fhirPersistence;\n-    private List<String> resourceTypes;\n+    protected FHIRPersistence fhirPersistence;\n+    protected List<String> resourceTypes;\n+\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NTM5MA==", "bodyText": "changing the declaration to Set (interface) works, but what I really want is just a Hashset, not treeset, linkhashset etc, so I thought not need to use interface for the declaration.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398575390", "createdAt": "2020-03-26T13:35:01Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -48,34 +50,43 @@\n  */\n public class ChunkReader extends AbstractItemReader {\n     private final static Logger logger = Logger.getLogger(ChunkReader.class.getName());\n-    int pageNum = 1;\n-    int indexOfCurrentResourceType = 0;\n+    protected int pageNum = 1;\n+    protected int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n-    int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    protected int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n \n-    private FHIRPersistence fhirPersistence;\n-    private List<String> resourceTypes;\n+    protected FHIRPersistence fhirPersistence;\n+    protected List<String> resourceTypes;\n+\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTY2OQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589669", "createdAt": "2020-03-26T13:53:57Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -48,34 +50,43 @@\n  */\n public class ChunkReader extends AbstractItemReader {\n     private final static Logger logger = Logger.getLogger(ChunkReader.class.getName());\n-    int pageNum = 1;\n-    int indexOfCurrentResourceType = 0;\n+    protected int pageNum = 1;\n+    protected int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n-    int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    protected int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n \n-    private FHIRPersistence fhirPersistence;\n-    private List<String> resourceTypes;\n+    protected FHIRPersistence fhirPersistence;\n+    protected List<String> resourceTypes;\n+\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgxODg5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNTo1MVrOF8F57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNDowNlrOF8GOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTYyOA==", "bodyText": "is there some documentation on this behavior?  Maybe add a comment here, just to explain when another developer sees this. (maybe on line 177)\nyou can combine this logic with line 177-178", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398555628", "createdAt": "2020-03-26T13:05:51Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDk0MQ==", "bodyText": "please ignore", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560941", "createdAt": "2020-03-26T13:14:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTYyOA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgyMjE4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNjozOVrOF8F75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozMzo0MlrOF8HDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA==", "bodyText": "should this be part of an operational outcome? warning only", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556134", "createdAt": "2020-03-26T13:06:39Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2OTM5NA==", "bodyText": "export doesn't require operation outcome in fhir spec, and this is why I didn't add like what was did in import, so just logging ...", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398569394", "createdAt": "2020-03-26T13:26:21Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NDUzMA==", "bodyText": "definitely something we should think about.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398574530", "createdAt": "2020-03-26T13:33:42Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgyNDEyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNzoxMFrOF8F9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozNTozNFrOF8HIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjQ2NA==", "bodyText": "same comment as prior one - operationaloutcome / warning", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556464", "createdAt": "2020-03-26T13:07:10Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NTc4Ng==", "bodyText": "export doesn't require operation outcome in fhir spec, and this is why I didn't add like what was did in import, so just logging ...", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398575786", "createdAt": "2020-03-26T13:35:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjQ2NA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgyNzE4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowNzo1MlrOF8F_AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1Mzo0N1rOF8H-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA==", "bodyText": "this didn't occur to me earlier, maybe wrap this in isLogLevel", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556928", "createdAt": "2020-03-26T13:07:52Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,\n+                                            \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+                                }\n+                            } catch (IOException e) {\n+                                logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n+                                throw e;\n                             }\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n                         }\n-                    }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n+                }\n+\n+                indexOfCurrentTypeFilter++;\n+            } while (searchParametersForResoureTypes.get(resourceType) != null && indexOfCurrentTypeFilter < searchParametersForResoureTypes.get(resourceType).size());\n+\n             chunkData.setCurrentPartResourceNum(chunkData.getCurrentPartResourceNum() + resSubTotal);\n             logger.fine(\"fillChunkDataBuffer: Processed resources - \" + resSubTotal + \"; Bufferred data size - \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2OTg5NA==", "bodyText": "sounds good, let me change it.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398569894", "createdAt": "2020-03-26T13:27:07Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,\n+                                            \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+                                }\n+                            } catch (IOException e) {\n+                                logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n+                                throw e;\n                             }\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n                         }\n-                    }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n+                }\n+\n+                indexOfCurrentTypeFilter++;\n+            } while (searchParametersForResoureTypes.get(resourceType) != null && indexOfCurrentTypeFilter < searchParametersForResoureTypes.get(resourceType).size());\n+\n             chunkData.setCurrentPartResourceNum(chunkData.getCurrentPartResourceNum() + resSubTotal);\n             logger.fine(\"fillChunkDataBuffer: Processed resources - \" + resSubTotal + \"; Bufferred data size - \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTUyMQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589521", "createdAt": "2020-03-26T13:53:47Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,\n+                                            \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+                                }\n+                            } catch (IOException e) {\n+                                logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n+                                throw e;\n                             }\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n                         }\n-                    }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n+                }\n+\n+                indexOfCurrentTypeFilter++;\n+            } while (searchParametersForResoureTypes.get(resourceType) != null && indexOfCurrentTypeFilter < searchParametersForResoureTypes.get(resourceType).size());\n+\n             chunkData.setCurrentPartResourceNum(chunkData.getCurrentPartResourceNum() + resSubTotal);\n             logger.fine(\"fillChunkDataBuffer: Processed resources - \" + resSubTotal + \"; Bufferred data size - \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg0MDgyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMToyMVrOF8GHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1MzozNlrOF8H9xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng==", "bodyText": "I know we had a similar pattern in this code before with clear.\nI see this and I think... are there unintended side effects if not properly managed.\nMaybe add a explanation of the behavior to the initial definition.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398559156", "createdAt": "2020-03-26T13:11:21Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -205,27 +227,11 @@ public Object readItem() throws Exception {\n                 pageNum = 1;\n                 chunkData.setPartNum(1);\n                 indexOfCurrentResourceType++;\n-            }\n-        }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n+                isDoDuplicationCheck = false;\n+                loadedResourceIds.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NjQ1Ng==", "bodyText": "make sense, let me add.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398576456", "createdAt": "2020-03-26T13:36:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -205,27 +227,11 @@ public Object readItem() throws Exception {\n                 pageNum = 1;\n                 chunkData.setPartNum(1);\n                 indexOfCurrentResourceType++;\n-            }\n-        }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n+                isDoDuplicationCheck = false;\n+                loadedResourceIds.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTM4Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589382", "createdAt": "2020-03-26T13:53:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -205,27 +227,11 @@ public Object readItem() throws Exception {\n                 pageNum = 1;\n                 chunkData.setPartNum(1);\n                 indexOfCurrentResourceType++;\n-            }\n-        }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n+                isDoDuplicationCheck = false;\n+                loadedResourceIds.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg0NTMxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMjoyNVrOF8GKcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozNjo1M1rOF8HMLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTg1Ng==", "bodyText": "Nice line of code.  Very handy.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398559856", "createdAt": "2020-03-26T13:12:25Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -268,7 +273,11 @@ public Object readItem() throws Exception {\n \n         if (resources != null) {\n             logger.fine(\"readItem(\" + resourceTypes.get(indexOfCurrentResourceType) + \"): loaded patients number - \" + resources.size());\n-            fillChunkDataBuffer(resources);\n+\n+            List<String> patientIds = resources.stream().filter(item -> item.getId() != null).map(item -> item.getId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NjY4Nw==", "bodyText": "yeah, sometime I like java8. :)", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398576687", "createdAt": "2020-03-26T13:36:53Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -268,7 +273,11 @@ public Object readItem() throws Exception {\n \n         if (resources != null) {\n             logger.fine(\"readItem(\" + resourceTypes.get(indexOfCurrentResourceType) + \"): loaded patients number - \" + resources.size());\n-            fillChunkDataBuffer(resources);\n+\n+            List<String> patientIds = resources.stream().filter(item -> item.getId() != null).map(item -> item.getId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTg1Ng=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg0Nzg3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMzowNFrOF8GMFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1MzoyMlrOF8H9EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDI3Nw==", "bodyText": "same comment on HashSet", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560277", "createdAt": "2020-03-26T13:13:04Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -50,6 +52,17 @@\n     int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n     int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    int indexOfCurrentTypeFilter = 0;\n+\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTIwMA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589200", "createdAt": "2020-03-26T13:53:22Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -50,6 +52,17 @@\n     int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n     int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    int indexOfCurrentTypeFilter = 0;\n+\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDI3Nw=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg1MTA1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMzo0OFrOF8GOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxMzo0OFrOF8GOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDc2OA==", "bodyText": "sorry I misunderstood the prior isDoDuplicationCheck logic", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560768", "createdAt": "2020-03-26T13:13:48Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -115,14 +132,17 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         int resSubTotal = 0;\n         if (chunkData != null) {\n             for (Resource res : resources) {\n-                if (res == null) {\n+                if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n                     continue;\n                 }\n \n                 try {\n                     FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n                     chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n                     resSubTotal++;\n+                    if (isDoDuplicationCheck) {\n+                        loadedResourceIds.add(res.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg1NjM5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNToxOVrOF8GRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNjoyNVrOF8JBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ==", "bodyText": "just a thought, maybe put this in a utility class to process the query parameters", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398561681", "createdAt": "2020-03-26T13:15:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -146,70 +166,59 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n \n     }\n \n-    /**\n-     * @see AbstractItemReader#readItem()\n-     */\n     @Override\n     public Object readItem() throws Exception {\n-        List<String> ResourceTypes = Arrays.asList(fhirResourceType.split(\"\\\\s*,\\\\s*\"));\n \n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        // If the search already reaches the last page, then check if need to move to the next typeFilter or next resource type.\n         if (chunkData != null && pageNum > chunkData.getLastPageNum()) {\n-            if (ResourceTypes.size() == indexOfCurrentResourceType + 1) {\n-                // No more resource type and page to read, so return null to end the reading.\n-                return null;\n+            Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+            if (searchParametersForResoureTypes.get(resourceType) == null || searchParametersForResoureTypes.get(resourceType).size() <= indexOfCurrentTypeFilter + 1) {\n+                // If there is no more typeFilter to process for current resource type, then check if there is any more resource type to process.\n+                if (resourceTypes.size() == indexOfCurrentResourceType + 1) {\n+                    // No more resource type and page to read, so return null to end the reading.\n+                    return null;\n+                } else {\n+                    // More resource types to read, so reset pageNum, partNum and move resource type index to the next and reset indexOfCurrentTypeFilter.\n+                    pageNum = 1;\n+                    chunkData.setPartNum(1);\n+                    indexOfCurrentResourceType++;\n+                    indexOfCurrentTypeFilter = 0;\n+                    isDoDuplicationCheck = false;\n+                    loadedResourceIds.clear();\n+                }\n             } else {\n-                // More resource types to read, so reset pageNum, partNum and move resource type index to the next.\n+             // If there is more typeFilter to process for current resource type, then reset pageNum only and move to the next typeFilter.\n                 pageNum = 1;\n-                chunkData.setPartNum(1);\n-                indexOfCurrentResourceType++;\n+                indexOfCurrentTypeFilter++;\n             }\n         }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n-            }\n-        }\n-\n-        if (cosBucketObjectName != null\n-                && cosBucketObjectName.trim().length() > 0\n-                // Single COS object uploading is for single resource type export only.\n-                && ResourceTypes.size() == 1) {\n-            isSingleCosObject = true;\n-            logger.info(\"readItem: Use single COS object for uploading!\");\n-        }\n \n-        FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n-        FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n-        FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n-        List<String> searchCreteria = new ArrayList<String>();\n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+            if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                isDoDuplicationCheck = true;\n+            }\n+        }\n+\n+        List<String> searchCriteria = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5NjMyOA==", "bodyText": "en... good thought! will consider in the next big change for export jobs - issue #779 partitionize the export jobs.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398596328", "createdAt": "2020-03-26T14:02:33Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -146,70 +166,59 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n \n     }\n \n-    /**\n-     * @see AbstractItemReader#readItem()\n-     */\n     @Override\n     public Object readItem() throws Exception {\n-        List<String> ResourceTypes = Arrays.asList(fhirResourceType.split(\"\\\\s*,\\\\s*\"));\n \n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        // If the search already reaches the last page, then check if need to move to the next typeFilter or next resource type.\n         if (chunkData != null && pageNum > chunkData.getLastPageNum()) {\n-            if (ResourceTypes.size() == indexOfCurrentResourceType + 1) {\n-                // No more resource type and page to read, so return null to end the reading.\n-                return null;\n+            Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+            if (searchParametersForResoureTypes.get(resourceType) == null || searchParametersForResoureTypes.get(resourceType).size() <= indexOfCurrentTypeFilter + 1) {\n+                // If there is no more typeFilter to process for current resource type, then check if there is any more resource type to process.\n+                if (resourceTypes.size() == indexOfCurrentResourceType + 1) {\n+                    // No more resource type and page to read, so return null to end the reading.\n+                    return null;\n+                } else {\n+                    // More resource types to read, so reset pageNum, partNum and move resource type index to the next and reset indexOfCurrentTypeFilter.\n+                    pageNum = 1;\n+                    chunkData.setPartNum(1);\n+                    indexOfCurrentResourceType++;\n+                    indexOfCurrentTypeFilter = 0;\n+                    isDoDuplicationCheck = false;\n+                    loadedResourceIds.clear();\n+                }\n             } else {\n-                // More resource types to read, so reset pageNum, partNum and move resource type index to the next.\n+             // If there is more typeFilter to process for current resource type, then reset pageNum only and move to the next typeFilter.\n                 pageNum = 1;\n-                chunkData.setPartNum(1);\n-                indexOfCurrentResourceType++;\n+                indexOfCurrentTypeFilter++;\n             }\n         }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n-            }\n-        }\n-\n-        if (cosBucketObjectName != null\n-                && cosBucketObjectName.trim().length() > 0\n-                // Single COS object uploading is for single resource type export only.\n-                && ResourceTypes.size() == 1) {\n-            isSingleCosObject = true;\n-            logger.info(\"readItem: Use single COS object for uploading!\");\n-        }\n \n-        FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n-        FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n-        FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n-        List<String> searchCreteria = new ArrayList<String>();\n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+            if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                isDoDuplicationCheck = true;\n+            }\n+        }\n+\n+        List<String> searchCriteria = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwNjY0Mg==", "bodyText": "yeah - no worries - this was just a thought", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398606642", "createdAt": "2020-03-26T14:16:25Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -146,70 +166,59 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n \n     }\n \n-    /**\n-     * @see AbstractItemReader#readItem()\n-     */\n     @Override\n     public Object readItem() throws Exception {\n-        List<String> ResourceTypes = Arrays.asList(fhirResourceType.split(\"\\\\s*,\\\\s*\"));\n \n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        // If the search already reaches the last page, then check if need to move to the next typeFilter or next resource type.\n         if (chunkData != null && pageNum > chunkData.getLastPageNum()) {\n-            if (ResourceTypes.size() == indexOfCurrentResourceType + 1) {\n-                // No more resource type and page to read, so return null to end the reading.\n-                return null;\n+            Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+            if (searchParametersForResoureTypes.get(resourceType) == null || searchParametersForResoureTypes.get(resourceType).size() <= indexOfCurrentTypeFilter + 1) {\n+                // If there is no more typeFilter to process for current resource type, then check if there is any more resource type to process.\n+                if (resourceTypes.size() == indexOfCurrentResourceType + 1) {\n+                    // No more resource type and page to read, so return null to end the reading.\n+                    return null;\n+                } else {\n+                    // More resource types to read, so reset pageNum, partNum and move resource type index to the next and reset indexOfCurrentTypeFilter.\n+                    pageNum = 1;\n+                    chunkData.setPartNum(1);\n+                    indexOfCurrentResourceType++;\n+                    indexOfCurrentTypeFilter = 0;\n+                    isDoDuplicationCheck = false;\n+                    loadedResourceIds.clear();\n+                }\n             } else {\n-                // More resource types to read, so reset pageNum, partNum and move resource type index to the next.\n+             // If there is more typeFilter to process for current resource type, then reset pageNum only and move to the next typeFilter.\n                 pageNum = 1;\n-                chunkData.setPartNum(1);\n-                indexOfCurrentResourceType++;\n+                indexOfCurrentTypeFilter++;\n             }\n         }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n-            }\n-        }\n-\n-        if (cosBucketObjectName != null\n-                && cosBucketObjectName.trim().length() > 0\n-                // Single COS object uploading is for single resource type export only.\n-                && ResourceTypes.size() == 1) {\n-            isSingleCosObject = true;\n-            logger.info(\"readItem: Use single COS object for uploading!\");\n-        }\n \n-        FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n-        FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n-        FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n-        List<String> searchCreteria = new ArrayList<String>();\n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+            if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                isDoDuplicationCheck = true;\n+            }\n+        }\n+\n+        List<String> searchCriteria = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg1Nzk2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNTozOVrOF8GShw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNTozOVrOF8GShw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTkyNw==", "bodyText": "extra ;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txn.unenroll();;\n          \n          \n            \n                    txn.unenroll();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398561927", "createdAt": "2020-03-26T13:15:39Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -218,15 +227,14 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.begin();\n+        txn.enroll();;\n         persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n         resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-        txn.commit();\n+        txn.unenroll();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg1ODYxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNTo0N1rOF8GS6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNTo0N1rOF8GS6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txn.enroll();;\n          \n          \n            \n                    txn.enroll();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562025", "createdAt": "2020-03-26T13:15:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -218,15 +227,14 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.begin();\n+        txn.enroll();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2MDM1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNjowN1rOF8GT6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNjowN1rOF8GT6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjI4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    txn.enroll();;\n          \n          \n            \n                                    txn.enroll();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562280", "createdAt": "2020-03-26T13:16:07Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2MTE1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNjoxNVrOF8GUXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMjo0MlrOF8Gllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    txn.unenroll();;\n          \n          \n            \n                                    txn.unenroll();", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562397", "createdAt": "2020-03-26T13:16:15Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjgwNg==", "bodyText": "good catch, my eclipse has rendering issue, I have to resize the editor window the show the correct contents sometime, seems I missed these, thanks! considering to upgrade my eclipse now, I'm still using 2019 June version ...", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398566806", "createdAt": "2020-03-26T13:22:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjM5Nw=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2NzAwOnYy", "diffSide": "RIGHT", "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzozMVrOF8GX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMzowMVrOF8Gmew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA==", "bodyText": "Is there another change here?", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398563298", "createdAt": "2020-03-26T13:17:31Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -768,6 +768,7 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTA4OA==", "bodyText": "ah, sorry, this file is added by mistake...", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398565088", "createdAt": "2020-03-26T13:20:09Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -768,6 +768,7 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NzAzNQ==", "bodyText": "no problem - just confirming.", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398567035", "createdAt": "2020-03-26T13:23:01Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -768,6 +768,7 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA=="}, "originalCommit": {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}