{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5ODkyNDA1", "number": 1704, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0MDozOVrOE4MSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0NDoyNVrOE5veoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzU3MDE5OnYy", "diffSide": "RIGHT", "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0MDozOVrOHx94Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo0Nzo1MlrOHyu7_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NjAzOQ==", "bodyText": "is it worth explicitly listing the postgresql properties?\n  --prop \"sslmode=verify-full\"\n  --prop \"sslrootcert=./postgres.cert\"", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r522156039", "createdAt": "2020-11-12T14:40:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+---\n+layout: default\n+title:  IBM FHIR Server - Schema Tool\n+date:   2020-11-11\n+permalink: /ibm-fhir-server-schema-tool/\n+---\n+\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty|true|false]`|\n+| ENV_TOOL_INPUT | Encoded String, base64, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard|offboard|debug|custom]`. |\n+| db.type | The database type - `[postgres|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+\n+Further, any property supported by the [fhir-persistence-schema](https://github.com/IBM/FHIR/blob/master/fhir-persistence-schema/README.md) module is put into the file and mounted to the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9425ecbf9c8d8d7e73fa7b260d0c46a71beb1dd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxNDUwNQ==", "bodyText": "you bet, I'll add it.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r522214505", "createdAt": "2020-11-12T15:55:14Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+---\n+layout: default\n+title:  IBM FHIR Server - Schema Tool\n+date:   2020-11-11\n+permalink: /ibm-fhir-server-schema-tool/\n+---\n+\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty|true|false]`|\n+| ENV_TOOL_INPUT | Encoded String, base64, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard|offboard|debug|custom]`. |\n+| db.type | The database type - `[postgres|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+\n+Further, any property supported by the [fhir-persistence-schema](https://github.com/IBM/FHIR/blob/master/fhir-persistence-schema/README.md) module is put into the file and mounted to the system.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NjAzOQ=="}, "originalCommit": {"oid": "b9425ecbf9c8d8d7e73fa7b260d0c46a71beb1dd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1OTg2OQ==", "bodyText": "fixed, I'll push some fixes shortly.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r522959869", "createdAt": "2020-11-13T13:47:52Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+---\n+layout: default\n+title:  IBM FHIR Server - Schema Tool\n+date:   2020-11-11\n+permalink: /ibm-fhir-server-schema-tool/\n+---\n+\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty|true|false]`|\n+| ENV_TOOL_INPUT | Encoded String, base64, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard|offboard|debug|custom]`. |\n+| db.type | The database type - `[postgres|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+\n+Further, any property supported by the [fhir-persistence-schema](https://github.com/IBM/FHIR/blob/master/fhir-persistence-schema/README.md) module is put into the file and mounted to the system.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NjAzOQ=="}, "originalCommit": {"oid": "b9425ecbf9c8d8d7e73fa7b260d0c46a71beb1dd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTc5NTY3OnYy", "diffSide": "RIGHT", "path": "fhir-install/src/main/docker/ibm-fhir-schematool/DEVELOPMENT.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjozOTo1NVrOH0YtdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTozODo0NFrOH0hBNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5Mjg1Mg==", "bodyText": "Is this file picked up and used some place?   I might have expected this type of info in our wiki rather than with the docker artifacts.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524692852", "createdAt": "2020-11-16T22:39:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+layout: default\n+title:  IBM FHIR Server - Schema Tool - Development\n+date:   2020-11-11\n+permalink: /ibm-fhir-server-schema-tool-development/\n+---\n+\n+# Development", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyODk4MA==", "bodyText": "It's development only - no wiki, just trying to keep these notes inline. I thought it might end up as a guide at some point.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524828980", "createdAt": "2020-11-17T01:38:44Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+layout: default\n+title:  IBM FHIR Server - Schema Tool - Development\n+date:   2020-11-11\n+permalink: /ibm-fhir-server-schema-tool-development/\n+---\n+\n+# Development", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5Mjg1Mg=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTgxMTQxOnYy", "diffSide": "RIGHT", "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0MjozN1rOH0Y4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTozODo1NlrOH0hBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NTY5Mw==", "bodyText": "it can be any path to a valid cert, right?", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524695693", "createdAt": "2020-11-16T22:42:37Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyOTAzOQ==", "bodyText": "No - has to be db.cert.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524829039", "createdAt": "2020-11-17T01:38:56Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NTY5Mw=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTgxNzMxOnYy", "diffSide": "RIGHT", "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0MzozOFrOH0Y8lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1Nzo1NFrOH0zmWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NjcyNg==", "bodyText": "I never set this one when interacting with the IBM Cloud Databases for Postgresql.  I think you can choose either this one or sslrootcert...does that sound right?", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524696726", "createdAt": "2020-11-16T22:43:38Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |\n+| db.cert | For Postgres, you must set as a base64 encoding of the certificate |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyOTMzOA==", "bodyText": "db.cert is my entry as the sslrootcert is a path, and the db.cert is actually  the encoded value  which gets serialized to the db.cert file", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524829338", "createdAt": "2020-11-17T01:39:42Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |\n+| db.cert | For Postgres, you must set as a base64 encoding of the certificate |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NjcyNg=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyODE2NQ==", "bodyText": "will it work if you omit db.cert and just mount a cert at /opt/schematool/workarea/db.cert?\nthats close to what I do in our cloud deploy today, although I could probably change that to set a db.cert in a properties file instead if needed.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r525128165", "createdAt": "2020-11-17T12:48:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |\n+| db.cert | For Postgres, you must set as a base64 encoding of the certificate |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NjcyNg=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMzQwMw==", "bodyText": "Yes - it'll work that way too.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r525133403", "createdAt": "2020-11-17T12:57:54Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/README.md", "diffHunk": "@@ -0,0 +1,182 @@\n+# IBM FHIR Server - Schema Tool\n+\n+The IBM FHIR Server Schema Tool is designed to create and update the IBM FHIR Server's schema idempotently.\n+\n+The tool supports the following flows in one image: \n+\n+* Onboarding - create SQL schemas, populate the SQL objects, grant permissions to the database user. For db2, the tool sets up a single tenant and tenant key. \n+* Offboarding - removes the schema, on Db2, if no other tenants, it deallocates the tenants\n+* Custom - executes a single fhir-persistence-schema cli action\n+* Debug - outputs debug information\n+\n+# **Use**\n+\n+The solution should set the variables as Environment Variables or mounted into the workarea folder as a volume which contains the persistence.json file.\n+\n+## **Environment Variables**\n+The following environment variables:\n+\n+| Name           | Purpose  |\n+|----------------|----------|\n+| ENV_SKIP       | Stop the container from making any changes, and passes through with a successful state change: `[empty\\|true\\|false]`|\n+| ENV_TOOL_INPUT | Encoded String, in most circumstances base64 encoded or well escaped text, of the json|\n+| ENV_TOOL_DEBUG | Flags the debug |\n+\n+## Configuration Commandline\n+The following is read from the properties file:\n+\n+| Name       | Purpose  |\n+|------------|----------|\n+| tool.behavior | Switches from the Onboarding BEHAVIOR to Offboarding BEHAVIOR flow: `[onboard\\|offboard\\|debug\\|custom]`. |\n+| db.type | The database type - `[postgresql\\|db2]` |\n+| db.host | The database server hostname|\n+| db.port | The database server port|\n+| db.database | The name of the database|\n+| user | A username with connect and admin permissions on the target database|\n+| password | The user password for connecting to the database|\n+| sslConnection | true or anything else, true triggers JDBC to use ssl, an example --prop sslConnection=true (db2) |\n+| ssl | true or anything else, true triggers JDBC to use ssl, an example --prop ssl=true (postgres) |\n+| tenant.key | the tenant key is a generated key, or used to set a specific value |\n+| tenant.name | the tenant name is typically default |\n+| schema.name.oauth | uses the default or custom |\n+| schema.name.fhir | defaults to fhirdata |\n+| schema.name.batch | uses the default or custom |\n+| grant.to | grants access to a specific user (which is going to run the application) |\n+| sslmode | For Postgres, you can set verify-full |\n+| sslrootcert | For Postgres, you must set as /opt/schematool/workarea/db.cert |\n+| db.cert | For Postgres, you must set as a base64 encoding of the certificate |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NjcyNg=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTgyMTc2OnYy", "diffSide": "RIGHT", "path": "fhir-install/src/main/docker/ibm-fhir-schematool/build.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0NDoyNVrOH0Y_0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTozOTo1OVrOH0hC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NzU1NA==", "bodyText": "we'll need to remember to keep the version references in this script up-to-date.  maybe use your curl trick to get the latest version from the github api?", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524697554", "createdAt": "2020-11-16T22:44:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/build.sh", "diffHunk": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+\n+# ----------------------------------------------------------------------------\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+# ----------------------------------------------------------------------------\n+\n+set -e -o pipefail\n+\n+##############################################################################\n+\n+docker build --build-arg FHIR_VERSION=4.5.0 -t ibm-fhir-schematool:latest .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyOTQyMg==", "bodyText": "I've just added automation to it.", "url": "https://github.com/IBM/FHIR/pull/1704#discussion_r524829422", "createdAt": "2020-11-17T01:39:59Z", "author": {"login": "prb112"}, "path": "fhir-install/src/main/docker/ibm-fhir-schematool/build.sh", "diffHunk": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+\n+# ----------------------------------------------------------------------------\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+# ----------------------------------------------------------------------------\n+\n+set -e -o pipefail\n+\n+##############################################################################\n+\n+docker build --build-arg FHIR_VERSION=4.5.0 -t ibm-fhir-schematool:latest .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5NzU1NA=="}, "originalCommit": {"oid": "6b5e5b462e2404df8df2fe215f63af5f23279c57"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4628, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}