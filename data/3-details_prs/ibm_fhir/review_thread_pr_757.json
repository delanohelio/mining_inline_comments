{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODM1OTE1", "number": 757, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMzoxNlrODlNSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyODoxMFrODlNYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQxNjgzOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMzoxNlrOFx-H6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0MjoyN1rOFx-rTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MjM3OQ==", "bodyText": "After our earlier discussion, this is only called once? or does it synchronize across multiple requests, I could see this being slow unintentionally.", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387942379", "createdAt": "2020-03-04T21:23:16Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -3560,10 +3561,9 @@ private String serializeOperationOutcome(OperationOutcome oo) {\n         }\n     }\n \n-    private synchronized CapabilityStatement getCapabilityStatement() throws Exception {\n+    private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MDUxMw==", "bodyText": "I don't think this comment is really related to this change.  getCapabilityStatement was (and still is) called on each metadata request and thats what we have #734 for", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387950513", "createdAt": "2020-03-04T21:40:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -3560,10 +3561,9 @@ private String serializeOperationOutcome(OperationOutcome oo) {\n         }\n     }\n \n-    private synchronized CapabilityStatement getCapabilityStatement() throws Exception {\n+    private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MjM3OQ=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTM3Mg==", "bodyText": "yeah ... I'm just wondering if we're injecting a pause with the synchronized when two threads are trying to generate it", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387951372", "createdAt": "2020-03-04T21:42:18Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -3560,10 +3561,9 @@ private String serializeOperationOutcome(OperationOutcome oo) {\n         }\n     }\n \n-    private synchronized CapabilityStatement getCapabilityStatement() throws Exception {\n+    private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MjM3OQ=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTQzOQ==", "bodyText": "No need to resolve here", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387951439", "createdAt": "2020-03-04T21:42:27Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -3560,10 +3561,9 @@ private String serializeOperationOutcome(OperationOutcome oo) {\n         }\n     }\n \n-    private synchronized CapabilityStatement getCapabilityStatement() throws Exception {\n+    private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MjM3OQ=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQxOTMyOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMzo1OVrOFx-JaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0MToyNVrOFx-pTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0Mjc2MQ==", "bodyText": "are you actually serializing this class?  best to generate it not use 1l.", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387942761", "createdAt": "2020-03-04T21:23:59Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -39,54 +41,54 @@\n /**\n  * This class is a servlet filter which is registered with the REST API's servlet. The main purpose of the class is to\n  * log entry/exit information and elapsed time for each REST API request processed by the server.\n- * \n- * @author padams\n  */\n-public class FHIRRestServletFilter implements Filter {\n+public class FHIRRestServletFilter extends HttpFilter {\n+    private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MDkyNg==", "bodyText": "I am not, it was just to make eclipse not complain about missing it (apparently HttpFilter is serializable whereas Filter was not)", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387950926", "createdAt": "2020-03-04T21:41:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -39,54 +41,54 @@\n /**\n  * This class is a servlet filter which is registered with the REST API's servlet. The main purpose of the class is to\n  * log entry/exit information and elapsed time for each REST API request processed by the server.\n- * \n- * @author padams\n  */\n-public class FHIRRestServletFilter implements Filter {\n+public class FHIRRestServletFilter extends HttpFilter {\n+    private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0Mjc2MQ=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQyMzQwOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyNToyMVrOFx-L1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyNToyMVrOFx-L1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MzM4MA==", "bodyText": "Totally agree with this change!", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387943380", "createdAt": "2020-03-04T21:25:21Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -100,56 +102,33 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n         requestDescription.append(\"] method:[\");\n         requestDescription.append(getRequestMethod(request));\n         requestDescription.append(\"] uri:[\");\n-        requestDescription.append(getRequestURL(request));\n-        final String encodedRequestDescription = Encode.forHtml(requestDescription.toString());\n-\n+        requestDescription.append(requestUrl);\n+        if (!requestUrl.equals(originalRequestUri)) {\n+            requestDescription.append(\"] originalUri:[\");\n+            requestDescription.append(originalRequestUri);\n+        }\n+        requestDescription.append(\"]\");\n+        String encodedRequestDescription = Encode.forHtml(requestDescription.toString());\n         log.info(\"Received request: \" + encodedRequestDescription);\n-        \n+\n         try {\n             // Create a new FHIRRequestContext and set it on the current thread.\n             FHIRRequestContext context = new FHIRRequestContext(tenantId, dsId);\n             FHIRRequestContext.set(context);\n-            \n+\n+            context.setOriginalRequestUri(originalRequestUri);\n+\n             // Set the handling preference.\n-            HTTPHandlingPreference handlingPref = HTTPHandlingPreference.from(FHIRConfigHelper.getStringProperty(FHIRConfiguration.PROPERTY_DEFAULT_HANDLING, \"strict\"));\n-            boolean allowClientHandlingPref = FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_ALLOW_CLIENT_HANDLING_PREF, true);\n-            if (allowClientHandlingPref) {\n-                String handlingPrefString = ((HttpServletRequest) request).getHeader(preferHeaderName + \":\" + preferHandlingHeaderSectionName);\n-                if (handlingPrefString != null && !handlingPrefString.isEmpty()) {\n-                    try {\n-                        handlingPref = HTTPHandlingPreference.from(handlingPrefString);\n-                    } catch (IllegalArgumentException e) {\n-                        String message = \"Invalid HTTP handling preference passed in header 'Prefer': '\" + handlingPrefString + \"'\";\n-                        if (handlingPref == HTTPHandlingPreference.STRICT) {\n-                            throw new FHIRException(message + \"; use 'strict' or 'lenient'.\");\n-                        } else {\n-                            log.fine(message + \"; using \" + handlingPref.value() + \".\");\n-                        }\n-                    }\n-                }\n-            }\n-            FHIRRequestContext.get().setHandlingPreference(handlingPref);\n+            HTTPHandlingPreference handlingPref = computeHandlingPref(request);\n+            context.setHandlingPreference(handlingPref);\n \n             // Set the return preference.\n-            HTTPReturnPreference returnPref = defaultHttpReturnPref;\n-            String returnPrefString = ((HttpServletRequest) request).getHeader(preferHeaderName + \":\" + preferReturnHeaderSectionName);\n-            if (returnPrefString != null && !returnPrefString.isEmpty()) {\n-                try {\n-                    returnPref = HTTPReturnPreference.from(returnPrefString);\n-                } catch (IllegalArgumentException e) {\n-                    String message = \"Invalid HTTP return preference passed in header 'Prefer': '\" + returnPrefString + \"'\";\n-                    if (handlingPref == HTTPHandlingPreference.STRICT) {\n-                        throw new FHIRException(message + \"; use 'minimal', 'representation' or 'OperationOutcome'.\");\n-                    } else {\n-                        log.fine(message + \"; using \" + returnPref.value() + \".\");\n-                    }\n-                }\n-            }\n-            FHIRRequestContext.get().setReturnPreference(returnPref);\n+            HTTPReturnPreference returnPref = computeReturnPref(request, handlingPref);\n+            context.setReturnPreference(returnPref);\n \n             // Pass the request through to the next filter in the chain.\n             chain.doFilter(request, response);\n-        } catch (FHIRException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzQzMTQxOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyODoxMFrOFx-RCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0MjozOVrOFx-ruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDcxMg==", "bodyText": "I thought Filters were stateless? ... so the reason I mention this...\nif the configuration changes, a server restart needs to be called to re-activate the init filter", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387944712", "createdAt": "2020-03-04T21:28:10Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -39,54 +41,54 @@\n /**\n  * This class is a servlet filter which is registered with the REST API's servlet. The main purpose of the class is to\n  * log entry/exit information and elapsed time for each REST API request processed by the server.\n- * \n- * @author padams\n  */\n-public class FHIRRestServletFilter implements Filter {\n+public class FHIRRestServletFilter extends HttpFilter {\n+    private static final long serialVersionUID = 1L;\n+\n     private static final Logger log = Logger.getLogger(FHIRRestServletFilter.class.getName());\n \n     private static String tenantIdHeaderName = null;\n     private static String datastoreIdHeaderName = null;\n+    private static String originalRequestUriHeaderName = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDgzMQ==", "bodyText": "maybe document that behavior?", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387944831", "createdAt": "2020-03-04T21:28:23Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -39,54 +41,54 @@\n /**\n  * This class is a servlet filter which is registered with the REST API's servlet. The main purpose of the class is to\n  * log entry/exit information and elapsed time for each REST API request processed by the server.\n- * \n- * @author padams\n  */\n-public class FHIRRestServletFilter implements Filter {\n+public class FHIRRestServletFilter extends HttpFilter {\n+    private static final long serialVersionUID = 1L;\n+\n     private static final Logger log = Logger.getLogger(FHIRRestServletFilter.class.getName());\n \n     private static String tenantIdHeaderName = null;\n     private static String datastoreIdHeaderName = null;\n+    private static String originalRequestUriHeaderName = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDcxMg=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTU0NQ==", "bodyText": "added to section 5.1.3 of the userguide", "url": "https://github.com/IBM/FHIR/pull/757#discussion_r387951545", "createdAt": "2020-03-04T21:42:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/filter/rest/FHIRRestServletFilter.java", "diffHunk": "@@ -39,54 +41,54 @@\n /**\n  * This class is a servlet filter which is registered with the REST API's servlet. The main purpose of the class is to\n  * log entry/exit information and elapsed time for each REST API request processed by the server.\n- * \n- * @author padams\n  */\n-public class FHIRRestServletFilter implements Filter {\n+public class FHIRRestServletFilter extends HttpFilter {\n+    private static final long serialVersionUID = 1L;\n+\n     private static final Logger log = Logger.getLogger(FHIRRestServletFilter.class.getName());\n \n     private static String tenantIdHeaderName = null;\n     private static String datastoreIdHeaderName = null;\n+    private static String originalRequestUriHeaderName = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NDcxMg=="}, "originalCommit": {"oid": "84f8a1daed1df1ce035f77dc0854ab213daf1d17"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 82, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}