{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzY3NzMz", "number": 1552, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozNjo1N1rOEpknOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo0NDowNlrOEpkw3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDI2OTM3OnYy", "diffSide": "RIGHT", "path": "fhir-config/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozNjo1N1rOHbUkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozNjo1N1rOHbUkXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMDU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <dependency>\n          \n          \n            \n                        <groupId>com.google.code.gson</groupId>\n          \n          \n            \n                        <artifactId>gson</artifactId>\n          \n          \n            \n                    </dependency>\n          \n      \n    \n    \n  \n\nduplicate declaration as on line 44", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r498410590", "createdAt": "2020-10-01T17:36:57Z", "author": {"login": "prb112"}, "path": "fhir-config/pom.xml", "diffHunk": "@@ -25,9 +25,35 @@\n             <artifactId>testng</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.code.gson</groupId>\n+            <artifactId>gson</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDI4Nzg4OnYy", "diffSide": "RIGHT", "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo0MjozM1rOHbUwLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozNTo1MlrOHcpC2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA==", "bodyText": "I think as a pattern we should probably prefix with something...\na small addition so it does something like this\nSystem.getenv().entrySet().stream().filter(es -> es.getKey().startsWith(\"FHIR.\")).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r498413614", "createdAt": "2020-10-01T17:42:33Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzkxNw==", "bodyText": "we could also throw it in a Map and strip the prefix", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r498413917", "createdAt": "2020-10-01T17:43:04Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNTg0Ng==", "bodyText": "The use of such a prefix is of course possible and might be helpful to distinct environment variables targeted for the FHIR server from the rest - yet I am just not convinced whether this should be mandatory. Rather I believe that such hard-coded prefix could possibly restrict the user from fully following and complying to his/her own, local naming conventions for variables. Also OpenLiberty itself does not stipulate any prefix either for (environment) variables used in its XML configuration files, if I see that correctly. What do you think?", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499125846", "createdAt": "2020-10-03T07:46:47Z", "author": {"login": "holger-stenzhorn"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MDgwMA==", "bodyText": "I think it's best to prefix.  While it constrains the environment, it doesn't permit needless introspection into the environment variables that may be beyond the scope of the application.\nMaybe it's best to have a second reviewer comment? @lmsurpre thoughts?", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499560800", "createdAt": "2020-10-05T12:29:04Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMTMwMg==", "bodyText": "I am sorry but I must admit that I do not understand what you mean with \"permit needless introspection into the environment variables that may be beyond the scope of the application\". The substitution of the variables within the JSON configuration files happens directly \"on-the-fly\" when loading those files within ConfigurationService.loadConfiguration(InputStream is) and hence the actual application, i.e. the FHIR server, does not see the variables themselves but only their (final) values and thus does not have to perform any further introspection.", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499601302", "createdAt": "2020-10-05T13:32:52Z", "author": {"login": "holger-stenzhorn"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNTgzOA==", "bodyText": "Right, I understand that, however this code also is permitted to run in a non-docker environment.  An attacker could conceivably gain access to more info than required, if not prefixed.", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499605838", "createdAt": "2020-10-05T13:39:27Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDQ5Mw==", "bodyText": "I am sorry again for my ignorance but I am do not get the point how a prefix FHIR. could help to have an attacker gain access to less information. For example, using postgres.password as plain environment variable is definitely \"suboptimal\" security-wise but I do not understand how FHIR.postgres.password would ameliorates things. Can you perhaps give me an example/use case with a \"malicious\" variable so that I can better get what you mean? That would be great!", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499690493", "createdAt": "2020-10-05T15:36:03Z", "author": {"login": "holger-stenzhorn"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NzY1Mg==", "bodyText": "So it's a reference to a secondary attack, where you inject a new configuration which may have access to an unexpected or unscoped environment variable.\nAlso, a good lesson from CERT https://wiki.sei.cmu.edu/confluence/display/c/ENV02-C.+Beware+of+multiple+environment+variables+with+the+same+effective+name and more specific to java https://wiki.sei.cmu.edu/confluence/display/java/ENV02-J.+Do+not+trust+the+values+of+environment+variables\nI like the thought of scoping it as it is an intent to use versus a side effect.\nPRO\nno changes, user defines completely\nCON\nindirect re-use of environment variables (potential overrides)\npotential conflicts with other Environment variables\nI'm still leaning towards scoping the environment variables.", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499697652", "createdAt": "2020-10-05T15:46:24Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MzU2NQ==", "bodyText": "Thanks a lot for providing me with the information and links. Yet I do not understand how the prefix could solve the linked issues: Following the first link, this only makes the case for having clearly distinct environment variable names without relying on case difference - so if you have FHIR.some.variable set to a certain value then a malicious attacker could also analogously change the prefix casing to \"redefine\" that value by simply setting e.g. Fhir.some.variable, right? The second link makes the case for using pre-defined Java system properties and does not mention the usage of prefixes at all - and so at the end of the day it boils down to simply not use freely defined environment variables at all - no matter if prefixed or not, right? So in the end the coping by introducing the prefix seems to be actually only a pure naming convention but would have no restrictive effect or similar - or am I still missing anything possibly?", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499743565", "createdAt": "2020-10-05T17:00:49Z", "author": {"login": "holger-stenzhorn"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NDY1MA==", "bodyText": "I'm still leaning towards prefixing.  I'll leave it to John and Lee to make the final call.", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r499794650", "createdAt": "2020-10-05T18:35:52Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -53,7 +58,9 @@ public static PropertyGroup loadConfiguration(String filename) throws Exception\n      *            an InputStream to the input JSON file\n      */\n     public static PropertyGroup loadConfiguration(InputStream is) throws Exception {\n-        try (JsonReader reader = JSON_READER_FACTORY.createReader(is)) {\n+        String templatedJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+        String resolvedJson = StringSubstitutor.replace(templatedJson, System.getenv());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzYxNA=="}, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDI5NDA2OnYy", "diffSide": "RIGHT", "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo0NDowNlrOHbUz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo0NDowNlrOHbUz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxNDU2Mg==", "bodyText": "note, we should probably change the copyright year to 2020", "url": "https://github.com/IBM/FHIR/pull/1552#discussion_r498414562", "createdAt": "2020-10-01T17:44:06Z", "author": {"login": "prb112"}, "path": "fhir-config/src/main/java/com/ibm/fhir/config/ConfigurationService.java", "diffHunk": "@@ -6,11 +6,16 @@\n \n package com.ibm.fhir.config;\n \n+import org.apache.commons.io.IOUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685793711e97f879e408d18e75c6c2f8e27c3d46"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}