{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDQ4NjE0", "number": 1813, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzo1NzowNFrOFD_zjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDowOTo0MlrOFFAEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzM1NDM3OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzo1NzowNFrOID52Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MDo0MVrOID-t0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2NDQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The service may be map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. \n          \n          \n            \n            The service can map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r540964430", "createdAt": "2020-12-11T13:57:04Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service may be map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1e537bc92e92a4bd87c23a228af72e880b873d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDE3Nw==", "bodyText": "thanks captured, and reviewed locally", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541044177", "createdAt": "2020-12-11T15:50:41Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service may be map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2NDQzMA=="}, "originalCommit": {"oid": "df1e537bc92e92a4bd87c23a228af72e880b873d"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzM2Mjc0OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzo1ODo1OVrOID57Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo0OTo1M1rOID-rZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2NTY0Mg==", "bodyText": "I would have assumed the AuditEvent mapper would just be a different class.  If WhcAuditCadfLogService is used to map to both CADF and FHIR, then I think it should get renamed.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r540965642", "createdAt": "2020-12-11T13:58:59Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service may be map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1e537bc92e92a4bd87c23a228af72e880b873d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MzU1Nw==", "bodyText": "Discussed as a team on code review", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541043557", "createdAt": "2020-12-11T15:49:53Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service may be map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2NTY0Mg=="}, "originalCommit": {"oid": "df1e537bc92e92a4bd87c23a228af72e880b873d"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ5NjE1OnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxMzo1MVrOIEESxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozNzo0OVrOIEIhtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTU1Ng==", "bodyText": "is there supposed to be an actual purpose string in here somewhere?  having a \"purpose\" of \"PurposeOfUse\" seems pretty odd", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541135556", "createdAt": "2020-12-11T18:13:51Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.api.impl.KafkaService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service can map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. \n+\n+- *CADF* Example\n+```\n+{\n+    \"action\": \"create\",\n+    \"eventTime\": \"2020-12-10 16:49:22.307\",\n+    \"eventType\": \"activity\",\n+    \"id\": \"c62ee8f8-be77-49d0-aad0-c0bf52a05fdf\",\n+    \"outcome\": \"success\",\n+    \"typeURI\": \"http://schemas.dmtf.org/cloud/audit/1.0/event\",\n+    \"tags\": [\n+    ],\n+    \"attachments\": [\n+        {\n+            \"contentType\": \"application/json\",\n+            \"content\": \"rO0ABXQCUQp7CiAgICAicmVxdWVzdF91bmlxdWVfaWQiOiAiYzYyZWU4ZjgtYmU3Ny00OWQwLWFhZDAtYzBiZjUyYTA1ZmRmIiwKICAgICJhY3Rpb24iOiAiQyIsCiAgICAic3RhcnRfdGltZSI6ICIyMDIwLTEyLTEwIDE2OjQ5OjIyLjE2OCIsCiAgICAiZW5kX3RpbWUiOiAiMjAyMC0xMi0xMCAxNjo0OToyMi4zMDciLAogICAgImFwaV9wYXJhbWV0ZXJzIjogewogICAgICAgICJyZXF1ZXN0IjogImh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvZmhpci1zZXJ2ZXIvYXBpL3Y0L1ZlcmlmaWNhdGlvblJlc3VsdCIsCiAgICAgICAgInJlcXVlc3Rfc3RhdHVzIjogMjAxCiAgICB9LAogICAgImRhdGEiOiB7CiAgICAgICAgInJlc291cmNlX3R5cGUiOiAiVmVyaWZpY2F0aW9uUmVzdWx0IiwKICAgICAgICAiaWQiOiAiMTc2NGQ4ZWEzMGEtYzUxOGMxOWItMWM0Zi00Yjc0LThhMDMtNGM5NjA0YmZkYjZlIiwKICAgICAgICAidmVyc2lvbl9pZCI6ICIxIgogICAgfSwKICAgICJldmVudF90eXBlIjogImZoaXItY3JlYXRlIiwKICAgICJkZXNjcmlwdGlvbiI6ICJGSElSIENyZWF0ZSByZXF1ZXN0IiwKICAgICJsb2NhdGlvbiI6ICIxMjcuMC4wLjEvbG9jYWxob3N0Igp9\"\n+        }\n+    ],\n+    \"initiator\": {\n+        \"id\": \"default@fhir-server\",\n+        \"typeURI\": \"compute/machine\",\n+        \"host\": \"192.168.86.20\",\n+        \"credential\": {\n+            \"token\": \"user-fhiruser\"\n+        },\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    },\n+    \"observer\": {\n+        \"id\": \"fhir-server\",\n+        \"typeURI\": \"compute/node\",\n+        \"name\": \"IBM FHIR Server - Audit\",\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    }\n+}\n+```\n+\n+- *AuditEvent* Example\n+\n+```\n+{\n+    \"resourceType\": \"AuditEvent\",\n+    \"type\": {\n+        \"system\": \"http://terminology.hl7.org/CodeSystem/audit-event-type\",\n+        \"code\": \"rest\",\n+        \"display\": \"Restful Operation\"\n+    },\n+    \"subtype\": [\n+        {\n+            \"system\": \"http://hl7.org/fhir/restful-interaction\",\n+            \"code\": \"search\",\n+            \"display\": \"search\"\n+        }\n+    ],\n+    \"action\": \"E\",\n+    \"period\": {\n+        \"start\": \"2020-12-10T16:38:14.466Z\",\n+        \"end\": \"2020-12-10T16:38:14.631Z\"\n+    },\n+    \"recorded\": \"2020-12-10T11:38:14.632173-05:00\",\n+    \"outcome\": \"0\",\n+    \"outcomeDesc\": \"success\",\n+    \"purposeOfEvent\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNjg0Ng==", "bodyText": "Interesting, apparently that is a valid value in the ValueSet.  Its a top-level code which has lots of potential children.  And its the only top-level code in the valueset.  So weird.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541136846", "createdAt": "2020-12-11T18:15:58Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.api.impl.KafkaService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service can map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. \n+\n+- *CADF* Example\n+```\n+{\n+    \"action\": \"create\",\n+    \"eventTime\": \"2020-12-10 16:49:22.307\",\n+    \"eventType\": \"activity\",\n+    \"id\": \"c62ee8f8-be77-49d0-aad0-c0bf52a05fdf\",\n+    \"outcome\": \"success\",\n+    \"typeURI\": \"http://schemas.dmtf.org/cloud/audit/1.0/event\",\n+    \"tags\": [\n+    ],\n+    \"attachments\": [\n+        {\n+            \"contentType\": \"application/json\",\n+            \"content\": \"rO0ABXQCUQp7CiAgICAicmVxdWVzdF91bmlxdWVfaWQiOiAiYzYyZWU4ZjgtYmU3Ny00OWQwLWFhZDAtYzBiZjUyYTA1ZmRmIiwKICAgICJhY3Rpb24iOiAiQyIsCiAgICAic3RhcnRfdGltZSI6ICIyMDIwLTEyLTEwIDE2OjQ5OjIyLjE2OCIsCiAgICAiZW5kX3RpbWUiOiAiMjAyMC0xMi0xMCAxNjo0OToyMi4zMDciLAogICAgImFwaV9wYXJhbWV0ZXJzIjogewogICAgICAgICJyZXF1ZXN0IjogImh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvZmhpci1zZXJ2ZXIvYXBpL3Y0L1ZlcmlmaWNhdGlvblJlc3VsdCIsCiAgICAgICAgInJlcXVlc3Rfc3RhdHVzIjogMjAxCiAgICB9LAogICAgImRhdGEiOiB7CiAgICAgICAgInJlc291cmNlX3R5cGUiOiAiVmVyaWZpY2F0aW9uUmVzdWx0IiwKICAgICAgICAiaWQiOiAiMTc2NGQ4ZWEzMGEtYzUxOGMxOWItMWM0Zi00Yjc0LThhMDMtNGM5NjA0YmZkYjZlIiwKICAgICAgICAidmVyc2lvbl9pZCI6ICIxIgogICAgfSwKICAgICJldmVudF90eXBlIjogImZoaXItY3JlYXRlIiwKICAgICJkZXNjcmlwdGlvbiI6ICJGSElSIENyZWF0ZSByZXF1ZXN0IiwKICAgICJsb2NhdGlvbiI6ICIxMjcuMC4wLjEvbG9jYWxob3N0Igp9\"\n+        }\n+    ],\n+    \"initiator\": {\n+        \"id\": \"default@fhir-server\",\n+        \"typeURI\": \"compute/machine\",\n+        \"host\": \"192.168.86.20\",\n+        \"credential\": {\n+            \"token\": \"user-fhiruser\"\n+        },\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    },\n+    \"observer\": {\n+        \"id\": \"fhir-server\",\n+        \"typeURI\": \"compute/node\",\n+        \"name\": \"IBM FHIR Server - Audit\",\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    }\n+}\n+```\n+\n+- *AuditEvent* Example\n+\n+```\n+{\n+    \"resourceType\": \"AuditEvent\",\n+    \"type\": {\n+        \"system\": \"http://terminology.hl7.org/CodeSystem/audit-event-type\",\n+        \"code\": \"rest\",\n+        \"display\": \"Restful Operation\"\n+    },\n+    \"subtype\": [\n+        {\n+            \"system\": \"http://hl7.org/fhir/restful-interaction\",\n+            \"code\": \"search\",\n+            \"display\": \"search\"\n+        }\n+    ],\n+    \"action\": \"E\",\n+    \"period\": {\n+        \"start\": \"2020-12-10T16:38:14.466Z\",\n+        \"end\": \"2020-12-10T16:38:14.631Z\"\n+    },\n+    \"recorded\": \"2020-12-10T11:38:14.632173-05:00\",\n+    \"outcome\": \"0\",\n+    \"outcomeDesc\": \"success\",\n+    \"purposeOfEvent\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTU1Ng=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwNDkxNg==", "bodyText": "Yeah - that's why I mentioned that it needs more work once we have a customer asking for a use-case", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541204916", "createdAt": "2020-12-11T19:37:49Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1778,10 +1810,180 @@ And then in the YAML file for your Kubernetes deployment, specify the environmen\n                     key: binding\n                     name: binding-<event_streams_service_instance_name>\n ```\n+\n Please refer to https://cloud.ibm.com/docs/containers?topic=containers-service-binding for detailed instructions if needed.\n \n+#### 4.11.3.2 fhir-server-config.json Configuration of audit logging service\n+\n+```\n+\"audit\": {\n+    \"serviceClassName\" : \"com.ibm.fhir.audit.logging.api.impl.KafkaService\",\n+    \"serviceProperties\" : {\n+        \"load\": \"config\",\n+        \"mapper\": \"cadf\",\n+        \"auditTopic\": \"FHIR_AUDIT\",\n+        \"geoCity\": \"Dallas\",\n+        \"geoState\": \"TX\",\n+        \"geoCounty\": \"US\",\n+        \"kafka\" : {\n+            \"sasl.jaas.config\": \"********\",\n+            \"bootstrap.servers\": \"********\",\n+            \"sasl.mechanism\": \"PLAIN\",\n+            \"security.protocol\": \"SASL_SSL\",\n+            \"ssl.protocol\": \"TLSv1.2\",\n+            \"ssl.enabled.protocols\": \"TLSv1.2\",\n+            \"ssl.endpoint.identification.algorithm\": \"HTTPS\"\n+        },\n+        \"kafkaServers\": \"********\",\n+        \"kafkaApiKey\": \"********\"\n+    }\n+```\n+\n+The service can map to the CADF format or the FHIR AuditEvent resource format by declaring a mapper type - 'cadf' or 'auditevent'. \n+\n+- *CADF* Example\n+```\n+{\n+    \"action\": \"create\",\n+    \"eventTime\": \"2020-12-10 16:49:22.307\",\n+    \"eventType\": \"activity\",\n+    \"id\": \"c62ee8f8-be77-49d0-aad0-c0bf52a05fdf\",\n+    \"outcome\": \"success\",\n+    \"typeURI\": \"http://schemas.dmtf.org/cloud/audit/1.0/event\",\n+    \"tags\": [\n+    ],\n+    \"attachments\": [\n+        {\n+            \"contentType\": \"application/json\",\n+            \"content\": \"rO0ABXQCUQp7CiAgICAicmVxdWVzdF91bmlxdWVfaWQiOiAiYzYyZWU4ZjgtYmU3Ny00OWQwLWFhZDAtYzBiZjUyYTA1ZmRmIiwKICAgICJhY3Rpb24iOiAiQyIsCiAgICAic3RhcnRfdGltZSI6ICIyMDIwLTEyLTEwIDE2OjQ5OjIyLjE2OCIsCiAgICAiZW5kX3RpbWUiOiAiMjAyMC0xMi0xMCAxNjo0OToyMi4zMDciLAogICAgImFwaV9wYXJhbWV0ZXJzIjogewogICAgICAgICJyZXF1ZXN0IjogImh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvZmhpci1zZXJ2ZXIvYXBpL3Y0L1ZlcmlmaWNhdGlvblJlc3VsdCIsCiAgICAgICAgInJlcXVlc3Rfc3RhdHVzIjogMjAxCiAgICB9LAogICAgImRhdGEiOiB7CiAgICAgICAgInJlc291cmNlX3R5cGUiOiAiVmVyaWZpY2F0aW9uUmVzdWx0IiwKICAgICAgICAiaWQiOiAiMTc2NGQ4ZWEzMGEtYzUxOGMxOWItMWM0Zi00Yjc0LThhMDMtNGM5NjA0YmZkYjZlIiwKICAgICAgICAidmVyc2lvbl9pZCI6ICIxIgogICAgfSwKICAgICJldmVudF90eXBlIjogImZoaXItY3JlYXRlIiwKICAgICJkZXNjcmlwdGlvbiI6ICJGSElSIENyZWF0ZSByZXF1ZXN0IiwKICAgICJsb2NhdGlvbiI6ICIxMjcuMC4wLjEvbG9jYWxob3N0Igp9\"\n+        }\n+    ],\n+    \"initiator\": {\n+        \"id\": \"default@fhir-server\",\n+        \"typeURI\": \"compute/machine\",\n+        \"host\": \"192.168.86.20\",\n+        \"credential\": {\n+            \"token\": \"user-fhiruser\"\n+        },\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    },\n+    \"observer\": {\n+        \"id\": \"fhir-server\",\n+        \"typeURI\": \"compute/node\",\n+        \"name\": \"IBM FHIR Server - Audit\",\n+        \"geolocation\": {\n+            \"city\": \"Dallas\",\n+            \"state\": \"TX\",\n+            \"region\": \"US\",\n+            \"annotations\": [\n+            ]\n+        }\n+    }\n+}\n+```\n+\n+- *AuditEvent* Example\n+\n+```\n+{\n+    \"resourceType\": \"AuditEvent\",\n+    \"type\": {\n+        \"system\": \"http://terminology.hl7.org/CodeSystem/audit-event-type\",\n+        \"code\": \"rest\",\n+        \"display\": \"Restful Operation\"\n+    },\n+    \"subtype\": [\n+        {\n+            \"system\": \"http://hl7.org/fhir/restful-interaction\",\n+            \"code\": \"search\",\n+            \"display\": \"search\"\n+        }\n+    ],\n+    \"action\": \"E\",\n+    \"period\": {\n+        \"start\": \"2020-12-10T16:38:14.466Z\",\n+        \"end\": \"2020-12-10T16:38:14.631Z\"\n+    },\n+    \"recorded\": \"2020-12-10T11:38:14.632173-05:00\",\n+    \"outcome\": \"0\",\n+    \"outcomeDesc\": \"success\",\n+    \"purposeOfEvent\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNTU1Ng=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUxMzAxOnYy", "diffSide": "LEFT", "path": "fhir-audit/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxODowOFrOIEEccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxODowOFrOIEEccw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzODAzNQ==", "bodyText": "yay!  down to just 2 or 3 json serialization libs :-)", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541138035", "createdAt": "2020-12-11T18:18:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/pom.xml", "diffHunk": "@@ -28,10 +33,6 @@\n             <artifactId>testng</artifactId>\n             <scope>test</scope>\n         </dependency>\n-        <dependency>\n-            <groupId>com.google.code.gson</groupId>\n-            <artifactId>gson</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUxOTI1OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxOTo1OVrOIEEgUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToyNzozM1rOIEH71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTAyNA==", "bodyText": "super-duper minor, but I usually put a space after the , as i edit it (a change from what we did when we auto-added these when first going open)", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541139024", "createdAt": "2020-12-11T18:19:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5NTIyMg==", "bodyText": "\u2705", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541195222", "createdAt": "2020-12-11T19:27:33Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTAyNA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUyMjg1OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyMDo1M1rOIEEiWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMToyN1rOIEIJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTU0Ng==", "bodyText": "make a list if you want formatting preserved", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541139546", "createdAt": "2020-12-11T18:20:53Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.api.configuration;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType;\n+import com.ibm.fhir.audit.logging.api.configuration.type.KafkaType;\n+import com.ibm.fhir.audit.logging.mapper.MapperType;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Handles translation of configurations to useful configurations.\n+ */\n+public class ConfigurationTranslator {\n+    private static final String CLASSNAME = ConfigurationTranslator.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+\n+    private static final Map<String, String> PRIOR_VERSION_CLASSNAME = generateMap();\n+\n+    public ConfigurationTranslator() {\n+        // No Operation\n+    }\n+\n+    /*\n+     * generates the map from prior versions to the current naming scheme\n+     * and maintains backwards compatibility.\n+     */\n+    private static Map<String, String> generateMap() {\n+        Map<String, String> mapped = new HashMap<>(2);\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\", \"com.ibm.fhir.audit.logging.api.impl.NopService\");\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\", \"com.ibm.fhir.audit.logging.api.impl.KafkaService\");\n+        return mapped;\n+    }\n+\n+    /*\n+     * used to remap from prior versions\n+     */\n+    public String remap(String inputName) {\n+        if (Objects.isNull(inputName)) {\n+            logger.warning(\"remapping a bad Audit Log Service, please check configuration\");\n+        }\n+        if (PRIOR_VERSION_CLASSNAME.containsKey(inputName)) {\n+            return PRIOR_VERSION_CLASSNAME.get(inputName);\n+        }\n+        return inputName;\n+    }\n+\n+    /**\n+     * decides to load the Properties from the environment or the configuration.\n+     *\n+     * @param auditLogProperties\n+     * @return\n+     * @throws Exception\n+     */\n+    public Properties translate(PropertyGroup auditLogProperties) throws Exception {\n+        ConfigurationType type = determineConfigurationType(auditLogProperties);\n+        Properties props = new Properties();\n+        switch (type) {\n+        case CONFIG:\n+            config(props, auditLogProperties);\n+            break;\n+        case ENVIRONMENT:\n+            environment(props, auditLogProperties);\n+            break;\n+        default:\n+            logger.warning(\"unable to determine where to load from\");\n+            break;\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * loads the details from the config values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void config(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        props.putAll(KafkaType.getEnvironment(auditLogProperties));\n+    }\n+\n+    /**\n+     * loads the details from the environmental values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void environment(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        final String METHODNAME = \"environment\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        String bootstrapServers = null;\n+        String apiKey = null;\n+        // Check environment: EVENT_STREAMS_AUDIT_BINDING to obtain configuration parameters for\n+        // kafka (Kubernetes Container)\n+        if (System.getenv(IBMEventStreamsType.KUB_BINDING) != null) {\n+            logger.info(\"Using the environmental variable '\" + IBMEventStreamsType.KUB_BINDING + \"' to set the credentials.\");\n+            com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType.EventStreamsCredentials credentials = IBMEventStreamsType.getEventStreamsCredentials();\n+            if (credentials != null) {\n+                bootstrapServers = IBMEventStreamsType.stringArrayToCSV(credentials.getKafkaBrokersSasl());\n+                apiKey = credentials.getApiKey();\n+            }\n+        }\n+\n+        // If fails to get config from environment, then try to get them from FHIR config\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            Objects.requireNonNull(auditLogProperties, \"Audit log properties cannot be null.\");\n+            logger.info(\"Using FHIR config to find credentials.\");\n+            bootstrapServers = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS);\n+            apiKey = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_APIKEY);\n+        }\n+\n+        // If still fails to get config for kafka producer, then throw <pre>exception</pre>\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            throw new FHIRException(\"Can not get kafka settings!\");\n+        }\n+\n+        // We load the configuration.\n+        checkAndLoadDefaults(props, auditLogProperties);\n+\n+        // We override if we need to\n+        Object o =\n+                props.put(\"sasl.jaas.config\", String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", KAFKA_USERNAME, apiKey));\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - sasl.jaas.config\");\n+        }\n+        o = props.put(\"bootstrap.servers\", bootstrapServers);\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - bootstrap.servers\");\n+        }\n+    }\n+\n+    /*\n+     * check and load the default serialiers (for example)\n+     */\n+    private void checkAndLoadDefaults(Properties props, PropertyGroup auditLogProperties) {\n+        if(!props.containsKey(\"key.serializer\")) {\n+            props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"value.serializer\")) {\n+            props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"sasl.mechanism\")) {\n+            props.put(\"sasl.mechanism\", \"PLAIN\");\n+        }\n+        if(!props.containsKey(\"security.protocol\")) {\n+            props.put(\"security.protocol\", \"SASL_SSL\");\n+        }\n+        if(!props.containsKey(\"ssl.protocol\")) {\n+            props.put(\"ssl.protocol\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.enabled.protocols\")) {\n+            props.put(\"ssl.enabled.protocols\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.endpoint.identification.algorithm\")) {\n+            props.put(\"ssl.endpoint.identification.algorithm\", \"HTTPS\");\n+        }\n+    }\n+\n+    /**\n+     * gets the location to load the properties from:\n+     * 1 - Environment Bindings with EventStreams Credentials format - \"env\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5ODgzNQ==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541198835", "createdAt": "2020-12-11T19:31:27Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.api.configuration;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType;\n+import com.ibm.fhir.audit.logging.api.configuration.type.KafkaType;\n+import com.ibm.fhir.audit.logging.mapper.MapperType;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Handles translation of configurations to useful configurations.\n+ */\n+public class ConfigurationTranslator {\n+    private static final String CLASSNAME = ConfigurationTranslator.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+\n+    private static final Map<String, String> PRIOR_VERSION_CLASSNAME = generateMap();\n+\n+    public ConfigurationTranslator() {\n+        // No Operation\n+    }\n+\n+    /*\n+     * generates the map from prior versions to the current naming scheme\n+     * and maintains backwards compatibility.\n+     */\n+    private static Map<String, String> generateMap() {\n+        Map<String, String> mapped = new HashMap<>(2);\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\", \"com.ibm.fhir.audit.logging.api.impl.NopService\");\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\", \"com.ibm.fhir.audit.logging.api.impl.KafkaService\");\n+        return mapped;\n+    }\n+\n+    /*\n+     * used to remap from prior versions\n+     */\n+    public String remap(String inputName) {\n+        if (Objects.isNull(inputName)) {\n+            logger.warning(\"remapping a bad Audit Log Service, please check configuration\");\n+        }\n+        if (PRIOR_VERSION_CLASSNAME.containsKey(inputName)) {\n+            return PRIOR_VERSION_CLASSNAME.get(inputName);\n+        }\n+        return inputName;\n+    }\n+\n+    /**\n+     * decides to load the Properties from the environment or the configuration.\n+     *\n+     * @param auditLogProperties\n+     * @return\n+     * @throws Exception\n+     */\n+    public Properties translate(PropertyGroup auditLogProperties) throws Exception {\n+        ConfigurationType type = determineConfigurationType(auditLogProperties);\n+        Properties props = new Properties();\n+        switch (type) {\n+        case CONFIG:\n+            config(props, auditLogProperties);\n+            break;\n+        case ENVIRONMENT:\n+            environment(props, auditLogProperties);\n+            break;\n+        default:\n+            logger.warning(\"unable to determine where to load from\");\n+            break;\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * loads the details from the config values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void config(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        props.putAll(KafkaType.getEnvironment(auditLogProperties));\n+    }\n+\n+    /**\n+     * loads the details from the environmental values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void environment(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        final String METHODNAME = \"environment\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        String bootstrapServers = null;\n+        String apiKey = null;\n+        // Check environment: EVENT_STREAMS_AUDIT_BINDING to obtain configuration parameters for\n+        // kafka (Kubernetes Container)\n+        if (System.getenv(IBMEventStreamsType.KUB_BINDING) != null) {\n+            logger.info(\"Using the environmental variable '\" + IBMEventStreamsType.KUB_BINDING + \"' to set the credentials.\");\n+            com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType.EventStreamsCredentials credentials = IBMEventStreamsType.getEventStreamsCredentials();\n+            if (credentials != null) {\n+                bootstrapServers = IBMEventStreamsType.stringArrayToCSV(credentials.getKafkaBrokersSasl());\n+                apiKey = credentials.getApiKey();\n+            }\n+        }\n+\n+        // If fails to get config from environment, then try to get them from FHIR config\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            Objects.requireNonNull(auditLogProperties, \"Audit log properties cannot be null.\");\n+            logger.info(\"Using FHIR config to find credentials.\");\n+            bootstrapServers = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS);\n+            apiKey = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_APIKEY);\n+        }\n+\n+        // If still fails to get config for kafka producer, then throw <pre>exception</pre>\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            throw new FHIRException(\"Can not get kafka settings!\");\n+        }\n+\n+        // We load the configuration.\n+        checkAndLoadDefaults(props, auditLogProperties);\n+\n+        // We override if we need to\n+        Object o =\n+                props.put(\"sasl.jaas.config\", String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", KAFKA_USERNAME, apiKey));\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - sasl.jaas.config\");\n+        }\n+        o = props.put(\"bootstrap.servers\", bootstrapServers);\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - bootstrap.servers\");\n+        }\n+    }\n+\n+    /*\n+     * check and load the default serialiers (for example)\n+     */\n+    private void checkAndLoadDefaults(Properties props, PropertyGroup auditLogProperties) {\n+        if(!props.containsKey(\"key.serializer\")) {\n+            props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"value.serializer\")) {\n+            props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"sasl.mechanism\")) {\n+            props.put(\"sasl.mechanism\", \"PLAIN\");\n+        }\n+        if(!props.containsKey(\"security.protocol\")) {\n+            props.put(\"security.protocol\", \"SASL_SSL\");\n+        }\n+        if(!props.containsKey(\"ssl.protocol\")) {\n+            props.put(\"ssl.protocol\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.enabled.protocols\")) {\n+            props.put(\"ssl.enabled.protocols\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.endpoint.identification.algorithm\")) {\n+            props.put(\"ssl.endpoint.identification.algorithm\", \"HTTPS\");\n+        }\n+    }\n+\n+    /**\n+     * gets the location to load the properties from:\n+     * 1 - Environment Bindings with EventStreams Credentials format - \"env\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTU0Ng=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUzMTc4OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyMzoxOFrOIEEntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMjozM1rOIEIN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDkxOQ==", "bodyText": "personally not a huge fan of all the formatter comments, but i understand why you add them.  nothing to change here, but maybe eventually we can settle on a common style (include them or not) :-)", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541140919", "createdAt": "2020-12-11T18:23:18Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.model.type.Code.code;\n+import static com.ibm.fhir.model.type.String.string;\n+import static com.ibm.fhir.model.type.Uri.uri;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.AuditLogEventType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.resource.AuditEvent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent.Network;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity.Detail;\n+import com.ibm.fhir.model.resource.AuditEvent.Source;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Instant;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.code.AuditEventAction;\n+import com.ibm.fhir.model.type.code.AuditEventAgentNetworkType;\n+\n+/**\n+ * This class adds support for AuditEvent\n+ * https://www.hl7.org/fhir/r4/auditevent.html\n+ */\n+public class AuditEventMapper implements Mapper {\n+\n+    private static final Logger logger = java.util.logging.Logger.getLogger(AuditEventMapper.class.getName());\n+    private static final String CLASSNAME = AuditEventMapper.class.getName();\n+\n+    //@formatter:off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5OTg0OQ==", "bodyText": "Sure - I hate hitting ctrl + f or having something accidentally formatted.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541199849", "createdAt": "2020-12-11T19:32:33Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.model.type.Code.code;\n+import static com.ibm.fhir.model.type.String.string;\n+import static com.ibm.fhir.model.type.Uri.uri;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.AuditLogEventType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.resource.AuditEvent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent.Network;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity.Detail;\n+import com.ibm.fhir.model.resource.AuditEvent.Source;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Instant;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.code.AuditEventAction;\n+import com.ibm.fhir.model.type.code.AuditEventAgentNetworkType;\n+\n+/**\n+ * This class adds support for AuditEvent\n+ * https://www.hl7.org/fhir/r4/auditevent.html\n+ */\n+public class AuditEventMapper implements Mapper {\n+\n+    private static final Logger logger = java.util.logging.Logger.getLogger(AuditEventMapper.class.getName());\n+    private static final String CLASSNAME = AuditEventMapper.class.getName();\n+\n+    //@formatter:off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDkxOQ=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUzNzIwOnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNDo0MlrOIEEq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozNjo0NlrOIEIdWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA==", "bodyText": "do we ever get an \"E\" as input to this?", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541141718", "createdAt": "2020-12-11T18:24:42Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjM3MQ==", "bodyText": "moved the comment to where this is called", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541142371", "createdAt": "2020-12-11T18:25:48Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMzgwMw==", "bodyText": "No - not in this case, there is no good mapping to C-R-U-D-E like in AuditEvent.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541203803", "createdAt": "2020-12-11T19:36:46Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU0MDgzOnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNTozNFrOIEEs9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozNToyMlrOIEIYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA==", "bodyText": "do we ever get an \"E\" as input to this?  if so, i guess we'll end up setting \"Action.unknown\" ?", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541142260", "createdAt": "2020-12-11T18:25:34Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);\n+        }\n+    };\n+\n+    private CadfEvent eventObject = null;\n+\n+    private String hostname = null;\n+    private String geoCity = null;\n+    private String geoState = null;\n+    private String geoCountry = null;\n+\n+    @Override\n+    public Mapper init(PropertyGroup auditLogProperties) throws Exception {\n+        // this may be unreliable on Windows and other systems.\n+        hostname = System.getenv(\"HOSTNAME\");\n+        geoCity = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_CITY, DEFAULT_AUDIT_GEO_CITY);\n+        geoState = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_STATE, DEFAULT_AUDIT_GEO_STATE);\n+        geoCountry = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_COUNTRY, DEFAULT_AUDIT_GEO_COUNTRY);\n+        return this;\n+    }\n+\n+    @Override\n+    public Mapper map(AuditLogEntry entry) throws Exception {\n+        eventObject = createCadfEvent(entry);\n+        return this;\n+    }\n+\n+    @Override\n+    public String serialize() throws Exception {\n+        return CadfEvent.Writer.generate(eventObject);\n+    }\n+\n+    public CadfEvent createCadfEvent(AuditLogEntry logEntry) throws IllegalStateException, IOException {\n+        final String METHODNAME = \"createCadfEvent\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        CadfResource observerRsrc = new CadfResource.Builder(\"fhir-server\", ResourceType.compute_node)\n+                .geolocation(new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                .name(\"IBM FHIR Server - Audit\")\n+                .host(hostname)\n+                .build();\n+\n+        CadfEvent event = null;\n+        Outcome cadfEventOutCome;\n+\n+        // For CADF we don't log specific event types.\n+        if ( logEntry.getContext() != null\n+                && logEntry.getContext().getAction() != null\n+                && logEntry.getContext().getApiParameters() != null) {\n+            // Define resources\n+            CadfResource initiator =\n+                    new CadfResource.Builder(logEntry.getTenantId() + \"@\" + logEntry.getComponentId(),\n+                            ResourceType.compute_machine)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .credential(\n+                                            new CadfCredential.Builder(\"user-\" + logEntry.getUserName()).build())\n+                                    .host(logEntry.getComponentIp()).build();\n+            CadfResource target =\n+                    new CadfResource.Builder(\n+                            logEntry.getContext().getData() == null || logEntry.getContext().getData().getId() == null\n+                                    ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getData().getId(),\n+                            ResourceType.data_database)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .address(\n+                                            new CadfEndpoint(logEntry.getContext().getApiParameters().getRequest(), \"\",\n+                                                    \"\"))\n+                                    .build();\n+\n+            FHIRContext fhirContext = new FHIRContext(logEntry.getContext());\n+            fhirContext.setClient_cert_cn(logEntry.getClientCertCn());\n+            fhirContext.setClient_cert_issuer_ou(logEntry.getClientCertIssuerOu());\n+            fhirContext.setEventType(logEntry.getEventType());\n+            fhirContext.setLocation(logEntry.getLocation());\n+            fhirContext.setDescription(logEntry.getDescription());\n+\n+            if (logEntry.getContext().getEndTime() == null ||\n+                    logEntry.getContext().getStartTime().equalsIgnoreCase(logEntry.getContext().getEndTime())) {\n+                cadfEventOutCome = Outcome.pending;\n+            } else if (logEntry.getContext().getApiParameters().getStatus() < 400) {\n+                cadfEventOutCome = Outcome.success;\n+            } else {\n+                cadfEventOutCome = Outcome.failure;\n+            }\n+\n+            event = new CadfEvent.Builder(\n+                            logEntry.getContext().getRequestUniqueId() == null ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getRequestUniqueId(),\n+                                    EventType.activity, logEntry.getTimestamp(),\n+                                    FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMjAzMQ==", "bodyText": "FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),\nThis ends up as an unknown.\nIn the  output it looks like this...", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541202031", "createdAt": "2020-12-11T19:34:57Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);\n+        }\n+    };\n+\n+    private CadfEvent eventObject = null;\n+\n+    private String hostname = null;\n+    private String geoCity = null;\n+    private String geoState = null;\n+    private String geoCountry = null;\n+\n+    @Override\n+    public Mapper init(PropertyGroup auditLogProperties) throws Exception {\n+        // this may be unreliable on Windows and other systems.\n+        hostname = System.getenv(\"HOSTNAME\");\n+        geoCity = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_CITY, DEFAULT_AUDIT_GEO_CITY);\n+        geoState = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_STATE, DEFAULT_AUDIT_GEO_STATE);\n+        geoCountry = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_COUNTRY, DEFAULT_AUDIT_GEO_COUNTRY);\n+        return this;\n+    }\n+\n+    @Override\n+    public Mapper map(AuditLogEntry entry) throws Exception {\n+        eventObject = createCadfEvent(entry);\n+        return this;\n+    }\n+\n+    @Override\n+    public String serialize() throws Exception {\n+        return CadfEvent.Writer.generate(eventObject);\n+    }\n+\n+    public CadfEvent createCadfEvent(AuditLogEntry logEntry) throws IllegalStateException, IOException {\n+        final String METHODNAME = \"createCadfEvent\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        CadfResource observerRsrc = new CadfResource.Builder(\"fhir-server\", ResourceType.compute_node)\n+                .geolocation(new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                .name(\"IBM FHIR Server - Audit\")\n+                .host(hostname)\n+                .build();\n+\n+        CadfEvent event = null;\n+        Outcome cadfEventOutCome;\n+\n+        // For CADF we don't log specific event types.\n+        if ( logEntry.getContext() != null\n+                && logEntry.getContext().getAction() != null\n+                && logEntry.getContext().getApiParameters() != null) {\n+            // Define resources\n+            CadfResource initiator =\n+                    new CadfResource.Builder(logEntry.getTenantId() + \"@\" + logEntry.getComponentId(),\n+                            ResourceType.compute_machine)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .credential(\n+                                            new CadfCredential.Builder(\"user-\" + logEntry.getUserName()).build())\n+                                    .host(logEntry.getComponentIp()).build();\n+            CadfResource target =\n+                    new CadfResource.Builder(\n+                            logEntry.getContext().getData() == null || logEntry.getContext().getData().getId() == null\n+                                    ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getData().getId(),\n+                            ResourceType.data_database)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .address(\n+                                            new CadfEndpoint(logEntry.getContext().getApiParameters().getRequest(), \"\",\n+                                                    \"\"))\n+                                    .build();\n+\n+            FHIRContext fhirContext = new FHIRContext(logEntry.getContext());\n+            fhirContext.setClient_cert_cn(logEntry.getClientCertCn());\n+            fhirContext.setClient_cert_issuer_ou(logEntry.getClientCertIssuerOu());\n+            fhirContext.setEventType(logEntry.getEventType());\n+            fhirContext.setLocation(logEntry.getLocation());\n+            fhirContext.setDescription(logEntry.getDescription());\n+\n+            if (logEntry.getContext().getEndTime() == null ||\n+                    logEntry.getContext().getStartTime().equalsIgnoreCase(logEntry.getContext().getEndTime())) {\n+                cadfEventOutCome = Outcome.pending;\n+            } else if (logEntry.getContext().getApiParameters().getStatus() < 400) {\n+                cadfEventOutCome = Outcome.success;\n+            } else {\n+                cadfEventOutCome = Outcome.failure;\n+            }\n+\n+            event = new CadfEvent.Builder(\n+                            logEntry.getContext().getRequestUniqueId() == null ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getRequestUniqueId(),\n+                                    EventType.activity, logEntry.getTimestamp(),\n+                                    FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMjQ3OA==", "bodyText": "CreateTime:1607706347894\n{\n    \"action\": \"unknown\",\n    \"eventTime\": \"2020-12-11 17:05:47.882\",\n    \"eventType\": \"activity\",\n    \"id\": \"336794e9-b5f9-4ac5-a00b-72aa7d9c5e0b\",\n    \"outcome\": \"success\",\n    \"typeURI\": \"http://schemas.dmtf.org/cloud/audit/1.0/event\",\n    \"tags\": [\n    ],\n    \"attachments\": [\n        {\n            \"contentType\": \"application/json\",\n            \"content\": \"rO0ABXQCFgp7CiAgICAicmVxdWVzdF91bmlxdWVfaWQiOiAiMzM2Nzk0ZTktYjVmOS00YWM1LWEwMGItNzJhYTdkOWM1ZTBiIiwKICAgICJhY3Rpb24iOiAiRSIsCiAgICAic3RhcnRfdGltZSI6ICIyMDIwLTEyLTExIDE3OjA1OjQ3LjUyNCIsCiAgICAiZW5kX3RpbWUiOiAiMjAyMC0xMi0xMSAxNzowNTo0Ny44ODIiLAogICAgImFwaV9wYXJhbWV0ZXJzIjogewogICAgICAgICJyZXF1ZXN0IjogImh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvZmhpci1zZXJ2ZXIvYXBpL3Y0IiwKICAgICAgICAicmVxdWVzdF9zdGF0dXMiOiAyMDAKICAgIH0sCiAgICAiYmF0Y2giOiB7CiAgICAgICAgInJlc291cmNlc19yZWFkIjogMCwKICAgICAgICAicmVzb3VyY2VzX2NyZWF0ZWQiOiAwLAogICAgICAgICJyZXNvdXJjZXNfdXBkYXRlZCI6IDIKICAgIH0sCiAgICAiZXZlbnRfdHlwZSI6ICJmaGlyLWJ1bmRsZSIsCiAgICAiZGVzY3JpcHRpb24iOiAiRkhJUiBCdW5kbGUgcmVxdWVzdCIsCiAgICAibG9jYXRpb24iOiAiMDowOjA6MDowOjA6MDoxL2xvY2FsaG9zdCIKfQ==\"\n        }\n    ],", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541202478", "createdAt": "2020-12-11T19:35:22Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);\n+        }\n+    };\n+\n+    private CadfEvent eventObject = null;\n+\n+    private String hostname = null;\n+    private String geoCity = null;\n+    private String geoState = null;\n+    private String geoCountry = null;\n+\n+    @Override\n+    public Mapper init(PropertyGroup auditLogProperties) throws Exception {\n+        // this may be unreliable on Windows and other systems.\n+        hostname = System.getenv(\"HOSTNAME\");\n+        geoCity = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_CITY, DEFAULT_AUDIT_GEO_CITY);\n+        geoState = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_STATE, DEFAULT_AUDIT_GEO_STATE);\n+        geoCountry = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_COUNTRY, DEFAULT_AUDIT_GEO_COUNTRY);\n+        return this;\n+    }\n+\n+    @Override\n+    public Mapper map(AuditLogEntry entry) throws Exception {\n+        eventObject = createCadfEvent(entry);\n+        return this;\n+    }\n+\n+    @Override\n+    public String serialize() throws Exception {\n+        return CadfEvent.Writer.generate(eventObject);\n+    }\n+\n+    public CadfEvent createCadfEvent(AuditLogEntry logEntry) throws IllegalStateException, IOException {\n+        final String METHODNAME = \"createCadfEvent\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        CadfResource observerRsrc = new CadfResource.Builder(\"fhir-server\", ResourceType.compute_node)\n+                .geolocation(new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                .name(\"IBM FHIR Server - Audit\")\n+                .host(hostname)\n+                .build();\n+\n+        CadfEvent event = null;\n+        Outcome cadfEventOutCome;\n+\n+        // For CADF we don't log specific event types.\n+        if ( logEntry.getContext() != null\n+                && logEntry.getContext().getAction() != null\n+                && logEntry.getContext().getApiParameters() != null) {\n+            // Define resources\n+            CadfResource initiator =\n+                    new CadfResource.Builder(logEntry.getTenantId() + \"@\" + logEntry.getComponentId(),\n+                            ResourceType.compute_machine)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .credential(\n+                                            new CadfCredential.Builder(\"user-\" + logEntry.getUserName()).build())\n+                                    .host(logEntry.getComponentIp()).build();\n+            CadfResource target =\n+                    new CadfResource.Builder(\n+                            logEntry.getContext().getData() == null || logEntry.getContext().getData().getId() == null\n+                                    ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getData().getId(),\n+                            ResourceType.data_database)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .address(\n+                                            new CadfEndpoint(logEntry.getContext().getApiParameters().getRequest(), \"\",\n+                                                    \"\"))\n+                                    .build();\n+\n+            FHIRContext fhirContext = new FHIRContext(logEntry.getContext());\n+            fhirContext.setClient_cert_cn(logEntry.getClientCertCn());\n+            fhirContext.setClient_cert_issuer_ou(logEntry.getClientCertIssuerOu());\n+            fhirContext.setEventType(logEntry.getEventType());\n+            fhirContext.setLocation(logEntry.getLocation());\n+            fhirContext.setDescription(logEntry.getDescription());\n+\n+            if (logEntry.getContext().getEndTime() == null ||\n+                    logEntry.getContext().getStartTime().equalsIgnoreCase(logEntry.getContext().getEndTime())) {\n+                cadfEventOutCome = Outcome.pending;\n+            } else if (logEntry.getContext().getApiParameters().getStatus() < 400) {\n+                cadfEventOutCome = Outcome.success;\n+            } else {\n+                cadfEventOutCome = Outcome.failure;\n+            }\n+\n+            event = new CadfEvent.Builder(\n+                            logEntry.getContext().getRequestUniqueId() == null ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getRequestUniqueId(),\n+                                    EventType.activity, logEntry.getTimestamp(),\n+                                    FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU2MzA4OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMTowOFrOIEE57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozNzowMFrOIEIeYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA==", "bodyText": "Why the .api in the package name?  Can we just use com.ibm.fhir.audit.logging.impl for the impl classes?", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541145580", "createdAt": "2020-12-11T18:31:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MDMyNw==", "bodyText": "legacy -- I can change it... matched the existing package structure", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541150327", "createdAt": "2020-12-11T18:39:41Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NDc1MA==", "bodyText": "I pinged paul on the side and suggested that maybe we could even do away with the logging in the package name for all classes in this module.  My understanding is there is no other audit package other than logging and so this level seems totally pointless.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541154750", "createdAt": "2020-12-11T18:47:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5MzU5MA==", "bodyText": "Changed per discussion", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541193590", "createdAt": "2020-12-11T19:25:58Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwNDA2Nw==", "bodyText": "Discussed in chat", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541204067", "createdAt": "2020-12-11T19:37:00Z", "author": {"login": "prb112"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYyNzc2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0ODo0OVrOIEFfuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1MzowM1rOIEJbwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NTI1OQ==", "bodyText": "the one update I think you missed :-)", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541155259", "createdAt": "2020-12-11T18:48:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java", "diffHunk": "@@ -498,6 +491,8 @@ private static AuditLogEntry populateAuditLogEntry(AuditLogEntry entry, HttpServ\n                             .append(\"/\")\n                             .append(request.getRemoteHost()).toString());\n         entry.setContext(new Context());\n+\n+        // TODO: Unify with the FHIRRequestContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxOTc3Nw==", "bodyText": "Thanks, it's a online change, so easy to get in.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541219777", "createdAt": "2020-12-11T19:53:03Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java", "diffHunk": "@@ -498,6 +491,8 @@ private static AuditLogEntry populateAuditLogEntry(AuditLogEntry entry, HttpServ\n                             .append(\"/\")\n                             .append(request.getRemoteHost()).toString());\n         entry.setContext(new Context());\n+\n+        // TODO: Unify with the FHIRRequestContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NTI1OQ=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTUyODkxOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToxNzozOVrOIEOZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0NDo0OVrOIEP5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTIxNA==", "bodyText": "Section 4.9.2.1 (line 1481)\n\"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\",\nReplace with No-op.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541301214", "createdAt": "2020-12-11T21:17:39Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -27,7 +27,7 @@ permalink: /FHIRServerUsersGuide/\n   * [4.8 Using local references within request bundles](#48-using-local-references-within-request-bundles)\n   * [4.9 Multi-tenancy](#49-multi-tenancy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMTc4OQ==", "bodyText": "hum I don't see it ...", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541321789", "createdAt": "2020-12-11T21:40:15Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -27,7 +27,7 @@ permalink: /FHIRServerUsersGuide/\n   * [4.8 Using local references within request bundles](#48-using-local-references-within-request-bundles)\n   * [4.9 Multi-tenancy](#49-multi-tenancy)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTIxNA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMjY4OA==", "bodyText": "Weird my local copy doesn't show this", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541322688", "createdAt": "2020-12-11T21:41:11Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -27,7 +27,7 @@ permalink: /FHIRServerUsersGuide/\n   * [4.8 Using local references within request bundles](#48-using-local-references-within-request-bundles)\n   * [4.9 Multi-tenancy](#49-multi-tenancy)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTIxNA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzA1NQ==", "bodyText": "OH this is an old commit", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541323055", "createdAt": "2020-12-11T21:41:35Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -27,7 +27,7 @@ permalink: /FHIRServerUsersGuide/\n   * [4.8 Using local references within request bundles](#48-using-local-references-within-request-bundles)\n   * [4.9 Multi-tenancy](#49-multi-tenancy)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTIxNA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNTcyOA==", "bodyText": "ok, thanks!  Not sure why I was seeing that.  Looks good now.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541325728", "createdAt": "2020-12-11T21:44:49Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -27,7 +27,7 @@ permalink: /FHIRServerUsersGuide/\n   * [4.8 Using local references within request bundles](#48-using-local-references-within-request-bundles)\n   * [4.9 Multi-tenancy](#49-multi-tenancy)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMTIxNA=="}, "originalCommit": {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTY2NTE0OnYy", "diffSide": "LEFT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0MTo1M1rOIEPwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0MzoxMlrOIEP0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzI5OA==", "bodyText": "Changed here...", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541323298", "createdAt": "2020-12-11T21:41:53Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1478,7 +1478,7 @@ The global configuration contains non-tenant specific configuration parameters (\n             }\n         },\n         \"audit\": {\n-            \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83cc9593e66e2859639c838d8778a8cb1c0a5f47"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDU0MA==", "bodyText": "Cool.  Thanks!", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541324540", "createdAt": "2020-12-11T21:43:12Z", "author": {"login": "tbieste"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1478,7 +1478,7 @@ The global configuration contains non-tenant specific configuration parameters (\n             }\n         },\n         \"audit\": {\n-            \"serviceClassName\" : \"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzI5OA=="}, "originalCommit": {"oid": "83cc9593e66e2859639c838d8778a8cb1c0a5f47"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzg3NjE2OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDowODoyOVrOIFSIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDowODoyOVrOIFSIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMDg2Nw==", "bodyText": "Perhaps constants would be better for these string values.", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r542410867", "createdAt": "2020-12-14T14:08:29Z", "author": {"login": "punktilious"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.configuration;\n+\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.configuration.type.IBMEventStreamsType;\n+import com.ibm.fhir.audit.configuration.type.KafkaType;\n+import com.ibm.fhir.audit.mapper.MapperType;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Handles translation of configurations to useful configurations.\n+ */\n+public class ConfigurationTranslator {\n+    private static final String CLASSNAME = ConfigurationTranslator.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+\n+    private static final Map<String, String> PRIOR_VERSION_CLASSNAME = generateMap();\n+\n+    public ConfigurationTranslator() {\n+        // No Operation\n+    }\n+\n+    /*\n+     * generates the map from prior versions to the current naming scheme\n+     * and maintains backwards compatibility.\n+     */\n+    private static Map<String, String> generateMap() {\n+        Map<String, String> mapped = new HashMap<>(2);\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\", \"com.ibm.fhir.audit.impl.NopService\");\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\", \"com.ibm.fhir.audit.impl.KafkaService\");\n+        return mapped;\n+    }\n+\n+    /*\n+     * used to remap from prior versions\n+     */\n+    public String remap(String inputName) {\n+        if (Objects.isNull(inputName)) {\n+            logger.warning(\"remapping a bad Audit Log Service, please check configuration\");\n+        }\n+        if (PRIOR_VERSION_CLASSNAME.containsKey(inputName)) {\n+            return PRIOR_VERSION_CLASSNAME.get(inputName);\n+        }\n+        return inputName;\n+    }\n+\n+    /**\n+     * decides to load the Properties from the environment or the configuration.\n+     *\n+     * @param auditLogProperties\n+     * @return\n+     * @throws Exception\n+     */\n+    public Properties translate(PropertyGroup auditLogProperties) throws Exception {\n+        ConfigurationType type = determineConfigurationType(auditLogProperties);\n+        Properties props = new Properties();\n+        switch (type) {\n+        case CONFIG:\n+            config(props, auditLogProperties);\n+            break;\n+        case ENVIRONMENT:\n+            environment(props, auditLogProperties);\n+            break;\n+        default:\n+            logger.warning(\"unable to determine where to load from\");\n+            break;\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * loads the details from the config values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void config(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        props.putAll(KafkaType.getEnvironment(auditLogProperties));\n+    }\n+\n+    /**\n+     * loads the details from the environmental values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void environment(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        final String METHODNAME = \"environment\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        String bootstrapServers = null;\n+        String apiKey = null;\n+        // Check environment: EVENT_STREAMS_AUDIT_BINDING to obtain configuration parameters for\n+        // kafka (Kubernetes Container)\n+        if (System.getenv(IBMEventStreamsType.KUB_BINDING) != null) {\n+            logger.info(\"Using the environmental variable '\" + IBMEventStreamsType.KUB_BINDING + \"' to set the credentials.\");\n+            com.ibm.fhir.audit.configuration.type.IBMEventStreamsType.EventStreamsCredentials credentials = IBMEventStreamsType.getEventStreamsCredentials();\n+            if (credentials != null) {\n+                bootstrapServers = IBMEventStreamsType.stringArrayToCSV(credentials.getKafkaBrokersSasl());\n+                apiKey = credentials.getApiKey();\n+            }\n+        }\n+\n+        // If fails to get config from environment, then try to get them from FHIR config\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            Objects.requireNonNull(auditLogProperties, \"Audit log properties cannot be null.\");\n+            logger.info(\"Using FHIR config to find credentials.\");\n+            bootstrapServers = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS);\n+            apiKey = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_APIKEY);\n+        }\n+\n+        // If still fails to get config for kafka producer, then throw <pre>exception</pre>\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            throw new FHIRException(\"Can not get kafka settings!\");\n+        }\n+\n+        // We load the configuration.\n+        checkAndLoadDefaults(props, auditLogProperties);\n+\n+        // We override if we need to\n+        Object o =\n+                props.put(\"sasl.jaas.config\", String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", KAFKA_USERNAME, apiKey));\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - sasl.jaas.config\");\n+        }\n+        o = props.put(\"bootstrap.servers\", bootstrapServers);\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - bootstrap.servers\");\n+        }\n+    }\n+\n+    /*\n+     * check and load the default serialiers (for example)\n+     */\n+    private void checkAndLoadDefaults(Properties props, PropertyGroup auditLogProperties) {\n+        if(!props.containsKey(\"key.serializer\")) {\n+            props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"value.serializer\")) {\n+            props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"sasl.mechanism\")) {\n+            props.put(\"sasl.mechanism\", \"PLAIN\");\n+        }\n+        if(!props.containsKey(\"security.protocol\")) {\n+            props.put(\"security.protocol\", \"SASL_SSL\");\n+        }\n+        if(!props.containsKey(\"ssl.protocol\")) {\n+            props.put(\"ssl.protocol\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.enabled.protocols\")) {\n+            props.put(\"ssl.enabled.protocols\", \"TLSv1.2\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzg4MjI2OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/type/IBMEventStreamsType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDowOTo0MlrOIFSMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDowOTo0MlrOIFSMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMTc4Nw==", "bodyText": "String constants", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r542411787", "createdAt": "2020-12-14T14:09:42Z", "author": {"login": "punktilious"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/type/IBMEventStreamsType.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.audit.configuration.type;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import javax.json.Json;\n+import javax.json.JsonArray;\n+import javax.json.JsonObject;\n+import javax.json.JsonReader;\n+import javax.json.JsonReaderFactory;\n+import javax.json.JsonString;\n+import javax.json.stream.JsonGenerator;\n+import javax.json.stream.JsonGeneratorFactory;\n+\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Helper class to process IBM Event Streams bindings into useful Kafka\n+ * entries.\n+ */\n+public final class IBMEventStreamsType {\n+\n+    private static final Logger logger = java.util.logging.Logger.getLogger(IBMEventStreamsType.class.getName());\n+    public static final String KUB_BINDING = \"EVENT_STREAMS_AUDIT_BINDING\";\n+\n+    private IBMEventStreamsType() {\n+        // No Operation\n+    }\n+\n+    /**\n+     * Return a comma separate value String from an array of strings\n+     */\n+    public static String stringArrayToCSV(String[] sArray) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < sArray.length; i++) {\n+            sb.append(sArray[i]);\n+            if (i < sArray.length - 1)\n+                sb.append(\",\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * @return EventStreamsCredentials\n+     */\n+    public static EventStreamsCredentials getEventStreamsCredentials() {\n+        String kubEventStreamBinding = System.getenv(KUB_BINDING);\n+\n+        if (logger.isLoggable(Level.FINE)) {\n+            logger.fine(KUB_BINDING + \" is found and is valid = \" + (kubEventStreamBinding != null));\n+        }\n+        return parseEventStreamsCredentials(kubEventStreamBinding);\n+    }\n+\n+    /**\n+     * parses the EventStreamsCredentials into a useful object.\n+     * @param kubEventStreamBinding\n+     * @return\n+     */\n+    public static EventStreamsCredentials parseEventStreamsCredentials(String kubEventStreamBinding) {\n+        if (kubEventStreamBinding != null) {\n+            try {\n+                return EventStreamsCredentials.Parser.parse(kubEventStreamBinding);\n+            } catch (FHIRException e) {\n+                logger.severe(\"Parsing of environment variable '\" + KUB_BINDING + \"' has failed.\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /*\n+     * Helper Data Class for Event Stream related details\n+     */\n+    public static class EventStreamsCredentials {\n+\n+        private String apiKey, user, password;\n+        private String[] kafkaBrokersSasl;\n+\n+        public String getApiKey() {\n+            return apiKey;\n+        }\n+\n+        public void setApiKey(String apiKey) {\n+            this.apiKey = apiKey;\n+        }\n+\n+        public String getUser() {\n+            return user;\n+        }\n+\n+        public void setUser(String user) {\n+            this.user = user;\n+        }\n+\n+        public String getPassword() {\n+            return password;\n+        }\n+\n+        public void setPassword(String password) {\n+            this.password = password;\n+        }\n+\n+        public String[] getKafkaBrokersSasl() {\n+            return kafkaBrokersSasl;\n+        }\n+\n+        public void setKafkaBrokersSasl(String[] kafkaBrokersSasl) {\n+            this.kafkaBrokersSasl = kafkaBrokersSasl;\n+        }\n+\n+        /**\n+         * Generates JSON from this object.\n+         */\n+        public static class Writer {\n+\n+            private static final Map<java.lang.String, Object> properties =\n+                    Collections.singletonMap(JsonGenerator.PRETTY_PRINTING, true);\n+            private static final JsonGeneratorFactory PRETTY_PRINTING_GENERATOR_FACTORY =\n+                    Json.createGeneratorFactory(properties);\n+\n+            private Writer() {\n+                // No Operation\n+            }\n+\n+            /**\n+             * @param obj\n+             * @return\n+             * @throws IOException\n+             */\n+            public static String generate(EventStreamsCredentials obj)\n+                throws IOException {\n+                String o = \"{}\";\n+                try (StringWriter writer = new StringWriter();) {\n+                    try (JsonGenerator generator =\n+                            PRETTY_PRINTING_GENERATOR_FACTORY.createGenerator(writer);) {\n+                        generator.writeStartObject();\n+\n+                        if (obj.getApiKey() != null) {\n+                            generator.write(\"api_key\", obj.getApiKey());\n+                        }\n+\n+                        if (obj.getPassword() != null) {\n+                            generator.write(\"password\", obj.getPassword());\n+                        }\n+\n+                        if (obj.getUser() != null) {\n+                            generator.write(\"user\", obj.getUser());\n+                        }\n+\n+                        if (obj.getKafkaBrokersSasl() != null) {\n+                            generator.writeStartArray(\"kafka_brokers_sasl\");\n+\n+                            for (String kafkaBrokersSasl : obj.getKafkaBrokersSasl()) {\n+                                generator.write(kafkaBrokersSasl);\n+                            }\n+\n+                            generator.writeEnd();\n+                        }\n+\n+                        generator.writeEnd();\n+                    }\n+                    o = writer.toString();\n+                }\n+                return o;\n+            }\n+\n+        }\n+\n+        /**\n+         * Parser\n+         */\n+        public static class Parser {\n+\n+            private static final JsonReaderFactory JSON_READER_FACTORY = Json.createReaderFactory(null);\n+\n+            private Parser() {\n+                // No Impl\n+            }\n+\n+            public static EventStreamsCredentials parse(String in)\n+                throws FHIRException {\n+                StringReader stringReader = new StringReader(in);\n+                try (JsonReader jsonReader =\n+                        JSON_READER_FACTORY.createReader(stringReader)) {\n+                    JsonObject jsonObject = jsonReader.readObject();\n+                    EventStreamsCredentials.Builder builder =\n+                            EventStreamsCredentials.builder();\n+\n+                    if (jsonObject.get(\"api_key\") != null) {\n+                        String apiKey = jsonObject.getString(\"api_key\");\n+                        builder.apiKey(apiKey);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}