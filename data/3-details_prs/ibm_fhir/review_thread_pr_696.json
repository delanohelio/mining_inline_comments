{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODQ4MjI1", "number": 696, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxMDo0MVrODe9l4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxMDo0MVrODe9l4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzkyOTk1OnYy", "diffSide": "RIGHT", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxMDo0MVrOFoZM9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMjoyOVrOFoZ5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDI3Ng==", "bodyText": "isn't it more about containing a valid value from a given valueset?\nanyway, i guess all the valuesets in question here are \"identity\" valuesets for a given codesystem, so probably its fine.", "url": "https://github.com/IBM/FHIR/pull/696#discussion_r377900276", "createdAt": "2020-02-11T21:10:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -355,4 +357,37 @@ public static void prohibited(Element element, String elementName) {\n             throw new IllegalStateException(String.format(\"Element: '%s' is prohibited.\", elementName));\n         }\n     }\n+    \n+    /**\n+     * @throws IllegalStateExeption if the codeableConcept has coding elements that do not include codes from the required binding\n+     */\n+    public static void checkCodeableConcept(CodeableConcept codeableConcept, String elementName, String system, String... codes) {\n+        if (codeableConcept != null && !codeableConcept.getCoding().isEmpty() && hasCodingWithSystemAndCodeValues(codeableConcept)) {\n+            List<String> codeList = Arrays.asList(codes);\n+            for (Coding coding : codeableConcept.getCoding()) {\n+                if (hasSystemAndCodeValues(coding) && \n+                        system.equals(coding.getSystem().getValue()) && \n+                        codeList.contains(coding.getCode().getValue())) {\n+                    return;\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"Element: '%s' must contain a valid code from system: '%s'\", elementName, system));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7265ff8a03d6b153a73962e89c5e194adcc9ea4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMTM4MQ==", "bodyText": "Instances are concerned with systems but from an error message perspective, I could see how that could be improved.", "url": "https://github.com/IBM/FHIR/pull/696#discussion_r377901381", "createdAt": "2020-02-11T21:13:00Z", "author": {"login": "JohnTimm"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -355,4 +357,37 @@ public static void prohibited(Element element, String elementName) {\n             throw new IllegalStateException(String.format(\"Element: '%s' is prohibited.\", elementName));\n         }\n     }\n+    \n+    /**\n+     * @throws IllegalStateExeption if the codeableConcept has coding elements that do not include codes from the required binding\n+     */\n+    public static void checkCodeableConcept(CodeableConcept codeableConcept, String elementName, String system, String... codes) {\n+        if (codeableConcept != null && !codeableConcept.getCoding().isEmpty() && hasCodingWithSystemAndCodeValues(codeableConcept)) {\n+            List<String> codeList = Arrays.asList(codes);\n+            for (Coding coding : codeableConcept.getCoding()) {\n+                if (hasSystemAndCodeValues(coding) && \n+                        system.equals(coding.getSystem().getValue()) && \n+                        codeList.contains(coding.getCode().getValue())) {\n+                    return;\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"Element: '%s' must contain a valid code from system: '%s'\", elementName, system));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDI3Ng=="}, "originalCommit": {"oid": "e7265ff8a03d6b153a73962e89c5e194adcc9ea4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTcwOA==", "bodyText": "Reversed course and put value set in error message instead of code system.", "url": "https://github.com/IBM/FHIR/pull/696#discussion_r377911708", "createdAt": "2020-02-11T21:32:29Z", "author": {"login": "JohnTimm"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -355,4 +357,37 @@ public static void prohibited(Element element, String elementName) {\n             throw new IllegalStateException(String.format(\"Element: '%s' is prohibited.\", elementName));\n         }\n     }\n+    \n+    /**\n+     * @throws IllegalStateExeption if the codeableConcept has coding elements that do not include codes from the required binding\n+     */\n+    public static void checkCodeableConcept(CodeableConcept codeableConcept, String elementName, String system, String... codes) {\n+        if (codeableConcept != null && !codeableConcept.getCoding().isEmpty() && hasCodingWithSystemAndCodeValues(codeableConcept)) {\n+            List<String> codeList = Arrays.asList(codes);\n+            for (Coding coding : codeableConcept.getCoding()) {\n+                if (hasSystemAndCodeValues(coding) && \n+                        system.equals(coding.getSystem().getValue()) && \n+                        codeList.contains(coding.getCode().getValue())) {\n+                    return;\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"Element: '%s' must contain a valid code from system: '%s'\", elementName, system));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDI3Ng=="}, "originalCommit": {"oid": "e7265ff8a03d6b153a73962e89c5e194adcc9ea4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 254, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}