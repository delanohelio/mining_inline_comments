{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODQ1NDYx", "number": 735, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNToyNFrODjndrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoyMlrODj4qWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjczMzI1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNToyNFrOFvhvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMDoyM1rOFv0r1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA==", "bodyText": "reading through the code in the else statement (below), shouldn't there be an abort after line 170?", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380104", "createdAt": "2020-02-27T21:25:24Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4OTg5NQ==", "bodyText": "for reusing of the inputstream, we can not abort it.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385389895", "createdAt": "2020-02-27T21:46:27Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3Njc1OQ==", "bodyText": "If the job aborts, are these inputstreams aborted or invalidated?", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385676759", "createdAt": "2020-02-28T12:47:12Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MjgzNQ==", "bodyText": "hehe, good question, I thought about this also. but have not found a good spot to close the inputstream and reader if the job is canceled. and I have been thinking to add a listener to achieve this.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385682835", "createdAt": "2020-02-28T13:02:03Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDU4Mg==", "bodyText": "discussed Albert offline, there may be an opportunity to use a listener to close in the future.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385690582", "createdAt": "2020-02-28T13:20:23Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjczODI3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNjo1NlrOFvhyEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo0ODowMlrOFviYSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDg4Mw==", "bodyText": "there seems like a high degree of repetition in the if(if)/else blocks, is there some opportunity to reduce the duplicated code (not the catch blocks are near identical)", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380883", "createdAt": "2020-02-27T21:26:56Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MDY2Nw==", "bodyText": "one are inside try() in which try take care of the close of the resources automatically, the one will only be closed after the job is finished.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385390667", "createdAt": "2020-02-27T21:48:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDg4Mw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc0NTA5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToxNlrOFvh2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1MjoyM1rOFvigVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTk5Nw==", "bodyText": "I think there should be some defensive programming here to validate the path is acceptable.  This may be best at the REST layer.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385381997", "createdAt": "2020-02-27T21:29:16Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MjcyNQ==", "bodyText": "yes, make sense for me. in the job side, if got a non-exising file, the job will still succeeded but with 0 imported.  throwing exception can cause the whole job fails even if only one non-existing file there.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385392725", "createdAt": "2020-02-27T21:52:23Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTk5Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc0NTY5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyOToyOVrOFvh20A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1Mjo0NlrOFvig7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjA5Ng==", "bodyText": "I think there should be some defensive programming here to validate the url is acceptable.  This may be best at the REST layer.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385382096", "createdAt": "2020-02-27T21:29:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Mjg3OQ==", "bodyText": "agreed, make sense for me.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385392879", "createdAt": "2020-02-27T21:52:46Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjA5Ng=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc1NTk0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo0OVrOFvh9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1NjowMlrOFvinAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MzcxNw==", "bodyText": "226 uses a non autocloseable. here we use an autocloseable --- worth doublechecking", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385383717", "createdAt": "2020-02-27T21:32:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n+                    transientUserData.setInputStream(inputStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDQzMg==", "bodyText": "yeah,  I did this on purpose. if the stream/reader is reused across all the chunks, then they will only be closed at the end of the processing of this data source.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385394432", "createdAt": "2020-02-27T21:56:02Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n+                    transientUserData.setInputStream(inputStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MzcxNw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc2MTM2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNDo0NFrOFviAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjozNDowN1rOFvzfzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw==", "bodyText": "looking at these package names, should we have a single parent package for bulkdata, and call out each feature underneath? establishing it as a hierarchy? just a thought... no action needed, just a design question", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385384587", "createdAt": "2020-02-27T21:34:44Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -6,7 +6,9 @@\n \n package com.ibm.fhir.bulkimport;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjQ2NA==", "bodyText": "good question,  I thought this project is for bulkdata webapp, so I didn't add a bulkdata as part of the package name. and we can change it whenever we want in the future.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385396464", "createdAt": "2020-02-27T22:00:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -6,7 +6,9 @@\n \n package com.ibm.fhir.bulkimport;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3MTExOQ==", "bodyText": "yeah - no change necessary - as I see these Java classes again, I see new things :)", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385671119", "createdAt": "2020-02-28T12:34:07Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -6,7 +6,9 @@\n \n package com.ibm.fhir.bulkimport;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc2NDM1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozNTo0OFrOFviCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0OTo0NlrOFvnMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw==", "bodyText": "On line 14, add a space between ImportCheckPointData{   so it is ImportCheckPointData {", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385385057", "createdAt": "2020-02-27T21:35:48Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTQ2Mg==", "bodyText": "Also, I'd suggest generating the serialVersionUID in this case.  1L may have unintended consequences", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385385462", "createdAt": "2020-02-27T21:36:39Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njk2OA==", "bodyText": "yeah, good catch. somehow I always failed/fails to generate the it for this one. :(", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385396968", "createdAt": "2020-02-27T22:01:39Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwODg2Mw==", "bodyText": "fixed via using command line instead of using eclipse.", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385408863", "createdAt": "2020-02-27T22:29:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTQ2Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385469466", "createdAt": "2020-02-28T01:49:46Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, "originalCommit": {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU0ODY1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTozMVrOFv8LDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyNzozN1rOFv87wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzI2Mw==", "bodyText": "add an if logger, that way no creation of string to pass to fine logger", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813263", "createdAt": "2020-02-28T17:05:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -102,8 +103,12 @@ public ChunkReader() {\n \n     @Override\n     public Object readItem() throws Exception {\n+        // If the job is being stopped or in other status except for \"started\", then stop the read.\n+        if (!stepCtx.getBatchStatus().equals(BatchStatus.STARTED)) {\n+            return null;\n+        }\n         List<Resource> loadedFhirResources = new ArrayList<Resource>();\n-        logger.info(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);\n+        logger.fine(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTczMA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825730", "createdAt": "2020-02-28T17:27:37Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -102,8 +103,12 @@ public ChunkReader() {\n \n     @Override\n     public Object readItem() throws Exception {\n+        // If the job is being stopped or in other status except for \"started\", then stop the read.\n+        if (!stepCtx.getBatchStatus().equals(BatchStatus.STARTED)) {\n+            return null;\n+        }\n         List<Resource> loadedFhirResources = new ArrayList<Resource>();\n-        logger.info(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);\n+        logger.fine(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzI2Mw=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU0OTI0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0NVrOFv8LeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyNzo0NlrOFv88AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM2OQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813369", "createdAt": "2020-02-28T17:05:45Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -162,7 +162,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         chunkData.setNumOfProcessedResources(chunkData.getNumOfProcessedResources() + processedNum);\n         chunkData.setNumOfImportedResources(chunkData.getNumOfImportedResources() + succeededNum);\n         chunkData.setNumOfImportFailures(chunkData.getNumOfImportFailures() + failedNum);\n-        logger.info(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());\n+        logger.fine(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTc5Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825792", "createdAt": "2020-02-28T17:27:46Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -162,7 +162,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         chunkData.setNumOfProcessedResources(chunkData.getNumOfProcessedResources() + processedNum);\n         chunkData.setNumOfImportedResources(chunkData.getNumOfImportedResources() + succeededNum);\n         chunkData.setNumOfImportFailures(chunkData.getNumOfImportFailures() + failedNum);\n-        logger.info(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());\n+        logger.fine(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM2OQ=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU0OTQyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo0OVrOFv8LlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyNzo1NFrOFv88MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM5Nw==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813397", "createdAt": "2020-02-28T17:05:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -192,7 +192,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n                     chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n                     chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTg0MA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825840", "createdAt": "2020-02-28T17:27:54Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -192,7 +192,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n                     chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n                     chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM5Nw=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU0OTY5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNTo1M1rOFv8LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyODowMVrOFv88VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzQzMw==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813433", "createdAt": "2020-02-28T17:05:53Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -209,7 +209,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n                     chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n                     chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTg3Nw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825877", "createdAt": "2020-02-28T17:28:01Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -209,7 +209,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n                     chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n                     chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzQzMw=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU1MDIzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjowNVrOFv8MEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyODowOVrOFv88jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzUyMQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813521", "createdAt": "2020-02-28T17:06:05Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -94,7 +113,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n                             partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTkzNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825934", "createdAt": "2020-02-28T17:28:09Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -94,7 +113,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n                             partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzUyMQ=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU1MDUzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoxMFrOFv8MNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyODoxNVrOFv88wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzU1OQ==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813559", "createdAt": "2020-02-28T17:06:10Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -116,7 +135,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n                             partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTk4Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825986", "createdAt": "2020-02-28T17:28:15Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -116,7 +135,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n                             partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzU1OQ=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU1MDk5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoyMlrOFv8MjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyODoyMlrOFv886Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzY0NA==", "bodyText": "same comment on logger if log level", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813644", "createdAt": "2020-02-28T17:06:22Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -132,12 +139,13 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem, numOfLinesToSkip, loadedFhirResources);\n+            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n             break;\n         default:\n             break;\n         }\n-        logger.info(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);\n+        logger.fine(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjAyNQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385826025", "createdAt": "2020-02-28T17:28:22Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -132,12 +139,13 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem, numOfLinesToSkip, loadedFhirResources);\n+            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n             break;\n         default:\n             break;\n         }\n-        logger.info(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);\n+        logger.fine(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzY0NA=="}, "originalCommit": {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 271, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}