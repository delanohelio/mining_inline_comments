{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTQ2MzU2", "number": 1740, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyMTo0OVrOE7u0EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMTowOFrOE8UJSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDY4NDMzOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyMTo0OVrOH3ishQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzo1NTo0N1rOH38ikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjE4MQ==", "bodyText": "Don't know if you need to do it now, but I see several ways we refer to the FHIR server throughout the user's guide and I think we should be consistent:\n\nFHIR server\nIBM FHIR server\nIBM FHIR Server", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528002181", "createdAt": "2020-11-20T22:21:49Z", "author": {"login": "michaelwschroeder"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -171,6 +171,20 @@ Search parameters are handled like a single configuration properly; providing a\n \n More information about multi-tenant support can be found in [Section 4.9 Multi-tenancy](#49-multi-tenancy).\n \n+## 3.3.1 Compartment Search Performance\n+\n+The IBM FHIR Server now supports the ability to compute and store compartment membership values during ingestion. Once stored, these values can help accelerate compartment-related search queries. To use this feature, update the IBM FHIR Server to the latest version and run a reindex operation. See the release notes for Release 4.5.0 for details. The reindex operation reprocesses the resources stored in the database, computing and storing the new compartment reference values. After the reindex operation has completed, add the following configuration element to the relevant tenant fhir-server-config.json file to allow the search queries to use the pre-computed values:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODY2Nw==", "bodyText": "Please use IBM FHIR Server", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528038667", "createdAt": "2020-11-21T00:34:29Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -171,6 +171,20 @@ Search parameters are handled like a single configuration properly; providing a\n \n More information about multi-tenant support can be found in [Section 4.9 Multi-tenancy](#49-multi-tenancy).\n \n+## 3.3.1 Compartment Search Performance\n+\n+The IBM FHIR Server now supports the ability to compute and store compartment membership values during ingestion. Once stored, these values can help accelerate compartment-related search queries. To use this feature, update the IBM FHIR Server to the latest version and run a reindex operation. See the release notes for Release 4.5.0 for details. The reindex operation reprocesses the resources stored in the database, computing and storing the new compartment reference values. After the reindex operation has completed, add the following configuration element to the relevant tenant fhir-server-config.json file to allow the search queries to use the pre-computed values:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjE4MQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODcyMg==", "bodyText": "Also, please remove 'now' from 'now supports'", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528038722", "createdAt": "2020-11-21T00:34:45Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -171,6 +171,20 @@ Search parameters are handled like a single configuration properly; providing a\n \n More information about multi-tenant support can be found in [Section 4.9 Multi-tenancy](#49-multi-tenancy).\n \n+## 3.3.1 Compartment Search Performance\n+\n+The IBM FHIR Server now supports the ability to compute and store compartment membership values during ingestion. Once stored, these values can help accelerate compartment-related search queries. To use this feature, update the IBM FHIR Server to the latest version and run a reindex operation. See the release notes for Release 4.5.0 for details. The reindex operation reprocesses the resources stored in the database, computing and storing the new compartment reference values. After the reindex operation has completed, add the following configuration element to the relevant tenant fhir-server-config.json file to allow the search queries to use the pre-computed values:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjE4MQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTA4Mw==", "bodyText": "Please direct people to FHIRSearch Guide rather than the Release notes.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528039083", "createdAt": "2020-11-21T00:36:33Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -171,6 +171,20 @@ Search parameters are handled like a single configuration properly; providing a\n \n More information about multi-tenant support can be found in [Section 4.9 Multi-tenancy](#49-multi-tenancy).\n \n+## 3.3.1 Compartment Search Performance\n+\n+The IBM FHIR Server now supports the ability to compute and store compartment membership values during ingestion. Once stored, these values can help accelerate compartment-related search queries. To use this feature, update the IBM FHIR Server to the latest version and run a reindex operation. See the release notes for Release 4.5.0 for details. The reindex operation reprocesses the resources stored in the database, computing and storing the new compartment reference values. After the reindex operation has completed, add the following configuration element to the relevant tenant fhir-server-config.json file to allow the search queries to use the pre-computed values:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjE4MQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyNTYxOQ==", "bodyText": "Done", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528425619", "createdAt": "2020-11-22T23:55:47Z", "author": {"login": "punktilious"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -171,6 +171,20 @@ Search parameters are handled like a single configuration properly; providing a\n \n More information about multi-tenant support can be found in [Section 4.9 Multi-tenancy](#49-multi-tenancy).\n \n+## 3.3.1 Compartment Search Performance\n+\n+The IBM FHIR Server now supports the ability to compute and store compartment membership values during ingestion. Once stored, these values can help accelerate compartment-related search queries. To use this feature, update the IBM FHIR Server to the latest version and run a reindex operation. See the release notes for Release 4.5.0 for details. The reindex operation reprocesses the resources stored in the database, computing and storing the new compartment reference values. After the reindex operation has completed, add the following configuration element to the relevant tenant fhir-server-config.json file to allow the search queries to use the pre-computed values:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjE4MQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDY4OTY2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyNDoyNFrOH3ivoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDo0MjowNVrOH3ylOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw==", "bodyText": "clean up commented out lines (here and 48-54)", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528002977", "createdAt": "2020-11-20T22:24:24Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -21,11 +22,14 @@\n     private String name;\n \n     // The reference value\n-    private String valueString;\n+    //private String valueString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzOTk3MQ==", "bodyText": "thanks...cruft left over from some refactor back-and-forth", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528239971", "createdAt": "2020-11-21T20:35:46Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -21,11 +22,14 @@\n     private String name;\n \n     // The reference value\n-    private String valueString;\n+    //private String valueString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjQ1Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262456", "createdAt": "2020-11-22T00:42:05Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -21,11 +22,14 @@\n     private String name;\n \n     // The reference value\n-    private String valueString;\n+    //private String valueString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDcwMzY3OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozMDoxNFrOH3i32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDo0MzoyMlrOH3yldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg==", "bodyText": "Is this meant to be commented out?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528005082", "createdAt": "2020-11-20T22:30:14Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1227,6 +1233,21 @@ private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPers\n         }\n     }\n \n+    private List<ExtractedParameterValue> extractCompartmentValues(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO) throws Exception {\n+\n+        List<ExtractedParameterValue> result = null;\n+\n+        Map<String, Set<java.lang.String>> compartmentRefParams = CompartmentUtil.getCompartmentParamsForResourceType(fhirResource.getClass().getSimpleName());\n+\n+        if (!compartmentRefParams.isEmpty()) {\n+            //result = SearchUtil.extractCompartmentParameterValues(fhirResource, compartmentRefParams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDcxMw==", "bodyText": "good question...", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040713", "createdAt": "2020-11-21T00:45:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1227,6 +1233,21 @@ private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPers\n         }\n     }\n \n+    private List<ExtractedParameterValue> extractCompartmentValues(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO) throws Exception {\n+\n+        List<ExtractedParameterValue> result = null;\n+\n+        Map<String, Set<java.lang.String>> compartmentRefParams = CompartmentUtil.getCompartmentParamsForResourceType(fhirResource.getClass().getSimpleName());\n+\n+        if (!compartmentRefParams.isEmpty()) {\n+            //result = SearchUtil.extractCompartmentParameterValues(fhirResource, compartmentRefParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjUxOQ==", "bodyText": "method wasn't supposed to be there at all. Removed.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262519", "createdAt": "2020-11-22T00:43:22Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1227,6 +1233,21 @@ private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPers\n         }\n     }\n \n+    private List<ExtractedParameterValue> extractCompartmentValues(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO) throws Exception {\n+\n+        List<ExtractedParameterValue> result = null;\n+\n+        Map<String, Set<java.lang.String>> compartmentRefParams = CompartmentUtil.getCompartmentParamsForResourceType(fhirResource.getClass().getSimpleName());\n+\n+        if (!compartmentRefParams.isEmpty()) {\n+            //result = SearchUtil.extractCompartmentParameterValues(fhirResource, compartmentRefParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDcxMDA1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozMzowOFrOH3i7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDo0NDozMlrOH3yl1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw==", "bodyText": "clean up commented code", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528006087", "createdAt": "2020-11-20T22:33:08Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+            ReferenceValue refValue = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+            if (refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n+                ReferenceParmVal p = new ReferenceParmVal();\n+                p.setRefValue(refValue);\n+                p.setName(searchParamCode);\n+                result.add(p);\n             }\n-            p.setValueCode(identifier.getValue().getValue());\n-            result.add(p);\n+        } catch (FHIRSearchException x) {\n+            // Log the error, but skip it because we're not supposed to throw exceptions here\n+            log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n+\n+        // Make sure we process the identifier if there is one.\n+//        Identifier identifier = reference.getIdentifier();\n+//        if (reference.getIdentifier() != null) {\n+//            TokenParmVal p = new TokenParmVal();\n+//            p.setName(searchParamCode);\n+//            if (identifier.getSystem() != null) {\n+//                p.setValueSystem(identifier.getSystem().getValue());\n+//            }\n+//            p.setValueCode(identifier.getValue().getValue());\n+//            result.add(p);\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTA5Mg==", "bodyText": "same point", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528041092", "createdAt": "2020-11-21T00:47:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+            ReferenceValue refValue = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+            if (refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n+                ReferenceParmVal p = new ReferenceParmVal();\n+                p.setRefValue(refValue);\n+                p.setName(searchParamCode);\n+                result.add(p);\n             }\n-            p.setValueCode(identifier.getValue().getValue());\n-            result.add(p);\n+        } catch (FHIRSearchException x) {\n+            // Log the error, but skip it because we're not supposed to throw exceptions here\n+            log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n+\n+        // Make sure we process the identifier if there is one.\n+//        Identifier identifier = reference.getIdentifier();\n+//        if (reference.getIdentifier() != null) {\n+//            TokenParmVal p = new TokenParmVal();\n+//            p.setName(searchParamCode);\n+//            if (identifier.getSystem() != null) {\n+//                p.setValueSystem(identifier.getSystem().getValue());\n+//            }\n+//            p.setValueCode(identifier.getValue().getValue());\n+//            result.add(p);\n+//        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjYxNQ==", "bodyText": "removed", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262615", "createdAt": "2020-11-22T00:44:32Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+            ReferenceValue refValue = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+            if (refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n+                ReferenceParmVal p = new ReferenceParmVal();\n+                p.setRefValue(refValue);\n+                p.setName(searchParamCode);\n+                result.add(p);\n             }\n-            p.setValueCode(identifier.getValue().getValue());\n-            result.add(p);\n+        } catch (FHIRSearchException x) {\n+            // Log the error, but skip it because we're not supposed to throw exceptions here\n+            log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n+\n+        // Make sure we process the identifier if there is one.\n+//        Identifier identifier = reference.getIdentifier();\n+//        if (reference.getIdentifier() != null) {\n+//            TokenParmVal p = new TokenParmVal();\n+//            p.setName(searchParamCode);\n+//            if (identifier.getSystem() != null) {\n+//                p.setValueSystem(identifier.getSystem().getValue());\n+//            }\n+//            p.setValueCode(identifier.getValue().getValue());\n+//            result.add(p);\n+//        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDczMTc5OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjo0MzowN1rOH3jIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMToxMzoyNVrOH3yu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTM2NQ==", "bodyText": "I think this can all be replaced with FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528009365", "createdAt": "2020-11-20T22:43:07Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1266,6 +1272,35 @@ public static FHIRSearchContext parseQueryParameters(String compartmentName, Str\n         return parseQueryParameters(compartmentName, compartmentLogicalId, resourceType, queryParameters, true);\n     }\n \n+    /**\n+     * Check the configuration to see if the flag enabling the compartment search\n+     * optimization. Defaults to false so the behavior won't change unless it\n+     * is explicitly enabled in fhir-server-config. This is important, because\n+     * existing data must be reindexed (see $reindex custom operation) to\n+     * generate values for the ibm-internal compartment relationship params.\n+     * @return\n+     */\n+    public static boolean useStoredCompartmentParam() {\n+        boolean result = false;\n+        try {\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            PropertyGroup fhirConfig = FHIRConfiguration.getInstance().loadConfigurationForTenant(tenantId);\n+            if (fhirConfig == null) {\n+                // fall back to default config (when unit tests don't provide config for a tenant)\n+                fhirConfig = FHIRConfiguration.getInstance().loadConfiguration();\n+            }\n+\n+            if (fhirConfig != null) {\n+                result = fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDk1Nw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264957", "createdAt": "2020-11-22T01:13:25Z", "author": {"login": "punktilious"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1266,6 +1272,35 @@ public static FHIRSearchContext parseQueryParameters(String compartmentName, Str\n         return parseQueryParameters(compartmentName, compartmentLogicalId, resourceType, queryParameters, true);\n     }\n \n+    /**\n+     * Check the configuration to see if the flag enabling the compartment search\n+     * optimization. Defaults to false so the behavior won't change unless it\n+     * is explicitly enabled in fhir-server-config. This is important, because\n+     * existing data must be reindexed (see $reindex custom operation) to\n+     * generate values for the ibm-internal compartment relationship params.\n+     * @return\n+     */\n+    public static boolean useStoredCompartmentParam() {\n+        boolean result = false;\n+        try {\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            PropertyGroup fhirConfig = FHIRConfiguration.getInstance().loadConfigurationForTenant(tenantId);\n+            if (fhirConfig == null) {\n+                // fall back to default config (when unit tests don't provide config for a tenant)\n+                fhirConfig = FHIRConfiguration.getInstance().loadConfiguration();\n+            }\n+\n+            if (fhirConfig != null) {\n+                result = fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTM2NQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDczMzkxOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjo0NDoxNVrOH3jJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDo0NTo1NFrOH3ymWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTcwOA==", "bodyText": "should wrap resourceType in single quotes", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528009708", "createdAt": "2020-11-20T22:44:15Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -2155,4 +2201,67 @@ private static void manageException(String message, boolean lenient) throws FHIR\n             throw SearchExceptionUtil.buildNewInvalidSearchException(message);\n         }\n     }\n-}\n+\n+    /**\n+     * Extracts the parameter values defining compartment membership.\n+     * @param fhirResource\n+     * @param compartmentRefParams a map of parameter names to a set of compartment names (resource types)\n+     * @return a map of compartment name to a set of unique compartment reference values\n+     */\n+    public static Map<String, Set<CompartmentReference>> extractCompartmentParameterValues(Resource fhirResource, Map<String, Set<java.lang.String>> compartmentRefParams) throws FHIRSearchException {\n+        final Map<String, Set<CompartmentReference>> result = new HashMap<>();\n+        final String resourceType = fhirResource.getClass().getSimpleName();\n+\n+        // TODO, probably should use a Bundle.Entry value here if we are processing a bundle\n+        final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+\n+        try {\n+            EvaluationContext resourceContext = new FHIRPathEvaluator.EvaluationContext(fhirResource);\n+\n+            // Extract any references we find matching parameters representing compartment membership.\n+            // For example CareTeam.participant can be used to refer to a Patient or RelatedPerson resource:\n+            // \"participant\": { \"reference\": \"Patient/abc123\" }\n+            // \"participant\": { \"reference\": \"RelatedPerson/abc456\" }\n+            for (Map.Entry<String, Set<String>> paramEntry : compartmentRefParams.entrySet()) {\n+                final String searchParm = paramEntry.getKey();\n+\n+                // Ignore {def} which is used in the compartment definition where\n+                // no other search parm is given (e.g. Encounter->Encounter).\n+                if (!COMPARTMENT_PARM_DEF.equals(searchParm)) {\n+                    SearchParameter sp = SearchUtil.getSearchParameter(resourceType, searchParm);\n+                    if (sp != null && sp.getExpression() != null) {\n+                        String expression = sp.getExpression().getValue();\n+\n+                        if (log.isLoggable(Level.FINE)) {\n+                            log.fine(\"searchParam = [\" + resourceType + \"] '\" + searchParm + \"'; expression = '\" + expression + \"'\");\n+                        }\n+                        Collection<FHIRPathNode> nodes = FHIRPathEvaluator.evaluator().evaluate(resourceContext, expression);\n+                        for (FHIRPathNode node : nodes) {\n+                            Reference reference = node.asElementNode().element().as(Reference.class);\n+                            ReferenceValue rv = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+                            if (rv.getType() != ReferenceType.DISPLAY_ONLY && rv.getType() != ReferenceType.INVALID) {\n+                                // Check that the target resource type of the reference matches one of the\n+                                // target resource types in the compartment definition.\n+                                final String compartmentName = rv.getTargetResourceType();\n+                                if (paramEntry.getValue().contains(compartmentName)) {\n+                                    // Add this reference to the set of references we're collecting for each compartment\n+                                    CompartmentReference cref = new CompartmentReference(searchParm, compartmentName, rv.getValue());\n+                                    Set<CompartmentReference> references = result.computeIfAbsent(compartmentName, k -> new HashSet<>());\n+                                    references.add(cref);\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                       log.warning(\"Compartment parameter not found: [\" + resourceType + \"] '\" + searchParm + \"'. This will stop compartment searches from working correctly.\");\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            final String msg = \"Unexpected exception extracting compartment references \"\n+                    + \" for resource type \" + resourceType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2Mjc0Nw==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262747", "createdAt": "2020-11-22T00:45:54Z", "author": {"login": "punktilious"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -2155,4 +2201,67 @@ private static void manageException(String message, boolean lenient) throws FHIR\n             throw SearchExceptionUtil.buildNewInvalidSearchException(message);\n         }\n     }\n-}\n+\n+    /**\n+     * Extracts the parameter values defining compartment membership.\n+     * @param fhirResource\n+     * @param compartmentRefParams a map of parameter names to a set of compartment names (resource types)\n+     * @return a map of compartment name to a set of unique compartment reference values\n+     */\n+    public static Map<String, Set<CompartmentReference>> extractCompartmentParameterValues(Resource fhirResource, Map<String, Set<java.lang.String>> compartmentRefParams) throws FHIRSearchException {\n+        final Map<String, Set<CompartmentReference>> result = new HashMap<>();\n+        final String resourceType = fhirResource.getClass().getSimpleName();\n+\n+        // TODO, probably should use a Bundle.Entry value here if we are processing a bundle\n+        final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+\n+        try {\n+            EvaluationContext resourceContext = new FHIRPathEvaluator.EvaluationContext(fhirResource);\n+\n+            // Extract any references we find matching parameters representing compartment membership.\n+            // For example CareTeam.participant can be used to refer to a Patient or RelatedPerson resource:\n+            // \"participant\": { \"reference\": \"Patient/abc123\" }\n+            // \"participant\": { \"reference\": \"RelatedPerson/abc456\" }\n+            for (Map.Entry<String, Set<String>> paramEntry : compartmentRefParams.entrySet()) {\n+                final String searchParm = paramEntry.getKey();\n+\n+                // Ignore {def} which is used in the compartment definition where\n+                // no other search parm is given (e.g. Encounter->Encounter).\n+                if (!COMPARTMENT_PARM_DEF.equals(searchParm)) {\n+                    SearchParameter sp = SearchUtil.getSearchParameter(resourceType, searchParm);\n+                    if (sp != null && sp.getExpression() != null) {\n+                        String expression = sp.getExpression().getValue();\n+\n+                        if (log.isLoggable(Level.FINE)) {\n+                            log.fine(\"searchParam = [\" + resourceType + \"] '\" + searchParm + \"'; expression = '\" + expression + \"'\");\n+                        }\n+                        Collection<FHIRPathNode> nodes = FHIRPathEvaluator.evaluator().evaluate(resourceContext, expression);\n+                        for (FHIRPathNode node : nodes) {\n+                            Reference reference = node.asElementNode().element().as(Reference.class);\n+                            ReferenceValue rv = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+                            if (rv.getType() != ReferenceType.DISPLAY_ONLY && rv.getType() != ReferenceType.INVALID) {\n+                                // Check that the target resource type of the reference matches one of the\n+                                // target resource types in the compartment definition.\n+                                final String compartmentName = rv.getTargetResourceType();\n+                                if (paramEntry.getValue().contains(compartmentName)) {\n+                                    // Add this reference to the set of references we're collecting for each compartment\n+                                    CompartmentReference cref = new CompartmentReference(searchParm, compartmentName, rv.getValue());\n+                                    Set<CompartmentReference> references = result.computeIfAbsent(compartmentName, k -> new HashSet<>());\n+                                    references.add(cref);\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                       log.warning(\"Compartment parameter not found: [\" + resourceType + \"] '\" + searchParm + \"'. This will stop compartment searches from working correctly.\");\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            final String msg = \"Unexpected exception extracting compartment references \"\n+                    + \" for resource type \" + resourceType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTcwOA=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDkzOTMzOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDozODowNFrOH3k91Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxNzoyNjoyOFrOH3451A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTM4MQ==", "bodyText": "Let's not say latest.  I think this injects stale content.  Best to say after release 4.5.0.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528039381", "createdAt": "2020-11-21T00:38:04Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1850,6 +1864,7 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/audit/serviceProperties/geoState`|string|The Geo State configure for CADF audit logging service.|\n |`fhirServer/audit/serviceProperties/geoCounty`|string|The Geo Country configure for CADF audit logging service.|\n |`fhirServer/search/useBoundingRadius`|boolean|True, the bounding area is a Radius, else the bounding area is a box.|\n+|`fhirServer/search/useStoredCompartmentParam`|boolean|False, Compute and store parameter to accelerate compartment searches. Requires reindex using latest IBM FHIR Server version before this feature is enabled |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjAzNg==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528366036", "createdAt": "2020-11-22T17:26:28Z", "author": {"login": "punktilious"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1850,6 +1864,7 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/audit/serviceProperties/geoState`|string|The Geo State configure for CADF audit logging service.|\n |`fhirServer/audit/serviceProperties/geoCounty`|string|The Geo Country configure for CADF audit logging service.|\n |`fhirServer/search/useBoundingRadius`|boolean|True, the bounding area is a Radius, else the bounding area is a box.|\n+|`fhirServer/search/useStoredCompartmentParam`|boolean|False, Compute and store parameter to accelerate compartment searches. Requires reindex using latest IBM FHIR Server version before this feature is enabled |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTM4MQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk0NDQxOnYy", "diffSide": "LEFT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo0MTo0NVrOH3lAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDo1Nzo1MlrOH3yqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDA4Mw==", "bodyText": "Where did this logic go?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040083", "createdAt": "2020-11-21T00:41:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -746,58 +737,9 @@ private boolean isBase(ExtractedParameterValue param) {\n         return \"Resource\".equals(param.getBase());\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MzY4OQ==", "bodyText": "It's now in ReferenceUtil, which has a much better algorithm for determining the base URL, along with unit tests", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528263689", "createdAt": "2020-11-22T00:57:52Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -746,58 +737,9 @@ private boolean isBase(ExtractedParameterValue param) {\n         return \"Resource\".equals(param.getBase());\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDA4Mw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk0NTQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo0MjoyOFrOH3lBKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxNzozMDo0MlrOH3470A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDIzNA==", "bodyText": "I think this should be thrown as an error only.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040234", "createdAt": "2020-11-21T00:42:28Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());\n+            throw new IllegalArgumentException(\"Invalid reference parameter value. See server log for details.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjU0NA==", "bodyText": "See previous comment.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528366544", "createdAt": "2020-11-22T17:30:42Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());\n+            throw new IllegalArgumentException(\"Invalid reference parameter value. See server log for details.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDIzNA=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk0NTk5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo0Mjo1N1rOH3lBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowMTo1NlrOH4W-YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ==", "bodyText": "see subsequent comment...\notherwise delimit the log message with a single quote.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040309", "createdAt": "2020-11-21T00:42:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjUxMQ==", "bodyText": "It's an internal programming error, so I don't think the details need to be propagated to the outside world, but we still need to log the information to help debug the problem.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528366511", "createdAt": "2020-11-22T17:30:26Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODcyMA==", "bodyText": "hum... then this should be logger.fine", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528858720", "createdAt": "2020-11-23T17:01:56Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk0NjIxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo0MzoxNFrOH3lBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMTowNToyM1rOH3yshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDM0Nw==", "bodyText": "dead code?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040347", "createdAt": "2020-11-21T00:43:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -41,19 +45,40 @@ public String getName() {\n         return name;\n     }\n \n-    public String getValueString() {\n-        return valueString;\n-    }\n+//    public String getValueString() {\n+//        return valueString;\n+//    }\n+\n+//    public void setValueString(String valueString) {\n+//        this.valueString = valueString;\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDMyNA==", "bodyText": "fixed", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264324", "createdAt": "2020-11-22T01:05:23Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -41,19 +45,40 @@ public String getName() {\n         return name;\n     }\n \n-    public String getValueString() {\n-        return valueString;\n-    }\n+//    public String getValueString() {\n+//        return valueString;\n+//    }\n+\n+//    public void setValueString(String valueString) {\n+//        this.valueString = valueString;\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDM0Nw=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk1MTA0OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo0Njo1MlrOH3lETw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMTowNjoyM1rOH3ys2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTAzOQ==", "bodyText": "OK - so you moved the reference logic into. the ReferenceUtil", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528041039", "createdAt": "2020-11-21T00:46:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDQwOA==", "bodyText": "Correct, and ReferenceUtil is a much better implementation (logic-wise).", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264408", "createdAt": "2020-11-22T01:06:23Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTAzOQ=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk1ODUzOnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/ReferenceValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo1MjoxM1rOH3lINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo1MjoxM1rOH3lINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjAzNw==", "bodyText": "I like having the single reference I can go back to and see - this was a good addition and comments.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528042037", "createdAt": "2020-11-21T00:52:13Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/ReferenceValue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.search.util;\n+\n+\n+/**\n+ * A reference extracted from a FHIR resource, with processing applied to\n+ * identify the reference type and target resource type\n+ */\n+public class ReferenceValue {\n+\n+    public static enum ReferenceType {\n+        LITERAL_RELATIVE, // Patient/123abc\n+        LITERAL_ABSOLUTE, // http(s)://an.other.server/Patient/234def\n+        LOGICAL,          // e.g. SSN\n+        DISPLAY_ONLY,     // A Reference with only a display field\n+        INVALID           // Not a valid reference\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDk2MzA4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo1NDo0NFrOH3lKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDowNjoxN1rOH38njA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjYxMA==", "bodyText": "Update copyright header", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528042610", "createdAt": "2020-11-21T00:54:44Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java", "diffHunk": "@@ -73,7 +73,9 @@\n     private static final String SAMPLE_STRING = \"test\";\n     private static final String SAMPLE_URI = \"http://example.com\";\n     private static final String SAMPLE_UNIT = \"s\";\n-    private static final String SAMPLE_REF = \"abc\";\n+    private static final String SAMPLE_REF_RESOURCE_TYPE = \"Patient\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyNjg5Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528426892", "createdAt": "2020-11-23T00:06:17Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java", "diffHunk": "@@ -73,7 +73,9 @@\n     private static final String SAMPLE_STRING = \"test\";\n     private static final String SAMPLE_URI = \"http://example.com\";\n     private static final String SAMPLE_UNIT = \"s\";\n-    private static final String SAMPLE_REF = \"abc\";\n+    private static final String SAMPLE_REF_RESOURCE_TYPE = \"Patient\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjYxMA=="}, "originalCommit": {"oid": "d8aca7da42e06761540cb4a412550f67233c3081"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc3MjgwOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNDoyNVrOH4XEgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNDoyNVrOH4XEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDI5MA==", "bodyText": "perhaps declare as final and make the options constants within the class?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528860290", "createdAt": "2020-11-23T17:04:25Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java", "diffHunk": "@@ -93,47 +88,84 @@ public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator,\n     protected IDatabaseTranslator getTranslator() {\n         return this.translator;\n     }\n-    \n+\n     /**\n      * Pick the next resource to process resource and lock it. Specializations for different\n      * databases may use different techniques to optimize locking/concurrency control\n      * @param reindexTstamp\n      * @return\n      * @throws Exception\n      */\n-    protected ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexTstamp) throws Exception {\n+    protected ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexTstamp, Integer resourceTypeId, String logicalId) throws Exception {\n         ResourceIndexRecord result = null;\n-        \n+\n         // no need to close\n         Connection connection = getConnection();\n         IDatabaseTranslator translator = getTranslator();\n-        \n+\n         // Derby can only do select for update with simple queries, so we need to select first,\n         // then try and lock, but we also have to try and cover the race condition which can\n         // occur here, using an optimistic locking pattern\n-        final String SELECT = \"\"\n-            + \"  SELECT lr.logical_resource_id, lr.resource_type_id, lr.logical_id, lr.reindex_txid \"\n-            + \"    FROM logical_resources lr \"\n-            + \"   WHERE lr.reindex_tstamp < ? \"\n-            + \"OFFSET ? ROWS FETCH FIRST 1 ROWS ONLY \"\n-            ;\n-        \n+        String select;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc3ODk1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNTo1M1rOH4XIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0MToxNVrOH4aoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MTI5Mg==", "bodyText": "so we can execute a single reindex?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528861292", "createdAt": "2020-11-23T17:05:53Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1733,21 +1781,21 @@ public boolean isReindexSupported() {\n     }\n \n     @Override\n-    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp)\n+    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp, String resourceLogicalId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxODUyOQ==", "bodyText": "Yes. I added this to debug the issue Karen/Lee identified. It's extremely handy!", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528918529", "createdAt": "2020-11-23T18:41:15Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1733,21 +1781,21 @@ public boolean isReindexSupported() {\n     }\n \n     @Override\n-    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp)\n+    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp, String resourceLogicalId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MTI5Mg=="}, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc4MzQ4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNjo1N1rOH4XLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0MzoyMFrOH4asfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjAxNQ==", "bodyText": "This is where I like to static import the string method.\nimport static com.ibm.fhir.model.type.String.string;\nstring(diag)\nmakes it short and sweet", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528862015", "createdAt": "2020-11-23T17:06:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1825,6 +1880,37 @@ public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder oper\n         return result;\n     }\n \n+    /**\n+     * Update the parameters for the resource described by the given DTO\n+     * @param <T>\n+     * @param rir\n+     * @param resourceTypeClass\n+     * @param existingResourceDTO\n+     * @param reindexDAO\n+     * @param operationOutcomeResult\n+     * @throws Exception\n+     */\n+    public <T extends Resource> void updateParameters(ResourceIndexRecord rir, Class<T> resourceTypeClass, com.ibm.fhir.persistence.jdbc.dto.Resource existingResourceDTO,\n+        ReindexResourceDAO reindexDAO, OperationOutcome.Builder operationOutcomeResult) throws Exception {\n+        if (existingResourceDTO != null && !existingResourceDTO.isDeleted()) {\n+            List<String> elements = Collections.emptyList();\n+            T existingResource = this.convertResourceDTO(existingResourceDTO, resourceTypeClass, null);\n+\n+            // Extract parameters from the resource payload we just read and store them, replacing\n+            // the existing set\n+            reindexDAO.updateParameters(rir.getResourceType(), this.extractSearchParameters(existingResource, existingResourceDTO), rir.getLogicalId(), rir.getLogicalResourceId());\n+\n+            // Use an OperationOutcome Issue to let the caller know that some work was performed\n+            final String diag = \"Processed \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.INFORMATIONAL).severity(IssueSeverity.INFORMATION).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());\n+        } else {\n+            // Reasonable to assume that this resource was deleted because we can't read it\n+            final String diag = \"Failed to read resource: \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.NOT_FOUND).severity(IssueSeverity.WARNING).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxOTY3OA==", "bodyText": "Yeah, this should be updated. Fixed", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528919678", "createdAt": "2020-11-23T18:43:20Z", "author": {"login": "punktilious"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1825,6 +1880,37 @@ public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder oper\n         return result;\n     }\n \n+    /**\n+     * Update the parameters for the resource described by the given DTO\n+     * @param <T>\n+     * @param rir\n+     * @param resourceTypeClass\n+     * @param existingResourceDTO\n+     * @param reindexDAO\n+     * @param operationOutcomeResult\n+     * @throws Exception\n+     */\n+    public <T extends Resource> void updateParameters(ResourceIndexRecord rir, Class<T> resourceTypeClass, com.ibm.fhir.persistence.jdbc.dto.Resource existingResourceDTO,\n+        ReindexResourceDAO reindexDAO, OperationOutcome.Builder operationOutcomeResult) throws Exception {\n+        if (existingResourceDTO != null && !existingResourceDTO.isDeleted()) {\n+            List<String> elements = Collections.emptyList();\n+            T existingResource = this.convertResourceDTO(existingResourceDTO, resourceTypeClass, null);\n+\n+            // Extract parameters from the resource payload we just read and store them, replacing\n+            // the existing set\n+            reindexDAO.updateParameters(rir.getResourceType(), this.extractSearchParameters(existingResource, existingResourceDTO), rir.getLogicalId(), rir.getLogicalResourceId());\n+\n+            // Use an OperationOutcome Issue to let the caller know that some work was performed\n+            final String diag = \"Processed \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.INFORMATIONAL).severity(IssueSeverity.INFORMATION).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());\n+        } else {\n+            // Reasonable to assume that this resource was deleted because we can't read it\n+            final String diag = \"Failed to read resource: \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.NOT_FOUND).severity(IssueSeverity.WARNING).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjAxNQ=="}, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc4Njc2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNzo0N1rOH4XNTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNzo0N1rOH4XNTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjU0MA==", "bodyText": "seems like this should be final or treated as a constant.", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528862540", "createdAt": "2020-11-23T17:07:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java", "diffHunk": "@@ -76,33 +76,87 @@ public ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexT\n         // by existing locks. The ORDER BY is included to persuade[force] Postgres to always\n         // use the index instead of switching to a full tablescan when the distribution stats\n         // confuse the optimizer.\n-        final String UPDATE = \"\"\n-            + \"   UPDATE logical_resources \"\n-            + \"      SET reindex_tstamp = ?,\"\n-            + \"          reindex_txid = COALESCE(reindex_txid + 1, 1) \"\n-            + \"    WHERE logical_resource_id = ( \"\n-            + \"       SELECT lr.logical_resource_id \"\n-            + \"         FROM logical_resources lr \"\n-            + \"        WHERE lr.reindex_tstamp < ? \"\n-            + \"     ORDER BY lr.reindex_tstamp DESC \"\n-            + \"   FOR UPDATE SKIP LOCKED LIMIT 1) \"\n-            + \"RETURNING logical_resource_id, resource_type_id, logical_id, reindex_txid \"\n-            ;\n-        \n-        try (PreparedStatement stmt = connection.prepareStatement(UPDATE)) {\n-            stmt.setTimestamp(1, Timestamp.from(reindexTstamp));\n-            stmt.setTimestamp(2, Timestamp.from(reindexTstamp));\n+        String update;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjgwMDc0OnYy", "diffSide": "RIGHT", "path": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoxMTowOFrOH4XV4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0Mzo0NlrOH4atcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NDczOA==", "bodyText": "We should probably have a defense against say 10000000 resources get reindexed. What's a reasonable defense/upper limit?", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528864738", "createdAt": "2020-11-23T17:11:08Z", "author": {"login": "prb112"}, "path": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java", "diffHunk": "@@ -92,12 +94,14 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n                             // assume full ISO format\n                             tstamp = Instant.parse(val);\n                         }\n-\n                     } else if (PARAM_RESOURCE_COUNT.equals(parameter.getName().getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxOTkyMw==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528919923", "createdAt": "2020-11-23T18:43:46Z", "author": {"login": "punktilious"}, "path": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java", "diffHunk": "@@ -92,12 +94,14 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n                             // assume full ISO format\n                             tstamp = Instant.parse(val);\n                         }\n-\n                     } else if (PARAM_RESOURCE_COUNT.equals(parameter.getName().getValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NDczOA=="}, "originalCommit": {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}