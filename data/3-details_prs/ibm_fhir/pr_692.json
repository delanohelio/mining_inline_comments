{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjcyNzg1", "number": 692, "title": "Issue #644 - added BYOPersistence guide with info on the jdbc impl", "bodyText": "Its easiest to review the guide from https://github.com/IBM/FHIR/blob/7ec7a64976a781e92b5ab4032f3b289e1bf95377/docs/src/pages/guides/BringYourOwnPersistence.md\nSigned-off-by: Lee Surprenant lmsurpre@us.ibm.com", "createdAt": "2020-02-11T13:57:02Z", "url": "https://github.com/IBM/FHIR/pull/692", "merged": true, "mergeCommit": {"oid": "8791ed325ccd9081a6318b9346746b075ca3b561"}, "closed": true, "closedAt": "2020-02-12T22:00:06Z", "author": {"login": "lmsurpre"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDXmkeABqjMwMjgwNjkxODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDs4ifAFqTM1Nzc4NjI3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da6231266aed9450e1fac59445553b9e0a9743a8", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/da6231266aed9450e1fac59445553b9e0a9743a8", "committedDate": "2020-02-11T20:13:04Z", "message": "issue #601 - update generated resources with valid codeableconcepts\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "df21b9846f0c545c9499d0775b6cc2aa2987167d", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/df21b9846f0c545c9499d0775b6cc2aa2987167d", "committedDate": "2020-02-11T20:16:23Z", "message": "issue #601 - update generated resources with valid codeableconcepts\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df21b9846f0c545c9499d0775b6cc2aa2987167d", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/df21b9846f0c545c9499d0775b6cc2aa2987167d", "committedDate": "2020-02-11T20:16:23Z", "message": "issue #601 - update generated resources with valid codeableconcepts\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "f448c8f4345db1b2a377c21772ce348dc62ece2f", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/f448c8f4345db1b2a377c21772ce348dc62ece2f", "committedDate": "2020-02-11T20:28:26Z", "message": "issue #601 - update generated resources with valid codeableconcepts\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f448c8f4345db1b2a377c21772ce348dc62ece2f", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/f448c8f4345db1b2a377c21772ce348dc62ece2f", "committedDate": "2020-02-11T20:28:26Z", "message": "issue #601 - update generated resources with valid codeableconcepts\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "05f7913dcf88211cf2ae89e625669b1050d9b16b", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/05f7913dcf88211cf2ae89e625669b1050d9b16b", "committedDate": "2020-02-11T21:50:24Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nTODO: building and testing your own PL\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05f7913dcf88211cf2ae89e625669b1050d9b16b", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/05f7913dcf88211cf2ae89e625669b1050d9b16b", "committedDate": "2020-02-11T21:50:24Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nTODO: building and testing your own PL\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "ccb287c7ec00fda6ca0235dba9c7f292ec54f870", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/ccb287c7ec00fda6ca0235dba9c7f292ec54f870", "committedDate": "2020-02-12T16:40:42Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nTODO: testing your own PL\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccb287c7ec00fda6ca0235dba9c7f292ec54f870", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/ccb287c7ec00fda6ca0235dba9c7f292ec54f870", "committedDate": "2020-02-12T16:40:42Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nTODO: testing your own PL\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "7ec7a64976a781e92b5ab4032f3b289e1bf95377", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/7ec7a64976a781e92b5ab4032f3b289e1bf95377", "committedDate": "2020-02-12T19:50:42Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/94a7c813adf27041934a2356f2e8504d10ff0519", "committedDate": "2020-02-12T20:08:03Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ec7a64976a781e92b5ab4032f3b289e1bf95377", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/7ec7a64976a781e92b5ab4032f3b289e1bf95377", "committedDate": "2020-02-12T19:50:42Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/94a7c813adf27041934a2356f2e8504d10ff0519", "committedDate": "2020-02-12T20:08:03Z", "message": "issue #644 - added BYOPersistence guide with info on the jdbc impl\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzU1MDkx", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357755091", "createdAt": "2020-02-12T20:12:50Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzcyNDY0", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357772464", "createdAt": "2020-02-12T20:42:35Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MjozNVrOFo937w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MjozNVrOFo937w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMTEwMw==", "bodyText": "...its possible to add", "url": "https://github.com/IBM/FHIR/pull/692#discussion_r378501103", "createdAt": "2020-02-12T20:42:35Z", "author": {"login": "senthilbak"}, "path": "docs/src/pages/guides/BringYourOwnPersistence.md", "diffHunk": "@@ -0,0 +1,143 @@\n+---\n+layout: post\n+title: Bring your own Persistence Layer\n+description: Lean how to build and test a persistence layer for the IBM FHIR Server\n+date:   2020-02-10 14:55:00 -0400\n+permalink: /BYOPersistence/\n+---\n+\n+## Overview\n+The IBM FHIR Server ships with a JDBC persistence layer that works with IBM Db2 and Apache Derby.\n+However, based on the modular design, its possible add support for other relational databases and/or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzc4NTUz", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357778553", "createdAt": "2020-02-12T20:52:43Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1Mjo0M1rOFo-Kyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1Mjo0M1rOFo-Kyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNTkzMQ==", "bodyText": "seems better to use full word ...", "url": "https://github.com/IBM/FHIR/pull/692#discussion_r378505931", "createdAt": "2020-02-12T20:52:43Z", "author": {"login": "albertwang-ibm"}, "path": "docs/src/data/nav-items.yaml", "diffHunk": "@@ -20,6 +20,8 @@\n       path: /guides/CreateFHIRValidationAssembly\n     - title: fhir-search configuration\n       path: /guides/FHIRSearchConfiguration\n+    - title: Bring your own Persistence\n+      path: /guides/BYOPersistence", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzc5NzE0", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357779714", "createdAt": "2020-02-12T20:54:37Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzgzMDEx", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357783011", "createdAt": "2020-02-12T20:59:56Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1OTo1NlrOFo-YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1OTo1NlrOFo-YHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTM0Mw==", "bodyText": "couple of typos on \"therefor_e_\"", "url": "https://github.com/IBM/FHIR/pull/692#discussion_r378509343", "createdAt": "2020-02-12T20:59:56Z", "author": {"login": "senthilbak"}, "path": "docs/src/pages/guides/BringYourOwnPersistence.md", "diffHunk": "@@ -0,0 +1,143 @@\n+---\n+layout: post\n+title: Bring your own Persistence Layer\n+description: Lean how to build and test a persistence layer for the IBM FHIR Server\n+date:   2020-02-10 14:55:00 -0400\n+permalink: /BYOPersistence/\n+---\n+\n+## Overview\n+The IBM FHIR Server ships with a JDBC persistence layer that works with IBM Db2 and Apache Derby.\n+However, based on the modular design, its possible add support for other relational databases and/or\n+plug in any other persistence layer.\n+\n+### Interfaces\n+Persistence layer interfaces are defined in the `fhir-persistence` project.\n+* [FHIRPersistence](https://github.com/IBM/FHIR/blob/master/fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java) defines the contract between the REST layer and the persistence layer.\n+* [FHIRPersistenceFactory](https://github.com/IBM/FHIR/blob/master/fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceFactory.java) is the interface for providing instances of FHIRPersistence to the server.\n+\n+### Config\n+Which persistence layer is used by the server is determined by the `/fhirServer/persistence/factoryClassname` property in `fhir-server-config.json`.\n+\n+When the default `com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCFactory` is used, the returned FHIRPersistenceJDBCImpl instance will look up a corresponding datasource name using the value of the `fhirServer/persistence/jdbc/dataSourceJndiName` property in the tenant-specific configuration (`jdbc/fhirProxyDataSource` by default) and establish the connection.\n+\n+## Adding support for another relational database\n+Adding a new relational database type is not for the faint of heart, but the IBM FHIR Server team is here to help!\n+To add support for an alternative relational database, there are multiple projects to consider:\n+1. `fhir-persistence-proxy`\n+2. `fhir-database-utils`\n+3. `fhir-persistence-schema`\n+4. `fhir-persistence-jdbc`\n+\n+The `fhir-persistence-proxy` project provides the default DataSource used by the IBM FHIR Server, but its just a wrapper for the XADataSources provided by the packaged JDBC drivers. To extend this class for a new database type, extend the `datasourceTypeMapping` with a mapping from your own type name (used in `fhir-server-config`) to a classname from your driver that implements the `javax.sql.XADataSource` interface). Note that the proxy jar and your driver must be packaged in the `fhirSharedLib` library defined in the server's `server.xml` in order to use liberty-managed transactions (e.g. for performing a transaction that spans multiple datasources).\n+\n+The `fhir-database-utils` project provides generic utilities for defining a PhysicalDataModel and applying it to a target database via the IDatabaseAdapter and IVersionHistoryService interfaces. Check out the `com.ibm.fhir.database.utils.db2` and `com.ibm.fhir.database.utils.derby` packages to understand how you might extend the framework with support for a new database type.\n+\n+The `fhir-persistence-schema` project is used to programmatically construct DDL statements and execute them against a target database. This project uses the generic utilities in `fhir-persistence-utils` to deploy both an admin schema (used for tenant provisioning and schema versioning) and an application schema for the FHIR data.\n+Presently, this project is written for use with a Db2 database, but it should be possible to either:\n+A. Print the DDL and manually tweak it for your desired database; or\n+B. Add some kind of configuration to control which IDatabaseAdapter and IDatabaseTranslator are used.\n+Note that the Db2 implementation makes use of stored procedures whereas the derby implementation is pure JDBC.\n+\n+Finally, the `fhir-persistence-jdbc` project provides the default implementation of the `FHIRPersistence` interface.\n+The project makes heavy use of Data Access Objects (DAO) and Data Transfer Objects (DTO) to abstract the details of the database. Most of the code is common across database types, but there is a branch in `ResourceDAOImpl.insert` which corresponds to the differences between the IBM Db2 (stored procedure) and Apache Derby (pure JDBC) implementations.\n+\n+## Building your own persistence layer\n+Most FHIR projects are interoperability projects--the data already exists in some datastore.\n+Due to performance considerations and the complexities of the FHIR API (especially search), we generally recommend converting that data to FHIR and storing it in the FHIR server's database. However, in some cases, it might be better to configure the FHIR server to work directly with an existing datastore or APIs.\n+\n+If you are using Maven, add the following dependencies to your persistence layer project:\n+```\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-persistence</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-examples</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+```\n+\n+You might also want to set up `fhir-persistence-jdbc` to use an example.\n+\n+### Implementing the FHIRPersistence Interface\n+As described [above](#interfaces), implementing your own persistence layer boils down to configuring the server to use your own FHIRPersistenceFactory and returning your own implementation of FHIRPersistence. The REST layer processes HTTP requests and distills them into one or more calls to this instance. Parameters are passed via a combination of the passed FHIRPersistenceContext and the ThreadLocal FHIRRequestContext.\n+\n+Although the HL7 FHIR specification [doesn't strictly require all servers to support versioning](https://www.hl7.org/fhir/R4/http.html#versions), the IBM FHIR Server is built to be version-aware. This means that all FHIRPersistence implementations should implement the `vread` and `history` interactions.\n+Similarly, the IBM FHIR Server was written for read/write datastores and so `create` and `update` should be supported as well.\n+If you have a use case for a read-only or non-version-aware server, please contact us and consider contributing the necessary modifications to the server to make this supported.\n+\n+The IBM FHIR Server does support persistence implementations which do not support `delete` or transactions (e.g. for transaction bundles), so please implement `FHIRPersistence.isTransactional()` and `isDeleteSupported()` accordingly.\n+\n+#### Create\n+Create requests include a FHIRPersistenceContext and an already-validated instance of the resource to create. FHIRPersistence implementations are responsible for adding the `Resource.id`, `Resource.meta.lastUpdate`, and `Resource.meta.versionId` elements to the resource before storing it. Implementations must return a SingleResourceResult with the result of the interaction.\n+\n+If `SingleResourceResult.success` is set to true, the `SingleResourceResult.resource` should be a copy of the saved resource (with the added fields included).\n+\n+If `SingleResourceResult.success` is set to false, the `SingleResourceResult.outcome` should be an OperationOutcome with a list of one or more issues that prevented the success of the operation.\n+\n+#### Read\n+Read requests include a FHIRPersistenceContext, a Class object for the resource type being read, and the logical id of the resource to read.\n+Implementations should check the FHIRSearchContext of the FHIRPersistenceContext to determine whether the caller would like the full resource back, the resource text or data, or just a summary (see `FHIRSearchContext.getSummaryParameter()`).\n+\n+For successful requests, `SingleResourceResult.success` must be set to true and `SingleResourceResult.resource` must include a [potentially filtered] resource of the type passed in the request.\n+\n+For unsuccessful requests, the implementation should return an appropriate Exception:\n+* FHIRPersistenceResourceNotFoundException if the resource with this id could not be found for the passed resource type\n+* FHIRPersistenceResourceDeletedException if the latest version of this resource is marked as deleted\n+\n+For all other errors, the implementation should return a `SingleResourceResult` with a success status of false and a non-null outcome with one or more issues to indicate the failure.\n+\n+Note: we plan to deprecate these exceptions and use only `SingleResourceResult` as part of https://github.com/IBM/FHIR/issues/194.\n+\n+#### Version read\n+Version read requests work just like read requests except that the caller passes a version identifier and the persistence implementation must return that specific version of the resource.\n+\n+#### Update\n+Update requests include a FHIRPersistenceContext, a resource logical id, and an updated version of the resource to save. FHIRPersistence implementations must set the `Resource.meta.lastUpdate` and `Resource.meta.versionId` elements before storing it. Typically, implementations will set the version of the updated resource based on the previous version of the resource which can be found in the FHIRPersistenceEvent (`FHIRPersistenceEvent.getPrevFhirResource()`) of the FHIRPersistenceContext.\n+\n+Note: at the REST layer, an update request will first invoke read and then invoke update. Similarly, PATCH requests are converted to normal updates before reaching the persistence layer's update implementation.\n+\n+FHIRPersistence implementations SHOULD use the value of the `fhirServer/persistence/common/updateCreateEnabled` property to determine whether they should allow an update to a resource that doesn't exist yet.\n+\n+#### Delete\n+Delete requests include a FHIRPersistenceContext, a Class object for the resource type being deleted, and the logical id of the resource to delete.\n+FHIRPersistence implementations are expected to be version-aware and therefor must perform a \"soft\" delete. Therefor, implementations should handle the delete in a manner similar to update; setting the `Resource.meta.lastUpdate` and `Resource.meta.versionId` elements along with some marker flag to indicate that this resource has been deleted at this version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cba2d3ac49d775547bce20a5c7a04fd36978d7", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/57cba2d3ac49d775547bce20a5c7a04fd36978d7", "committedDate": "2020-02-12T21:00:14Z", "message": "Update docs/src/pages/guides/BringYourOwnPersistence.md\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c74bf75dbee7e69dc2c6cf1eab28403378f7e52", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/9c74bf75dbee7e69dc2c6cf1eab28403378f7e52", "committedDate": "2020-02-12T21:03:48Z", "message": "Update docs/src/pages/guides/BringYourOwnPersistence.md\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzg2Mjc1", "url": "https://github.com/IBM/FHIR/pull/692#pullrequestreview-357786275", "createdAt": "2020-02-12T21:05:26Z", "commit": {"oid": "94a7c813adf27041934a2356f2e8504d10ff0519"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 691, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}