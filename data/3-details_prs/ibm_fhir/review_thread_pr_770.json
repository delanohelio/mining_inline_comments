{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Mzk1ODI2", "number": 770, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNzowOVrODnDo8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNToxOVrODnLIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgwNjg5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNzowOVrOF01FXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoxODowMFrOF02b7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTk5Nw==", "bodyText": "maybe convert the values to constants explaining REQUEST_TIMEOUT_IN_SECONDS or something similar -- 1000 = second", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390939997", "createdAt": "2020-03-11T12:37:09Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -84,8 +85,10 @@ public static AmazonS3 getCosClient(String cosCredentialIbm, String cosApiKeyPro\n             credentials = new BasicAWSCredentials(cosApiKeyProperty, cosSrvinstId);\n         }\n \n-        ClientConfiguration clientConfig = new ClientConfiguration().withRequestTimeout(8000);\n-        clientConfig.setUseTcpKeepAlive(true);\n+        ClientConfiguration clientConfig = new ClientConfiguration()\n+                .withRequestTimeout(10*1000)\n+                .withTcpKeepAlive(true)\n+                .withSocketTimeout(120*1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTkyNw==", "bodyText": "good idea!", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390951927", "createdAt": "2020-03-11T12:59:48Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -84,8 +85,10 @@ public static AmazonS3 getCosClient(String cosCredentialIbm, String cosApiKeyPro\n             credentials = new BasicAWSCredentials(cosApiKeyProperty, cosSrvinstId);\n         }\n \n-        ClientConfiguration clientConfig = new ClientConfiguration().withRequestTimeout(8000);\n-        clientConfig.setUseTcpKeepAlive(true);\n+        ClientConfiguration clientConfig = new ClientConfiguration()\n+                .withRequestTimeout(10*1000)\n+                .withTcpKeepAlive(true)\n+                .withSocketTimeout(120*1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTk5Nw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MjE1OQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390962159", "createdAt": "2020-03-11T13:18:00Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -84,8 +85,10 @@ public static AmazonS3 getCosClient(String cosCredentialIbm, String cosApiKeyPro\n             credentials = new BasicAWSCredentials(cosApiKeyProperty, cosSrvinstId);\n         }\n \n-        ClientConfiguration clientConfig = new ClientConfiguration().withRequestTimeout(8000);\n-        clientConfig.setUseTcpKeepAlive(true);\n+        ClientConfiguration clientConfig = new ClientConfiguration()\n+                .withRequestTimeout(10*1000)\n+                .withTcpKeepAlive(true)\n+                .withSocketTimeout(120*1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTk5Nw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgwOTI4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNzo1MFrOF01GzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNzo1MFrOF01GzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDM2NA==", "bodyText": "interesting... I hadn't thought so much about this case... make sense", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390940364", "createdAt": "2020-03-11T12:37:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,9 +137,18 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgxMDMwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozODowOVrOF01HeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMjowOVrOF08WXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDUzNw==", "bodyText": "you can switch back to a while loop", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390940537", "createdAt": "2020-03-11T12:38:09Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,9 +137,18 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1Mzk2MQ==", "bodyText": "en, I would prefer to keep it unchanged ...", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391053961", "createdAt": "2020-03-11T15:25:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,9 +137,18 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDUzNw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1OTAzOQ==", "bodyText": "no worries - it wasn't a requirement - just an observation", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391059039", "createdAt": "2020-03-11T15:32:09Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,9 +137,18 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n     private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDUzNw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgyNzM0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0MzoxOVrOF01SHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMjozOFrOF08X6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzI2MA==", "bodyText": "it may be worth logging out the line number as well", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390943260", "createdAt": "2020-03-11T12:43:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjkyMA==", "bodyText": "thought about this also, need a little bit calculation ...", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390952920", "createdAt": "2020-03-11T13:01:39Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzI2MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzAxMQ==", "bodyText": "let me try to add", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390953011", "createdAt": "2020-03-11T13:01:51Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzI2MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NDQyOQ==", "bodyText": "added, a little bit more complicated ... :)", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391054429", "createdAt": "2020-03-11T15:26:17Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzI2MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1OTQzMg==", "bodyText": "I think it'll be helpful.  thanks for adding", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391059432", "createdAt": "2020-03-11T15:32:38Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MzI2MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgzNzA1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0NjoxN1rOF01YFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzowN1rOF08ZRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NDc5MA==", "bodyText": "why would export result in parse failures? wouldnt it already be valid and stored in the db\nalso why is it reporting back the number of parseFailures? maybe update the method signature to explain the contract and purpose", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390944790", "createdAt": "2020-03-11T12:46:17Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NDQyMA==", "bodyText": "this is the read step, the success ones are in the fhirresource List, so can easily get the number from the list using size(), failure number is needed to update the data source for the metrics in the write step later.", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390954420", "createdAt": "2020-03-11T13:04:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NDc5MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1OTc4Mg==", "bodyText": "got it", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391059782", "createdAt": "2020-03-11T15:33:07Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NDc5MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgzOTE1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0Njo0OVrOF01ZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzozOTozMFrOF03Rlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NTA2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n          \n          \n            \n                public static void cleanupForTransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n          \n      \n    \n    \n  \n\nI don't think we should use the number 4 here", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390945069", "createdAt": "2020-03-11T12:46:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NDcwMQ==", "bodyText": "haha, good point! will change", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390954701", "createdAt": "2020-03-11T13:05:09Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NTA2OQ=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NTg5NQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390975895", "createdAt": "2020-03-11T13:39:30Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NTA2OQ=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg0NzQzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0OToyMlrOF01eVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMzowOVrOF07BWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjM5MA==", "bodyText": "it's cool to see this works in the context of the webapp (I'm sure this simplifies things)", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390946390", "createdAt": "2020-03-11T12:49:22Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })\n     @Override\n     public void afterJob() {\n+        // jobExecution.getEndTime() for current execution always returns null, so we use system current time as the end time for current execution.\n+        long currentExecutionEndTimeInMS = System.currentTimeMillis();;\n+\n         // Used for generating response for all the import data resources.\n         List<ImportCheckPointData> partitionSummaries = (List<ImportCheckPointData>)jobContext.getTransientUserData();\n         // Used for generating performance measurement per each resource type.\n         HashMap<String, ImportCheckPointData> importedResourceTypeSummaries = new HashMap<>();\n \n+        JobOperator jobOperator = BatchRuntime.getJobOperator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzI3Mg==", "bodyText": "yes, totally agree", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391037272", "createdAt": "2020-03-11T15:03:09Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })\n     @Override\n     public void afterJob() {\n+        // jobExecution.getEndTime() for current execution always returns null, so we use system current time as the end time for current execution.\n+        long currentExecutionEndTimeInMS = System.currentTimeMillis();;\n+\n         // Used for generating response for all the import data resources.\n         List<ImportCheckPointData> partitionSummaries = (List<ImportCheckPointData>)jobContext.getTransientUserData();\n         // Used for generating performance measurement per each resource type.\n         HashMap<String, ImportCheckPointData> importedResourceTypeSummaries = new HashMap<>();\n \n+        JobOperator jobOperator = BatchRuntime.getJobOperator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjM5MA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1MDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MDoxMlrOF01gMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToxNTo0NVrOF07lrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Njg2NQ==", "bodyText": "double?  does this need to be a double or is a long just fine?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390946865", "createdAt": "2020-03-11T12:50:12Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -49,26 +66,25 @@ public void afterJob() {\n             }\n         }\n \n-        jobEndTimeInMS = System.currentTimeMillis();\n-        double jobProcessingSeconds = (jobEndTimeInMS - jobStartTimeInMS)/1000.0;\n+\n+        double jobProcessingSeconds = (totalJobExecutionMilliSeconds)/1000.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MTM2NQ==", "bodyText": "made it double just because the rate is calculated as totalImportedFhirResources/jobProcessingSeconds", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391041365", "createdAt": "2020-03-11T15:08:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -49,26 +66,25 @@ public void afterJob() {\n             }\n         }\n \n-        jobEndTimeInMS = System.currentTimeMillis();\n-        double jobProcessingSeconds = (jobEndTimeInMS - jobStartTimeInMS)/1000.0;\n+\n+        double jobProcessingSeconds = (totalJobExecutionMilliSeconds)/1000.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Njg2NQ=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0NjU3Mg==", "bodyText": "got it... in case, it falls below a second", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391046572", "createdAt": "2020-03-11T15:15:45Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -49,26 +66,25 @@ public void afterJob() {\n             }\n         }\n \n-        jobEndTimeInMS = System.currentTimeMillis();\n-        double jobProcessingSeconds = (jobEndTimeInMS - jobStartTimeInMS)/1000.0;\n+\n+        double jobProcessingSeconds = (totalJobExecutionMilliSeconds)/1000.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Njg2NQ=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1Mjk3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MDo1NlrOF01hww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowNjo1OFrOF02CSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzI2Nw==", "bodyText": "is this outputting a report?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390947267", "createdAt": "2020-03-11T12:50:56Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -49,26 +66,25 @@ public void afterJob() {\n             }\n         }\n \n-        jobEndTimeInMS = System.currentTimeMillis();\n-        double jobProcessingSeconds = (jobEndTimeInMS - jobStartTimeInMS)/1000.0;\n+\n+        double jobProcessingSeconds = (totalJobExecutionMilliSeconds)/1000.0;\n         jobProcessingSeconds = jobProcessingSeconds < 1 ? 1.0 : jobProcessingSeconds;\n \n-        // Print out the simple metrics to console.\n-        System.out.println(\" ---- Fhir resources imported in \" + jobProcessingSeconds + \"seconds ----\");\n-        System.out.println(\"ResourceType \\t Imported \\t Failed\");\n+        // log the simple metrics.\n+        logger.info(\" ---- Fhir resources imported in \" + jobProcessingSeconds + \"seconds ----\");\n+        logger.info(\"ResourceType \\t Imported \\t Failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NTU5Mw==", "bodyText": "yes, this is the report that I pasted into the issue for tracking progress...", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390955593", "createdAt": "2020-03-11T13:06:58Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -49,26 +66,25 @@ public void afterJob() {\n             }\n         }\n \n-        jobEndTimeInMS = System.currentTimeMillis();\n-        double jobProcessingSeconds = (jobEndTimeInMS - jobStartTimeInMS)/1000.0;\n+\n+        double jobProcessingSeconds = (totalJobExecutionMilliSeconds)/1000.0;\n         jobProcessingSeconds = jobProcessingSeconds < 1 ? 1.0 : jobProcessingSeconds;\n \n-        // Print out the simple metrics to console.\n-        System.out.println(\" ---- Fhir resources imported in \" + jobProcessingSeconds + \"seconds ----\");\n-        System.out.println(\"ResourceType \\t Imported \\t Failed\");\n+        // log the simple metrics.\n+        logger.info(\" ---- Fhir resources imported in \" + jobProcessingSeconds + \"seconds ----\");\n+        logger.info(\"ResourceType \\t Imported \\t Failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzI2Nw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1NjI2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MTo1MVrOF01jog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzozOTo1MVrOF03SfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Nzc0Ng==", "bodyText": "I suggested a signature change in a prior comment.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, true);\n          \n          \n            \n                        BulkDataUtils.cleanupForTransientUserData(partitionSummaryData, true);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390947746", "createdAt": "2020-03-11T12:51:51Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -79,16 +78,7 @@ public Serializable collectPartitionData() throws Exception{\n \n         // If the job is being stopped or in other status except for \"started\", then do cleanup for the partition.\n         if (!batchStatus.equals(BatchStatus.STARTED)) {\n-            if (partitionSummaryData.getInputStream() != null) {\n-                if (partitionSummaryData.getInputStream() instanceof S3ObjectInputStream) {\n-                    ((S3ObjectInputStream)partitionSummaryData.getInputStream()).abort();\n-                }\n-                partitionSummaryData.getInputStream().close();\n-            }\n-\n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NTcxNA==", "bodyText": "make sense", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390955714", "createdAt": "2020-03-11T13:07:14Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -79,16 +78,7 @@ public Serializable collectPartitionData() throws Exception{\n \n         // If the job is being stopped or in other status except for \"started\", then do cleanup for the partition.\n         if (!batchStatus.equals(BatchStatus.STARTED)) {\n-            if (partitionSummaryData.getInputStream() != null) {\n-                if (partitionSummaryData.getInputStream() instanceof S3ObjectInputStream) {\n-                    ((S3ObjectInputStream)partitionSummaryData.getInputStream()).abort();\n-                }\n-                partitionSummaryData.getInputStream().close();\n-            }\n-\n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Nzc0Ng=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NjEyNA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390976124", "createdAt": "2020-03-11T13:39:51Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -79,16 +78,7 @@ public Serializable collectPartitionData() throws Exception{\n \n         // If the job is being stopped or in other status except for \"started\", then do cleanup for the partition.\n         if (!batchStatus.equals(BatchStatus.STARTED)) {\n-            if (partitionSummaryData.getInputStream() != null) {\n-                if (partitionSummaryData.getInputStream() instanceof S3ObjectInputStream) {\n-                    ((S3ObjectInputStream)partitionSummaryData.getInputStream()).abort();\n-                }\n-                partitionSummaryData.getInputStream().close();\n-            }\n-\n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Nzc0Ng=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1NjczOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MjowMVrOF01j8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo0MDoxOFrOF03TnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, false);\n          \n          \n            \n                        BulkDataUtils.cleanupForTransientUserData(partitionSummaryData, false);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390947827", "createdAt": "2020-03-11T12:52:01Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -152,13 +142,8 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n             }\n \n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n-\n-            if (partitionSummaryData.getInputStream() != null) {\n-                partitionSummaryData.getInputStream().close();\n-            }\n+            // Clean up.\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NTc5OQ==", "bodyText": "will do", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390955799", "createdAt": "2020-03-11T13:07:24Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -152,13 +142,8 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n             }\n \n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n-\n-            if (partitionSummaryData.getInputStream() != null) {\n-                partitionSummaryData.getInputStream().close();\n-            }\n+            // Clean up.\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzgyNw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NjQxMg==", "bodyText": "done in my eclipse with refactor", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390976412", "createdAt": "2020-03-11T13:40:18Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -152,13 +142,8 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n             }\n \n-            if (partitionSummaryData.getBufferReader() != null) {\n-                partitionSummaryData.getBufferReader().close();\n-            }\n-\n-            if (partitionSummaryData.getInputStream() != null) {\n-                partitionSummaryData.getInputStream().close();\n-            }\n+            // Clean up.\n+            BulkDataUtils.cleanup4TransientUserData(partitionSummaryData, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzgyNw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1ODk4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MjozOVrOF01lUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxMzozMVrOF04toA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0ODE3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warning(\"Failed to import \" + fhirResource.getId() + \" due to error: \" + e.getMessage());\n          \n          \n            \n                                logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390948177", "createdAt": "2020-03-11T12:52:39Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,7 +151,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                         }\n                     }\n                 } catch (FHIRPersistenceException e) {\n-                    logger.warning(\"Failed to import due to error: \" + e.getMessage());\n+                    logger.warning(\"Failed to import \" + fhirResource.getId() + \" due to error: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTQ1Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390999456", "createdAt": "2020-03-11T14:13:31Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,7 +151,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                         }\n                     }\n                 } catch (FHIRPersistenceException e) {\n-                    logger.warning(\"Failed to import due to error: \" + e.getMessage());\n+                    logger.warning(\"Failed to import \" + fhirResource.getId() + \" due to error: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0ODE3Nw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2MjcxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Mzo0NlrOF01npQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo0NjoxNlrOF03jOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0ODc3Mw==", "bodyText": "Thinking about this... it's probably worth adding a logger.finer() just in case the code changes and hits default", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390948773", "createdAt": "2020-03-11T12:53:46Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -142,17 +140,20 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n-                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n+            numOfParseFailures = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, chunkData);\n             break;\n         default:\n             break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4MDQxMQ==", "bodyText": "make sense. adding  logger.warning(\"readItem: Data source storage type not found!\");", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390980411", "createdAt": "2020-03-11T13:46:16Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -142,17 +140,20 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n-                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n+            numOfParseFailures = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, chunkData);\n             break;\n         default:\n             break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0ODc3Mw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2MzgwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDowOFrOF01oWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDowOFrOF01oWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0ODk1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            cleanup4TransientUserData(transientUserData, true);\n          \n          \n            \n                            cleanupForTransientUserData(transientUserData, true);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390948952", "createdAt": "2020-03-11T12:54:08Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2NTA3OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDozMVrOF01pJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo0Nzo1MFrOF03nYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Retry ...\");\n          \n          \n            \n                                logger.warning(\"readFhirResourceFromLocalFile: Retry ...\");\n          \n      \n    \n    \n  \n\nno need to split string", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390949157", "createdAt": "2020-03-11T12:54:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromLocalFile: \" + \"Retry ...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4MTQ3Mw==", "bodyText": "good catch!", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390981473", "createdAt": "2020-03-11T13:47:50Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromLocalFile: \" + \"Retry ...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTE1Nw=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2NTc1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDo0N1rOF01pnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDo0N1rOF01pnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());\n          \n          \n            \n                            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file [\" + dataUrl + \"] - \" + ex.getMessage());", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390949279", "createdAt": "2020-03-11T12:54:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2NjY2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NTowNFrOF01qOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NTowNFrOF01qOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTQzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());\n          \n          \n            \n                                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file [\" + dataUrl + \"] - \" + ex.getMessage());", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390949434", "createdAt": "2020-03-11T12:55:04Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromLocalFile: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3MzA5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Njo1NlrOF01uLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxOTo1OVrOF05A7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDQ0NA==", "bodyText": "what does fhirResources.clear accomplish and why?  I see it's passed into this method.", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390950444", "createdAt": "2020-03-11T12:56:56Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MTg2Mg==", "bodyText": "wanted to clear before the retry, the retry will reopen the input stream, skip all the processed lines in the last batch, and then redo the whole read for this batch again. let me improve the codes a little bit to skip the success reads in this batch also ... then I will not need to clear it it ...", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390991862", "createdAt": "2020-03-11T14:02:44Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDQ0NA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNDM5OQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391004399", "createdAt": "2020-03-11T14:19:59Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n+            throw ex;\n         }\n-        return exported;\n+\n+        return parseFailures;\n     }\n \n \n+    /**\n+     * @param dataUrl - URL to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n     public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n                     InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n                     transientUserData.setInputStream(inputStream);\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDQ0NA=="}, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NDE4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzoxNFrOF01u0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzoxNFrOF01u0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        cleanup4TransientUserData(transientUserData, true);\n          \n          \n            \n                        cleanupForTransientUserData(transientUserData, true);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390950609", "createdAt": "2020-03-11T12:57:14Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NTE2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzozNVrOF01vfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzozNVrOF01vfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            cleanup4TransientUserData(transientUserData, true);\n          \n          \n            \n                            cleanupForTransientUserData(transientUserData, true);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390950783", "createdAt": "2020-03-11T12:57:35Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NjA1OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo1MVrOF01wBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo1MVrOF01wBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDkxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n          \n          \n            \n                            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file [\" + itemName + \"] - \" + ex.getMessage());", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390950916", "createdAt": "2020-03-11T12:57:51Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NjgwOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODowOFrOF01wjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODowOFrOF01wjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n          \n          \n            \n                                logger.warning(\"readFhirResourceFromObjectStore: Retry ...\");", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390951052", "createdAt": "2020-03-11T12:58:08Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NzYxOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODoyNFrOF01xCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODoyNFrOF01xCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());\n          \n          \n            \n                        logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file [\" + filePath + \"] - \" + ex.getMessage());", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r390951178", "createdAt": "2020-03-11T12:58:24Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -145,101 +157,159 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n                 if (lineRed <= numOfLinesToSkip) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse '\" + resLine + \"'\");\n+                    parseFailures++;\n+                    continue;\n                 }\n             }\n         } while (resLine != null);\n-        return exported;\n+        return parseFailures;\n     }\n \n-    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n-            if (transientUserData.getBufferReader() == null) {\n-                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-                S3ObjectInputStream s3InStream = item.getObjectContent();\n-                transientUserData.setInputStream(s3InStream);\n-                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n-                transientUserData.setBufferReader(resReader);\n-            }\n-            try {\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n-            }\n-\n-        } else {\n-            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-                // Notify s3 client to abort and prevent the server from keeping on sending data.\n-                s3InStream.abort();\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-                exported = 0;\n+    public static void cleanup4TransientUserData(ImportTransientUserData transientUserData, boolean isAbort) throws Exception {\n+        if (transientUserData.getInputStream() != null) {\n+            if (isAbort && transientUserData.getInputStream() instanceof S3ObjectInputStream) {\n+                // For S3 input stream, if the read is not finished successfully, we have to abort it first.\n+                ((S3ObjectInputStream)transientUserData.getInputStream()).abort();\n             }\n+            transientUserData.getInputStream().close();\n+            transientUserData.setInputStream(null);\n         }\n \n-        return exported;\n+        if (transientUserData.getBufferReader() != null) {\n+            transientUserData.getBufferReader().close();\n+            transientUserData.setBufferReader(null);\n+        }\n     }\n \n-\n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n-            boolean isReuseInput, ImportTransientUserData transientUserData) {\n-        int exported = 0;\n-        if (isReuseInput) {\n+    /**\n+     * @param cosClient - COS/S3 client.\n+     * @param bucketName - COS/S3 bucket name to read from.\n+     * @param itemName - COS/S3 object name to read from.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n+           int numOfLinesToSkip, List<Resource> fhirResources, ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+        int retryTimes = Constants.IMPORT_RETRY_TIMES;\n+        do {\n             try {\n                 if (transientUserData.getBufferReader() == null) {\n-                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                    S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    transientUserData.setInputStream(s3InStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n                     transientUserData.setBufferReader(resReader);\n+                    // Skip the already processed lines after opening the input stream for first read.\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+                } else {\n+                    parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+                }\n+                break;\n+            } catch (Exception ex) {\n+                // Clean up.\n+                fhirResources.clear();\n+                cleanup4TransientUserData(transientUserData, true);\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ex.getMessage());\n+                if ((retryTimes--) > 0) {\n+                    logger.warning(\"readFhirResourceFromObjectStore: \" + \"Retry ...\");\n+                } else {\n+                    // Throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+                    throw ex;\n                 }\n-                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n             }\n-        } else {\n-            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            } catch (Exception ioe) {\n-                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-                exported = 0;\n+        } while (retryTimes > 0);\n+\n+        return parseFailures;\n+    }\n+\n+    /**\n+     * @param filePath - file path to the ndjson file.\n+     * @param numOfLinesToSkip - number of lines to skip before read.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param transientUserData - transient user data for the chunk.\n+     * @return - number of parsing failures.\n+     * @throws Exception\n+     */\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            ImportTransientUserData transientUserData) throws Exception {\n+        int parseFailures = 0;\n+\n+        try {\n+            if (transientUserData.getBufferReader() == null) {\n+                BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                transientUserData.setBufferReader(resReader);\n+                // Skip the already processed lines after opening the input stream for first read.\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), numOfLinesToSkip, fhirResources);\n+            } else {\n+                parseFailures = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n             }\n+        } catch (Exception ex) {\n+            // Clean up.\n+            fhirResources.clear();\n+            cleanup4TransientUserData(transientUserData, true);\n+            // Log the error and throw exception to fail the job, the job can be continued from the current checkpoint after the problem is solved.\n+            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377ad83612ea30e7361c65d3e07f9b83bb398d3"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzk0MDg0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzowMjoxN1rOF1ARqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozOTowN1rOF1By5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzM3MA==", "bodyText": "why not log the stack trace?  might it have some useful info for figuring out what is invalid about the resource that failed to parse?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391123370", "createdAt": "2020-03-11T17:02:17Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTAyNw==", "bodyText": "I thought stack trace is a little bit too heavy in the log, with the exception info and the line number, we should already have enough info to follow up if need ...", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391139027", "createdAt": "2020-03-11T17:26:11Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzM3MA=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MjcxMg==", "bodyText": "OK.  If not taking my full suggestion, I'd still suggest to update the log statement to level INFO.   This will be more consistent with the way we handle invalid data sent by the client on the REST side.", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391142712", "createdAt": "2020-03-11T17:31:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzM3MA=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MzQyNA==", "bodyText": "ok, sounds good", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391143424", "createdAt": "2020-03-11T17:32:04Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzM3MA=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODI2MA==", "bodyText": "accepted you change and fixed the error.", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391148260", "createdAt": "2020-03-11T17:39:07Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzM3MA=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzk0OTU0OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzowNDozMlrOF1AXMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzowNDozMlrOF1AXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNDc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Log and skip the invalid FHIR resource.\n          \n          \n            \n                                logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n          \n          \n            \n                                parseFailures++;\n          \n          \n            \n                                logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse line \"\n          \n          \n            \n                                        + (numOfProcessedLines + exported + parseFailures) + \" of [\" + dataSource + \"].\");\n          \n          \n            \n                                // Log and skip the invalid FHIR resource.\n          \n          \n            \n                                parseFailures++;\n          \n          \n            \n                                logger.log(Level.INFO, \"getFhirResourceFromBufferReader: \" + \"Failed to parse line \"\n          \n          \n            \n                                        + (numOfProcessedLines + exported + parseFailures) + \" of [\" + dataSource + \"].\", e);", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391124787", "createdAt": "2020-03-11T17:04:32Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -134,112 +137,181 @@ public static void listBuckets(AmazonS3 cosClient) {\n         }\n     }\n \n-    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfLinesToSkip, List<Resource> fhirResources) throws Exception {\n+    /**\n+     * @param resReader - the buffer reader to read FHIR resource from.\n+     * @param numOfProcessedLines - number of the already processed lines.\n+     * @param fhirResources - List holds the FHIR resources.\n+     * @param isSkipProcessed - if need to skip the processed lines before read.\n+     * @return - the number of parsing failures.\n+     * @throws Exception\n+     */\n+    private static int getFhirResourceFromBufferReader(BufferedReader resReader, int numOfProcessedLines, List<Resource> fhirResources,\n+            boolean isSkipProcessed, String dataSource) throws Exception {\n         int exported = 0;\n         int lineRed = 0;\n+        int parseFailures = 0;\n+\n         String resLine = null;\n         do {\n             resLine = resReader.readLine();\n             if (resLine != null) {\n                 lineRed++;\n-                if (lineRed <= numOfLinesToSkip) {\n+                if (isSkipProcessed && lineRed <= numOfProcessedLines) {\n                     continue;\n                 }\n-                fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n-                exported++;\n-                if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n-                    break;\n+                try {\n+                    fhirResources.add(FHIRParser.parser(Format.JSON).parse(new StringReader(resLine)));\n+                    exported++;\n+                    if (exported == Constants.IMPORT_NUMOFFHIRRESOURCES_PERREAD) {\n+                        break;\n+                    }\n+                } catch (FHIRParserException e) {\n+                    // Log and skip the invalid FHIR resource.\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + e.getMessage());\n+                    parseFailures++;\n+                    logger.warning(\"getFhirResourceFromBufferReader: \" + \"Failed to parse line \"\n+                            + (numOfProcessedLines + exported + parseFailures) + \" of [\" + dataSource + \"].\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzk5OTAyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoxNjo0M1rOF1A2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoxNjo0M1rOF1A2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzMjc3NQ==", "bodyText": "maybe turn these comments into javadoc?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391132775", "createdAt": "2020-03-11T17:16:43Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -48,6 +48,11 @@\n \n     // Control if push OperationOutcomes to COS/S3.\n     public static final boolean IMPORT_IS_COLLECT_OPERATIONOUTCOMES = false;\n-    // Control if reuse the input stream of the data source across the chunks.\n-    public static final boolean IMPORT_IS_REUSE_INPUTSTREAM = true;\n+    // Retry times when https or amazon s3 client timeout or other error happens, e.g, timeout can happen if the batch write to DB takes\n+    // longer than the socket timeout, set to retry once for now.\n+    public static final int IMPORT_RETRY_TIMES = 1;\n+    public static final int COS_REQUEST_TIMEOUT = 10000;\n+    // Batch writing to DB can take long time which can make the idle COS/S3 client connection timeout, so set the client socket timeout\n+    // to 120 seconds which is the default DB2 timeout.\n+    public static final int COS_SOCKET_TIMEOUT = 120000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDAxNDM4OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMDoyOFrOF1BAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNzoxM1rOF1BSBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNTMxMw==", "bodyText": "Just confirming:  ChunkWriter get re-instantiated for each job, right?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391135313", "createdAt": "2020-03-11T17:20:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -38,6 +38,7 @@\n  */\n public class ChunkWriter extends AbstractItemWriter {\n     private static final Logger logger = Logger.getLogger(ChunkWriter.class.getName());\n+    AmazonS3 cosClient = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTg0NQ==", "bodyText": "yes", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391139845", "createdAt": "2020-03-11T17:27:13Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -38,6 +38,7 @@\n  */\n public class ChunkWriter extends AbstractItemWriter {\n     private static final Logger logger = Logger.getLogger(ChunkWriter.class.getName());\n+    AmazonS3 cosClient = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNTMxMw=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDAzNDEyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNToxOVrOF1BMrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0NDozMVrOF1CAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODQ3Ng==", "bodyText": "which warning is being suppressed?  can we avoid it?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391138476", "createdAt": "2020-03-11T17:25:19Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MjQyMQ==", "bodyText": "List<ImportCheckPointData> partitionSummaries = (List<ImportCheckPointData>)jobContext.getTransientUserData();", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391142421", "createdAt": "2020-03-11T17:30:43Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODQ3Ng=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDg3MA==", "bodyText": "can we apply the annotation to this variable declaration instead of to the whole method then?", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391144870", "createdAt": "2020-03-11T17:34:07Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODQ3Ng=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MDMyMg==", "bodyText": "yes, we can. :)", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391150322", "createdAt": "2020-03-11T17:42:14Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODQ3Ng=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MTgwNg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/770#discussion_r391151806", "createdAt": "2020-03-11T17:44:31Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -8,29 +8,46 @@\n \n import java.util.HashMap;\n import java.util.List;\n+import java.util.logging.Logger;\n \n import javax.batch.api.listener.JobListener;\n+import javax.batch.operations.JobOperator;\n+import javax.batch.runtime.BatchRuntime;\n+import javax.batch.runtime.JobExecution;\n import javax.batch.runtime.context.JobContext;\n import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n+    private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n     @Inject\n     JobContext jobContext;\n \n-    private long jobStartTimeInMS, jobEndTimeInMS;\n-\n     public ImportJobListener() {\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+\n+    @SuppressWarnings({\"unchecked\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODQ3Ng=="}, "originalCommit": {"oid": "9c74a610037b7bec59fc7fba4cd612a831c51293"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 102, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}