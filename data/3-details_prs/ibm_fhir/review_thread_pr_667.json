{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzQxNTU2", "number": 667, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNjozN1rODdbd1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1NTowOFrODfJmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1MzAzOnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNjozOFrOFmBw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo0ODo1N1rOFogMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTEzNQ==", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419135", "createdAt": "2020-02-05T18:06:38Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java", "diffHunk": "@@ -377,6 +377,9 @@ public static String generate(CadfResource obj)\n         }\n \n         public static void generate(CadfResource obj, JsonGenerator generator) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDg2Ng==", "bodyText": "added comment", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014866", "createdAt": "2020-02-12T02:48:57Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java", "diffHunk": "@@ -377,6 +377,9 @@ public static String generate(CadfResource obj)\n         }\n \n         public static void generate(CadfResource obj, JsonGenerator generator) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTEzNQ=="}, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1Mzc1OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNjo1MlrOFmBxeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo0OToxMVrOFogMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTI1Nw==", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419257", "createdAt": "2020-02-05T18:06:52Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java", "diffHunk": "@@ -281,6 +281,9 @@ public static String generate(CadfReporterStep obj)\n \n         public static void generate(CadfReporterStep obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDkyMQ==", "bodyText": "added comment", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014921", "createdAt": "2020-02-12T02:49:11Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java", "diffHunk": "@@ -281,6 +281,9 @@ public static String generate(CadfReporterStep obj)\n \n         public static void generate(CadfReporterStep obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTI1Nw=="}, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1NDI0OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNzowM1rOFmBxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo0OToyNFrOFogM8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTMzOQ==", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419339", "createdAt": "2020-02-05T18:07:03Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java", "diffHunk": "@@ -138,6 +138,9 @@ public static String generate(CadfReason obj)\n \n         public static void generate(CadfReason obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDk2Mg==", "bodyText": "added comments", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014962", "createdAt": "2020-02-12T02:49:24Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java", "diffHunk": "@@ -138,6 +138,9 @@ public static String generate(CadfReason obj)\n \n         public static void generate(CadfReason obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTMzOQ=="}, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg3MTA5OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMjozM1rOFmB8vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo0NDo0MFrOFogJAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE0Mg==", "bodyText": "Can the CadfEvent (obj) really contain nulls in its repeating members?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375422142", "createdAt": "2020-02-05T18:12:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMzk1Mw==", "bodyText": "obj.getTags is a list, so technically it can.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378013953", "createdAt": "2020-02-12T02:44:40Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE0Mg=="}, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg3NDc5OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMzo0NVrOFmB_FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjo0Njo0MlrOFogKrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjc0MQ==", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375422741", "createdAt": "2020-02-05T18:13:45Z", "author": {"login": "lmsurpre"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,9 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDM4MQ==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014381", "createdAt": "2020-02-12T02:46:42Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,9 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjc0MQ=="}, "originalCommit": {"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg1OTU2OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0MTo1NFrOFore5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0MTo1NFrOFore5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5OTc4Mw==", "bodyText": "Maybe you can use ObjectUtils.isEmpty to validade this obj.\nDocument link", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378199783", "createdAt": "2020-02-12T11:41:54Z", "author": {"login": "yurizp"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,10 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF attachment is null, then simply skip it.\n+            if (obj == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg2MTE4OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0MjozNVrOForf_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0MjozNVrOForf_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMDA2MA==", "bodyText": "It's really necessary this comment?", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378200060", "createdAt": "2020-02-12T11:42:35Z", "author": {"login": "yurizp"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,10 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF attachment is null, then simply skip it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg2NzQ3OnYy", "diffSide": "RIGHT", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0NDo0MlrOForj5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowNDoyMlrOFotvLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMTA2Mw==", "bodyText": "Maybe you can use ObjectUtils.isNotEmpty to validade this obj", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378201063", "createdAt": "2020-02-12T11:44:42Z", "author": {"login": "yurizp"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNjcxNw==", "bodyText": "I like ObjectUtils, but the intention here is to validate not null only, the generated(input) values are either null or with no-empty value, there is no empty value case.  so, I don't want to introduce a new maven dependency for it.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378236717", "createdAt": "2020-02-12T13:04:22Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMTA2Mw=="}, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg3NjE5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo0Nzo0N1rOForpkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo1NDo1MFrOFotdtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMjUxMw==", "bodyText": "It's possible move this code inside for to other method.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378202513", "createdAt": "2020-02-12T11:47:47Z", "author": {"login": "yurizp"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -108,32 +121,98 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n             logger.info(\"writeItems: Set DatastoreId to default!\");\n         }\n-        cosClient = COSUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n-                cosLocation);\n-        if (cosClient == null) {\n-            logger.warning(\"writeItems: Failed to get CosClient!\");\n-            return;\n-        } else {\n-            logger.finer(\"writeItems: Got CosClient successfully!\");\n-        }\n \n         FHIRConfiguration.setConfigHome(\"./\");\n         FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n \n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null);\n+        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n \n-        int imported = 0;\n+        int processedNum = 0, succeededNum =0, failedNum = 0;\n+        ImportTransientUserData chunkData = (ImportTransientUserData) stepCtx.getTransientUserData();\n         for (Object objResJasonList : arg0) {\n-            List<String> resCosObjectNameList = (List<String>) objResJasonList;\n+            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+\n+            for (Resource fhirResource : fhirResourceList) {\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjI0Nw==", "bodyText": "I don't think add unnecessary method is a good idea even though the cost of function call could be minor, but this can be a huge loop. for function call, there will always be stack operations there.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378232247", "createdAt": "2020-02-12T12:54:50Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -108,32 +121,98 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n             logger.info(\"writeItems: Set DatastoreId to default!\");\n         }\n-        cosClient = COSUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n-                cosLocation);\n-        if (cosClient == null) {\n-            logger.warning(\"writeItems: Failed to get CosClient!\");\n-            return;\n-        } else {\n-            logger.finer(\"writeItems: Got CosClient successfully!\");\n-        }\n \n         FHIRConfiguration.setConfigHome(\"./\");\n         FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n \n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null);\n+        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n \n-        int imported = 0;\n+        int processedNum = 0, succeededNum =0, failedNum = 0;\n+        ImportTransientUserData chunkData = (ImportTransientUserData) stepCtx.getTransientUserData();\n         for (Object objResJasonList : arg0) {\n-            List<String> resCosObjectNameList = (List<String>) objResJasonList;\n+            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+\n+            for (Resource fhirResource : fhirResourceList) {\n+                try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMjUxMw=="}, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg4NjQ2OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1MToyMVrOForv7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozNzo0MVrOFos_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNDE0Mw==", "bodyText": "I believe i have by default 0 with value. So it's not necessary set 0 in this.\nDocument link", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378204143", "createdAt": "2020-02-12T11:51:21Z", "author": {"login": "yurizp"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+// Class for tracking the partition import progress and for Batch job check points.\n+// Also used as data carrier for collecting and aggregation of import metrics.\n+public class ImportCheckPointData implements Serializable {\n+    private static final long serialVersionUID = 2189917861035732241L;\n+    // URL or COS/S3 object name.\n+    private String importPartitionWorkitem;\n+    private int numOfProcessedResources = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDU0MQ==", "bodyText": "yes, I know this. but it doesn't harm to set it. because sometime, we get annoying warning in eclipse if you don't set any value to it before use it.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378224541", "createdAt": "2020-02-12T12:37:41Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+// Class for tracking the partition import progress and for Batch job check points.\n+// Also used as data carrier for collecting and aggregation of import metrics.\n+public class ImportCheckPointData implements Serializable {\n+    private static final long serialVersionUID = 2189917861035732241L;\n+    // URL or COS/S3 object name.\n+    private String importPartitionWorkitem;\n+    private int numOfProcessedResources = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNDE0Mw=="}, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg5MjYzOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1MzozMFrOForzzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0Nzo1NFrOFotROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTEzMg==", "bodyText": "Maybe you can separe this method in smalls ones.\nIn this way you make the ciclomatic complexiti donw to.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378205132", "createdAt": "2020-02-12T11:53:30Z", "author": {"login": "yurizp"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.batch.api.listener.JobListener;\n+import javax.batch.runtime.context.JobContext;\n+import javax.inject.Inject;\n+\n+public class ImportJobListener implements JobListener {\n+    @Inject\n+    JobContext jobContext;\n+\n+    private long jobStartTimeInMS, jobEndTimeInMS;\n+\n+    public ImportJobListener() {\n+\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void afterJob() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyOTA0OA==", "bodyText": "I don't really think currently it's complicated enough to have to be separated into multiple, and there is no common codes used in it. but I do plan to separate the future bulkdata response generation and metric generation from this function into 2 different functions. and this will be done in issue #671", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378229048", "createdAt": "2020-02-12T12:47:54Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.batch.api.listener.JobListener;\n+import javax.batch.runtime.context.JobContext;\n+import javax.inject.Inject;\n+\n+public class ImportJobListener implements JobListener {\n+    @Inject\n+    JobContext jobContext;\n+\n+    private long jobStartTimeInMS, jobEndTimeInMS;\n+\n+    public ImportJobListener() {\n+\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void afterJob() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTEzMg=="}, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTg5NzE0OnYy", "diffSide": "RIGHT", "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/RandomKeyGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1NTowOFrOFor2eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjozODozMlrOFotBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTgxOA==", "bodyText": "Do you dont have the value to verify in this?\nMaybe is return the wrong value but in this Test is pass becouse is not empty.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378205818", "createdAt": "2020-02-12T11:55:08Z", "author": {"login": "yurizp"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/RandomKeyGeneratorTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.util.test;\n+\n+import static org.testng.Assert.assertFalse;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+\n+public class RandomKeyGeneratorTest {\n+\n+    @Test\n+    public void testGetRandomKey() {\n+        String output = FHIRUtil.getRandomKey(\"AES\");\n+        assertFalse(output.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDkxNA==", "bodyText": "The result is a random value.", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378224914", "createdAt": "2020-02-12T12:38:32Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/RandomKeyGeneratorTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.util.test;\n+\n+import static org.testng.Assert.assertFalse;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+\n+public class RandomKeyGeneratorTest {\n+\n+    @Test\n+    public void testGetRandomKey() {\n+        String output = FHIRUtil.getRandomKey(\"AES\");\n+        assertFalse(output.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTgxOA=="}, "originalCommit": {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 249, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}