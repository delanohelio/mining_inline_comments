{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDgzMTY1", "number": 1193, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0Mjo0OVrOECvqtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0Mjo0OVrOECvqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEzNTkwOnYy", "diffSide": "RIGHT", "path": "docs/src/pages/guides/FHIRTerminologyGuide.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0Mjo0OVrOGfZDDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0NDo0OFrOGfZGXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2OTQyMA==", "bodyText": "Is it possible to run multiple terminology service implementations at the same time? and allow to choose which service implementation to call.  just curious. :)", "url": "https://github.com/IBM/FHIR/pull/1193#discussion_r435569420", "createdAt": "2020-06-04T21:42:49Z", "author": {"login": "albertwang-ibm"}, "path": "docs/src/pages/guides/FHIRTerminologyGuide.md", "diffHunk": "@@ -0,0 +1,102 @@\n+---\n+layout: post\n+title: FHIR Terminology Guide\n+description: FHIR Terminology Guide\n+date:   2020-06-04 12:00:00 -0400\n+permalink: /FHIRTerminologyGuide/\n+---\n+\n+## Overview\n+\n+The IBM FHIR Server Terminology module ([fhir-term](https://github.com/IBM/FHIR/tree/master/fhir-term)) provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using `ConceptMap`, `ValueSet`, and `ConceptMap` resources that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/master/fhir-registry)).\n+\n+## FHIR Terminology Service Provider Interface (SPI)\n+\n+The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `expand`, `lookup`, `subsumes`, `closure`, `validateCode` (CodeSystem) and `validateCode` (ValueSet). Here is an excerpt (for brevity) of the SPI:\n+\n+```java\n+public interface FHIRTermServiceProvider {\n+    boolean isExpandable(ValueSet valueSet);\n+    ValueSet expand(ValueSet valueSet, ExpansionParameters parameters);\n+    LookupOutcome lookup(Coding coding, LookupParameters parameters);\n+    ConceptSubsumptionOutcome subsumes(Coding codingA, Coding codingB);\n+    Set<Concept> closure(Coding coding);\n+    ValidationOutcome validateCode(CodeSystem codeSystem, Coding coding, ValidationParameters parameters);\n+    ValidationOutcome validateCode(CodeSystem codeSystem, CodeableConcept codeableConcept, ValidationParameters parameters);\n+    ValidationOutcome validateCode(ValueSet valueSet, Coding coding, ValidationParameters parameters);\n+    ValidationOutcome validateCode(ValueSet valueSet, CodeableConcept codeableConcept, ValidationParameters parameters);\n+    TranslationOutcome translate(ConceptMap conceptMap, CodeableConcept codeableConcept, TranslationParameters parameters);\n+}\n+\n+```\n+\n+The `expand `, `lookup`, `validateCode` (CodeSystem), `validateCode` (ValueSet), and `translate` methods support the passing of optional parameters (e.g. `ExpansionParameters`, `LookupParameters`, etc.). Many of the methods also return an \"outcome\" object. These \"parameter\" and \"outcome\" objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: [http://hl7.org/fhir/terminology-module.html](http://hl7.org/fhir/terminology-module.html).\n+\n+The \"parameter\" objects can be created from a `Parameters` resource:\n+\n+```java\n+Parameters parameters = ...;\n+ExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n+```\n+\n+The \"outcome\" objects can be converted to a Parameters resource:\n+\n+```java\n+LookupOutcome outcome = ...;\n+Parameters parameters = outcome.toParameters();\n+```\n+\n+This bridge to/from the `Parameters` resource enables implementers build both native implementations of the SPI and implementations that access an existing external terminology service.\n+\n+## Default Terminology Service Provider Implementation\n+\n+The default implementation of `FHIRTermServiceProvider` ([DefaultTermServiceProvider](https://github.com/IBM/FHIR/master/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that are available from the FHIR registry. The only `CodeSystem` resources that are supported are those with complete content (`CodeSystem.content = 'complete'`). `ValueSet` resources are supported if they reference `CodeSystem` resources that have complete content. The default implementation does not support any optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n+\n+## FHIR Terminology Service Singleton facade\n+\n+The FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/master/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a `FHIRTermServiceProvider` from the ServiceLoader, if one exists. Otherwise, it will instantiate a `DefaultTermServiceProvider`. Other FHIR server components and user code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n+\n+```java\n+ValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\n+Coding coding = Coding.builder()\n+        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n+        .version(string(\"1.0.0\"))\n+        .code(Code.of(\"a\")\n+        .display(string(\"concept a\")\n+        .build();\n+ValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0db218a5fe97df7aba9a2556b421f6381be5dd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDI3MQ==", "bodyText": "Currently no, but in the future, I anticipate that there could be multiple providers and they will advertise their capabilities and FHIRTermService will select the appropriate one based on the request.", "url": "https://github.com/IBM/FHIR/pull/1193#discussion_r435570271", "createdAt": "2020-06-04T21:44:48Z", "author": {"login": "JohnTimm"}, "path": "docs/src/pages/guides/FHIRTerminologyGuide.md", "diffHunk": "@@ -0,0 +1,102 @@\n+---\n+layout: post\n+title: FHIR Terminology Guide\n+description: FHIR Terminology Guide\n+date:   2020-06-04 12:00:00 -0400\n+permalink: /FHIRTerminologyGuide/\n+---\n+\n+## Overview\n+\n+The IBM FHIR Server Terminology module ([fhir-term](https://github.com/IBM/FHIR/tree/master/fhir-term)) provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using `ConceptMap`, `ValueSet`, and `ConceptMap` resources that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/master/fhir-registry)).\n+\n+## FHIR Terminology Service Provider Interface (SPI)\n+\n+The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `expand`, `lookup`, `subsumes`, `closure`, `validateCode` (CodeSystem) and `validateCode` (ValueSet). Here is an excerpt (for brevity) of the SPI:\n+\n+```java\n+public interface FHIRTermServiceProvider {\n+    boolean isExpandable(ValueSet valueSet);\n+    ValueSet expand(ValueSet valueSet, ExpansionParameters parameters);\n+    LookupOutcome lookup(Coding coding, LookupParameters parameters);\n+    ConceptSubsumptionOutcome subsumes(Coding codingA, Coding codingB);\n+    Set<Concept> closure(Coding coding);\n+    ValidationOutcome validateCode(CodeSystem codeSystem, Coding coding, ValidationParameters parameters);\n+    ValidationOutcome validateCode(CodeSystem codeSystem, CodeableConcept codeableConcept, ValidationParameters parameters);\n+    ValidationOutcome validateCode(ValueSet valueSet, Coding coding, ValidationParameters parameters);\n+    ValidationOutcome validateCode(ValueSet valueSet, CodeableConcept codeableConcept, ValidationParameters parameters);\n+    TranslationOutcome translate(ConceptMap conceptMap, CodeableConcept codeableConcept, TranslationParameters parameters);\n+}\n+\n+```\n+\n+The `expand `, `lookup`, `validateCode` (CodeSystem), `validateCode` (ValueSet), and `translate` methods support the passing of optional parameters (e.g. `ExpansionParameters`, `LookupParameters`, etc.). Many of the methods also return an \"outcome\" object. These \"parameter\" and \"outcome\" objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: [http://hl7.org/fhir/terminology-module.html](http://hl7.org/fhir/terminology-module.html).\n+\n+The \"parameter\" objects can be created from a `Parameters` resource:\n+\n+```java\n+Parameters parameters = ...;\n+ExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n+```\n+\n+The \"outcome\" objects can be converted to a Parameters resource:\n+\n+```java\n+LookupOutcome outcome = ...;\n+Parameters parameters = outcome.toParameters();\n+```\n+\n+This bridge to/from the `Parameters` resource enables implementers build both native implementations of the SPI and implementations that access an existing external terminology service.\n+\n+## Default Terminology Service Provider Implementation\n+\n+The default implementation of `FHIRTermServiceProvider` ([DefaultTermServiceProvider](https://github.com/IBM/FHIR/master/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that are available from the FHIR registry. The only `CodeSystem` resources that are supported are those with complete content (`CodeSystem.content = 'complete'`). `ValueSet` resources are supported if they reference `CodeSystem` resources that have complete content. The default implementation does not support any optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n+\n+## FHIR Terminology Service Singleton facade\n+\n+The FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/master/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a `FHIRTermServiceProvider` from the ServiceLoader, if one exists. Otherwise, it will instantiate a `DefaultTermServiceProvider`. Other FHIR server components and user code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n+\n+```java\n+ValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\n+Coding coding = Coding.builder()\n+        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n+        .version(string(\"1.0.0\"))\n+        .code(Code.of(\"a\")\n+        .display(string(\"concept a\")\n+        .build();\n+ValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2OTQyMA=="}, "originalCommit": {"oid": "df0db218a5fe97df7aba9a2556b421f6381be5dd"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4877, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}