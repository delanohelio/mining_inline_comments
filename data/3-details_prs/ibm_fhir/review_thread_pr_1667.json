{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTQ1OTkz", "number": 1667, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1NDoxOVrOE1qr5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozMjo0NlrOE12sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA5MzUxOnYy", "diffSide": "RIGHT", "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/DataCreatorBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1NDoxOVrOHuETXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyOTo0M1rOHuXZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NzAzOA==", "bodyText": "this chunk of code is used above as well (lines 192-198) - might want to move to its own function", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518067038", "createdAt": "2020-11-05T13:54:19Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/DataCreatorBase.java", "diffHunk": "@@ -180,23 +186,52 @@ protected Object createArgument(Class<?> owningClass, Method builderMethod, Clas\n                         !PlanDefinition.Action.class.equals(parameterType) &&\n                         !QuestionnaireResponse.Item.class.equals(parameterType)) {\n                     // Otherwise just create a single element\n-                    elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    if (Reference.class.equals(parameterType)){\n+                        // Handling references specially\n+                        String elementName = builderMethod.getParameters()[i].getName();\n+                        Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                        if (!referenceTargetTypes.isEmpty()) {\n+                            String[] targetTypes = new String[referenceTargetTypes.size()];\n+                            referenceTargetTypes.toArray(targetTypes);\n+\n+                            // use the \"choiceIndicator\" to pick the reference type\n+                            String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];\n+                            elementList = Collections.singletonList(createReference(targetType));\n+                        } else {\n+                            elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                        }\n+                    } else {\n+                        elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    }\n                 }\n             }\n             return elementList;\n         } else if (Element.class.equals(parameterType)){\n             // Seeing a parameter of type Element is our clue that we have a choice element\n             String elementName = builderMethod.getParameters()[i].getName();\n             Class<? extends Element> choiceType = null;\n-            \n+\n             Set<Class<?>> choiceElementTypes = ModelSupport.getChoiceElementTypes(owningClass, elementName);\n             if (!choiceElementTypes.isEmpty()) {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<? extends Element>[] choiceTypesArray = new Class[choiceElementTypes.size()];\n                 choiceElementTypes.toArray(choiceTypesArray);\n-                choiceType = (Class<? extends Element>) choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+                choiceType = choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+            }\n+\n+            if (Reference.class.equals(choiceType)){\n+\n+                // Handling references specially\n+                Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                if (!referenceTargetTypes.isEmpty()) {\n+                    String[] targetTypes = new String[referenceTargetTypes.size()];\n+                    referenceTargetTypes.toArray(targetTypes);\n+\n+                    // use the \"choiceIndicator\" to pick the reference type\n+                    String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3OTg5Mw==", "bodyText": "I'm thinking to take a rain-check on this one.  Lots going on and my bar is lower for this example-generator stuff than for core fhir server", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518379893", "createdAt": "2020-11-05T21:29:43Z", "author": {"login": "lmsurpre"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/DataCreatorBase.java", "diffHunk": "@@ -180,23 +186,52 @@ protected Object createArgument(Class<?> owningClass, Method builderMethod, Clas\n                         !PlanDefinition.Action.class.equals(parameterType) &&\n                         !QuestionnaireResponse.Item.class.equals(parameterType)) {\n                     // Otherwise just create a single element\n-                    elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    if (Reference.class.equals(parameterType)){\n+                        // Handling references specially\n+                        String elementName = builderMethod.getParameters()[i].getName();\n+                        Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                        if (!referenceTargetTypes.isEmpty()) {\n+                            String[] targetTypes = new String[referenceTargetTypes.size()];\n+                            referenceTargetTypes.toArray(targetTypes);\n+\n+                            // use the \"choiceIndicator\" to pick the reference type\n+                            String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];\n+                            elementList = Collections.singletonList(createReference(targetType));\n+                        } else {\n+                            elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                        }\n+                    } else {\n+                        elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    }\n                 }\n             }\n             return elementList;\n         } else if (Element.class.equals(parameterType)){\n             // Seeing a parameter of type Element is our clue that we have a choice element\n             String elementName = builderMethod.getParameters()[i].getName();\n             Class<? extends Element> choiceType = null;\n-            \n+\n             Set<Class<?>> choiceElementTypes = ModelSupport.getChoiceElementTypes(owningClass, elementName);\n             if (!choiceElementTypes.isEmpty()) {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<? extends Element>[] choiceTypesArray = new Class[choiceElementTypes.size()];\n                 choiceElementTypes.toArray(choiceTypesArray);\n-                choiceType = (Class<? extends Element>) choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+                choiceType = choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+            }\n+\n+            if (Reference.class.equals(choiceType)){\n+\n+                // Handling references specially\n+                Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                if (!referenceTargetTypes.isEmpty()) {\n+                    String[] targetTypes = new String[referenceTargetTypes.size()];\n+                    referenceTargetTypes.toArray(targetTypes);\n+\n+                    // use the \"choiceIndicator\" to pick the reference type\n+                    String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NzAzOA=="}, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzIxOTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoyMjowNVrOHuFi5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNDowNVrOHuXhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NzM5OA==", "bodyText": "I don't think you need to do this here since you're generating the ValidationSupport.checkReferenceType() call for reference-type choice elements now", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518087398", "createdAt": "2020-11-05T14:22:05Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4MTEzMQ==", "bodyText": "good call, meant to remove this.\nI actually think there are other validation cases (for both choice types and list types) that we're still missing, but in this PR I was focused on just the referenceType-checking", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518381131", "createdAt": "2020-11-05T21:32:22Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NzM5OA=="}, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4MTg4NA==", "bodyText": "removed", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518381884", "createdAt": "2020-11-05T21:34:05Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NzM5OA=="}, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA2MDkwOnYy", "diffSide": "RIGHT", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozMjo0NlrOHuXe-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozMjo0NlrOHuXe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4MTMwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //do other validation here?\n          \n          \n            \n            //            if (element instanceof Reference) {\n          \n          \n            \n            //                checkReferenceType(element, elementName, ModelSupport.getReferenceTargetTypes(modelClass, elementName));\n          \n          \n            \n            //            }", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518381307", "createdAt": "2020-11-05T21:32:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?\n+//            if (element instanceof Reference) {\n+//                checkReferenceType(element, elementName, ModelSupport.getReferenceTargetTypes(modelClass, elementName));\n+//            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4609, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}