{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTM3NTcz", "number": 979, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoxM1rOD1cU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MDoyNlrOD1cZsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1MjE5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoxM1rOGK43Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoxM1rOGK43Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDYzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.setUniqueIDForImportOperationOutcomes(importPartitionWorkitem + \"_ok_file.ndjson\");\n          \n          \n            \n                    this.setUniqueIDForImportOperationOutcomes(importPartitionWorkitem + \"_oo_success.ndjson\");", "url": "https://github.com/IBM/FHIR/pull/979#discussion_r414070630", "createdAt": "2020-04-23T19:37:13Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -62,9 +62,14 @@ public ImportCheckPointData(String importPartitionWorkitem, int numOfProcessedRe\n         this.importPartitionWorkitem = importPartitionWorkitem;\n         this.numOfProcessedResources = numOfProcessedResources;\n         this.importPartitionResourceType = importPartitionResourceType;\n-        String ramdomID = FHIRUtil.getRandomKey(\"AES\");\n-        this.setUniqueIDForImportOperationOutcomes(ramdomID + \"_ok_file.ndjson\");\n-        this.setUniqueIDForImportFailureOperationOutcomes(ramdomID + \"_error_file.ndjson\");\n+\n+        // This naming pattern is used in bulkdata operation to generate file links for import OperationOutcomes.\n+        // e.g, for input file test1.ndjson, if there is any error during the importing, then the errors are in \n+        // test1.ndjson_errors.ndjson\n+        // Note: for those good imports, we don't really generate any meaningful OperationOutcome, so only error import \n+        //       OperationOutcomes are supported for now.\n+        this.setUniqueIDForImportOperationOutcomes(importPartitionWorkitem + \"_ok_file.ndjson\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d053bcf76585eef215bed94e6eecdbebc864408f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1MzExOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzoyN1rOGK438w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzo1MFrOGK442A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDc3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.setUniqueIDForImportFailureOperationOutcomes(importPartitionWorkitem + \"_errors.ndjson\");\n          \n          \n            \n                    this.setUniqueIDForImportFailureOperationOutcomes(importPartitionWorkitem + \"_oo_errors.ndjson\");", "url": "https://github.com/IBM/FHIR/pull/979#discussion_r414070771", "createdAt": "2020-04-23T19:37:27Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -62,9 +62,14 @@ public ImportCheckPointData(String importPartitionWorkitem, int numOfProcessedRe\n         this.importPartitionWorkitem = importPartitionWorkitem;\n         this.numOfProcessedResources = numOfProcessedResources;\n         this.importPartitionResourceType = importPartitionResourceType;\n-        String ramdomID = FHIRUtil.getRandomKey(\"AES\");\n-        this.setUniqueIDForImportOperationOutcomes(ramdomID + \"_ok_file.ndjson\");\n-        this.setUniqueIDForImportFailureOperationOutcomes(ramdomID + \"_error_file.ndjson\");\n+\n+        // This naming pattern is used in bulkdata operation to generate file links for import OperationOutcomes.\n+        // e.g, for input file test1.ndjson, if there is any error during the importing, then the errors are in \n+        // test1.ndjson_errors.ndjson\n+        // Note: for those good imports, we don't really generate any meaningful OperationOutcome, so only error import \n+        //       OperationOutcomes are supported for now.\n+        this.setUniqueIDForImportOperationOutcomes(importPartitionWorkitem + \"_ok_file.ndjson\");\n+        this.setUniqueIDForImportFailureOperationOutcomes(importPartitionWorkitem + \"_errors.ndjson\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d053bcf76585eef215bed94e6eecdbebc864408f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MTAwMA==", "bodyText": "trying to avoid the word OK and _file, and be consistent.", "url": "https://github.com/IBM/FHIR/pull/979#discussion_r414071000", "createdAt": "2020-04-23T19:37:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -62,9 +62,14 @@ public ImportCheckPointData(String importPartitionWorkitem, int numOfProcessedRe\n         this.importPartitionWorkitem = importPartitionWorkitem;\n         this.numOfProcessedResources = numOfProcessedResources;\n         this.importPartitionResourceType = importPartitionResourceType;\n-        String ramdomID = FHIRUtil.getRandomKey(\"AES\");\n-        this.setUniqueIDForImportOperationOutcomes(ramdomID + \"_ok_file.ndjson\");\n-        this.setUniqueIDForImportFailureOperationOutcomes(ramdomID + \"_error_file.ndjson\");\n+\n+        // This naming pattern is used in bulkdata operation to generate file links for import OperationOutcomes.\n+        // e.g, for input file test1.ndjson, if there is any error during the importing, then the errors are in \n+        // test1.ndjson_errors.ndjson\n+        // Note: for those good imports, we don't really generate any meaningful OperationOutcome, so only error import \n+        //       OperationOutcomes are supported for now.\n+        this.setUniqueIDForImportOperationOutcomes(importPartitionWorkitem + \"_ok_file.ndjson\");\n+        this.setUniqueIDForImportFailureOperationOutcomes(importPartitionWorkitem + \"_errors.ndjson\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDc3MQ=="}, "originalCommit": {"oid": "d053bcf76585eef215bed94e6eecdbebc864408f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY2NDQ5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MDoyNlrOGK4--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNzozNlrOGK7FXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjU2OA==", "bodyText": "82-85 is repeated in many locations.  It seems that it is ideal for a small utility method shared across Jobs. and could use try-catch-close", "url": "https://github.com/IBM/FHIR/pull/979#discussion_r414072568", "createdAt": "2020-04-23T19:40:26Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -60,6 +77,30 @@ public void afterJob() {\n             return;\n         }\n \n+        // Generate import summary and pass it into ExitStatus of the job execution.\n+        // e.g, [3:0, 4:1] means 3 resources imported and 0 failures for the 1st file, and 4 imported and 1 failure for the 2nd file.\n+        JsonReader reader = Json.createReader(new StringReader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d053bcf76585eef215bed94e6eecdbebc864408f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNjk3Mw==", "bodyText": "yes,it's used by both listener and mapper. let me create a util function for it.", "url": "https://github.com/IBM/FHIR/pull/979#discussion_r414106973", "createdAt": "2020-04-23T20:37:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -60,6 +77,30 @@ public void afterJob() {\n             return;\n         }\n \n+        // Generate import summary and pass it into ExitStatus of the job execution.\n+        // e.g, [3:0, 4:1] means 3 resources imported and 0 failures for the 1st file, and 4 imported and 1 failure for the 2nd file.\n+        JsonReader reader = Json.createReader(new StringReader(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjU2OA=="}, "originalCommit": {"oid": "d053bcf76585eef215bed94e6eecdbebc864408f"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4984, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}