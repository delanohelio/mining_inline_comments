{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjA2NDU3", "number": 788, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowOToxMlrODotpLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyNDozOVrODrzLaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE3NDUyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowOToxMlrOF3bcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1ODo1NVrOF8V-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg==", "bodyText": "I think you need to run this... https://dba.stackexchange.com/a/30233/202822\nI think this should be a second set of parameters.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393665602", "createdAt": "2020-03-17T13:09:12Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTMxOQ==", "bodyText": "that answer is from 2012, i wonder if its still the \"best practice\".  it even mentions that the first runstats is more for older version...", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394451319", "createdAt": "2020-03-18T15:50:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTc2MA==", "bodyText": "RUNSTATS\nREORG\nRUNSTATS\nREBIND packages\nFLUSH PACKAGE CACHE DYNAMIC\n\ni wonder how long all that takes?\nat least with db2 on cloud, it should be running runstats automatically, although maybe its still \"best practice\" to run it before and after the reorg...will add it for now", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394451760", "createdAt": "2020-03-18T15:50:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1Njc1NA==", "bodyText": "on the dataset we had it took 10s of minutes in total", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394456754", "createdAt": "2020-03-18T15:56:47Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxODg1NQ==", "bodyText": "I added the requested logic in Db2Adapter.runStatement...but I only did the RUNSTATS sandwhich and not the rebind/flush for now.\nThen, later I decided that maybe the whole REORG statement is db2-specific, so I renamed the class to Db2ReorgTable (so I guess I could have had the logic here all-along...).", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398818855", "createdAt": "2020-03-26T18:58:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE4NjY2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/NopObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxMjoxMVrOF3bjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxMzo0OFrOF8atuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NzQ5Ng==", "bodyText": "might as well push this into the interface as a default implementation.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393667496", "createdAt": "2020-03-17T13:12:11Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/NopObject.java", "diffHunk": "@@ -33,6 +33,11 @@ public void apply(IDatabaseAdapter target) {\n         // We're NOP so we do nothing on purpose\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5NjU2OQ==", "bodyText": "didn't end up doing this one but can if you think its important.\ninstead, i opted to add \"ThrowUnsupportedOperationException\" in cases where we're trying to update objects that we shouldn't (i.e. tablespace and sequence).", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398896569", "createdAt": "2020-03-26T21:13:48Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/NopObject.java", "diffHunk": "@@ -33,6 +33,11 @@ public void apply(IDatabaseAdapter target) {\n         // We're NOP so we do nothing on purpose\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NzQ5Ng=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE5NDc0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxNDozMVrOF3bo9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxNDozN1rOF8avUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODg1NQ==", "bodyText": "don't do anything here. we shouldn't make a new tablespace, or alter here.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393668855", "createdAt": "2020-03-17T13:14:31Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "diffHunk": "@@ -44,6 +44,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5Njk3OA==", "bodyText": "now it throws if you try doing an update:\n        if (priorVersion != null && priorVersion > 0) {\n            throw new UnsupportedOperationException(\"Modifying tablespaces is not supported\");\n        }\n        apply(target);", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398896978", "createdAt": "2020-03-26T21:14:37Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "diffHunk": "@@ -44,6 +44,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODg1NQ=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI1OTE4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMDoyNVrOF3cSlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxNTozN1rOF81t4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA==", "bodyText": "I've been reading through the steps included.  I think we should add Migration to the VERSION_HISTORY tracking table and DatabaseObjectType.\nWithout these steps, it'd be impossible to resume the specific migration in a deterministic way.  For instance, alter table would not work again, and fail.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393679508", "createdAt": "2020-03-17T13:30:25Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -31,28 +31,34 @@\n  * BaseObject\n  */\n public abstract class BaseObject implements IDatabaseObject {\n-    \n+\n     private static final Logger logger = Logger.getLogger(BaseObject.class.getName());\n-    \n+\n     // Used to randomize a sleep after a deadlock failure\n     private static final SecureRandom random = new SecureRandom();\n-    \n+\n     private final String schemaName;\n     private final String objectName;\n     private final DatabaseObjectType objectType;\n-    \n+\n     // tag map\n     private final Map<String,String> tags = new HashMap<>();\n-    \n+\n     // the database objects we depend on\n     private final Set<IDatabaseObject> dependencies = new HashSet<>();\n \n     // The privileges granted to different types of user\n     private final Map<String, Set<Privilege>> userPrivilegeMap = new HashMap<>();\n-    \n+\n     // The version number of the application schema this object applies to\n     private final int version;\n-    \n+\n+    // Steps to perform before updating from a previous version of this object\n+    protected final List<Migration> preSteps;\n+\n+    // Steps to perform after updating from a previous version of this object\n+    protected final List<Migration> postSteps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTE1NQ==", "bodyText": "The updates should happen together in a transaction and should either fail or succeed together.\nThe migration steps themselves should have the logic of what versions they apply to and what versions they don't.\nWith that said, I'm not fundamentally opposed to adding Migrations to the VERSION_HISTORY if you think its important.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398899155", "createdAt": "2020-03-26T21:18:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -31,28 +31,34 @@\n  * BaseObject\n  */\n public abstract class BaseObject implements IDatabaseObject {\n-    \n+\n     private static final Logger logger = Logger.getLogger(BaseObject.class.getName());\n-    \n+\n     // Used to randomize a sleep after a deadlock failure\n     private static final SecureRandom random = new SecureRandom();\n-    \n+\n     private final String schemaName;\n     private final String objectName;\n     private final DatabaseObjectType objectType;\n-    \n+\n     // tag map\n     private final Map<String,String> tags = new HashMap<>();\n-    \n+\n     // the database objects we depend on\n     private final Set<IDatabaseObject> dependencies = new HashSet<>();\n \n     // The privileges granted to different types of user\n     private final Map<String, Set<Privilege>> userPrivilegeMap = new HashMap<>();\n-    \n+\n     // The version number of the application schema this object applies to\n     private final int version;\n-    \n+\n+    // Steps to perform before updating from a previous version of this object\n+    protected final List<Migration> preSteps;\n+\n+    // Steps to perform after updating from a previous version of this object\n+    protected final List<Migration> postSteps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzODk3OQ==", "bodyText": "I think this is something we probably want to monitor if we transform data from one column to another.  I also think our re-indexing should resolve my concern (more of an intuition)\nI think for what we have right now.  This is sufficient.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399338979", "createdAt": "2020-03-27T15:15:37Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -31,28 +31,34 @@\n  * BaseObject\n  */\n public abstract class BaseObject implements IDatabaseObject {\n-    \n+\n     private static final Logger logger = Logger.getLogger(BaseObject.class.getName());\n-    \n+\n     // Used to randomize a sleep after a deadlock failure\n     private static final SecureRandom random = new SecureRandom();\n-    \n+\n     private final String schemaName;\n     private final String objectName;\n     private final DatabaseObjectType objectType;\n-    \n+\n     // tag map\n     private final Map<String,String> tags = new HashMap<>();\n-    \n+\n     // the database objects we depend on\n     private final Set<IDatabaseObject> dependencies = new HashSet<>();\n \n     // The privileges granted to different types of user\n     private final Map<String, Set<Privilege>> userPrivilegeMap = new HashMap<>();\n-    \n+\n     // The version number of the application schema this object applies to\n     private final int version;\n-    \n+\n+    // Steps to perform before updating from a previous version of this object\n+    protected final List<Migration> preSteps;\n+\n+    // Steps to perform after updating from a previous version of this object\n+    protected final List<Migration> postSteps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI2OTA2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzowMVrOF3cZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzowMVrOF3cZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTE3Mg==", "bodyText": "I like this approach 1..* instead of one at a time.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681172", "createdAt": "2020-03-17T13:33:01Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropForeignKeyConstraint implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+    private final List<String> constraintNames;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public DropForeignKeyConstraint(String schemaName, String tableName, String... constraintName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI2OTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzowN1rOF3cZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxOToyN1rOF8a4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTI0Mw==", "bodyText": "2020\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681243", "createdAt": "2020-03-17T13:33:07Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTM4Ng==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398899386", "createdAt": "2020-03-26T21:19:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTI0Mw=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI3MTI1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/AllVersionHistoryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzozMlrOF3cagw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzozMlrOF3cagw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTUzOQ==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681539", "createdAt": "2020-03-17T13:33:32Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/AllVersionHistoryService.java", "diffHunk": "@@ -22,4 +22,10 @@ public boolean applies(String objectSchema, String objectType, String objectName\n         return true;\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI3MjE0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzo0MlrOF3cbFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzo0MlrOF3cbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTY4Ng==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681686", "createdAt": "2020-03-17T13:33:42Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java", "diffHunk": "@@ -7,7 +7,7 @@\n package com.ibm.fhir.database.utils.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI3MzA1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzo1N1rOF3cbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozMzo1N1rOF3cbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681830", "createdAt": "2020-03-17T13:33:57Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI3ODk5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozNToxN1rOF3cfUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyNDoxNFrOF8bBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA==", "bodyText": "I'm leaning towards NOT dropping columns...\n1 - we always leave a rollback point with the original data, and we can MOVE the data at any point, or re-index.\n2 - it should be relatively transparent.\nThoughts?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393682768", "createdAt": "2020-03-17T13:35:17Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropColumn implements IDatabaseStatement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzU5Mg==", "bodyText": "I'm torn on it.  I'd prefer not to create it going forward since its never used.  But I don't like the idea of some deployments having it and others not.  Hence the idea to drop it.  I think we could add a step to copy the data from that column into the LOW and HIGH columns if it makes us feel better.\nHowever, I'd prefer to just tell the 2 people that installed version 4.0.0 that they need to be aware of it and just be done.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394513592", "createdAt": "2020-03-18T17:18:54Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropColumn implements IDatabaseStatement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTY5OQ==", "bodyText": "We discussed as a team and decided to NOT drop the old column.\nWe do drop the indices that were using the column though.\nAlso, we will not be adding the column going forward, so users on version 4.0.1 that upgrade to 4.1.0 or higher will have this extra column sitting around.\nAlso, we do NOT copy this older column's data into the DATE_START or DATE_END columns, so any old resources that had date values indexed should get updated to use the new approach.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901699", "createdAt": "2020-03-26T21:24:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropColumn implements IDatabaseStatement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI4MzE5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozNjoyMVrOF3ciFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozNjoyMVrOF3ciFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MzQ3Ng==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393683476", "createdAt": "2020-03-17T13:36:21Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -16,7 +16,7 @@\n import com.ibm.fhir.task.api.ITaskGroup;\n \n /**\n- * Defines the Database Object's expected methods. \n+ * Defines the Database Object's expected methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI4NjIyOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozNzowNFrOF3cj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxMzo0NlrOF8cbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mzk2Mg==", "bodyText": "I'd say add a NO OP default here.  It'll be fairly repeatable for StoredProcedures or other NO OP content such as Tablespaces.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393683962", "createdAt": "2020-03-17T13:37:04Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -25,21 +25,29 @@\n      * @return\n      */\n     public int getVersion();\n-    \n+\n     /**\n      * Apply the DDL for this object to the target database\n+     * @param priorVersion\n      * @param target the database target\n      */\n     public void apply(IDatabaseAdapter target);\n-    \n+\n+    /**\n+     * Apply migration logic to bring the target database to the current level of this object\n+     * @param priorVersion\n+     * @param target the database target\n+     */\n+    public void apply(Integer priorVersion, IDatabaseAdapter target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDU5Ng==", "bodyText": "didn't end up doing this one but can if you think its important.\ninstead, i opted to add \"ThrowUnsupportedOperationException\" in cases where we're trying to update objects that we shouldn't (i.e. tablespace and sequence).", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398924596", "createdAt": "2020-03-26T22:13:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -25,21 +25,29 @@\n      * @return\n      */\n     public int getVersion();\n-    \n+\n     /**\n      * Apply the DDL for this object to the target database\n+     * @param priorVersion\n      * @param target the database target\n      */\n     public void apply(IDatabaseAdapter target);\n-    \n+\n+    /**\n+     * Apply migration logic to bring the target database to the current level of this object\n+     * @param priorVersion\n+     * @param target the database target\n+     */\n+    public void apply(Integer priorVersion, IDatabaseAdapter target);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mzk2Mg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5MzY3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozODo1OVrOF3co_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjozMzo0OFrOF8c57w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTI0NQ==", "bodyText": "I think documenting the method.\nStarting from the prior version, the Migration implements as a set of steps that are sequentially executed.\nAlso the set of IDatabaseStatements, maybe they should indicate if each step is idempotent.\nAlso a minor comment, to be consistent in this code base, shouldn't it be IMigration.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685245", "createdAt": "2020-03-17T13:38:59Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+\n+/**\n+ * A database migration step\n+ */\n+public interface Migration {\n+    public List<IDatabaseStatement> migrateFrom(Integer priorVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMjQ2Mw==", "bodyText": "added this javadoc:\n    /**\n     * Migrate from some previous version to the current version of this database object\n     *\n     * @param priorVersion\n     *            the version being migrated from\n     * @return a list of statements to be executed sequentially to bring a database object from the prior version to the\n     *         current version\n     * @implSpec this method should only be executed when the current version > priorVersion and so the steps need not be\n     *         idempotent\n     */\n\n\nAlso a minor comment, to be consistent in this code base, shouldn't it be IMigration.\n\nI'm pretending I didn't see this part ;-). @JohnTimm", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398932463", "createdAt": "2020-03-26T22:33:48Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+\n+/**\n+ * A database migration step\n+ */\n+public interface Migration {\n+    public List<IDatabaseStatement> migrateFrom(Integer priorVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTI0NQ=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5NTQ3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ObjectGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTozMFrOF3cqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTozMFrOF3cqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTU1NQ==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685555", "createdAt": "2020-03-17T13:39:30Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ObjectGroup.java", "diffHunk": "@@ -22,10 +22,10 @@\n \n     // the list of objects in our group\n     private final List<IDatabaseObject> group = new ArrayList<>();\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5NjQzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/PhysicalDataModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo0OVrOF3cq6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo0OVrOF3cq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTczOA==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685738", "createdAt": "2020-03-17T13:39:49Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/PhysicalDataModel.java", "diffHunk": "@@ -32,27 +32,27 @@\n  */\n public class PhysicalDataModel implements IDataModel {\n     private static final Logger logger = Logger.getLogger(PhysicalDataModel.class.getName());\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5NzAxOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo1OVrOF3crUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo1OVrOF3crUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTg0MQ==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685841", "createdAt": "2020-03-17T13:39:59Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -12,14 +12,13 @@\n import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n \n /**\n- * The definition of a stored procedure, whose content is provided by a Supplier<String>\n- * function\n+ * The definition of a stored procedure, whose content is provided by a Supplier<String> function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5OTI0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MDozNFrOF3cs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoxMzo0MlrOF8dwkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjIyOA==", "bodyText": "Yes, pre-migration logic makes sense here.\nAs does post-migration logic.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393686228", "createdAt": "2020-03-17T13:40:34Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NjQ1MA==", "bodyText": "pre and post-migration logic has been replaced by a single list of \"migrations\" for now.\nif we end up needing pre and post-migration logic for procedures, we'll need to revisit that later.\nfor now, i'm just logging a warning if we get to ProcedureDef.apply(priorVersion, target) with migration steps, because instead it just calls apply (which invokes create or replace)", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398946450", "createdAt": "2020-03-26T23:13:42Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjIyOA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMwMzE2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MToyNFrOF3cvKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxNzozOVrOF81zcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA==", "bodyText": "how does synchronized help with deadlocks here? it's synchronized in java code? I realize you are not the original person to author it... but if you know...", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393686824", "createdAt": "2020-03-17T13:41:24Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NzA3OQ==", "bodyText": "i guess the idea is just to allow a single thread to call createOrReplaceProcedure at a time (for a given target at least)...i wonder if we should do something similar for adding foreign key constraints...", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398947079", "createdAt": "2020-03-26T23:15:21Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MDQwMw==", "bodyText": "that's a good point... now we thought it out, let's monitor it and make it consistent if we need to", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399340403", "createdAt": "2020-03-27T15:17:39Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMwNjM0OnYy", "diffSide": "LEFT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MjoxNFrOF3cxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxOToyOFrOF814kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA==", "bodyText": "I actually agree with Reorg.\nI don't think it should be Reorg Table\nYou can reorg indices as well and other database objects.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393687354", "createdAt": "2020-03-17T13:42:14Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "diffHunk": "@@ -1,14 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.database.utils.model;\n-\n-/**\n- * Representing the SQL function\n- */\n-public class Reorg {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0Nzc5MQ==", "bodyText": "well the javadoc and the arguments all say table... how about Db2Reorg?\ndoes Reorg apply to other dbs besides Db2?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398947791", "createdAt": "2020-03-26T23:17:43Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "diffHunk": "@@ -1,14 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.database.utils.model;\n-\n-/**\n- * Representing the SQL function\n- */\n-public class Reorg {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MTYwMw==", "bodyText": "That's a good question.  MSSQL uses REORGANIZE https://docs.microsoft.com/en-us/sql/relational-databases/indexes/reorganize-and-rebuild-indexes?view=sql-server-ver15", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399341603", "createdAt": "2020-03-27T15:19:18Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "diffHunk": "@@ -1,14 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.database.utils.model;\n-\n-/**\n- * Representing the SQL function\n- */\n-public class Reorg {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MTcxMg==", "bodyText": "I'm OK resolving.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399341712", "createdAt": "2020-03-27T15:19:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "diffHunk": "@@ -1,14 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.database.utils.model;\n-\n-/**\n- * Representing the SQL function\n- */\n-public class Reorg {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMxMDk5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MzoyMlrOF3c0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMTozMVrOF8d7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODE0Mw==", "bodyText": "we should leave a note here to make it intentional that grants should be carefully evaluated to see if there is an update required in the Migration step, such as a change to the operational user.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393688143", "createdAt": "2020-03-17T13:43:22Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?\n+            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        }\n+    }\n+\n     @Override\n     public void drop(IDatabaseAdapter target) {\n         target.dropProcedure(getSchemaName(), getObjectName());\n     }\n-    \n-       @Override\n-       protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n-            target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);\n-        }\n \n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTEzOQ==", "bodyText": "not sure why this code is showing as changed...all I did is fix the indentation.\ndo you think having that comment here makes sense, or is there a spot that makes more sense?\nmaybe at the class level on ProcedureDef?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398949139", "createdAt": "2020-03-26T23:21:31Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?\n+            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        }\n+    }\n+\n     @Override\n     public void drop(IDatabaseAdapter target) {\n         target.dropProcedure(getSchemaName(), getObjectName());\n     }\n-    \n-       @Override\n-       protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n-            target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);\n-        }\n \n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODE0Mw=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMxNDcwOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NDoxN1rOF3c2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NDoxN1rOF3c2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODc2NA==", "bodyText": "I think we should pass in DatabaseObject and choose the object name to reorg or inherit off of the Reorg object (see Reorg below)", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393688764", "createdAt": "2020-03-17T13:44:17Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMxNzkzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NTowOFrOF3c46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyNDowOFrOF8d-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTMyMg==", "bodyText": "We should only create this one time. I actually don't even think this is in our schema today.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689322", "createdAt": "2020-03-17T13:45:08Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "diffHunk": "@@ -39,6 +39,11 @@ public void apply(IDatabaseAdapter target) {\n         target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDAzOQ==", "bodyText": "yeah, i think this was something we used in our old (DSTU2) schema.  it got dropped when we moved to a dynamic statement because I guess those don't support array types or something (Robin knows the details).\nfor now, I've just added the same logic that I added for other things that shouldn't get updated:\n        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n            throw new UnsupportedOperationException(\"Upgrading row array types is not supported\");\n        }", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398950039", "createdAt": "2020-03-26T23:24:08Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "diffHunk": "@@ -39,6 +39,11 @@ public void apply(IDatabaseAdapter target) {\n         target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTMyMg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMxOTQzOnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NToyOFrOF3c5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyODo1MlrOF8eEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU1MQ==", "bodyText": "similar comment to RowType.  we don't actually use it right now.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689551", "createdAt": "2020-03-17T13:45:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "diffHunk": "@@ -29,22 +29,27 @@ public void apply(IDatabaseAdapter target) {\n         target.createRowType(getSchemaName(), getObjectName(), columns);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createRowType(getSchemaName(), getObjectName(), columns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTU5Mw==", "bodyText": "same resolution as RowArrayType", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398951593", "createdAt": "2020-03-26T23:28:52Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "diffHunk": "@@ -29,22 +29,27 @@ public void apply(IDatabaseAdapter target) {\n         target.createRowType(getSchemaName(), getObjectName(), columns);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createRowType(getSchemaName(), getObjectName(), columns);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU1MQ=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyMTY4OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjowMVrOF3c7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjowMVrOF3c7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTkxNw==", "bodyText": "I firmly believe we should have a NoOp here.  we should not create a sequence again.  only one time.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689917", "createdAt": "2020-03-17T13:46:01Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -32,11 +32,16 @@ public void apply(IDatabaseAdapter target) {\n         target.createSequence(getSchemaName(), getObjectName(), this.cache);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createSequence(getSchemaName(), getObjectName(), this.cache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyMjU2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjoxM1rOF3c70w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjoxM1rOF3c70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDA2Nw==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690067", "createdAt": "2020-03-17T13:46:13Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "diffHunk": "@@ -18,7 +18,7 @@\n  */\n public class RowType extends BaseObject {\n     private final List<ColumnBase> columns = new ArrayList<>();\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyMzU3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjoyOFrOF3c8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NjoyOFrOF3c8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDIzOA==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690238", "createdAt": "2020-03-17T13:46:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "diffHunk": "@@ -39,6 +39,11 @@ public void apply(IDatabaseAdapter target) {\n         target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyNTE2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Njo0NFrOF3c9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Njo0NFrOF3c9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDQ3Mw==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690473", "createdAt": "2020-03-17T13:46:44Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -32,11 +32,16 @@ public void apply(IDatabaseAdapter target) {\n         target.createSequence(getSchemaName(), getObjectName(), this.cache);\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyOTE3OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Nzo0MVrOF3c_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Nzo0MVrOF3c_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTExMw==", "bodyText": "we should not have logic here to apply a new version.  Only the first time. it's like a sequence, very integral to the overall operation.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691113", "createdAt": "2020-03-17T13:47:41Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "diffHunk": "@@ -12,35 +12,31 @@\n \n /**\n  * Adds a session variable to the database\n-\n- *\n  */\n public class SessionVariableDef extends BaseObject {\n-    \n+\n     public SessionVariableDef(String schemaName, String variableName, int version) {\n         super(schemaName, variableName, DatabaseObjectType.VARIABLE, version);\n     }\n-    \n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#apply(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n     @Override\n     public void apply(IDatabaseAdapter target) {\n         target.createIntVariable(getSchemaName(), getObjectName());\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createIntVariable(getSchemaName(), getObjectName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMyOTU0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Nzo0OFrOF3dAIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0Nzo0OFrOF3dAIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTE3MQ==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691171", "createdAt": "2020-03-17T13:47:48Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "diffHunk": "@@ -12,35 +12,31 @@\n \n /**\n  * Adds a session variable to the database\n-\n- *\n  */\n public class SessionVariableDef extends BaseObject {\n-    \n+\n     public SessionVariableDef(String schemaName, String variableName, int version) {\n         super(schemaName, variableName, DatabaseObjectType.VARIABLE, version);\n     }\n-    \n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#apply(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n     @Override\n     public void apply(IDatabaseAdapter target) {\n         target.createIntVariable(getSchemaName(), getObjectName());\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMzMDM2OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0ODowMFrOF3dApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0ODowMFrOF3dApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTMwMA==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691300", "createdAt": "2020-03-17T13:48:00Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "diffHunk": "@@ -18,8 +18,8 @@\n /**\n  * Used to create and drop tablespaces within a database\n  */\n-public class Tablespace extends DatabaseObject {    \n-    \n+public class Tablespace extends DatabaseObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMzMTg5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0ODoyOFrOF3dBtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0ODoyOFrOF3dBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTU3Mw==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691573", "createdAt": "2020-03-17T13:48:28Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "diffHunk": "@@ -24,10 +24,10 @@\n \n     // The name of the admin schema we are working with\n     private final String adminSchemaName;\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMzODY1OnYy", "diffSide": "LEFT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1MDowOFrOF3dGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1MDowOFrOF3dGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MjcwOQ==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393692709", "createdAt": "2020-03-17T13:50:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "diffHunk": "@@ -23,24 +23,17 @@\n     // history information collected during schema application\n     private final ConcurrentHashMap<String, Integer> newHistory = new ConcurrentHashMap<>();\n \n-    /* (non-Javadoc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM0NDM4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1MTozMFrOF3dJug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxNzo0OVrOF8ch0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzYyNg==", "bodyText": "Is this really testing VersionHistory service? shouldn't it return -1 or something to confirm?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393693626", "createdAt": "2020-03-17T13:51:30Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "diffHunk": "@@ -64,4 +57,12 @@ public void addTestHistory(String objectSchema, String objectType, String object\n     public static String makeKey(String objectSchema, String objectType, String objectName) {\n         return objectSchema + \":\" + objectType + \":\" + objectName;\n     }\n+\n+    /**\n+     * Always returns null\n+     */\n+    @Override\n+    public Integer getVersion(String objectSchema, String objectType, String objectName) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNjI5MQ==", "bodyText": "We use the real VersionHistoryService for anywhere that needs a true version (like in the new DerbyMigrationTest).\nPerhaps we could return a -1 (or a 0) here to avoid having the null checks on the apply methods, but I went with null since we were already using Integer arguments (and not ints).", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398926291", "createdAt": "2020-03-26T22:17:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "diffHunk": "@@ -64,4 +57,12 @@ public void addTestHistory(String objectSchema, String objectType, String object\n     public static String makeKey(String objectSchema, String objectType, String objectName) {\n         return objectSchema + \":\" + objectType + \":\" + objectName;\n     }\n+\n+    /**\n+     * Always returns null\n+     */\n+    @Override\n+    public Integer getVersion(String objectSchema, String objectType, String objectName) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzYyNg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM2Mjk1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1NTo1MVrOF3dVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1NjowOFrOF3dWWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NjY3Nw==", "bodyText": "if you apply this (say 2 steps)\nstep 1 alter table add column succeeds\nstep 2 move content (say these are in pre-steps)\nwhat happens to the above.\nis it idempotent? is it in a deterministic state?  right now I don't think we could successfully migrate beyond one step one version in a deterministic way.\nI think we have to track the migration steps in VERSION_HISTORY and filter the successful steps.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393696677", "createdAt": "2020-03-17T13:55:51Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java", "diffHunk": "@@ -137,6 +137,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        for (Migration step : preSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n+        }\n+        apply(target);\n+        for (Migration step : postSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Njg1Ng==", "bodyText": "maybe even log out that the step is being skipped.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393696856", "createdAt": "2020-03-17T13:56:08Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java", "diffHunk": "@@ -137,6 +137,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        for (Migration step : preSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n+        }\n+        apply(target);\n+        for (Migration step : postSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NjY3Nw=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM2NzE5OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1Njo1NVrOF3dYgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1Njo1NVrOF3dYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NzQxMA==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393697410", "createdAt": "2020-03-17T13:56:55Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM3MDU0OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1Nzo0N1rOF3dayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyMDowNVrOF816Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg==", "bodyText": "The Title of the Java class makes me realize that we don't VERSION Indices.  I think we should (we have altered the signatures of a few of them without renaming them - drop-add)", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393697992", "createdAt": "2020-03-17T13:57:47Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMzIwMA==", "bodyText": "should we open it as a future task or you'd like to see that change as part of this PR?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398933200", "createdAt": "2020-03-26T22:35:43Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjE1NA==", "bodyText": "Let's open a future task.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399342154", "createdAt": "2020-03-27T15:20:05Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM3NjY2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1OToxM1rOF3detQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo0MjowM1rOF8dF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5ODk5Nw==", "bodyText": "I think the addPostStep should be backed by an ArrayList (I know we talked about a queue as well.  As long as all the statements are deterministic).", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393698997", "createdAt": "2020-03-17T13:59:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNTU0Mg==", "bodyText": "addPostStep has been replaced by addMigration, but the comment still applies.\nthe actual ArrayList is instantiated in the VersionedSchemaObject constructor:\n    public VersionedSchemaObject(String schemaName, String objectName) {\n        DataDefinitionUtil.assertValidNames(schemaName, objectName);\n        this.schemaName = schemaName;\n        this.objectName = objectName;\n        this.migrations = new ArrayList<>();\n    }", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398935542", "createdAt": "2020-03-26T22:42:03Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5ODk5Nw=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM3ODY4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1OTo0NlrOF3dgHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyNTo0NFrOF82KGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA==", "bodyText": "I don't think we should drop this column.  I think we leave it for a minimum number of versions.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393699358", "createdAt": "2020-03-17T13:59:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == 1) {\n+                        statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTg2MA==", "bodyText": "If we decide to keep it we should use a constant for DATE_VALUE_DROPPED_COLUMN something to clearly indicate don't use it.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393699860", "createdAt": "2020-03-17T14:00:30Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == 1) {\n+                        statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjcxNw==", "bodyText": "We decided not to add migration logic which drops the column, but did we remove it from v2 of the table.  I added the following comment to try making it clear:\n                        // Note: version 1 of this table had a DATE_VALUE column.\n                        // We chose not to DROP it here, but it is not used going forward.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398936717", "createdAt": "2020-03-26T22:45:11Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == 1) {\n+                        statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjIwMA==", "bodyText": "Now that I added the DROP back in, I used this suggestion to use a constant named DATE_VALUE_DROPPED_COLUMN", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399346200", "createdAt": "2020-03-27T15:25:44Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == 1) {\n+                        statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}, "originalCommit": {"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQ3Nzk1OnYy", "diffSide": "RIGHT", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowODo0N1rOF8WVIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTozNTo1N1rOF8bYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ==", "bodyText": "I didn't change this to 1000, should we change to 1000 here?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398824739", "createdAt": "2020-03-26T19:08:47Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -174,12 +181,12 @@ public boolean doesTableExist(String schemaName, String tableName) {\n \n     @Override\n     public void createSequence(String schemaName, String sequenceName, int cache) {\n-        /*CREATE SEQUENCE fhir_sequence\n-             AS BIGINT\n-     START WITH 1\n-          CACHE 1000\n-       NO CYCLE;\n-    */\n+        /* CREATE SEQUENCE fhir_sequence\n+         *     AS BIGINT\n+         *     START WITH 1\n+         *     CACHE 1000\n+         *     NO CYCLE;\n+        */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n         final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDgzNw==", "bodyText": "to align with db2", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398824837", "createdAt": "2020-03-26T19:08:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -174,12 +181,12 @@ public boolean doesTableExist(String schemaName, String tableName) {\n \n     @Override\n     public void createSequence(String schemaName, String sequenceName, int cache) {\n-        /*CREATE SEQUENCE fhir_sequence\n-             AS BIGINT\n-     START WITH 1\n-          CACHE 1000\n-       NO CYCLE;\n-    */\n+        /* CREATE SEQUENCE fhir_sequence\n+         *     AS BIGINT\n+         *     START WITH 1\n+         *     CACHE 1000\n+         *     NO CYCLE;\n+        */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n         final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNzQyMQ==", "bodyText": "no opinion on this one...i forget why you said it was better to start at 1000 even for db2", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398907421", "createdAt": "2020-03-26T21:35:57Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -174,12 +181,12 @@ public boolean doesTableExist(String schemaName, String tableName) {\n \n     @Override\n     public void createSequence(String schemaName, String sequenceName, int cache) {\n-        /*CREATE SEQUENCE fhir_sequence\n-             AS BIGINT\n-     START WITH 1\n-          CACHE 1000\n-       NO CYCLE;\n-    */\n+        /* CREATE SEQUENCE fhir_sequence\n+         *     AS BIGINT\n+         *     START WITH 1\n+         *     CACHE 1000\n+         *     NO CYCLE;\n+        */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n         final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUyMjI2OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMDoyMFrOF8WwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNjo1NlrOF87DQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTY1MQ==", "bodyText": "how about we use the ant plugin here.\nit'd be platform agnostic.\nthe commandline args below don't necessarily work on Windows", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398831651", "createdAt": "2020-03-26T19:20:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMzM5Ng==", "bodyText": "i'm open to it.  i maybe should have removed this commented out step since it doesn't work for creating the 4.0.1 schema, but left it here as a placeholder for that approach.  maybe just a comment above it to say to consider/test on windows?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398903396", "createdAt": "2020-03-26T21:27:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTY1MQ=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjkzMg==", "bodyText": "or drop into a platform profile? or make a future todo", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399342932", "createdAt": "2020-03-27T15:21:11Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTY1MQ=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjM3MQ==", "bodyText": "yeah, lets revisit this when we get to migration post 4.1.0", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399426371", "createdAt": "2020-03-27T17:26:56Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTY1MQ=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUyMzgzOnYy", "diffSide": "LEFT", "path": "fhir-persistence-schema/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMDo0N1rOF8WxPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyODo1NlrOF8bKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTkzMw==", "bodyText": "are we removing it on each build?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398831933", "createdAt": "2020-03-26T19:20:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>\n+                <artifactId>exec-maven-plugin</artifactId>\n+                <version>1.6.0</version>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <executions>\n+                    <execution>\n+                        <id>deployPriorVersions</id>\n+                        <phase>test</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>bash</executable>\n+                            <commandlineArgs>deployPriorVersions.sh</commandlineArgs>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin> -->\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-clean-plugin</artifactId>\n                 <configuration>\n                     <filesets>\n-                        <fileset>\n-                            <directory>derby</directory>\n-                            <followSymlinks>false</followSymlinks>\n-                            <useDefaultExcludes>true</useDefaultExcludes>\n-                            <includes>\n-                                <include>**/*</include>\n-                            </includes>\n-                        </fileset>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMzk4NA==", "bodyText": "this \"derby\" directory no longer exists because i moved the derby instance into the target dir a while back.\nnow that its in the target dir, its cleaned by mvn clean by default.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398903984", "createdAt": "2020-03-26T21:28:56Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/pom.xml", "diffHunk": "@@ -45,24 +45,35 @@\n \n     <build>\n         <plugins>\n+            <!-- <plugin>\n+                <artifactId>exec-maven-plugin</artifactId>\n+                <version>1.6.0</version>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <executions>\n+                    <execution>\n+                        <id>deployPriorVersions</id>\n+                        <phase>test</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>bash</executable>\n+                            <commandlineArgs>deployPriorVersions.sh</commandlineArgs>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin> -->\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-clean-plugin</artifactId>\n                 <configuration>\n                     <filesets>\n-                        <fileset>\n-                            <directory>derby</directory>\n-                            <followSymlinks>false</followSymlinks>\n-                            <useDefaultExcludes>true</useDefaultExcludes>\n-                            <includes>\n-                                <include>**/*</include>\n-                            </includes>\n-                        </fileset>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTkzMw=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUyNTY1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMToyMlrOF8WyfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMToyMlrOF8WyfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMjI1Mw==", "bodyText": "2020", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398832253", "createdAt": "2020-03-26T19:21:22Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -36,13 +36,17 @@\n import com.ibm.fhir.database.utils.api.TenantStatus;\n import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n import com.ibm.fhir.database.utils.common.JdbcConnectionProvider;\n+import com.ibm.fhir.database.utils.common.JdbcPropertyAdapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUzMzI5OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMzoyN1rOF8W3LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyNDoyN1rOF8bCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzQ1Mg==", "bodyText": "add a comment on this class purpose", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398833452", "createdAt": "2020-03-26T19:23:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java", "diffHunk": "@@ -0,0 +1,706 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_DRUG_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_MEDICATIONS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_PROBLEMS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATA;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IS_DELETED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.ITEM_LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LAST_UPDATED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCE_ITEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_CURRENT_REFS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.VERSION_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.model.Generated;\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.schema.control.FhirSchemaTags;\n+\n+/**\n+ * Utility to create all the tables associated with a particular resource type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTgxNg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901816", "createdAt": "2020-03-26T21:24:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java", "diffHunk": "@@ -0,0 +1,706 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_DRUG_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_MEDICATIONS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_PROBLEMS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATA;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IS_DELETED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.ITEM_LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LAST_UPDATED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCE_ITEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_CURRENT_REFS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.VERSION_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.model.Generated;\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.schema.control.FhirSchemaTags;\n+\n+/**\n+ * Utility to create all the tables associated with a particular resource type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzQ1Mg=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUzNTMxOnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMzo1NVrOF8W4Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyNDozNFrOF8bCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzc0Ng==", "bodyText": "add a comment on this class purpose", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398833746", "createdAt": "2020-03-26T19:23:55Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_REF_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANTS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_HASH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEYS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEY_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SALT;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_STATUS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.NopObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.Privilege;\n+import com.ibm.fhir.database.utils.model.ProcedureDef;\n+import com.ibm.fhir.database.utils.model.RowArrayType;\n+import com.ibm.fhir.database.utils.model.RowTypeBuilder;\n+import com.ibm.fhir.database.utils.model.Sequence;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.model.type.code.FHIRResourceType;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+import com.ibm.fhir.schema.control.Replacer;\n+import com.ibm.fhir.schema.control.SchemaGeneratorUtil;\n+\n+/**\n+ * Encapsulates the generation of the FHIR schema artifacts from IBM FHIR Server version 4.0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTg4Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901882", "createdAt": "2020-03-26T21:24:34Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_REF_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANTS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_HASH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEYS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEY_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SALT;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_STATUS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.NopObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.Privilege;\n+import com.ibm.fhir.database.utils.model.ProcedureDef;\n+import com.ibm.fhir.database.utils.model.RowArrayType;\n+import com.ibm.fhir.database.utils.model.RowTypeBuilder;\n+import com.ibm.fhir.database.utils.model.Sequence;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.model.type.code.FHIRResourceType;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+import com.ibm.fhir.schema.control.Replacer;\n+import com.ibm.fhir.schema.control.SchemaGeneratorUtil;\n+\n+/**\n+ * Encapsulates the generation of the FHIR schema artifacts from IBM FHIR Server version 4.0.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzc0Ng=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUzODY1OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyNDozOVrOF8W6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNjoxN1rOF87Bog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw==", "bodyText": "does the set variable work for derby?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398834233", "createdAt": "2020-03-26T19:24:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMDkzMA==", "bodyText": "Ah, I expect not.  Main doesn't even try it because it skips allocateTenant when dbType == DERBY.", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398920930", "createdAt": "2020-03-26T22:05:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMTQ0Mw==", "bodyText": "How should we handle for now?  Maybe we just add an @implNote to say it only works for multi-tenant schemas?\nOr should we overload the constructor and let the class's user tell us if its for a multi-tenant schema or not?", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398921443", "createdAt": "2020-03-26T22:06:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MzE2NQ==", "bodyText": "@impl note works for me", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399343165", "createdAt": "2020-03-27T15:21:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNTk1NA==", "bodyText": "I added the @implNote to the class's javadoc...maybe i should have done it on the method too, but lets call it good for now", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399425954", "createdAt": "2020-03-27T17:26:17Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, "originalCommit": {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 111, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}