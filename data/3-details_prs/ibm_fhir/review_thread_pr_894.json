{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjcwMjY1", "number": 894, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NDoyN1rODvQigg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1MDozNVrODvQrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgwNjQyOnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NDoyN1rOGBlItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo0Mzo0MFrOGBnKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMDE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static long getLocallFileSize(String filePath) throws Exception {\n          \n          \n            \n                public static long getLocalFileSize(String filePath) throws Exception {", "url": "https://github.com/IBM/FHIR/pull/894#discussion_r404310197", "createdAt": "2020-04-06T18:44:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -288,6 +297,11 @@ public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesT\n     }\n \n \n+    public static long getLocallFileSize(String filePath) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c407a3f57cf3160ffa6cf26f5e9b291ea28502ff"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0MzM0NA==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/894#discussion_r404343344", "createdAt": "2020-04-06T19:43:40Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -288,6 +297,11 @@ public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesT\n     }\n \n \n+    public static long getLocallFileSize(String filePath) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMDE5Nw=="}, "originalCommit": {"oid": "c407a3f57cf3160ffa6cf26f5e9b291ea28502ff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgyODg5OnYy", "diffSide": "RIGHT", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1MDozNVrOGBlWtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo0Mzo1MlrOGBnKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new Exception (\"Doesn't support data source storage type!\");\n          \n          \n            \n                            throw new Exception(\"Doesn't support data source storage type!\");", "url": "https://github.com/IBM/FHIR/pull/894#discussion_r404313782", "createdAt": "2020-04-06T18:50:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -167,12 +152,46 @@ public Object readItem() throws Exception {\n \n     @Override\n     public void open(Serializable checkpoint) throws Exception {\n+        if (BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.AWSS3)\n+                || BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.IBMCOS)) {\n+            cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"open: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"open: Got CosClient successfully!\");\n+            }\n+        }\n+\n         if (checkpoint != null) {\n             ImportCheckPointData checkPointData = (ImportCheckPointData) checkpoint;\n             importPartitionWorkitem = checkPointData.getImportPartitionWorkitem();\n             numOfLinesToSkip = checkPointData.getNumOfProcessedResources();\n+            checkPointData.setInFlyRateBeginMilliSeconds(System.currentTimeMillis());\n             stepCtx.setTransientUserData(ImportTransientUserData.fromImportCheckPointData(checkPointData));\n+        } else {\n+            ImportTransientUserData chunkData = new ImportTransientUserData(importPartitionWorkitem, numOfLinesToSkip, importPartitionResourceType);\n+            long importFileSize = 0;\n+            switch (BulkImportDataSourceStorageType.from(dataSourceStorageType)) {\n+            case HTTPS:\n+                importFileSize = BulkDataUtils.getHttpsFileSize(importPartitionWorkitem);\n+                break;\n+            case FILE:\n+                importFileSize = BulkDataUtils.getLocallFileSize(importPartitionWorkitem);\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                importFileSize = BulkDataUtils.getCosFileSize(cosClient, cosBucketName, importPartitionWorkitem);\n+                break;\n+            default:\n+                throw new Exception (\"Doesn't support data source storage type!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c407a3f57cf3160ffa6cf26f5e9b291ea28502ff"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNTAwNg==", "bodyText": "I generally\n\nuse IllegalStateException in default switch statements that come from enums; and\nprint the name or value of the enum value that caused it in the message\n\nHowever, neither one very important given that we should never get here unless someone has added a new value to the enum without updating the places its used from.", "url": "https://github.com/IBM/FHIR/pull/894#discussion_r404315006", "createdAt": "2020-04-06T18:52:45Z", "author": {"login": "lmsurpre"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -167,12 +152,46 @@ public Object readItem() throws Exception {\n \n     @Override\n     public void open(Serializable checkpoint) throws Exception {\n+        if (BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.AWSS3)\n+                || BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.IBMCOS)) {\n+            cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"open: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"open: Got CosClient successfully!\");\n+            }\n+        }\n+\n         if (checkpoint != null) {\n             ImportCheckPointData checkPointData = (ImportCheckPointData) checkpoint;\n             importPartitionWorkitem = checkPointData.getImportPartitionWorkitem();\n             numOfLinesToSkip = checkPointData.getNumOfProcessedResources();\n+            checkPointData.setInFlyRateBeginMilliSeconds(System.currentTimeMillis());\n             stepCtx.setTransientUserData(ImportTransientUserData.fromImportCheckPointData(checkPointData));\n+        } else {\n+            ImportTransientUserData chunkData = new ImportTransientUserData(importPartitionWorkitem, numOfLinesToSkip, importPartitionResourceType);\n+            long importFileSize = 0;\n+            switch (BulkImportDataSourceStorageType.from(dataSourceStorageType)) {\n+            case HTTPS:\n+                importFileSize = BulkDataUtils.getHttpsFileSize(importPartitionWorkitem);\n+                break;\n+            case FILE:\n+                importFileSize = BulkDataUtils.getLocallFileSize(importPartitionWorkitem);\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                importFileSize = BulkDataUtils.getCosFileSize(cosClient, cosBucketName, importPartitionWorkitem);\n+                break;\n+            default:\n+                throw new Exception (\"Doesn't support data source storage type!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzc4Mg=="}, "originalCommit": {"oid": "c407a3f57cf3160ffa6cf26f5e9b291ea28502ff"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0MzQ2Mg==", "bodyText": "done", "url": "https://github.com/IBM/FHIR/pull/894#discussion_r404343462", "createdAt": "2020-04-06T19:43:52Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -167,12 +152,46 @@ public Object readItem() throws Exception {\n \n     @Override\n     public void open(Serializable checkpoint) throws Exception {\n+        if (BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.AWSS3)\n+                || BulkImportDataSourceStorageType.from(dataSourceStorageType).equals(BulkImportDataSourceStorageType.IBMCOS)) {\n+            cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl, cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"open: Failed to get CosClient!\");\n+                throw new Exception(\"Failed to get CosClient!!\");\n+            } else {\n+                logger.finer(\"open: Got CosClient successfully!\");\n+            }\n+        }\n+\n         if (checkpoint != null) {\n             ImportCheckPointData checkPointData = (ImportCheckPointData) checkpoint;\n             importPartitionWorkitem = checkPointData.getImportPartitionWorkitem();\n             numOfLinesToSkip = checkPointData.getNumOfProcessedResources();\n+            checkPointData.setInFlyRateBeginMilliSeconds(System.currentTimeMillis());\n             stepCtx.setTransientUserData(ImportTransientUserData.fromImportCheckPointData(checkPointData));\n+        } else {\n+            ImportTransientUserData chunkData = new ImportTransientUserData(importPartitionWorkitem, numOfLinesToSkip, importPartitionResourceType);\n+            long importFileSize = 0;\n+            switch (BulkImportDataSourceStorageType.from(dataSourceStorageType)) {\n+            case HTTPS:\n+                importFileSize = BulkDataUtils.getHttpsFileSize(importPartitionWorkitem);\n+                break;\n+            case FILE:\n+                importFileSize = BulkDataUtils.getLocallFileSize(importPartitionWorkitem);\n+                break;\n+            case AWSS3:\n+            case IBMCOS:\n+                importFileSize = BulkDataUtils.getCosFileSize(cosClient, cosBucketName, importPartitionWorkitem);\n+                break;\n+            default:\n+                throw new Exception (\"Doesn't support data source storage type!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzc4Mg=="}, "originalCommit": {"oid": "c407a3f57cf3160ffa6cf26f5e9b291ea28502ff"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 164, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}