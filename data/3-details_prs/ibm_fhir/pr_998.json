{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDEwNDcy", "number": 998, "title": "Move to @RolesAllowed security, update server config, and introduce jwtRP.xml", "bodyText": "Move webapp security info into RolesAllowed annotations on a per-JAXRS-resource basis and make the metadata and .well-known/smart-configuration endpoints open by default\n\n\nIntroduce jwtRP.xml as a new configDropin alternative to oauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\n\nRe-introduce singleSignonEnabled=\"false\" on the\ndefault server.xml and override this setting within the\noidcProvider.xml dropin\n\n\nSigned-off-by: Lee Surprenant lmsurpre@us.ibm.com", "createdAt": "2020-04-28T23:23:32Z", "url": "https://github.com/IBM/FHIR/pull/998", "merged": true, "mergeCommit": {"oid": "ffcf819f973e1c6245be8ce4e8dc27d7050db33b"}, "closed": true, "closedAt": "2020-04-29T17:43:44Z", "author": {"login": "lmsurpre"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccMgQHgBqjMyODI0OTgwODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccbKOZAFqTQwMjg0MTY2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a373fdd3837e8bbb017d6ef3521a1af3618eb8b", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/0a373fdd3837e8bbb017d6ef3521a1af3618eb8b", "committedDate": "2020-04-28T23:22:37Z", "message": "Update server config and introduce jwtRP.xml\n\njwtRP.xml is a new configDropin alternative to oauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\nthis change also re-introduces `singleSignonEnabled=\"false\"` on the\ndefault server.xml and overrides this setting within the\n`oidcProvider.xml` dropin\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/77982d3a75da13d5462fc28a74732d900d48abdb", "committedDate": "2020-04-28T23:29:45Z", "message": "Move to @RolesAllowed security, update server config, and introduce\njwtRP.xml\n\n1. Move webapp security info into `RolesAllowed` headers on a\nper-JAXRS-resource basis and make the `metadata` and\n`.well-known/smart-configuration` endpoints open by default\n\n2. Introduce jwtRP.xml is a new configDropin alternative to\noauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\n3. Re-introduce `singleSignonEnabled=\"false\"` on the\ndefault server.xml and override this setting within the\n`oidcProvider.xml` dropin\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjg1ODgz", "url": "https://github.com/IBM/FHIR/pull/998#pullrequestreview-402285883", "createdAt": "2020-04-28T23:40:44Z", "commit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0MDo0NFrOGNq9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0MDo0NFrOGNq9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4ODQ3MA==", "bodyText": "This is pretty explicit whitelisting.  What happens with websockets? What happens with OPTIONS?  are there any behavior changes?", "url": "https://github.com/IBM/FHIR/pull/998#discussion_r416988470", "createdAt": "2020-04-28T23:40:44Z", "author": {"login": "prb112"}, "path": "fhir-server-webapp/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -18,30 +18,6 @@\n         <url-pattern>/*</url-pattern>\n     </servlet-mapping>\n \n-    <!-- Security definitions for the web app -->\n-    <security-role>\n-        <role-name>FHIRUsers</role-name>\n-    </security-role>\n-    <security-constraint>\n-        <web-resource-collection>\n-            <web-resource-name>FHIR REST API</web-resource-name>\n-            <url-pattern>/*</url-pattern>\n-            <http-method>GET</http-method>\n-            <http-method>POST</http-method>\n-            <http-method>PUT</http-method>\n-            <http-method>PATCH</http-method>\n-            <http-method>DELETE</http-method>\n-            <http-method>HEAD</http-method>\n-            <http-method>TRACE</http-method>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjg2MDI0", "url": "https://github.com/IBM/FHIR/pull/998#pullrequestreview-402286024", "createdAt": "2020-04-28T23:41:09Z", "commit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0MTowOVrOGNq9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0MTowOVrOGNq9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4ODYxOA==", "bodyText": "posted a message about implications for opening up... is this cached?", "url": "https://github.com/IBM/FHIR/pull/998#discussion_r416988618", "createdAt": "2020-04-28T23:41:09Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/configDropins/disabled/jwtRP.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<server description=\"fhir-server\">\n+\n+    <!-- Enable features -->\n+    <featureManager>\n+        <!-- mpJwt-1.1 is already enabled in the default server.xml, but it doesn't hurt to repeat it here -->\n+        <feature>mpJwt-1.1</feature>\n+    </featureManager>\n+\n+    <!-- Override the application-bnd binding of the main webapp -->\n+    <webApplication contextRoot=\"fhir-server/api/v4\" id=\"fhir-server-webapp\" location=\"fhir-server.war\" name=\"fhir-server-webapp\">\n+        <application-bnd>\n+            <security-role id=\"users\" name=\"FHIRUsers\">\n+                <group name=\"JwtUsers\" access-id=\"group:https://localhost:9443/oauth2/endpoint/oauth2-provider/FHIRUsers\"/>\n+            </security-role>\n+        </application-bnd>\n+    </webApplication>\n+\n+    <!-- The MP JWT configuration that injects the caller's JWT into a\n+         ResourceScoped bean for inspection. -->\n+    <mpJwt id=\"jwtConsumer\"\n+           keyName=\"libertyop\"\n+           userNameAttribute=\"sub\"\n+           groupNameAttribute=\"groupIds\"\n+           issuer=\"https://localhost:9443/oauth2/endpoint/oauth2-provider,https://host.docker.internal:9443/oauth2/endpoint/oauth2-provider\"\n+           authFilterRef=\"filter\"/>\n+\n+    <authFilter id=\"filter\">\n+        <requestUrl urlPattern=\"/fhir-server\" />\n+        <requestUrl matchType=\"notContain\" urlPattern=\"/fhir-server/api/v4/metadata\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2486b8ec9eb099a5b5c36d017fb9ec19527fac9", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/c2486b8ec9eb099a5b5c36d017fb9ec19527fac9", "committedDate": "2020-04-29T02:16:11Z", "message": "Move to @RolesAllowed security, update server config, and introduce\njwtRP.xml\n\n1. Move webapp security info into `RolesAllowed` headers on a\nper-JAXRS-resource basis and make the `metadata` and\n`.well-known/smart-configuration` endpoints open by default\n\n2. Introduce jwtRP.xml is a new configDropin alternative to\noauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\n3. Re-introduce `singleSignonEnabled=\"false\"` on the\ndefault server.xml and override this setting within the\n`oidcProvider.xml` dropin\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77982d3a75da13d5462fc28a74732d900d48abdb", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/77982d3a75da13d5462fc28a74732d900d48abdb", "committedDate": "2020-04-28T23:29:45Z", "message": "Move to @RolesAllowed security, update server config, and introduce\njwtRP.xml\n\n1. Move webapp security info into `RolesAllowed` headers on a\nper-JAXRS-resource basis and make the `metadata` and\n`.well-known/smart-configuration` endpoints open by default\n\n2. Introduce jwtRP.xml is a new configDropin alternative to\noauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\n3. Re-introduce `singleSignonEnabled=\"false\"` on the\ndefault server.xml and override this setting within the\n`oidcProvider.xml` dropin\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "c2486b8ec9eb099a5b5c36d017fb9ec19527fac9", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/c2486b8ec9eb099a5b5c36d017fb9ec19527fac9", "committedDate": "2020-04-29T02:16:11Z", "message": "Move to @RolesAllowed security, update server config, and introduce\njwtRP.xml\n\n1. Move webapp security info into `RolesAllowed` headers on a\nper-JAXRS-resource basis and make the `metadata` and\n`.well-known/smart-configuration` endpoints open by default\n\n2. Introduce jwtRP.xml is a new configDropin alternative to\noauthResourceServer which\ncan be used to introspect jwt tokens that are passed to the server for\nintrospecting scopes and making authorization decisions\n\n3. Re-introduce `singleSignonEnabled=\"false\"` on the\ndefault server.xml and override this setting within the\n`oidcProvider.xml` dropin\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1766e1439682a7f8e29646aacb35aa3c5bf8d6c6", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/1766e1439682a7f8e29646aacb35aa3c5bf8d6c6", "committedDate": "2020-04-29T02:57:13Z", "message": "Workaround issue with parseIfModifiedSince throwing unexpected exception\n\nFor some reason, with CDI enabled on the JAX-RS Read class, the\n`httpServletRequest.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)` is\ncoming back in an `java.lang.reflect.InvocationTargetException` instead\nof the expected `java.lang.IllegalArgumentException`.\n\nThe full stack trace was:\n```\njava.lang.reflect.UndeclaredThrowableException\n\tat com.sun.proxy.$Proxy69.getDateHeader(Unknown Source)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\tat com.ibm.fhir.server.resources.FHIRResource.parseIfModifiedSince(FHIRResource.java:144)\n\tat com.ibm.fhir.server.resources.Read.read(Read.java:73)\n\tat com.ibm.fhir.server.resources.Read$Proxy$_$$_WeldClientProxy.read(Unknown\nSource)\n\tat jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.cdi.component.JaxRsFactoryImplicitBeanCDICustomizer.serviceInvoke(JaxRsFactoryImplicitBeanCDICustomizer.java:334)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsServerFactoryBean.performInvocation(LibertyJaxRsServerFactoryBean.java:641)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.performInvocation(LibertyJaxRsInvoker.java:160)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:273)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:205)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:444)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:111)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:61)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:99)\n\tat org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)\n\tat org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:124)\n\tat org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:274)\n\tat com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:134)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.handleRequest(IBMRestServlet.java:146)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.doGet(IBMRestServlet.java:112)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:686)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.service(IBMRestServlet.java:96)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:729)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:426)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:182)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:93)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestServletFilter.doFilter(FHIRRestServletFilter.java:138)\n\tat javax.servlet.http.HttpFilter.doFilter(HttpFilter.java:127)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestAuthorizationServletFilter.doFilter(FHIRRestAuthorizationServletFilter.java:86)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:1001)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1139)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1010)\n\tat com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:75)\n\tat com.ibm.ws.webcontainer40.servlet.CacheServletWrapper40.handleRequest(CacheServletWrapper40.java:83)\n\tat com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:938)\n\tat com.ibm.ws.webcontainer.osgi.DynamicVirtualHost$2.run(DynamicVirtualHost.java:279)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink$TaskWrapper.run(HttpDispatcherLink.java:1134)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.wrapHandlerAndExecute(HttpDispatcherLink.java:415)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.ready(HttpDispatcherLink.java:374)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:548)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleNewRequest(HttpInboundLink.java:482)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.processRequest(HttpInboundLink.java:347)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.ready(HttpInboundLink.java:318)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1077)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink$MyReadCompletedCallback.complete(SSLConnectionLink.java:656)\n\tat com.ibm.ws.channel.ssl.internal.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1803)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.requestComplete(WorkQueueManager.java:504)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.attemptIO(WorkQueueManager.java:574)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.workerRun(WorkQueueManager.java:958)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager$Worker.run(WorkQueueManager.java:1047)\n\tat com.ibm.ws.threading.internal.ExecutorServiceImpl$RunnableWrapper.run(ExecutorServiceImpl.java:239)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat jdk.internal.reflect.GeneratedMethodAccessor38.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.injection.HttpServletRequestInjectionProxy$1.invoke(HttpServletRequestInjectionProxy.java:58)\n\t... 63 more\nCaused by: java.lang.IllegalArgumentException: Sat, 28-Sep-19 16:11:14\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:264)\n\tat com.ibm.ws.webcontainer.srt.SRTServletRequest.getDateHeader(SRTServletRequest.java:519)\n\tat com.ibm.fhir.server.filter.rest.FHIRHttpServletRequestWrapper.getDateHeader(FHIRHttpServletRequestWrapper.java:590)\n\tat com.ibm.ws.jaxrs20.server.JaxRsHttpServletRequestAdapter.getDateHeader(JaxRsHttpServletRequestAdapter.java:698)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\t... 67 more\nCaused by: java.text.ParseException: Unparseable [Sat, 28-Sep-19\n16:11:14]\n\tat com.ibm.ws.http.internal.HttpDateFormatImpl.parseTime(HttpDateFormatImpl.java:391)\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:257)\n\t... 71 more\n```\n\nTo work around the issue, I've expanded the types of exceptions we catch\nduring the initial `httpServletRequest.getDateHeader` request.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84da978d9f4bcce651b8ae0fcbbef1307723e0c0", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/84da978d9f4bcce651b8ae0fcbbef1307723e0c0", "committedDate": "2020-04-29T02:55:23Z", "message": "Workaround issue with parseIfModifiedSince throwing unexpected exception\n\nFor some reason, with CDI enabled on the JAX-RS Read class, the\n`httpServletRequest.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)` is\ncoming back in an `java.lang.reflect.InvocationTargetException` instead\nof the expected `java.lang.IllegalArgumentException`.\n\nThe full stack trace was:\n```\njava.lang.reflect.UndeclaredThrowableException\n\tat com.sun.proxy.$Proxy69.getDateHeader(Unknown Source)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\tat com.ibm.fhir.server.resources.FHIRResource.parseIfModifiedSince(FHIRResource.java:144)\n\tat com.ibm.fhir.server.resources.Read.read(Read.java:73)\n\tat com.ibm.fhir.server.resources.Read$Proxy$_$$_WeldClientProxy.read(Unknown\nSource)\n\tat jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.cdi.component.JaxRsFactoryImplicitBeanCDICustomizer.serviceInvoke(JaxRsFactoryImplicitBeanCDICustomizer.java:334)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsServerFactoryBean.performInvocation(LibertyJaxRsServerFactoryBean.java:641)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.performInvocation(LibertyJaxRsInvoker.java:160)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:273)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:205)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:444)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:111)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:61)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:99)\n\tat org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)\n\tat org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:124)\n\tat org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:274)\n\tat com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:134)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.handleRequest(IBMRestServlet.java:146)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.doGet(IBMRestServlet.java:112)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:686)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.service(IBMRestServlet.java:96)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:729)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:426)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:182)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:93)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestServletFilter.doFilter(FHIRRestServletFilter.java:138)\n\tat javax.servlet.http.HttpFilter.doFilter(HttpFilter.java:127)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestAuthorizationServletFilter.doFilter(FHIRRestAuthorizationServletFilter.java:86)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:1001)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1139)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1010)\n\tat com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:75)\n\tat com.ibm.ws.webcontainer40.servlet.CacheServletWrapper40.handleRequest(CacheServletWrapper40.java:83)\n\tat com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:938)\n\tat com.ibm.ws.webcontainer.osgi.DynamicVirtualHost$2.run(DynamicVirtualHost.java:279)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink$TaskWrapper.run(HttpDispatcherLink.java:1134)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.wrapHandlerAndExecute(HttpDispatcherLink.java:415)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.ready(HttpDispatcherLink.java:374)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:548)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleNewRequest(HttpInboundLink.java:482)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.processRequest(HttpInboundLink.java:347)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.ready(HttpInboundLink.java:318)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1077)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink$MyReadCompletedCallback.complete(SSLConnectionLink.java:656)\n\tat com.ibm.ws.channel.ssl.internal.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1803)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.requestComplete(WorkQueueManager.java:504)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.attemptIO(WorkQueueManager.java:574)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.workerRun(WorkQueueManager.java:958)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager$Worker.run(WorkQueueManager.java:1047)\n\tat com.ibm.ws.threading.internal.ExecutorServiceImpl$RunnableWrapper.run(ExecutorServiceImpl.java:239)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat jdk.internal.reflect.GeneratedMethodAccessor38.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.injection.HttpServletRequestInjectionProxy$1.invoke(HttpServletRequestInjectionProxy.java:58)\n\t... 63 more\nCaused by: java.lang.IllegalArgumentException: Sat, 28-Sep-19 16:11:14\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:264)\n\tat com.ibm.ws.webcontainer.srt.SRTServletRequest.getDateHeader(SRTServletRequest.java:519)\n\tat com.ibm.fhir.server.filter.rest.FHIRHttpServletRequestWrapper.getDateHeader(FHIRHttpServletRequestWrapper.java:590)\n\tat com.ibm.ws.jaxrs20.server.JaxRsHttpServletRequestAdapter.getDateHeader(JaxRsHttpServletRequestAdapter.java:698)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\t... 67 more\nCaused by: java.text.ParseException: Unparseable [Sat, 28-Sep-19\n16:11:14]\n\tat com.ibm.ws.http.internal.HttpDateFormatImpl.parseTime(HttpDateFormatImpl.java:391)\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:257)\n\t... 71 more\n```\n\nTo work around the issue, I've expanded the types of exceptions we catch\nduring the initial `httpServletRequest.getDateHeader` request.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "1766e1439682a7f8e29646aacb35aa3c5bf8d6c6", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/1766e1439682a7f8e29646aacb35aa3c5bf8d6c6", "committedDate": "2020-04-29T02:57:13Z", "message": "Workaround issue with parseIfModifiedSince throwing unexpected exception\n\nFor some reason, with CDI enabled on the JAX-RS Read class, the\n`httpServletRequest.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)` is\ncoming back in an `java.lang.reflect.InvocationTargetException` instead\nof the expected `java.lang.IllegalArgumentException`.\n\nThe full stack trace was:\n```\njava.lang.reflect.UndeclaredThrowableException\n\tat com.sun.proxy.$Proxy69.getDateHeader(Unknown Source)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\tat com.ibm.fhir.server.resources.FHIRResource.parseIfModifiedSince(FHIRResource.java:144)\n\tat com.ibm.fhir.server.resources.Read.read(Read.java:73)\n\tat com.ibm.fhir.server.resources.Read$Proxy$_$$_WeldClientProxy.read(Unknown\nSource)\n\tat jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.cdi.component.JaxRsFactoryImplicitBeanCDICustomizer.serviceInvoke(JaxRsFactoryImplicitBeanCDICustomizer.java:334)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsServerFactoryBean.performInvocation(LibertyJaxRsServerFactoryBean.java:641)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.performInvocation(LibertyJaxRsInvoker.java:160)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:273)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:205)\n\tat com.ibm.ws.jaxrs20.server.LibertyJaxRsInvoker.invoke(LibertyJaxRsInvoker.java:444)\n\tat org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:111)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:61)\n\tat org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:99)\n\tat org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)\n\tat org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:124)\n\tat org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:274)\n\tat com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:134)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.handleRequest(IBMRestServlet.java:146)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.doGet(IBMRestServlet.java:112)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:686)\n\tat com.ibm.websphere.jaxrs.server.IBMRestServlet.service(IBMRestServlet.java:96)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:729)\n\tat com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:426)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:182)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:93)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestServletFilter.doFilter(FHIRRestServletFilter.java:138)\n\tat javax.servlet.http.HttpFilter.doFilter(HttpFilter.java:127)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.fhir.server.filter.rest.FHIRRestAuthorizationServletFilter.doFilter(FHIRRestAuthorizationServletFilter.java:86)\n\tat com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:201)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:90)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:1001)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1139)\n\tat com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1010)\n\tat com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:75)\n\tat com.ibm.ws.webcontainer40.servlet.CacheServletWrapper40.handleRequest(CacheServletWrapper40.java:83)\n\tat com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:938)\n\tat com.ibm.ws.webcontainer.osgi.DynamicVirtualHost$2.run(DynamicVirtualHost.java:279)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink$TaskWrapper.run(HttpDispatcherLink.java:1134)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.wrapHandlerAndExecute(HttpDispatcherLink.java:415)\n\tat com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink.ready(HttpDispatcherLink.java:374)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:548)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.handleNewRequest(HttpInboundLink.java:482)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.processRequest(HttpInboundLink.java:347)\n\tat com.ibm.ws.http.channel.internal.inbound.HttpInboundLink.ready(HttpInboundLink.java:318)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1077)\n\tat com.ibm.ws.channel.ssl.internal.SSLConnectionLink$MyReadCompletedCallback.complete(SSLConnectionLink.java:656)\n\tat com.ibm.ws.channel.ssl.internal.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1803)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.requestComplete(WorkQueueManager.java:504)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.attemptIO(WorkQueueManager.java:574)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager.workerRun(WorkQueueManager.java:958)\n\tat com.ibm.ws.tcpchannel.internal.WorkQueueManager$Worker.run(WorkQueueManager.java:1047)\n\tat com.ibm.ws.threading.internal.ExecutorServiceImpl$RunnableWrapper.run(ExecutorServiceImpl.java:239)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:831)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat jdk.internal.reflect.GeneratedMethodAccessor38.invoke(Unknown\nSource)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat com.ibm.ws.jaxrs20.injection.HttpServletRequestInjectionProxy$1.invoke(HttpServletRequestInjectionProxy.java:58)\n\t... 63 more\nCaused by: java.lang.IllegalArgumentException: Sat, 28-Sep-19 16:11:14\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:264)\n\tat com.ibm.ws.webcontainer.srt.SRTServletRequest.getDateHeader(SRTServletRequest.java:519)\n\tat com.ibm.fhir.server.filter.rest.FHIRHttpServletRequestWrapper.getDateHeader(FHIRHttpServletRequestWrapper.java:590)\n\tat com.ibm.ws.jaxrs20.server.JaxRsHttpServletRequestAdapter.getDateHeader(JaxRsHttpServletRequestAdapter.java:698)\n\tat javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:119)\n\t... 67 more\nCaused by: java.text.ParseException: Unparseable [Sat, 28-Sep-19\n16:11:14]\n\tat com.ibm.ws.http.internal.HttpDateFormatImpl.parseTime(HttpDateFormatImpl.java:391)\n\tat com.ibm.ws.webcontainer.osgi.request.IRequestImpl.getDateHeader(IRequestImpl.java:257)\n\t... 71 more\n```\n\nTo work around the issue, I've expanded the types of exceptions we catch\nduring the initial `httpServletRequest.getDateHeader` request.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjE3NjYw", "url": "https://github.com/IBM/FHIR/pull/998#pullrequestreview-402617660", "createdAt": "2020-04-29T12:29:14Z", "commit": {"oid": "1766e1439682a7f8e29646aacb35aa3c5bf8d6c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODQxNjY4", "url": "https://github.com/IBM/FHIR/pull/998#pullrequestreview-402841668", "createdAt": "2020-04-29T16:34:34Z", "commit": {"oid": "1766e1439682a7f8e29646aacb35aa3c5bf8d6c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 412, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}