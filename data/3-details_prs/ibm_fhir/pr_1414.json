{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDI2MDA1", "number": 1414, "title": "issue #693 - memberOf handles maxValueSet and all-languages value set", "bodyText": "Signed-off-by: Troy Biesterfeld tbieste@us.ibm.com\nThis change adds validation of the maxValueSet defined for a binding, and validation of language codes against BCP-47 when all-languages is the value set.", "createdAt": "2020-08-14T14:47:52Z", "url": "https://github.com/IBM/FHIR/pull/1414", "merged": true, "mergeCommit": {"oid": "2f139ec1be1fdb91bb476ce34d585c1061aeb07b"}, "closed": true, "closedAt": "2020-08-17T13:58:35Z", "author": {"login": "tbieste"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-nvURAH2gAyNDY4MDI2MDA1OmM0NWM0N2M0YzQ3OTU4ODYzOGNhYjg0YTVmYjZkN2ZiOGVlZTJjMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-6sjugH2gAyNDY4MDI2MDA1OjQ3NmQ1MDc4NTk2ZDM3OGMxNDM5MDhlOGZmMmEzODM4OTJkNjM4MTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "author": {"user": {"login": "tbieste", "name": "Troy Biesterfeld"}}, "url": "https://github.com/IBM/FHIR/commit/c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "committedDate": "2020-08-13T22:27:22Z", "message": "issue #693 - memberOf handles maxValueSet and all-languages value set\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NjYxMDE5", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467661019", "createdAt": "2020-08-14T15:18:21Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxODoyMVrOHA4lrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToxODoyMVrOHA4lrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTE5OQ==", "bodyText": "what is the split for?", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470689199", "createdAt": "2020-08-14T15:18:21Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njc0MDY0", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467674064", "createdAt": "2020-08-14T15:33:30Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozMzozMFrOHA5PRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozMzozMFrOHA5PRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5OTg0NQ==", "bodyText": "seems a bit odd not to handle the element.is(Uri.class) in the if/else block with the others, but I suppose its fine", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470699845", "createdAt": "2020-08-14T15:33:30Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njc3ODM0", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467677834", "createdAt": "2020-08-14T15:39:04Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozOTowNFrOHA5anQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozOTowNFrOHA5anQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMjc0OQ==", "bodyText": "maybe just combine it with the method above and take an Element?\nthen you just need one if/else block, right?  maybe a \"horse apiece\" though.", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470702749", "createdAt": "2020-08-14T15:39:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());\n+        }\n+        \n+        return validateCodeAgainstSyntaxBasedValuedSet(valueSet, code, coding, codeableConcept, evaluationContext, elementNode, strength);\n+    }\n+    \n+    /**\n+     * Validates the Code, Coding, CodableConcept against the syntax based value set.\n+     * Only one of Code, Coding, or CodeableConept should be passed in.\n+     * Issues will be added to evaluation context if validation is not successful.\n+     * @param valueSet the value set\n+     * @param code the code to validate\n+     * @param code the coding to validate\n+     * @param codeableConcept the codeable concept to validate\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateCodeAgainstSyntaxBasedValuedSet(ValueSet valueSet, Code code, Coding coding, CodeableConcept codeableConcept, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NjgwNjQ3", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467680647", "createdAt": "2020-08-14T15:43:16Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0MzoxNlrOHA5jPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0MzoxNlrOHA5jPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNDk1Ng==", "bodyText": "I didn't know this was supported in our registry; interesting", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470704956", "createdAt": "2020-08-14T15:43:16Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/test/resources/fhir/validation/test/package/.index.json", "diffHunk": "@@ -64,6 +64,60 @@\n             \"kind\": \"resource\",\n             \"type\": \"FamilyMemberHistory\"\n         },\n+        {\n+            \"filename\": \"test-language-primary-extension.json\",\n+            \"resourceType\": \"StructureDefinition\",\n+            \"id\": \"test-language-primary-extension\",\n+            \"url\": \"http://ibm.com/fhir/StructureDefinition/test-language-primary-extension\",\n+            \"version\": \"0.1.0\",\n+            \"kind\": \"complex-type\",\n+            \"type\": \"Extension\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NjgyODY3", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467682867", "createdAt": "2020-08-14T15:46:25Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0NjoyNVrOHA5pzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0NjoyNVrOHA5pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNjYzNg==", "bodyText": "I wonder if one of these should include the word MaxValueSet or ConstraintGenerator to make it clear what the test is for", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470706636", "createdAt": "2020-08-14T15:46:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.validation.test;\n+\n+import static com.ibm.fhir.path.util.FHIRPathUtil.compile;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.Device;\n+import com.ibm.fhir.model.resource.Device.Specialization;\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Canonical;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.Meta;\n+import com.ibm.fhir.model.type.Narrative;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Xhtml;\n+import com.ibm.fhir.model.type.code.NarrativeStatus;\n+import com.ibm.fhir.model.util.ValidationSupport;\n+import com.ibm.fhir.profile.ConstraintGenerator;\n+import com.ibm.fhir.registry.FHIRRegistry;\n+import com.ibm.fhir.validation.FHIRValidator;\n+import com.ibm.fhir.validation.util.FHIRValidationUtil;\n+\n+public class DeviceProfileTest {\n+    private static final String ENGLISH_US = \"en-US\";\n+\n+    @Test\n+    public void testDeviceProfile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njg0MzY0", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467684364", "createdAt": "2020-08-14T15:48:37Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0ODozN1rOHA5uag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0ODozN1rOHA5uag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNzgxOA==", "bodyText": "this comment was very helpful for me, thanks", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470707818", "createdAt": "2020-08-14T15:48:37Z", "author": {"login": "lmsurpre"}, "path": "fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.validation.test;\n+\n+import static com.ibm.fhir.path.util.FHIRPathUtil.compile;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.Device;\n+import com.ibm.fhir.model.resource.Device.Specialization;\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Canonical;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.Meta;\n+import com.ibm.fhir.model.type.Narrative;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Xhtml;\n+import com.ibm.fhir.model.type.code.NarrativeStatus;\n+import com.ibm.fhir.model.util.ValidationSupport;\n+import com.ibm.fhir.profile.ConstraintGenerator;\n+import com.ibm.fhir.registry.FHIRRegistry;\n+import com.ibm.fhir.validation.FHIRValidator;\n+import com.ibm.fhir.validation.util.FHIRValidationUtil;\n+\n+public class DeviceProfileTest {\n+    private static final String ENGLISH_US = \"en-US\";\n+\n+    @Test\n+    public void testDeviceProfile() throws Exception {\n+        \n+        // Tests the generation of constraints generated from bindings that include a MaxValueSet extension,\n+        // by using a Device profile and extensions created specifically for this test.\n+        //\n+        // Each of the following combinations is tested:\n+        //   Choice: No/Yes; Optional: No/Yes; Repeatable: No/Yes\n+        //-----------------------------------------------\n+        // Choice: No; Optional: No; Repeatable: No\n+        //-----[Device.specialization.systemType]\n+        // Choice: No; Optional: No; Repeatable: Yes\n+        //-----[Device.statusReason]\n+        // Choice: No; Optional: Yes; Repeatable: No\n+        //-----[Device.type]\n+        // Choice: No; Optional: Yes; Repeatable: Yes\n+        //-----[Device.safety]\n+        // Choice: Yes; Optional: No; Repeatable: No\n+        //----[test-language-primary-extension]\n+        // Choice: Yes; Optional: No; Repeatable: Yes\n+        //----[test-language-others-req-extension]\n+        // Choice: Yes; Optional: Yes; Repeatable: No\n+        //----[test-language-secondary-extension]\n+        // Choice: Yes; Optional: Yes; Repeatable: Yes\n+        //----[test-language-others-opt-extension]\n+        //-----------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njg0NjUy", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467684652", "createdAt": "2020-08-14T15:49:00Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzEyMDY1", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467712065", "createdAt": "2020-08-14T16:30:33Z", "commit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozMDozM1rOHA7DnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozMDozM1rOHA7DnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTYyOA==", "bodyText": "change param name to 'coding'", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470729628", "createdAt": "2020-08-14T16:30:33Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());\n+        }\n+        \n+        return validateCodeAgainstSyntaxBasedValuedSet(valueSet, code, coding, codeableConcept, evaluationContext, elementNode, strength);\n+    }\n+    \n+    /**\n+     * Validates the Code, Coding, CodableConcept against the syntax based value set.\n+     * Only one of Code, Coding, or CodeableConept should be passed in.\n+     * Issues will be added to evaluation context if validation is not successful.\n+     * @param valueSet the value set\n+     * @param code the code to validate\n+     * @param code the coding to validate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "390232970f5758a99e4f2fe990dddff3af218c83", "author": {"user": {"login": "tbieste", "name": "Troy Biesterfeld"}}, "url": "https://github.com/IBM/FHIR/commit/390232970f5758a99e4f2fe990dddff3af218c83", "committedDate": "2020-08-14T16:48:02Z", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3766ac43a95bb11b24d506fecc6ee537a7d3cef7", "author": {"user": {"login": "tbieste", "name": "Troy Biesterfeld"}}, "url": "https://github.com/IBM/FHIR/commit/3766ac43a95bb11b24d506fecc6ee537a7d3cef7", "committedDate": "2020-08-14T19:34:02Z", "message": "issue #693 - Update code formatting after review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODU0Mzk2", "url": "https://github.com/IBM/FHIR/pull/1414#pullrequestreview-467854396", "createdAt": "2020-08-14T20:23:05Z", "commit": {"oid": "3766ac43a95bb11b24d506fecc6ee537a7d3cef7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476d5078596d378c143908e8ff2a383892d63813", "author": {"user": {"login": "tbieste", "name": "Troy Biesterfeld"}}, "url": "https://github.com/IBM/FHIR/commit/476d5078596d378c143908e8ff2a383892d63813", "committedDate": "2020-08-14T20:32:33Z", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1387, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}