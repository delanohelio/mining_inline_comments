{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTE4OTI2", "number": 1078, "title": "Add cache support for the capabilites request #734", "bodyText": "Update cloud.xml to point to the location ( per warning in eclipse)\nUpdate Capabilities statement to use a concurrent hash map\nCache time is one hour\n\nSigned-off-by: Paul Bastide pbastide@us.ibm.com", "createdAt": "2020-05-12T19:17:09Z", "url": "https://github.com/IBM/FHIR/pull/1078", "merged": true, "mergeCommit": {"oid": "753ce320900ce632fb052faa56cabff0a3733115"}, "closed": true, "closedAt": "2020-05-13T13:56:56Z", "author": {"login": "prb112"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgpQazAH2gAyNDE2OTE4OTI2OmMxMDBkMWRkYmNhMzJiMzVmMWE0ODI5NzAxMGNhOTVlMTBjMzExNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg5OorAFqTQxMDk0NjMyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/c100d1ddbca32b35f1a48297010ca95e10c3116d", "committedDate": "2020-05-12T19:15:42Z", "message": "Add cache support for the capabilites request #734\n\n- Update cloud.xml to point to the location ( per warning in eclipse)\n- Update Capabilities statement to use a concurrent hash map\n- Cache time is one hour\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzUxNTQ0", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410351544", "createdAt": "2020-05-12T19:22:14Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyMjoxNFrOGUVe6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyMjoxNFrOGUVe6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NjY4MA==", "bodyText": "not related to your change at all, but i just spotted this typo that i must have introduced earlier:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <!-- webApp security is MUST be provided via a gateway -->\n          \n          \n            \n                <!-- webApp security MUST be provided via a gateway -->", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423976680", "createdAt": "2020-05-12T19:22:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/configDropins/disabled/cloud.xml", "diffHunk": "@@ -1,7 +1,7 @@\n <server>\n     <!-- webApp security is MUST be provided via a gateway -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU2NTM2", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410356536", "createdAt": "2020-05-12T19:29:11Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOToxMVrOGUVuGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOToxMVrOGUVuGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MDU3MA==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423980570", "createdAt": "2020-05-12T19:29:11Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -388,26 +404,23 @@ private CapabilityStatement addExtensionElements(CapabilityStatement capabilityS\n             auditLogServiceName = auditLogServiceName.substring(lastDelimeter + 1);\n         }\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/auditLogServiceName\")\n-                .value(string(auditLogServiceName))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/auditLogServiceName\").value(string(auditLogServiceName))\n+                        .build();\n         extentions.add(extension);\n \n         PropertyGroup auditLogProperties =\n                 fhirConfig.getPropertyGroup(FHIRConfiguration.PROPERTY_AUDIT_SERVICE_PROPERTIES);\n         String auditLogPropertiesString =\n                 auditLogProperties != null ? auditLogProperties.toString() : \"<not specified>\";\n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/auditLogProperties\")\n-                .value(string(auditLogPropertiesString))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/auditLogProperties\").value(string(auditLogPropertiesString))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/persistenceType\")\n-                .value(string(getPersistenceImpl().getClass().getSimpleName()))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/persistenceType\")\n+                        .value(string(getPersistenceImpl().getClass().getSimpleName())).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 416}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU3MTEw", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410357110", "createdAt": "2020-05-12T19:29:59Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOTo1OVrOGUVvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOToyOTo1OVrOGUVvyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MTAwMw==", "bodyText": "I prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423981003", "createdAt": "2020-05-12T19:29:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -330,56 +346,56 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n                 throw new IllegalStateException(\"Operation \" + opDef.getCode().getValue() + \" has no url\");\n             }\n \n-            ops.add(Rest.Resource.Operation.builder()\n-                    .name(opDef.getCode())\n-                    .definition(Canonical.of(opDef.getUrl().getValue(), opDef.getVersion() == null ? null : opDef.getVersion().getValue()))\n-                    .documentation(opDef.getDescription())\n-                    .build());\n+            ops.add(Rest.Resource.Operation.builder().name(opDef.getCode())\n+                    .definition(Canonical.of(opDef.getUrl().getValue(),\n+                            opDef.getVersion() == null ? null : opDef.getVersion().getValue()))\n+                    .documentation(opDef.getDescription()).build());\n         }\n \n         return ops;\n     }\n \n-    private CapabilityStatement addExtensionElements(CapabilityStatement capabilityStatement)\n-        throws Exception {\n+    private CapabilityStatement addExtensionElements(CapabilityStatement capabilityStatement) throws Exception {\n         List<Extension> extentions = new ArrayList<Extension>();\n-        Extension extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/defaultTenantId\")\n-                .value(string(fhirConfig.getStringProperty(FHIRConfiguration.PROPERTY_DEFAULT_TENANT_ID, FHIRConfiguration.DEFAULT_TENANT_ID)))\n-                .build();\n+        Extension extension =\n+                Extension.builder().url(EXTENSION_URL + \"/defaultTenantId\")\n+                        .value(string(fhirConfig.getStringProperty(FHIRConfiguration.PROPERTY_DEFAULT_TENANT_ID,\n+                                FHIRConfiguration.DEFAULT_TENANT_ID)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/websocketNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_WEBSOCKET_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/websocketNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig\n+                                .getBooleanProperty(FHIRConfiguration.PROPERTY_WEBSOCKET_ENABLED, Boolean.FALSE)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/kafkaNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_KAFKA_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/kafkaNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(\n+                                fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_KAFKA_ENABLED, Boolean.FALSE)))\n+                        .build();\n         extentions.add(extension);\n \n-        extension = Extension.builder()\n-                .url(EXTENSION_URL + \"/natsNotificationsEnabled\")\n-                .value(com.ibm.fhir.model.type.Boolean.of(fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_NATS_ENABLED, Boolean.FALSE)))\n-                .build();\n+        extension =\n+                Extension.builder().url(EXTENSION_URL + \"/natsNotificationsEnabled\")\n+                        .value(com.ibm.fhir.model.type.Boolean.of(\n+                                fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_NATS_ENABLED, Boolean.FALSE)))\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 361}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU3OTU2", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410357956", "createdAt": "2020-05-12T19:31:11Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMToxMVrOGUVyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMToxMVrOGUVyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MTY0NQ==", "bodyText": "I prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423981645", "createdAt": "2020-05-12T19:31:11Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -285,28 +307,22 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n         format.add(Code.of(FHIRMediaType.APPLICATION_FHIR_XML));\n \n         // Finally, create the CapabilityStatement resource itself.\n-        CapabilityStatement conformance = CapabilityStatement.builder()\n-                .status(PublicationStatus.ACTIVE)\n-                .date(DateTime.of(ZonedDateTime.now(ZoneOffset.UTC)))\n-                .kind(CapabilityStatementKind.CAPABILITY)\n-                .fhirVersion(FHIRVersion.VERSION_4_0_1)\n-                .format(format)\n-                .patchFormat(Code.of(FHIRMediaType.APPLICATION_JSON_PATCH),\n-                             Code.of(FHIRMediaType.APPLICATION_FHIR_JSON),\n-                             Code.of(FHIRMediaType.APPLICATION_FHIR_XML))\n-                .version(string(buildInfo.getBuildVersion()))\n-                .name(string(FHIR_SERVER_NAME))\n-                .description(Markdown.of(buildDescription))\n-                .copyright(Markdown.of(FHIR_COPYRIGHT))\n-                .publisher(string(\"IBM Corporation\"))\n-                .software(CapabilityStatement.Software.builder()\n-                          .name(string(FHIR_SERVER_NAME))\n-                          .version(string(buildInfo.getBuildVersion()))\n-                          .id(buildInfo.getBuildId())\n-                          .build())\n-                .rest(rest)\n-                .instantiates(Canonical.of(\"http://www.hl7.org/fhir/bulk-data/CapabilityStatement-bulk-data.html\"))\n-                .build();\n+        CapabilityStatement conformance =\n+                CapabilityStatement.builder().status(PublicationStatus.ACTIVE)\n+                        .date(DateTime.of(ZonedDateTime.now(ZoneOffset.UTC))).kind(CapabilityStatementKind.CAPABILITY)\n+                        .fhirVersion(FHIRVersion.VERSION_4_0_1).format(format)\n+                        .patchFormat(Code.of(FHIRMediaType.APPLICATION_JSON_PATCH),\n+                                Code.of(FHIRMediaType.APPLICATION_FHIR_JSON),\n+                                Code.of(FHIRMediaType.APPLICATION_FHIR_XML))\n+                        .version(string(buildInfo.getBuildVersion())).name(string(FHIR_SERVER_NAME))\n+                        .description(Markdown.of(buildDescription)).copyright(Markdown.of(FHIR_COPYRIGHT))\n+                        .publisher(string(\"IBM Corporation\"))\n+                        .software(CapabilityStatement.Software.builder().name(string(FHIR_SERVER_NAME))\n+                                .version(string(buildInfo.getBuildVersion())).id(buildInfo.getBuildId()).build())\n+                        .rest(rest)\n+                        .instantiates(\n+                                Canonical.of(\"http://www.hl7.org/fhir/bulk-data/CapabilityStatement-bulk-data.html\"))\n+                        .build();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 295}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU4NjMy", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410358632", "createdAt": "2020-05-12T19:32:09Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjowOVrOGUV0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjowOVrOGUV0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjE4MQ==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982181", "createdAt": "2020-05-12T19:32:09Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -245,38 +272,33 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n \n         String regURL = regURLTemplate.replaceAll(\"<host>\", actualHost);\n \n-        CapabilityStatement.Rest.Security restSecurity = CapabilityStatement.Rest.Security.builder()\n-                .service(CodeableConcept.builder()\n-                    .coding(Coding.builder()\n-                        .code(Code.of(\"SMART-on-FHIR\"))\n-                        .system(Uri.of(\"http://terminology.hl7.org/CodeSystem/restful-security-service\"))\n-                        .build())\n-                    .text(string(\"OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org)\"))\n-                    .build())\n-                .extension(Extension.builder()\n-                    .url(\"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\")\n-                    .extension(\n-                        Extension.builder().url(\"token\").value(Url.of(tokenURL)).build(),\n-                        Extension.builder().url(\"authorize\").value(Url.of(authURL)).build(),\n-                        Extension.builder().url(\"register\").value(Url.of(regURL)).build())\n-                    .build())\n-                .build();\n-\n-        CapabilityStatement.Rest rest = CapabilityStatement.Rest.builder()\n-                .mode(RestfulCapabilityMode.SERVER)\n-                .security(restSecurity)\n-                .resource(resources)\n-                .interaction(CapabilityStatement.Rest.Interaction.builder()\n-                    .code(transactionMode)\n-                    .build())\n-                .operation(mapOperationDefinitionsToRestOperations(systemOps))\n-                .build();\n+        CapabilityStatement.Rest.Security restSecurity =\n+                CapabilityStatement.Rest.Security.builder()\n+                        .service(CodeableConcept.builder().coding(Coding.builder().code(Code.of(\"SMART-on-FHIR\"))\n+                                .system(Uri.of(\"http://terminology.hl7.org/CodeSystem/restful-security-service\"))\n+                                .build())\n+                                .text(string(\"OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org)\"))\n+                                .build())\n+                        .extension(Extension.builder()\n+                                .url(\"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\")\n+                                .extension(Extension.builder().url(\"token\").value(Url.of(tokenURL)).build(),\n+                                        Extension.builder().url(\"authorize\").value(Url.of(authURL)).build(),\n+                                        Extension.builder().url(\"register\").value(Url.of(regURL)).build())\n+                                .build())\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 233}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU5MDAy", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410359002", "createdAt": "2020-05-12T19:32:39Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjozOVrOGUV1gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMjozOVrOGUV1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjQ2Ng==", "bodyText": "i prefer the style we had before", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982466", "createdAt": "2020-05-12T19:32:39Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -200,19 +230,17 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n             }\n \n             // Build the ConformanceResource for this resource type.\n-            Rest.Resource cr = Rest.Resource.builder()\n-                    .type(ResourceType.of(resourceType))\n-                    .profile(Canonical.of(\"http://hl7.org/fhir/profiles/\" + resourceTypeName))\n-                    .supportedProfile(FHIRRegistry.getInstance().getProfiles(resourceTypeName))\n-                    .interaction(interactions)\n-                    .operation(ops)\n-                    .conditionalCreate(com.ibm.fhir.model.type.Boolean.of(true))\n-                    .conditionalUpdate(com.ibm.fhir.model.type.Boolean.of(true))\n-                    .updateCreate(com.ibm.fhir.model.type.Boolean.of(isUpdateCreateEnabled()))\n-                    .conditionalDelete(ConditionalDeleteStatus.MULTIPLE)\n-                    .conditionalRead(ConditionalReadStatus.FULL_SUPPORT)\n-                    .searchParam(conformanceSearchParams)\n-                    .build();\n+            Rest.Resource cr =\n+                    Rest.Resource.builder().type(ResourceType.of(resourceType))\n+                            .profile(Canonical.of(\"http://hl7.org/fhir/profiles/\" + resourceTypeName))\n+                            .supportedProfile(FHIRRegistry.getInstance().getProfiles(resourceTypeName))\n+                            .interaction(interactions).operation(ops)\n+                            .conditionalCreate(com.ibm.fhir.model.type.Boolean.of(true))\n+                            .conditionalUpdate(com.ibm.fhir.model.type.Boolean.of(true))\n+                            .updateCreate(com.ibm.fhir.model.type.Boolean.of(isUpdateCreateEnabled()))\n+                            .conditionalDelete(ConditionalDeleteStatus.MULTIPLE)\n+                            .conditionalRead(ConditionalReadStatus.FULL_SUPPORT).searchParam(conformanceSearchParams)\n+                            .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzU5ODg1", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410359885", "createdAt": "2020-05-12T19:33:30Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMzozMFrOGUV3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozMzozMFrOGUV3EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4Mjg2NQ==", "bodyText": "i prefer the old style", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423982865", "createdAt": "2020-05-12T19:33:30Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -178,15 +210,13 @@ private CapabilityStatement buildCapabilityStatement() throws Exception {\n                 for (SearchParameter searchParameter : searchParameters) {\n                     // The name here is a natural language name, and intentionally not replaced with code.\n                     Rest.Resource.SearchParam.Builder conformanceSearchParamBuilder =\n-                            Rest.Resource.SearchParam.builder()\n-                                .name(searchParameter.getName())\n-                                .type(searchParameter.getType());\n+                            Rest.Resource.SearchParam.builder().name(searchParameter.getName())\n+                                    .type(searchParameter.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzYyNTU3", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410362557", "createdAt": "2020-05-12T19:37:09Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozNzoxMFrOGUWBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozNzoxMFrOGUWBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ==", "bodyText": "I've always wondered why this method is synchronized.  Definitely orthogonal to your PR, but let me know if you agree it shouldn't be needed...", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423985519", "createdAt": "2020-05-12T19:37:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzY2NDk5", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410366499", "createdAt": "2020-05-12T19:43:01Z", "commit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo0MzowMlrOGUWOEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo0MzoyOFrOGUWO2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODc1Mg==", "bodyText": "what about something like:\nCAPABILITY_STATEMENT_CACHE.compute(tenantId, k -> getOrCreateCapabilityStatement());", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423988752", "createdAt": "2020-05-12T19:43:02Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODk1Mw==", "bodyText": "compute should be atomic (for ConcurrentHashMap)", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r423988953", "createdAt": "2020-05-12T19:43:28Z", "author": {"login": "JohnTimm"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -71,54 +74,83 @@\n import com.ibm.fhir.server.util.RestAuditLogger;\n \n @Path(\"/\")\n-@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n-        FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n+@Consumes({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n+@Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON, FHIRMediaType.APPLICATION_FHIR_XML,\n+        MediaType.APPLICATION_XML })\n public class Capabilities extends FHIRResource {\n-    private static final Logger log =\n-            java.util.logging.Logger.getLogger(Capabilities.class.getName());\n-\n-    public Capabilities() throws Exception {\n-        super();\n-    }\n+    private static final Logger log = java.util.logging.Logger.getLogger(Capabilities.class.getName());\n \n+    // Constants\n     private static final String FHIR_SERVER_NAME = \"IBM FHIR Server\";\n     private static final String FHIR_COPYRIGHT = \"(C) Copyright IBM Corporation 2016, 2020\";\n     private static final String EXTENSION_URL = \"http://ibm.com/fhir/extension\";\n \n+    // Error Messages\n+    private static final String ERROR_MSG = \"Caught exception while processing 'metadata' request.\";\n+    private static final String ERROR_CONSTRUCTING = \"An error occurred while constructing the Conformance statement.\";\n+\n+    // Capability Statement Cache per Tenant\n+    private static ConcurrentHashMap<String, CapabilityStatement> CAPABILITY_STATEMENT_CACHE_PER_TENANT =\n+            new ConcurrentHashMap<>();\n+\n+    // Constructor\n+    public Capabilities() throws Exception {\n+        super();\n+    }\n+\n     @GET\n     @Path(\"metadata\")\n-    public Response capabilities() throws ClassNotFoundException {\n-        log.entering(this.getClass().getName(), \"metadata()\");\n-        Date startTime = new Date();\n-        String errMsg = \"Caught exception while processing 'metadata' request.\";\n-\n+    public Response capabilities() {\n+        log.entering(this.getClass().getName(), \"capabilities()\");\n         try {\n+            Date startTime = new Date();\n             checkInitComplete();\n-\n-            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            CapabilityStatement capabilityStatement = getOrCreateCapabilityStatement();\n             RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n             return Response.ok().entity(capabilityStatement).build();\n         } catch (FHIROperationException e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, issueListToStatus(e.getIssues()));\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, errMsg, e);\n+            log.log(Level.SEVERE, ERROR_MSG, e);\n             return exceptionResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n         } finally {\n-            log.exiting(this.getClass().getName(), \"metadata()\");\n+            log.exiting(this.getClass().getName(), \"capabilities()\");\n+        }\n+    }\n+\n+    /*\n+     * get or create capability statement\n+     */\n+    private CapabilityStatement getOrCreateCapabilityStatement() throws FHIROperationException {\n+        // Get TenantId\n+        FHIRRequestContext ctx = FHIRRequestContext.get();\n+        String tenantId = ctx.getTenantId();\n+        CapabilityStatement statement = CAPABILITY_STATEMENT_CACHE_PER_TENANT.get(tenantId);\n+        if (statement == null) {\n+            statement = getCapabilityStatement();\n+            CAPABILITY_STATEMENT_CACHE_PER_TENANT.put(tenantId, statement);\n+        } else {\n+            // Previously the Conformance Statement was built\n+            // using ZonedDateTime.now(ZoneOffset.UTC)\n+            TemporalAccessor acc = statement.getDate().getValue();\n+            ZonedDateTime cachedTime = ZonedDateTime.from(acc);\n+\n+            if (ZonedDateTime.now().isBefore(cachedTime.plusHours(1))) {\n+                statement = getCapabilityStatement();\n+            }\n         }\n+        return statement;\n     }\n \n     private synchronized CapabilityStatement getCapabilityStatement() throws FHIROperationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTUxOQ=="}, "originalCommit": {"oid": "c100d1ddbca32b35f1a48297010ca95e10c3116d"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2aa513c6efb34406b89c2f7ebca5b29b6ff5e5", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/3c2aa513c6efb34406b89c2f7ebca5b29b6ff5e5", "committedDate": "2020-05-12T20:07:20Z", "message": "Add cache support for the capabilites request #734\n\n- Update cloud.xml per code review\n- Add example to fhir-server-config-db2.json\n- Update to use compute\n- Made Cache time configurable in fhir/core\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2868ff5471ca83245daab6090912feab619d4eba", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/2868ff5471ca83245daab6090912feab619d4eba", "committedDate": "2020-05-12T20:51:34Z", "message": "Add cache support for the capabilites request #734\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDE0NzQ5", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410414749", "createdAt": "2020-05-12T20:55:09Z", "commit": {"oid": "2868ff5471ca83245daab6090912feab619d4eba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTE0NzQ3", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410514747", "createdAt": "2020-05-13T00:43:53Z", "commit": {"oid": "2868ff5471ca83245daab6090912feab619d4eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Mzo1M1rOGUduFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Mzo1M1rOGUduFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMTYzNw==", "bodyText": "The description needs to specify the units.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`fhirServer/core/capabilityStatementCacheTimeout`|integer|The max time a CapabilityStatement is cached for the metadata endpoint. |\n          \n          \n            \n            |`fhirServer/core/capabilityStatementCacheTimeout`|integer|The number of minutes that a tenant's CapabilityStatement is cached for the metadata endpoint. |", "url": "https://github.com/IBM/FHIR/pull/1078#discussion_r424111637", "createdAt": "2020-05-13T00:43:53Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1443,6 +1443,7 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/core/checkReferenceTypes`|boolean|Indicates whether reference type checking is performed by the server during parsing / deserialization.|\n |`fhirServer/core/serverRegistryResourceProviderEnabled`|boolean|Indicates whether the server registry resource provider should be used by the FHIR registry component to access definitional resources through the persistence layer.|\n |`fhirServer/core/conditionalDeleteMaxNumber`|integer|The max number of matches supported in conditional delete. |\n+|`fhirServer/core/capabilityStatementCacheTimeout`|integer|The max time a CapabilityStatement is cached for the metadata endpoint. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2868ff5471ca83245daab6090912feab619d4eba"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33a7d49faf67b0f0f407cddf662db38763eff8f", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/a33a7d49faf67b0f0f407cddf662db38763eff8f", "committedDate": "2020-05-13T10:46:13Z", "message": "Update docs/src/pages/guides/FHIRServerUsersGuide.md\r\n\r\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>\n\nCo-authored-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4d780e0bbf16ec31dc0f57e0a528ae9ec9424c", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/fd4d780e0bbf16ec31dc0f57e0a528ae9ec9424c", "committedDate": "2020-05-13T12:41:52Z", "message": "Update for Cache-Control\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTQ2MzI3", "url": "https://github.com/IBM/FHIR/pull/1078#pullrequestreview-410946327", "createdAt": "2020-05-13T13:52:14Z", "commit": {"oid": "fd4d780e0bbf16ec31dc0f57e0a528ae9ec9424c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 468, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}