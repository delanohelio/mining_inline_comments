{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDExMzg3", "number": 1394, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxNDoxMFrOEUKcyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxNDoxMFrOEUKcyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc4MTg0OnYy", "diffSide": "RIGHT", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxNDoxMFrOG6TOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxOToxN1rOG6TWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTUxNQ==", "bodyText": "I know it's not related to this change, but why are we seeding here? Potential OWASP because currentTimeMillis isn't sufficiently random.", "url": "https://github.com/IBM/FHIR/pull/1394#discussion_r463785515", "createdAt": "2020-07-31T19:14:10Z", "author": {"login": "punktilious"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java", "diffHunk": "@@ -570,17 +570,19 @@ public static boolean isFailure(IssueSeverity severity) {\n     }\n \n     /**\n-     * Generate a random AES key or 32 byte value encoded as a Base64 string.\n+     * Generate a random key using the passed algorithm or, if that algorithm isn't supported, a random 32 byte value.\n+     * In either case, the resulting value is encoded as a Base64 string before returning.\n      *\n-     * @return\n+     * @return a base64-encoded random key string\n      */\n-    public static String getRandomKey(String key) {\n+    public static String getRandomKey(String algorithm) {\n         KeyGenerator keyGen;\n         try {\n-            keyGen = KeyGenerator.getInstance(key);\n+            keyGen = KeyGenerator.getInstance(algorithm);\n             keyGen.init(256);\n             return Base64.getEncoder().encodeToString(keyGen.generateKey().getEncoded());\n         } catch (NoSuchAlgorithmException e) {\n+            log.warning(\"Algorithm '\" + algorithm + \"' is not supported; using SecureRandom instead\");\n             byte[] buffer = new byte[32];\n             RANDOM.setSeed(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6c87751105c17fd5a054997b176f5bcb043332"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4Njk4Nw==", "bodyText": "I was wondering the same thing, which is why i added the warning...i'm not even sure it should fallback to SecureRandom", "url": "https://github.com/IBM/FHIR/pull/1394#discussion_r463786987", "createdAt": "2020-07-31T19:17:45Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java", "diffHunk": "@@ -570,17 +570,19 @@ public static boolean isFailure(IssueSeverity severity) {\n     }\n \n     /**\n-     * Generate a random AES key or 32 byte value encoded as a Base64 string.\n+     * Generate a random key using the passed algorithm or, if that algorithm isn't supported, a random 32 byte value.\n+     * In either case, the resulting value is encoded as a Base64 string before returning.\n      *\n-     * @return\n+     * @return a base64-encoded random key string\n      */\n-    public static String getRandomKey(String key) {\n+    public static String getRandomKey(String algorithm) {\n         KeyGenerator keyGen;\n         try {\n-            keyGen = KeyGenerator.getInstance(key);\n+            keyGen = KeyGenerator.getInstance(algorithm);\n             keyGen.init(256);\n             return Base64.getEncoder().encodeToString(keyGen.generateKey().getEncoded());\n         } catch (NoSuchAlgorithmException e) {\n+            log.warning(\"Algorithm '\" + algorithm + \"' is not supported; using SecureRandom instead\");\n             byte[] buffer = new byte[32];\n             RANDOM.setSeed(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTUxNQ=="}, "originalCommit": {"oid": "ee6c87751105c17fd5a054997b176f5bcb043332"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NzY2MQ==", "bodyText": "I don't think this should be in FHIRUtil -- it should go into bulkdata, and be hidden away.", "url": "https://github.com/IBM/FHIR/pull/1394#discussion_r463787661", "createdAt": "2020-07-31T19:19:17Z", "author": {"login": "prb112"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java", "diffHunk": "@@ -570,17 +570,19 @@ public static boolean isFailure(IssueSeverity severity) {\n     }\n \n     /**\n-     * Generate a random AES key or 32 byte value encoded as a Base64 string.\n+     * Generate a random key using the passed algorithm or, if that algorithm isn't supported, a random 32 byte value.\n+     * In either case, the resulting value is encoded as a Base64 string before returning.\n      *\n-     * @return\n+     * @return a base64-encoded random key string\n      */\n-    public static String getRandomKey(String key) {\n+    public static String getRandomKey(String algorithm) {\n         KeyGenerator keyGen;\n         try {\n-            keyGen = KeyGenerator.getInstance(key);\n+            keyGen = KeyGenerator.getInstance(algorithm);\n             keyGen.init(256);\n             return Base64.getEncoder().encodeToString(keyGen.generateKey().getEncoded());\n         } catch (NoSuchAlgorithmException e) {\n+            log.warning(\"Algorithm '\" + algorithm + \"' is not supported; using SecureRandom instead\");\n             byte[] buffer = new byte[32];\n             RANDOM.setSeed(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTUxNQ=="}, "originalCommit": {"oid": "ee6c87751105c17fd5a054997b176f5bcb043332"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4784, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}