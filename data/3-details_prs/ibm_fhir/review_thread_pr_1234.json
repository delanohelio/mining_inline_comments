{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDAyNjM5", "number": 1234, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo0MTozM1rOEGFSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyNDowNVrOEHROog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODEzNjA4OnYy", "diffSide": "RIGHT", "path": "build/persistence/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo0MTozM1rOGkqfSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo0MTozM1rOGkqfSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5ODA1OA==", "bodyText": "no?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |bin/gather-logs.sh|Gathers the logs for the build, no|\n          \n          \n            \n            |bin/gather-logs.sh|Gathers the logs from the build|", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441098058", "createdAt": "2020-06-16T19:41:33Z", "author": {"login": "lmsurpre"}, "path": "build/persistence/README.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# End-to-End Automation Framework for Pesistence Layer Integration Tests\n+\n+This document outlines the end-to-end persistence automation framework. \n+\n+The automation runs with these steps: \n+\n+- **Checkout source code** - Checks out the git code and populates the `github` environment variables.\n+- **Set up java** - Downloads and setup java based on the matrix values `matrix.java`.\n+- **Setup prerequisites** - This step builds the required artifacts necessary to test the build with the persistence layer. \n+- **Server Integration Tests - Additional Persistence Layers** - The step executes the pre-integration-docker, then integration-test-docker and runs the post-integration-docker scripts.\n+- **Gather error logs** - This step only runs upon an error condition. \n+- **Upload logs** - The step uploads the results of the integration tests and the error condition logs are posted to the job. \n+\n+The GitHub Action is parameterized with a matrix for each new persistence layer added. Each additional entry in the array ends up greating a multiple of the automation steps which must complete successfully for the workflow. For instance, postgres is parameterized and executes a job for each persistence layer value in the matrix (one java x one persistence = 1 workflow job). \n+\n+``` yaml\n+    strategy:\n+    matrix:\n+        java: [ 'openjdk11' ]\n+        persistence: [ 'postgres' ]\n+    fail-fast: false\n+```\n+\n+Each persistence layer that is tested as part of the framework uses the default build files and the files that match the persistence name added to the `persistence.yml`.\n+\n+|Filename|Purpose|\n+|----------|----------------|\n+|bin/gather-logs.sh|Gathers the logs for the build, no|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODE4NTA3OnYy", "diffSide": "RIGHT", "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1NjoyMFrOGkq96Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo1MzoxN1rOGmc-mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg5Nw==", "bodyText": "as per albert's comment, this doesn't seem to match the user created in build/persistence/postgres/resources/db.sql ...how does it work?", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441105897", "createdAt": "2020-06-16T19:56:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "diffHunk": "@@ -30,10 +30,10 @@\n                 \"default\": {\n                     \"type\": \"postgresql\",\n                     \"connectionProperties\": {\n-                        \"serverName\": \"localhost\",\n+                        \"serverName\": \"postgres_postgres_1\",\n                         \"portNumber\": 5432,\n-                        \"databaseName\": \"fhirdata\",\n-                        \"user\": \"fhirserver\",\n+                        \"databaseName\": \"fhirdb\",\n+                        \"user\": \"fhiradmin\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTY5Ng==", "bodyText": "now I see that it:\n\ncreates this system user in the dockerfile; and\ncreates this fhiradmin db user as the FHIRDB owner in the entry-point https://github.com/IBM/FHIR/pull/1234/files#diff-6d0acfaa35776bfcbc9f9cec15f60f6dR40\n\ndo the users created in db.sql still work?", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441109696", "createdAt": "2020-06-16T20:03:47Z", "author": {"login": "lmsurpre"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "diffHunk": "@@ -30,10 +30,10 @@\n                 \"default\": {\n                     \"type\": \"postgresql\",\n                     \"connectionProperties\": {\n-                        \"serverName\": \"localhost\",\n+                        \"serverName\": \"postgres_postgres_1\",\n                         \"portNumber\": 5432,\n-                        \"databaseName\": \"fhirdata\",\n-                        \"user\": \"fhirserver\",\n+                        \"databaseName\": \"fhirdb\",\n+                        \"user\": \"fhiradmin\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg5Nw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTEwMw==", "bodyText": "yeah - they still work.  I'll clear this up later on, but great points, I only meant FHIRADMIN to deploy the schema, and fhirserver was meant to test/run it", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441119103", "createdAt": "2020-06-16T20:22:45Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "diffHunk": "@@ -30,10 +30,10 @@\n                 \"default\": {\n                     \"type\": \"postgresql\",\n                     \"connectionProperties\": {\n-                        \"serverName\": \"localhost\",\n+                        \"serverName\": \"postgres_postgres_1\",\n                         \"portNumber\": 5432,\n-                        \"databaseName\": \"fhirdata\",\n-                        \"user\": \"fhirserver\",\n+                        \"databaseName\": \"fhirdb\",\n+                        \"user\": \"fhiradmin\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg5Nw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNjQ2OA==", "bodyText": "I'm trying this out.  I had meant to keep fhirserver.  I'm going to check/test this, and update the Dockerfile to reflect it.", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441806468", "createdAt": "2020-06-17T20:13:48Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "diffHunk": "@@ -30,10 +30,10 @@\n                 \"default\": {\n                     \"type\": \"postgresql\",\n                     \"connectionProperties\": {\n-                        \"serverName\": \"localhost\",\n+                        \"serverName\": \"postgres_postgres_1\",\n                         \"portNumber\": 5432,\n-                        \"databaseName\": \"fhirdata\",\n-                        \"user\": \"fhirserver\",\n+                        \"databaseName\": \"fhirdb\",\n+                        \"user\": \"fhiradmin\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg5Nw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3Mzg0OQ==", "bodyText": "Cleaned this up so we create the users as much as possible in the dockerfile.", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r442973849", "createdAt": "2020-06-19T17:53:17Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/config/default/fhir-server-config-postgresql.json", "diffHunk": "@@ -30,10 +30,10 @@\n                 \"default\": {\n                     \"type\": \"postgresql\",\n                     \"connectionProperties\": {\n-                        \"serverName\": \"localhost\",\n+                        \"serverName\": \"postgres_postgres_1\",\n                         \"portNumber\": 5432,\n-                        \"databaseName\": \"fhirdata\",\n-                        \"user\": \"fhirserver\",\n+                        \"databaseName\": \"fhirdb\",\n+                        \"user\": \"fhiradmin\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTg5Nw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODIwMDE2OnYy", "diffSide": "RIGHT", "path": "build/persistence/postgres/Dockerfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDowMDo1M1rOGkrHdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMTo0N1rOGlVqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODM0Mw==", "bodyText": "does this set a password?", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441108343", "createdAt": "2020-06-16T20:00:53Z", "author": {"login": "lmsurpre"}, "path": "build/persistence/postgres/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+###############################################################################\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+###############################################################################\n+\n+FROM postgres:12.3-alpine\n+\n+# Hard Coded environment values\n+ENV POSTGRES_DB fhirdb\n+ENV POSTGRES_USER postgres\n+ENV PGDATA /db/data\n+ENV LANG en_US.utf8\n+\n+# Create a working data directory\n+RUN mkdir -p /db/data && chown -R postgres:postgres /db\n+VOLUME /db/data\n+WORKDIR /db\n+\n+# Open up the port\n+EXPOSE 5432\n+\n+# Load Build Information\n+COPY --chown=postgres:postgres resources/db.sql /docker-entrypoint-initdb.d/db.sql\n+COPY --chown=postgres:postgres resources/docker-entrypoint.sh /docker-entrypoint.sh\n+RUN chmod 755 /docker-entrypoint.sh\n+\n+# Add the fhiradmin user\n+RUN addgroup -S fhir && adduser -S fhiradmin -G fhir\n+RUN echo \"fhiradmin:fhir\" | chpasswd", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTMwMg==", "bodyText": "yeah - to fhir, I'll fix this", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441119302", "createdAt": "2020-06-16T20:23:09Z", "author": {"login": "prb112"}, "path": "build/persistence/postgres/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+###############################################################################\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+###############################################################################\n+\n+FROM postgres:12.3-alpine\n+\n+# Hard Coded environment values\n+ENV POSTGRES_DB fhirdb\n+ENV POSTGRES_USER postgres\n+ENV PGDATA /db/data\n+ENV LANG en_US.utf8\n+\n+# Create a working data directory\n+RUN mkdir -p /db/data && chown -R postgres:postgres /db\n+VOLUME /db/data\n+WORKDIR /db\n+\n+# Open up the port\n+EXPOSE 5432\n+\n+# Load Build Information\n+COPY --chown=postgres:postgres resources/db.sql /docker-entrypoint-initdb.d/db.sql\n+COPY --chown=postgres:postgres resources/docker-entrypoint.sh /docker-entrypoint.sh\n+RUN chmod 755 /docker-entrypoint.sh\n+\n+# Add the fhiradmin user\n+RUN addgroup -S fhir && adduser -S fhiradmin -G fhir\n+RUN echo \"fhiradmin:fhir\" | chpasswd", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODM0Mw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNDU5Mg==", "bodyText": "So it uses chpasswd that's available in alpine examples...\nhttps://linoxide.com/linux-command/change-passwords-batch-mode-chpasswd/", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441804592", "createdAt": "2020-06-17T20:10:21Z", "author": {"login": "prb112"}, "path": "build/persistence/postgres/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+###############################################################################\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+###############################################################################\n+\n+FROM postgres:12.3-alpine\n+\n+# Hard Coded environment values\n+ENV POSTGRES_DB fhirdb\n+ENV POSTGRES_USER postgres\n+ENV PGDATA /db/data\n+ENV LANG en_US.utf8\n+\n+# Create a working data directory\n+RUN mkdir -p /db/data && chown -R postgres:postgres /db\n+VOLUME /db/data\n+WORKDIR /db\n+\n+# Open up the port\n+EXPOSE 5432\n+\n+# Load Build Information\n+COPY --chown=postgres:postgres resources/db.sql /docker-entrypoint-initdb.d/db.sql\n+COPY --chown=postgres:postgres resources/docker-entrypoint.sh /docker-entrypoint.sh\n+RUN chmod 755 /docker-entrypoint.sh\n+\n+# Add the fhiradmin user\n+RUN addgroup -S fhir && adduser -S fhiradmin -G fhir\n+RUN echo \"fhiradmin:fhir\" | chpasswd", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODM0Mw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTQyMQ==", "bodyText": "I actually removed this.", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r441805421", "createdAt": "2020-06-17T20:11:47Z", "author": {"login": "prb112"}, "path": "build/persistence/postgres/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+###############################################################################\n+# (C) Copyright IBM Corp. 2020\n+#\n+# SPDX-License-Identifier: Apache-2.0\n+###############################################################################\n+\n+FROM postgres:12.3-alpine\n+\n+# Hard Coded environment values\n+ENV POSTGRES_DB fhirdb\n+ENV POSTGRES_USER postgres\n+ENV PGDATA /db/data\n+ENV LANG en_US.utf8\n+\n+# Create a working data directory\n+RUN mkdir -p /db/data && chown -R postgres:postgres /db\n+VOLUME /db/data\n+WORKDIR /db\n+\n+# Open up the port\n+EXPOSE 5432\n+\n+# Load Build Information\n+COPY --chown=postgres:postgres resources/db.sql /docker-entrypoint-initdb.d/db.sql\n+COPY --chown=postgres:postgres resources/docker-entrypoint.sh /docker-entrypoint.sh\n+RUN chmod 755 /docker-entrypoint.sh\n+\n+# Add the fhiradmin user\n+RUN addgroup -S fhir && adduser -S fhiradmin -G fhir\n+RUN echo \"fhiradmin:fhir\" | chpasswd", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODM0Mw=="}, "originalCommit": {"oid": "1286af4c03262cbf500701f6c8fbdba8e0c77fa6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDU3NzYyOnYy", "diffSide": "RIGHT", "path": "build/persistence/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyNDowNVrOGmkRZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1OToyNlrOGnEn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzM0OQ==", "bodyText": "should \"persistence\" be \"<persistence>\" (or similar) to indicate that its a placeholder for a specific persistence impl (postgres in this case)?", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r443093349", "createdAt": "2020-06-20T02:24:05Z", "author": {"login": "lmsurpre"}, "path": "build/persistence/README.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# End-to-End Automation Framework for Pesistence Layer Integration Tests\n+\n+This document outlines the end-to-end persistence automation framework. \n+\n+The automation runs with these steps: \n+\n+- **Checkout source code** - Checks out the git code and populates the `github` environment variables.\n+- **Set up java** - Downloads and setup java based on the matrix values `matrix.java`.\n+- **Setup prerequisites** - This step builds the required artifacts necessary to test the build with the persistence layer. \n+- **Server Integration Tests - Additional Persistence Layers** - The step executes the pre-integration-docker, then integration-test-docker and runs the post-integration-docker scripts.\n+- **Gather error logs** - This step only runs upon an error condition. \n+- **Upload logs** - The step uploads the results of the integration tests and the error condition logs are posted to the job. \n+\n+The GitHub Action is parameterized with a matrix for each new persistence layer added. Each additional entry in the array ends up greating a multiple of the automation steps which must complete successfully for the workflow. For instance, postgres is parameterized and executes a job for each persistence layer value in the matrix (one java x one persistence = 1 workflow job). \n+\n+``` yaml\n+    strategy:\n+    matrix:\n+        java: [ 'openjdk11' ]\n+        persistence: [ 'postgres' ]\n+    fail-fast: false\n+```\n+\n+Each persistence layer that is tested as part of the framework uses the default build files and the files that match the persistence name added to the `persistence.yml`.\n+\n+|Filename|Purpose|\n+|----------|----------------|\n+|bin/gather-logs.sh|Gathers the logs from the build|\n+|bin/integration-test.sh|Run after the tests complete to release resources and package tests results|\n+|persistence/integration-test.sh|Overrides bin/integration-test.sh, replacing the prior test behavior.|\n+|bin/pre-integration-test.sh|Call the pre-integration-test step for `persistence`|\n+|persistence/pre-integration-test.sh|Run before integration-test.sh to startup image and services for the integration testing|\n+|bin/post-integration-test.sh|Call the post-integration-test step for `persistence`|\n+|persistence/post-integration-test.sh|Run after integration-test.sh to stop image and services from the integration testing|\n+|persistence/Dockerfile|The Docker file used in development and end-to-end tests|\n+|persistence/docker-compose.yml|The Docker Compose file used with the end-to-end tests|\n+|persistence/resources| Stores files used to support the end-to-end tests. |\n+|persistence/README.md|Describes the relevant details for this persistence layer.|\n+|persistence/.gitignore|Ignores files related to the persistence layer's tests|\n+|`README.md`|This file describing the framework|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a189c7d5ef954c707e04d2e33f302fc505478c59"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzM4OA==", "bodyText": "Fixed - and yes, you are a 100% right", "url": "https://github.com/IBM/FHIR/pull/1234#discussion_r443623388", "createdAt": "2020-06-22T14:59:26Z", "author": {"login": "prb112"}, "path": "build/persistence/README.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# End-to-End Automation Framework for Pesistence Layer Integration Tests\n+\n+This document outlines the end-to-end persistence automation framework. \n+\n+The automation runs with these steps: \n+\n+- **Checkout source code** - Checks out the git code and populates the `github` environment variables.\n+- **Set up java** - Downloads and setup java based on the matrix values `matrix.java`.\n+- **Setup prerequisites** - This step builds the required artifacts necessary to test the build with the persistence layer. \n+- **Server Integration Tests - Additional Persistence Layers** - The step executes the pre-integration-docker, then integration-test-docker and runs the post-integration-docker scripts.\n+- **Gather error logs** - This step only runs upon an error condition. \n+- **Upload logs** - The step uploads the results of the integration tests and the error condition logs are posted to the job. \n+\n+The GitHub Action is parameterized with a matrix for each new persistence layer added. Each additional entry in the array ends up greating a multiple of the automation steps which must complete successfully for the workflow. For instance, postgres is parameterized and executes a job for each persistence layer value in the matrix (one java x one persistence = 1 workflow job). \n+\n+``` yaml\n+    strategy:\n+    matrix:\n+        java: [ 'openjdk11' ]\n+        persistence: [ 'postgres' ]\n+    fail-fast: false\n+```\n+\n+Each persistence layer that is tested as part of the framework uses the default build files and the files that match the persistence name added to the `persistence.yml`.\n+\n+|Filename|Purpose|\n+|----------|----------------|\n+|bin/gather-logs.sh|Gathers the logs from the build|\n+|bin/integration-test.sh|Run after the tests complete to release resources and package tests results|\n+|persistence/integration-test.sh|Overrides bin/integration-test.sh, replacing the prior test behavior.|\n+|bin/pre-integration-test.sh|Call the pre-integration-test step for `persistence`|\n+|persistence/pre-integration-test.sh|Run before integration-test.sh to startup image and services for the integration testing|\n+|bin/post-integration-test.sh|Call the post-integration-test step for `persistence`|\n+|persistence/post-integration-test.sh|Run after integration-test.sh to stop image and services from the integration testing|\n+|persistence/Dockerfile|The Docker file used in development and end-to-end tests|\n+|persistence/docker-compose.yml|The Docker Compose file used with the end-to-end tests|\n+|persistence/resources| Stores files used to support the end-to-end tests. |\n+|persistence/README.md|Describes the relevant details for this persistence layer.|\n+|persistence/.gitignore|Ignores files related to the persistence layer's tests|\n+|`README.md`|This file describing the framework|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzM0OQ=="}, "originalCommit": {"oid": "a189c7d5ef954c707e04d2e33f302fc505478c59"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4896, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}