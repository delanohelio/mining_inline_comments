{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDM0Njk1", "number": 1610, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNTowNFrOEv8HBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNTowNFrOEv8HBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAzMzY1OnYy", "diffSide": "RIGHT", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNTowNFrOHlNSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyNzoxMFrOHlvW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NzE0OQ==", "bodyText": "had a hard time deciding whether this should be info-level or fine-level. opted for info-level since this behavior is new.\nthe issue with this is that we'll see these messages on each and every request that involves search parameters like this.", "url": "https://github.com/IBM/FHIR/pull/1610#discussion_r508777149", "createdAt": "2020-10-20T19:15:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -270,19 +270,25 @@ public static void init() {\n         // If we found a non-empty list of search parameter names to filter on,\n         // then do the filtering. Otherwise, we're just going to return an empty list.\n         if (includedSPs != null && !includedSPs.isEmpty()) {\n-            // If \"*\" is contained in the included SP urls, then we can just return the unfiltered list\n-            // now, since everything in the list will be included anyway.\n-            if (includedSPs.contains(SearchConstants.WILDCARD_FILTER)) {\n-                return unfilteredSearchParameters;\n-            }\n+            boolean includeAll = includedSPs.containsKey(SearchConstants.WILDCARD_FILTER);\n \n-            // Otherwise, we'll walk through the unfiltered list and select the ones to be\n-            // included in our result.\n-            else {\n-                for (SearchParameter sp : unfilteredSearchParameters) {\n+            // Walk through the unfiltered list and select the ones to be included in our result.\n+            for (SearchParameter sp : unfilteredSearchParameters) {\n+                String code = sp.getCode().getValue();\n+                String url = sp.getUrl().getValue();\n \n-                    String url = sp.getUrl().getValue();\n-                    if (includedSPs.contains(url)) {\n+                if (includedSPs.containsKey(code)) {\n+                    if (includedSPs.get(code).equals(url)) {\n+                        results.add(sp);\n+                    } else {\n+                        log.info(\"Skipping search parameter with id='\" + sp.getId() + \"'. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48191e5a36501cc9f93569a2d89fbeaf65b891fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NDg5Mw==", "bodyText": "Question:\nExecuted on every search? if so, I'd say isLogLevel(fine)\nIf it's not, I'd say it's fine.", "url": "https://github.com/IBM/FHIR/pull/1610#discussion_r509274893", "createdAt": "2020-10-21T13:22:54Z", "author": {"login": "prb112"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -270,19 +270,25 @@ public static void init() {\n         // If we found a non-empty list of search parameter names to filter on,\n         // then do the filtering. Otherwise, we're just going to return an empty list.\n         if (includedSPs != null && !includedSPs.isEmpty()) {\n-            // If \"*\" is contained in the included SP urls, then we can just return the unfiltered list\n-            // now, since everything in the list will be included anyway.\n-            if (includedSPs.contains(SearchConstants.WILDCARD_FILTER)) {\n-                return unfilteredSearchParameters;\n-            }\n+            boolean includeAll = includedSPs.containsKey(SearchConstants.WILDCARD_FILTER);\n \n-            // Otherwise, we'll walk through the unfiltered list and select the ones to be\n-            // included in our result.\n-            else {\n-                for (SearchParameter sp : unfilteredSearchParameters) {\n+            // Walk through the unfiltered list and select the ones to be included in our result.\n+            for (SearchParameter sp : unfilteredSearchParameters) {\n+                String code = sp.getCode().getValue();\n+                String url = sp.getUrl().getValue();\n \n-                    String url = sp.getUrl().getValue();\n-                    if (includedSPs.contains(url)) {\n+                if (includedSPs.containsKey(code)) {\n+                    if (includedSPs.get(code).equals(url)) {\n+                        results.add(sp);\n+                    } else {\n+                        log.info(\"Skipping search parameter with id='\" + sp.getId() + \"'. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NzE0OQ=="}, "originalCommit": {"oid": "48191e5a36501cc9f93569a2d89fbeaf65b891fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzNDc1OQ==", "bodyText": "I think it is executed for each search that targets a resource type with filtered parameters which match one of multiple possible target ids.  With our default config, we should never hit this.  The main motivator for keeping it info-level is that I think this will be the only log message you will get if you make an error while specifying the search parameter url in the config (so I don't want to hide that).\nIn the future, I think there is room for improving how we handle these search parameter filters.  For example, if we don't care about allowing dynamic updates to the config, we could check for all tenant configs during startup and validate the urls while we build a tenant-specific ParametersMap.", "url": "https://github.com/IBM/FHIR/pull/1610#discussion_r509334759", "createdAt": "2020-10-21T14:26:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -270,19 +270,25 @@ public static void init() {\n         // If we found a non-empty list of search parameter names to filter on,\n         // then do the filtering. Otherwise, we're just going to return an empty list.\n         if (includedSPs != null && !includedSPs.isEmpty()) {\n-            // If \"*\" is contained in the included SP urls, then we can just return the unfiltered list\n-            // now, since everything in the list will be included anyway.\n-            if (includedSPs.contains(SearchConstants.WILDCARD_FILTER)) {\n-                return unfilteredSearchParameters;\n-            }\n+            boolean includeAll = includedSPs.containsKey(SearchConstants.WILDCARD_FILTER);\n \n-            // Otherwise, we'll walk through the unfiltered list and select the ones to be\n-            // included in our result.\n-            else {\n-                for (SearchParameter sp : unfilteredSearchParameters) {\n+            // Walk through the unfiltered list and select the ones to be included in our result.\n+            for (SearchParameter sp : unfilteredSearchParameters) {\n+                String code = sp.getCode().getValue();\n+                String url = sp.getUrl().getValue();\n \n-                    String url = sp.getUrl().getValue();\n-                    if (includedSPs.contains(url)) {\n+                if (includedSPs.containsKey(code)) {\n+                    if (includedSPs.get(code).equals(url)) {\n+                        results.add(sp);\n+                    } else {\n+                        log.info(\"Skipping search parameter with id='\" + sp.getId() + \"'. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NzE0OQ=="}, "originalCommit": {"oid": "48191e5a36501cc9f93569a2d89fbeaf65b891fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzNTI1Nw==", "bodyText": "Discussed with Paul and we think info level is ok for now given the above.", "url": "https://github.com/IBM/FHIR/pull/1610#discussion_r509335257", "createdAt": "2020-10-21T14:27:10Z", "author": {"login": "lmsurpre"}, "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -270,19 +270,25 @@ public static void init() {\n         // If we found a non-empty list of search parameter names to filter on,\n         // then do the filtering. Otherwise, we're just going to return an empty list.\n         if (includedSPs != null && !includedSPs.isEmpty()) {\n-            // If \"*\" is contained in the included SP urls, then we can just return the unfiltered list\n-            // now, since everything in the list will be included anyway.\n-            if (includedSPs.contains(SearchConstants.WILDCARD_FILTER)) {\n-                return unfilteredSearchParameters;\n-            }\n+            boolean includeAll = includedSPs.containsKey(SearchConstants.WILDCARD_FILTER);\n \n-            // Otherwise, we'll walk through the unfiltered list and select the ones to be\n-            // included in our result.\n-            else {\n-                for (SearchParameter sp : unfilteredSearchParameters) {\n+            // Walk through the unfiltered list and select the ones to be included in our result.\n+            for (SearchParameter sp : unfilteredSearchParameters) {\n+                String code = sp.getCode().getValue();\n+                String url = sp.getUrl().getValue();\n \n-                    String url = sp.getUrl().getValue();\n-                    if (includedSPs.contains(url)) {\n+                if (includedSPs.containsKey(code)) {\n+                    if (includedSPs.get(code).equals(url)) {\n+                        results.add(sp);\n+                    } else {\n+                        log.info(\"Skipping search parameter with id='\" + sp.getId() + \"'. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NzE0OQ=="}, "originalCommit": {"oid": "48191e5a36501cc9f93569a2d89fbeaf65b891fc"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4750, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}