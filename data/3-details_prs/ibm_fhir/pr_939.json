{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTIxNzI3", "number": 939, "title": "Introduce \".well-known/smart-configuration\", change liberty config layout, and update user's guide", "bodyText": "Added lots of details to the OAuth 2.0 section of the user's guide\n\n\nIntroduced a new JAX-RS resource for the\n[base]/.well-known/smart-configuration endpoint which is expected by\nSMART apps.  Left TODOs to implement the various smart-on-fhir capabilities.\n\n\nReplaced fhirKeystore.jks with a newly-generated fhirKeyStore.p12; the\nnew private key in this keystore can be used for encrypting JWT tokens.\n\n\nConverted clientKeystore.jks to .p12 and updated all client and\nserver truststores.\n\n\nRemoved the commented-out config in our default server.xml and\nintroduced oidcProvider.xml and oauthResourceServer.xml at\nfhir-server/libertyConfig/configDropins/disabled to prep for enabling\nOpenId Connection / OAuth supported (perhaps behind some flag).\n\n\nMoved batchDS.xml to configDropins/defaults, added the rest of the\nbulkdata config to it, and renamed to bulkdata.xml\n\n\nRemoved the fhir-install docker build from the default maven build...now you need to explicitly ask for it via either a docker build or using the following maven command:\n\n\nmvn dockerfile:build -f fhir-install\n\n\nissue #923 - split keystore config into separate config file\nThis tells the openliberty docker.ci process not to bother with creating\na separate keystore, thereby removing the conflicting values warning:\n\n  Property password has conflicting values:\n      Secure value is set in\n    file:/opt/ol/wlp/usr/servers/fhir-server/configDropins/defaults/keystore.xml.\n      Secure value is set in\n    file:/opt/ol/wlp/usr/servers/fhir-server/server.xml.\n\n\nMove Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant lmsurpre@us.ibm.com", "createdAt": "2020-04-17T04:58:18Z", "url": "https://github.com/IBM/FHIR/pull/939", "merged": true, "mergeCommit": {"oid": "4ebdebad2db7bd466ebb3865e57c203838caa515"}, "closed": true, "closedAt": "2020-04-22T14:24:21Z", "author": {"login": "lmsurpre"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYaNyDgBqjMyNDI4NTA4MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaJC97AFqTM5ODI0MTUxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abf45508f6bce48178059abab32e249d0c95ae17", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/abf45508f6bce48178059abab32e249d0c95ae17", "committedDate": "2020-04-17T04:57:57Z", "message": "Introduce \".well-known/smart-configuration\" and update user's guide\n\n1. Added lots of details to the OAuth 2.0 section of the user's guide\n\n2. Introduces a new JAX-RS resource for the\n`[base]/.well-known/smart-configuration` endpoint which is expected by\nSMART apps.  But currently it claims we support a lot more than we\nactually do...\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b", "committedDate": "2020-04-17T05:12:32Z", "message": "Introduce \".well-known/smart-configuration\" and update user's guide\n\n1. Added lots of details to the OAuth 2.0 section of the user's guide\n\n2. Introduces a new JAX-RS resource for the\n`[base]/.well-known/smart-configuration` endpoint which is expected by\nSMART apps.  But currently it claims we support a lot more than we\nactually do...\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzUyMzQy", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395752342", "createdAt": "2020-04-17T20:28:27Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoyODoyN1rOGHcINA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoyODoyN1rOGHcINA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NDA2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To properly configure the FHIR server's keystore and truststore files, perform the following steps:\n          \n          \n            \n            To properly configure the FHIR server's keystore and truststore files, perform the following steps.\n          \n      \n    \n    \n  \n\nend in a period, since the other parts are now no longer build points rather sections", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410454068", "createdAt": "2020-04-17T20:28:27Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1454,17 +1455,19 @@ must restart the server for that change to take effect.\n As stated earlier, the FHIR server is installed with a default configuration in `server.xml` which includes the definition of a keystore (`fhirKeystore.jks`) and a truststore (`fhirTruststore.jks`)<sup id=\"a7\">[7](#f7)</sup>. These files are provided only as examples and while they may suffice in a test environment, the FHIR server deployer should generate a new keystore and truststore for any installations where security is a concern. Review the information in the following topics to learn how to configure a secure keystore and truststore.\n \n ### 5.2.2 WebApp security\n-By default, the FHIR server REST API is available on both HTTP and HTTPS endpoints. In addition, the web application (WAR) that contains the FHIR server's REST API implementation is secured via client certificate-based authentication. As a backup to the client authentication scheme, basic authentication is also supported. If the client chooses to use OAuth 2.0 authentication using a Bearer Token mechanism, this can be done as well and is described in more detail in [Section 5.2.5 Oauth 2.0](#525-oauth-20).\n+By default, the FHIR server REST API is only available via HTTPS on port 9443 and protect by HTTP basic authentication.\n+Alternatively, the server can use OpenID Connect and OAuth 2.0 via a Bearer Token as described in [Section 5.2.4 Oauth 2.0](#524-oauth-20).\n+In addition, the FHIR server web application can be secured via client certificate-based authentication.\n \n Here are some notes related to these authentication schemes:\n-*   Basic authentication is a very simple authentication scheme and can be used on both HTTP or HTTPS endpoints, although it is extremely insecure when used with an HTTP endpoint since the user and password information is essentially transmitted in plain text.\n-*   Client certificate-based authentication can only be used in conjunction with an HTTPS endpoint since it involves SSL handshake negotiations.\n-*   The main value of client authentication is that the server is able to securely authenticate the client through the use of certificates.\n-*   OAuth 2.0 authentication can only be used in conjunction with an HTTPS endpoint, because OAuth authorization steps rely on SSL handshake negotiations.\n+*   Basic authentication is a very simple authentication scheme and should only be used over HTTPS because the username and password are essentially transmitted in plain text.\n+*   OAuth 2.0 authentication can only be used in conjunction with an HTTPS endpoint because the OAuth authorization steps rely on SSL handshake negotiations.\n+*   Client certificate-based authentication can only be used in conjunction with an HTTPS endpoint since it involves SSL handshake negotiations. The main value of client authentication is that the server is able to securely authenticate the client through the use of certificates.\n \n-### 5.2.3 Server configuration steps\n+### 5.2.3 Configuring mutual TLS authentication\n To properly configure the FHIR server's keystore and truststore files, perform the following steps:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzUzODA4", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395753808", "createdAt": "2020-04-17T20:31:04Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMTowNVrOGHcMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMTowNVrOGHcMbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n          \n          \n            \n            as well.\n          \n          \n            \n            The following sections are adapted from [WebSphere Liberty knowledge center](https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html) and related pages; the steps apply to OpenLiberty as well.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410455148", "createdAt": "2020-04-17T20:31:05Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU0NDE5", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395754419", "createdAt": "2020-04-17T20:32:10Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMjoxMVrOGHcOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMjoxMVrOGHcOLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTU5Nw==", "bodyText": "maybe mention that the server.xml has the feature enabled by default? it's just not configured?", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410455597", "createdAt": "2020-04-17T20:32:11Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU0NzA3", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395754707", "createdAt": "2020-04-17T20:32:41Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMjo0MlrOGHcPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMjo0MlrOGHcPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n          \n          \n            \n            OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at [Defining OAuth](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html).", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410455826", "createdAt": "2020-04-17T20:32:42Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU0OTg1", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395754985", "createdAt": "2020-04-17T20:33:15Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMzoxNVrOGHcP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMzoxNVrOGHcP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NjAyOQ==", "bodyText": "should this be datasource?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To support \"dynamic client registration\", use a databaseStore by:\n          \n          \n            \n            To support \"dynamic client registration\", use a dataSource by:", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410456029", "createdAt": "2020-04-17T20:33:15Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU1Mjgy", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395755282", "createdAt": "2020-04-17T20:33:47Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMzo0N1rOGHcQxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozMzo0N1rOGHcQxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NjI2Mg==", "bodyText": "put this in a file in the fhir-server?", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410456262", "createdAt": "2020-04-17T20:33:47Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU1NTE4", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395755518", "createdAt": "2020-04-17T20:34:13Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNDoxM1rOGHcRfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNDoxM1rOGHcRfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NjQ0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n          \n          \n            \n            2. Manually creating the necessary tables in your database as described at [OAuth Databases](https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html):", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410456445", "createdAt": "2020-04-17T20:34:13Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU1ODIy", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395755822", "createdAt": "2020-04-17T20:34:48Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNDo0OFrOGHcSVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNDo0OFrOGHcSVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NjY2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n          \n          \n            \n            3. Attempting to register a client (based on the [Client Registration Article](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html)). The endpoint is determined by the id value of the oauthProvider element from the previous step.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410456660", "createdAt": "2020-04-17T20:34:48Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU2MjA1", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395756205", "createdAt": "2020-04-17T20:35:37Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNTozN1rOGHcTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNTozN1rOGHcTdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1Njk0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To add the OpenID Connect Provider config, you must first create a key to use for\n          \n          \n            \n            the signatureAlgorithm.\n          \n          \n            \n            To add the OpenID Connect Provider config, you must first create a key to use for the signatureAlgorithm.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410456949", "createdAt": "2020-04-17T20:35:37Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU2Mjgx", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395756281", "createdAt": "2020-04-17T20:35:48Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNTo0OFrOGHcTrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNTo0OFrOGHcTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n          \n          \n            \n            Instead, allow Liberty to generate its own keystore and use that.\n          \n          \n            \n            Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.  Instead, allow Liberty to generate its own keystore and use that.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457005", "createdAt": "2020-04-17T20:35:48Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU2NTI4", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395756528", "createdAt": "2020-04-17T20:36:14Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjoxNFrOGHcUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjoxNFrOGHcUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n          \n          \n            \n            the token endpoint with the configured code for your client to obtain an access token.\n          \n          \n            \n            After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke the token endpoint with the configured code for your client to obtain an access token.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457194", "createdAt": "2020-04-17T20:36:14Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 246}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU2Njcx", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395756671", "createdAt": "2020-04-17T20:36:31Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjozMlrOGHcUzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjozMlrOGHcUzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzI5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n          \n          \n            \n            For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL is", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457293", "createdAt": "2020-04-17T20:36:32Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU2NzQ3", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395756747", "createdAt": "2020-04-17T20:36:41Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjo0MlrOGHcVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNjo0MlrOGHcVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzM0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n          \n          \n            \n            `https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL is `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457345", "createdAt": "2020-04-17T20:36:42Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 250}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU3MjA1", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395757205", "createdAt": "2020-04-17T20:37:33Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNzozM1rOGHcWVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozNzozM1rOGHcWVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NzY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n          \n          \n            \n            * keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n          \n          \n            \n            \n          \n          \n            \n            2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n          \n          \n            \n            * keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n          \n          \n            \n            * keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n          \n          \n            \n            * `keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer`\n          \n          \n            \n            * `keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer`\n          \n          \n            \n            \n          \n          \n            \n            2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n          \n          \n            \n            * `keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt`\n          \n          \n            \n            * `keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt`", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457687", "createdAt": "2020-04-17T20:37:33Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 262}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU3NDUz", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395757453", "createdAt": "2020-04-17T20:38:01Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODowMVrOGHcXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODowMVrOGHcXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1Nzg5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            ``` xml\n          \n      \n    \n    \n  \n\ndoing this one for formatting demo", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410457898", "createdAt": "2020-04-17T20:38:01Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+\n+### 5.3.2.2 Configure server.xml\n+Add an openidConnectClient element to the server.xml config and point at the trustStore from the previous section:\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU3Nzkx", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395757791", "createdAt": "2020-04-17T20:38:40Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODo0MFrOGHcYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozODo0MFrOGHcYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <requestUrl urlPattern=\"/fhir-server\" />\n          \n          \n            \n                <requestUrl urlPattern=\"/fhir-server\" />\n          \n      \n    \n    \n  \n\nshould we make a note about bulkimport not being client usable?", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410458138", "createdAt": "2020-04-17T20:38:40Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+\n+### 5.3.2.2 Configure server.xml\n+Add an openidConnectClient element to the server.xml config and point at the trustStore from the previous section:\n+```\n+<openidConnectClient id=\"RS\" inboundPropagation=\"required\"\n+    clientId=\"inferno\"\n+    mapIdentityToRegistryUser=\"true\"\n+    trustStoreRef=\"defaultKeyStore\"\n+    trustAliasName=\"libertyop\"\n+    validationEndpointUrl=\"https://localhost:9443/oidc/endpoint/oidc-provider/introspect\"\n+    signatureAlgorithm=\"RS256\"\n+    authFilterRef=\"filter\"\n+    issuerIdentifier=\"https://localhost:9443/oauth2/endpoint/oauth2-provider,https://host.docker.internal:9443/oauth2/endpoint/oauth2-provider\"\n+    />\n+\n+<authFilter id=\"filter\">\n+    <requestUrl urlPattern=\"/fhir-server\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 279}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU4MTI5", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395758129", "createdAt": "2020-04-17T20:39:19Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozOToxOVrOGHcZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozOToxOVrOGHcZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODQ0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: if the server is also acting as an OAuth/OpenId Connect provider, be sure to include an authFilter to avoid a catch-22 where\n          \n          \n            \n            the token and authorization endpoints are themselves protected by the openidConnectClient.\n          \n          \n            \n            Note: if the server is also acting as an OAuth/OpenId Connect provider, be sure to include an authFilter to avoid the problem where the token and authorization endpoints are protected by the openidConnectClient.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410458441", "createdAt": "2020-04-17T20:39:19Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+\n+### 5.3.2.2 Configure server.xml\n+Add an openidConnectClient element to the server.xml config and point at the trustStore from the previous section:\n+```\n+<openidConnectClient id=\"RS\" inboundPropagation=\"required\"\n+    clientId=\"inferno\"\n+    mapIdentityToRegistryUser=\"true\"\n+    trustStoreRef=\"defaultKeyStore\"\n+    trustAliasName=\"libertyop\"\n+    validationEndpointUrl=\"https://localhost:9443/oidc/endpoint/oidc-provider/introspect\"\n+    signatureAlgorithm=\"RS256\"\n+    authFilterRef=\"filter\"\n+    issuerIdentifier=\"https://localhost:9443/oauth2/endpoint/oauth2-provider,https://host.docker.internal:9443/oauth2/endpoint/oauth2-provider\"\n+    />\n+\n+<authFilter id=\"filter\">\n+    <requestUrl urlPattern=\"/fhir-server\" />\n+</authFilter>\n+```\n+\n+Note: if the server is also acting as an OAuth/OpenId Connect provider, be sure to include an authFilter to avoid a catch-22 where\n+the token and authorization endpoints are themselves protected by the openidConnectClient.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 284}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU4MjU4", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395758258", "createdAt": "2020-04-17T20:39:35Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozOTozNVrOGHcZqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDozOTozNVrOGHcZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODUzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To configure the FHIR Server with the OpenID Connect and OAuth 2.0 endpoints for the providers,\n          \n          \n            \n            specify the following values in the default fhir-server-config.json file:\n          \n          \n            \n            To configure the FHIR Server with the OpenID Connect and OAuth 2.0 endpoints for the providers, specify the following values in the default fhir-server-config.json file:", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410458538", "createdAt": "2020-04-17T20:39:35Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+\n+### 5.3.2.2 Configure server.xml\n+Add an openidConnectClient element to the server.xml config and point at the trustStore from the previous section:\n+```\n+<openidConnectClient id=\"RS\" inboundPropagation=\"required\"\n+    clientId=\"inferno\"\n+    mapIdentityToRegistryUser=\"true\"\n+    trustStoreRef=\"defaultKeyStore\"\n+    trustAliasName=\"libertyop\"\n+    validationEndpointUrl=\"https://localhost:9443/oidc/endpoint/oidc-provider/introspect\"\n+    signatureAlgorithm=\"RS256\"\n+    authFilterRef=\"filter\"\n+    issuerIdentifier=\"https://localhost:9443/oauth2/endpoint/oauth2-provider,https://host.docker.internal:9443/oauth2/endpoint/oauth2-provider\"\n+    />\n+\n+<authFilter id=\"filter\">\n+    <requestUrl urlPattern=\"/fhir-server\" />\n+</authFilter>\n+```\n+\n+Note: if the server is also acting as an OAuth/OpenId Connect provider, be sure to include an authFilter to avoid a catch-22 where\n+the token and authorization endpoints are themselves protected by the openidConnectClient.\n+\n+### 5.3.3 Configure the fhir-server\n+To configure the FHIR Server with the OpenID Connect and OAuth 2.0 endpoints for the providers,\n+specify the following values in the default fhir-server-config.json file:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 288}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU4Njcy", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395758672", "createdAt": "2020-04-17T20:40:14Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDoxNFrOGHca6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDoxNFrOGHca6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1ODg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the Liberty server is the OpenID Connect / OAuth 2.0 provider, use a placeholder of `<host>` in the property values\n          \n          \n            \n            to have the server automatically replace this text with the hostname of the original request (see `fhirServer/core/originalRequestUriHeaderName`).\n          \n          \n            \n            \n          \n          \n            \n            These values will be used to populate the corresponding entries in both the server capability statement (`GET [base]/metadata`)\n          \n          \n            \n            and the smart-configuration (`GET [base]/.well-known/smart-configuration`).\n          \n          \n            \n            \n          \n          \n            \n            For example, the following excerpt from a CapabilityStatement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n          \n          \n            \n            When the Liberty server is the OpenID Connect / OAuth 2.0 provider, use a placeholder of `<host>` in the property values to have the server automatically replace this text with the hostname of the original request (see `fhirServer/core/originalRequestUriHeaderName`).\n          \n          \n            \n            \n          \n          \n            \n            These values will be used to populate the corresponding entries in both the server capability statement (`GET [base]/metadata`) and the smart-configuration (`GET [base]/.well-known/smart-configuration`).\n          \n          \n            \n            \n          \n          \n            \n            For example, the following excerpt from a CapabilityStatement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r410458856", "createdAt": "2020-04-17T20:40:14Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n *   If the client is using OAuth 2.0 Authentication, then the client keystore must be configured with the REST API client framework. In addition, it must send an appropriate Authorization request header containing the Bearer token in the HTTP request.\n \n-### 5.2.5 OAuth 2.0\n-In the default configuration, the FHIR server acts as an authorization server as well as a resource server. The FHIR server's conformance statement includes the OAuth-related URLs you will need to get started. The following excerpt from a conformance statement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.\n+## 5.3 OpenID Connect and OAuth 2.0\n+The FHIR specification recommends the use of OpenID Connect and OAuth 2.0.\n+The IBM FHIR Server supports these via Liberty's OpenID Connect support.\n+The following sections are adapted from https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_config_oidc_pc_examp_beginner.html and related pages in the WebSphere Liberty knowledge center, but they apply to OpenLiberty\n+as well.\n+\n+### 5.3.1 Configure Liberty as the OpenID Connect Provider\n+Liberty can be configured to act as an OpenID Connect Provider via the [openidConnectServer-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectServer-1.0.html).\n+\n+### 5.3.1.1 Configure Liberty as an OAuth 2.0 Provider\n+OpenID Connect is built on OAuth 2.0 and so you must first configure Liberty as an OAuth provider as described at https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_oauth_defining.html.\n+\n+Liberty supports the registration of clients through either a localStore in the server.xml or a databaseStore in a configured dataSource.\n+To support \"dynamic client registration\", use a databaseStore by:\n \n+1. Configuring a clientManager oauth-role and specifying a databaseStore in the oauthProvider element of `server.xml`.\n+    For example, to use Apache Derby for the store, include something like the following:\n+    ```\n+    <oauth-roles>\n+        <authenticated>\n+            <special-subject type=\"ALL_AUTHENTICATED_USERS\"/>\n+        </authenticated>\n+        <clientManager>\n+            <group name=\"clientAdministrator\" />\n+        </clientManager>\n+    </oauth-roles>\n+\n+    <oauthProvider id=\"oauth2-provider\" oauthOnly=\"false\" allowPublicClients=\"true\" jwtAccessToken=\"true\">\n+        <grantType>authorization_code</grantType>\n+        <databaseStore dataSourceRef=\"OAuthDataSource\" />\n+    </oauthProvider>\n+\n+    <dataSource id=\"OAuthDataSource\" jndiName=\"jdbc/OAuth2DB\">\n+        <properties.derby.embedded createDatabase=\"create\" databaseName=\"derby/oauth2db\" />\n+        <jdbcDriver libraryRef=\"derbyLib\"/>\n+    </dataSource>\n+\n+    <library id=\"derbyLib\">\n+        <fileset dir=\"${shared.resource.dir}/lib/derby\" includes=\"*.jar\"/>\n+    </library>\n+    ```\n+\n+2. Manually creating the necessary tables in your database as described at https://www.ibm.com/support/knowledgecenter/SSD28V_liberty/com.ibm.websphere.wlp.core.doc/ae/twlp_oauth_dbs.html:\n+\n+```\n+----- CREATE TABLES -----\n+CREATE TABLE OAuthDBSchema.OAUTH20CACHE\n+(\n+  LOOKUPKEY VARCHAR(256) NOT NULL,\n+  UNIQUEID VARCHAR(128) NOT NULL,\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  TYPE VARCHAR(64) NOT NULL,\n+  SUBTYPE VARCHAR(64),\n+  CREATEDAT BIGINT,\n+  LIFETIME INT,\n+  EXPIRES BIGINT,\n+  TOKENSTRING VARCHAR(2048) NOT NULL,\n+  CLIENTID VARCHAR(64) NOT NULL,\n+  USERNAME VARCHAR(64) NOT NULL,\n+  SCOPE VARCHAR(512) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  STATEID VARCHAR(64) NOT NULL,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+(\n+  COMPONENTID VARCHAR(256) NOT NULL,\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  CLIENTSECRET VARCHAR(256),\n+  DISPLAYNAME VARCHAR(256) NOT NULL,\n+  REDIRECTURI VARCHAR(2048),\n+  ENABLED INT,\n+  CLIENTMETADATA CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+CREATE TABLE OAuthDBSchema.OAUTH20CONSENTCACHE\n+(\n+  CLIENTID VARCHAR(256) NOT NULL,\n+  USERID VARCHAR(256),\n+  PROVIDERID VARCHAR(256) NOT NULL,\n+  SCOPE VARCHAR(1024) NOT NULL,\n+  EXPIRES BIGINT,\n+  EXTENDEDFIELDS CLOB NOT NULL DEFAULT '{}'\n+);\n+\n+----- ADD CONSTRAINTS -----\n+ALTER TABLE OAuthDBSchema.OAUTH20CACHE\n+  ADD CONSTRAINT PK_LOOKUPKEY PRIMARY KEY (LOOKUPKEY);\n+\n+ALTER TABLE OAuthDBSchema.OAUTH20CLIENTCONFIG\n+  ADD CONSTRAINT PK_COMPIDCLIENTID PRIMARY KEY (COMPONENTID,CLIENTID);\n+\n+----- CREATE INDEXES -----\n+CREATE INDEX OAUTH20CACHE_EXPIRES ON OAUTHDBSCHEMA.OAUTH20CACHE (EXPIRES ASC);\n+```\n+\n+3. Attempting to register a client (based on https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html). The endpoint is determined by the id value of the oauthProvider element from the previous step.\n+\n+For example, for an OAuth provider with `id=\"oauth2-provider\"`:\n+```\n+curl -u 'fhiruser:change-password' 'https://localhost:9443/oidc/endpoint/oauth2-provider/registration' \\\n+--header 'Content-Type: application/json' \\\n+--data-raw '{\n+   \"token_endpoint_auth_method\":\"client_secret_basic\",\n+   \"scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"grant_types\":[\n+      \"authorization_code\",\n+      \"client_credentials\",\n+      \"implicit\",\n+      \"refresh_token\",\n+      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n+   ],\n+   \"response_types\":[\n+      \"code\",\n+      \"token\",\n+      \"id_token token\"\n+   ],\n+   \"application_type\":\"web\",\n+   \"subject_type\":\"public\",\n+   \"post_logout_redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ],\n+   \"preauthorized_scope\":\"launch launch/patient offline_access openid profile user/*.* patient/*.*\",\n+   \"introspect_tokens\":true,\n+   \"trusted_uri_prefixes\":[\n+      \"https://server.example.com:9000/trusted/\"\n+   ],\n+   \"redirect_uris\":[\n+      \"http://localhost:4567/inferno/oauth2/static/redirect\"\n+   ]\n+}'\n+```\n+\n+### 5.3.1.2 Configure Liberty as an OAuth 2.0 Provider\n+\n+To add the OpenID Connect Provider config, you must first create a key to use for\n+the signatureAlgorithm.\n+\n+Note: the current private key in the fhirKeystore.jks keystore is NOT usable as a signing key.\n+Instead, allow Liberty to generate its own keystore and use that.\n+\n+Assuming the defaultKeyStore has a valid key for signing, add the openidConnectProvider element to your server.xml:\n+```\n+<openidConnectProvider id=\"oidc-provider\"\n+    oauthProviderRef=\"oauth2-provider\"\n+    keyStoreRef=\"defaultKeyStore\"\n+    signatureAlgorithm=\"RS256\" />\n+```\n+\n+### 5.3.1.3 Request an access token\n+After you've registered a client (either via dynamic registration or static config) and configured the openidConnectProvider, invoke\n+the token endpoint with the configured code for your client to obtain an access token.\n+\n+The specific endpoint is determined by the id value of the openidConnectProvider element from the previous section.\n+For example, for an OpenID Connect provider with `id=\"oidc-provider\"`, the auth URL will be\n+`https://[host]:[port]/oauth2/endpoint/oidc-provider/authorize` and the token URL will be `https://[host]:[port]/oauth2/endpoint/oidc-provider/token`.\n+\n+### 5.3.2 Configure Liberty as the OpenID Connect Relying Party\n+Liberty can be configured to act as an OpenID Connect Relying Party via the [openidConnectClient-1.0 feature](https://openliberty.io/docs/ref/feature/#openidConnectClient-1.0.html).\n+\n+### 5.3.2.1 Configure the trustStore\n+1. Export the server's certificate from the configured keystore via one of the following commands:\n+* keytool -exportcert -keystore key.p12 -storepass Password -alias default -file libertyOP.cer\n+* keytool -exportcert -keystore key.jks -storepass Password -alias default -file libertyOP.cer\n+\n+2. Import the certificate into the server's trustStore. Assuming you use the same keystore for both, then use of these:\n+* keytool -importcert -keystore key.p12 -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+* keytool -importcert -keystore key.jks -storepass Password -alias libertyop -file libertyOP.cer -noprompt\n+\n+### 5.3.2.2 Configure server.xml\n+Add an openidConnectClient element to the server.xml config and point at the trustStore from the previous section:\n+```\n+<openidConnectClient id=\"RS\" inboundPropagation=\"required\"\n+    clientId=\"inferno\"\n+    mapIdentityToRegistryUser=\"true\"\n+    trustStoreRef=\"defaultKeyStore\"\n+    trustAliasName=\"libertyop\"\n+    validationEndpointUrl=\"https://localhost:9443/oidc/endpoint/oidc-provider/introspect\"\n+    signatureAlgorithm=\"RS256\"\n+    authFilterRef=\"filter\"\n+    issuerIdentifier=\"https://localhost:9443/oauth2/endpoint/oauth2-provider,https://host.docker.internal:9443/oauth2/endpoint/oauth2-provider\"\n+    />\n+\n+<authFilter id=\"filter\">\n+    <requestUrl urlPattern=\"/fhir-server\" />\n+</authFilter>\n+```\n+\n+Note: if the server is also acting as an OAuth/OpenId Connect provider, be sure to include an authFilter to avoid a catch-22 where\n+the token and authorization endpoints are themselves protected by the openidConnectClient.\n+\n+### 5.3.3 Configure the fhir-server\n+To configure the FHIR Server with the OpenID Connect and OAuth 2.0 endpoints for the providers,\n+specify the following values in the default fhir-server-config.json file:\n+* `fhirServer/oauth/regUrl`\n+* `fhirServer/oauth/authUrl`\n+* `fhirServer/oauth/tokenUrl`\n+\n+When the Liberty server is the OpenID Connect / OAuth 2.0 provider, use a placeholder of `<host>` in the property values\n+to have the server automatically replace this text with the hostname of the original request (see `fhirServer/core/originalRequestUriHeaderName`).\n+\n+These values will be used to populate the corresponding entries in both the server capability statement (`GET [base]/metadata`)\n+and the smart-configuration (`GET [base]/.well-known/smart-configuration`).\n+\n+For example, the following excerpt from a CapabilityStatement shows sample OAuth-related URLs (token, authorize, and register) as values of the `valueUri` elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 299}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzU5Njg3", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-395759687", "createdAt": "2020-04-17T20:42:06Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTIwMzEy", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-396120312", "createdAt": "2020-04-20T03:38:07Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozODowN1rOGIB0LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozODowN1rOGIB0LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MTUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * [5.3 OpenID Connect and OAuth 2.0](#53-openid-connect-and-oauth-2_0)\n          \n          \n            \n              * [5.3 OpenID Connect and OAuth 2.0](#53-openid-connect-and-oauth-20)", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r411071532", "createdAt": "2020-04-20T03:38:07Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -32,7 +32,8 @@ permalink: /FHIRServerUsersGuide/\n - [5 Appendix](#5-appendix)\n   * [5.1 Configuration properties reference](#51-configuration-properties-reference)\n   * [5.2 Keystores, truststores, and the FHIR server](#52-keystores-truststores-and-the-fhir-server)\n-  * [5.3 Custom HTTP Headers](#53-custom-http-headers)\n+  * [5.3 OpenID Connect and OAuth 2.0](#53-openid-connect-and-oauth-2_0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTIwNDky", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-396120492", "createdAt": "2020-04-20T03:39:00Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozOTowMFrOGIB1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozOTowMFrOGIB1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MTgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, the FHIR server REST API is only available via HTTPS on port 9443 and protect by HTTP basic authentication.\n          \n          \n            \n            By default, the FHIR server REST API is only available via HTTPS on port 9443 and is protected by HTTP basic authentication.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r411071802", "createdAt": "2020-04-20T03:39:00Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1454,17 +1455,19 @@ must restart the server for that change to take effect.\n As stated earlier, the FHIR server is installed with a default configuration in `server.xml` which includes the definition of a keystore (`fhirKeystore.jks`) and a truststore (`fhirTruststore.jks`)<sup id=\"a7\">[7](#f7)</sup>. These files are provided only as examples and while they may suffice in a test environment, the FHIR server deployer should generate a new keystore and truststore for any installations where security is a concern. Review the information in the following topics to learn how to configure a secure keystore and truststore.\n \n ### 5.2.2 WebApp security\n-By default, the FHIR server REST API is available on both HTTP and HTTPS endpoints. In addition, the web application (WAR) that contains the FHIR server's REST API implementation is secured via client certificate-based authentication. As a backup to the client authentication scheme, basic authentication is also supported. If the client chooses to use OAuth 2.0 authentication using a Bearer Token mechanism, this can be done as well and is described in more detail in [Section 5.2.5 Oauth 2.0](#525-oauth-20).\n+By default, the FHIR server REST API is only available via HTTPS on port 9443 and protect by HTTP basic authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTIxMjAx", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-396121201", "createdAt": "2020-04-20T03:42:11Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MjoxMVrOGIB4XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MjoxMVrOGIB4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjYwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n          \n          \n            \n            *   If the client is using the FHIR server's HTTPS endpoint, then the client's truststore should be configured with the certificate of the FHIR server<sup id=\"a11\">[11](#f11)</sup>.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r411072604", "createdAt": "2020-04-20T03:42:11Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTIxNDYx", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-396121461", "createdAt": "2020-04-20T03:43:21Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MzoyMVrOGIB5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0MzoyMVrOGIB5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.\n          \n          \n            \n            *   If the client is using client certificate-based Authentication, then the client keystore must be configured with a certificate that is trusted by the FHIR server<sup id=\"a12\">[12](#f12)</sup>.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r411072912", "createdAt": "2020-04-20T03:43:21Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1505,23 +1508,230 @@ To properly configure the FHIR server's keystore and truststore files, perform t\n     ```\n \n 6.  Import the client's public key certificate into the server's truststore:\n-keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n \n-7.  Be sure to copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n+    ```\n+    keytool -keystore serverTruststore.jks -storepass change-password -import -file client-public-key.cer\n+    ```\n+\n+At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n \n-### 5.2.4 Client configuration\n-FHIR REST API consumers (clients) must be properly configured to successfully participate in client certificate-based authentication. The previous section provided instructions on how to configure a keystore and truststore on the server. Those instructions also included the steps involving the client keystore and truststore as well. At this point, you should have a client keystore that contains a client certificate whose Distinguished Name's Common Name component is set to the username. You should also have a client truststore which contains the server's public key certificate. Essentially, the server and client both have a keystore that contains their own private and public key certificate and they both have a truststore which contains the public key certificate of their counterpart.\n+### 5.2.3.1 Configure the server\n+Copy the server keystore (`serverKeystore.jks`) and truststore (`serverTruststore.jks`) files to the appropriate directory (`$WLP_HOME/usr/servers/fhir-server/resources/security`). Then configure the `server.xml` file correctly to reference your new keystore and truststore files.\n \n-Although the steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, the client has several main requirements, as summarized in the following list:\n+### 5.2.3.2 Configure the client\n+The precise steps required to configure certificate-based authentication for a client application depend on the specific REST API client framework, but these are the general rules:\n \n *   If the client is using the FHIR server's HTTPS endpoint, then the client truststore should be configured with the REST API client framework<sup id=\"a11\">[11](#f11)</sup>.\n *   If the client is using basic authentication, then it must send an appropriate Authorization request header containing the username and password information in the HTTP request.\n *   If the client is using client certificate-based Authentication, then the client keystore must be configured with the REST API client framework<sup id=\"a12\">[12](#f12)</sup>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTI0MTA0", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-396124104", "createdAt": "2020-04-20T03:55:10Z", "commit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo1NToxMFrOGICFyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo1NToxMFrOGICFyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3NjA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            SMART on FHIR applications should use the `.well-known` endpoint to determine the OAuth URLs to use for authorization,\n          \n          \n            \n            SMART on FHIR applications should use the `.well-known/smart-configuration` endpoint to determine the OAuth URLs to use for authorization,", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r411076043", "createdAt": "2020-04-20T03:55:10Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRServerUsersGuide.md", "diffHunk": "@@ -1530,38 +1740,30 @@ In the default configuration, the FHIR server acts as an authorization server as\n       \"security\": {\n         \"extension\": [\n           {\n-            \"url\": \"http://<SERVER>\",\n+            \"url\": \"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\"\n             \"extension\": [\n               {\n                 \"url\": \"token\",\n-                \"valueUri\": \"https://<host>:<httpsPort>/oauth2/endpoint/oauth2-provider/token\"\n+                \"valueUri\": \"https://localhost:9443/oauth2/endpoint/oauth2-provider/token\"\n               },\n               {\n                 \"url\": \"authorize\",\n-                \"valueUri\": \"https://<host>:<httpsPort>/oauth2/endpoint/oauth2-provider/authorize\"\n+                \"valueUri\": \"https://localhost:9443/oauth2/endpoint/oauth2-provider/authorize\"\n               },\n               {\n                 \"url\": \"register\",\n-                \"valueUri\": \"https://<host>:<httpsPort>/oidc/endpoint/oidc-provider/registration\"\n+                \"valueUri\": \"https://localhost:9443/oidc/endpoint/oidc-provider/registration\"\n               }\n             ]\n           }\n         ],\n \u2026\n ```\n \n-First, a client application (web or mobile) must register itself with the Open ID Connect Provider using the following URL:  \n-`https://<host>:<httpsPort>/oidc/endpoint/oidc-provider/registration`\n-\n-For more information about client registration, see the [WebSphere Application Server Liberty base documentation](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_client_registration.html).\n-\n-By default, a Derby database is used to persist the OAuth-related configuration.\n-\n-TODO: document how to configure Db2 for use with the Liberty OAuth 2.0 feature.\n-\n-SMART on FHIR applications use the capability statement to determine the OAuth URLs to use for authorization.\n+SMART on FHIR applications should use the `.well-known` endpoint to determine the OAuth URLs to use for authorization,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1f9c3c1a2fd1cf39932974b3884dc01c5f183b"}, "originalPosition": 341}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1ea295446fafd5a3c85b3b26650c2d3eac4287e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/d1ea295446fafd5a3c85b3b26650c2d3eac4287e", "committedDate": "2020-04-20T15:11:26Z", "message": "issue #923 - split keystore config into separate config file\n\nThis tells the openliberty docker.ci process not to bother with creating\na separate keystore, thereby removing the conflicting values warning:\n```\n  Property password has conflicting values:\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/configDropins/defaults/keystore.xml.\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/server.xml.\n```\n\nI also added a version tag (20.0.0.3) to our Dockerfile to make our\nbuilds more consistent...this should be kept in-sync with our\nliberty-runtime dependency version in `fhir-parent/pom.xml`.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "bcbb2ea5ab09591e0ef62c09a2279ab280fa4b45", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/bcbb2ea5ab09591e0ef62c09a2279ab280fa4b45", "committedDate": "2020-04-20T15:11:53Z", "message": "issue #923 - split keystore config into separate config file\n\nThis tells the openliberty docker.ci process not to bother with creating\na separate keystore, thereby removing the conflicting values warning:\n```\n  Property password has conflicting values:\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/configDropins/defaults/keystore.xml.\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/server.xml.\n```\n\nI also added a version tag (20.0.0.3) to our Dockerfile to make our\nbuilds more consistent...this should be kept in-sync with our\nliberty-runtime dependency version in `fhir-parent/pom.xml`.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91f809abb96497cb5c41ee2bd8d8f7965e949c9c", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/91f809abb96497cb5c41ee2bd8d8f7965e949c9c", "committedDate": "2020-04-20T15:20:44Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "e12fa25c235a7d5232880bcaef6be077cee5c666", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/e12fa25c235a7d5232880bcaef6be077cee5c666", "committedDate": "2020-04-20T15:44:17Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e12fa25c235a7d5232880bcaef6be077cee5c666", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/e12fa25c235a7d5232880bcaef6be077cee5c666", "committedDate": "2020-04-20T15:44:17Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "4a9f877f270214dd3de443c47cd7b9514c3be6d7", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/4a9f877f270214dd3de443c47cd7b9514c3be6d7", "committedDate": "2020-04-20T16:44:54Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a9f877f270214dd3de443c47cd7b9514c3be6d7", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/4a9f877f270214dd3de443c47cd7b9514c3be6d7", "committedDate": "2020-04-20T16:44:54Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "6625b99f0df1c16859b072a8e3c9ed4a254ccc15", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/6625b99f0df1c16859b072a8e3c9ed4a254ccc15", "committedDate": "2020-04-20T18:15:44Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nFinally, I removed the dockerfile-maven-plugin from the default build.\nNow you must invoke the docker build yourself after doing the main build.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e674bde1e92a4520c09c623af0a48139d4d5b894", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/e674bde1e92a4520c09c623af0a48139d4d5b894", "committedDate": "2020-04-21T20:01:52Z", "message": "Move liberty oauth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "98daf112dbd8f6a6f7addede53d1d6a39f272f57", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/98daf112dbd8f6a6f7addede53d1d6a39f272f57", "committedDate": "2020-04-21T22:23:20Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f153c6493cdb07433f79ab7a80a567b5eade506f", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/f153c6493cdb07433f79ab7a80a567b5eade506f", "committedDate": "2020-04-22T02:10:07Z", "message": "Introduce \".well-known/smart-configuration\" and update user's guide\n\n1. Added lots of details to the OAuth 2.0 section of the user's guide\n\n2. Introduces a new JAX-RS resource for the\n`[base]/.well-known/smart-configuration` endpoint which is expected by\nSMART apps.  But currently it claims we support a lot more than we\nactually do...\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232e4c58e19818995bf7521d64c164ebc0cd498b", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/232e4c58e19818995bf7521d64c164ebc0cd498b", "committedDate": "2020-04-22T02:10:08Z", "message": "Apply suggestions from code review\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50172ccfa72653df4377a584e8d33a0132a2e897", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/50172ccfa72653df4377a584e8d33a0132a2e897", "committedDate": "2020-04-22T02:16:44Z", "message": "Update keystores and introduce oauth configDropins\n\n1. Replace fhirKeystore.jks with a newly-generated fhirKeyStore.p12; the\nnew private key in this keystore can be used for encrypting JWT tokens.\n\n2. Update clientKeystore.jks to .p12 and update both the client and\nserver truststores.\n\n3. Removed the commented-out config in our default server.xml and\nintroduced `oauthProvider.xml` and `oauthResourceServer.xml` at\nfhir-server/libertyConfig/configDropins/disabled to prep for enabling\nOpenId Connection / OAuth supported (perhaps behind some flag).\n\n4. Moved batchDS.xml to configDropins/defaults, added the rest of the\nbulkdata config to it, and renamed to bulkdata.xml\n\n5. Update the user's guide\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794aafe96e0e0b5a4ca8122eaea7eafcba980104", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/794aafe96e0e0b5a4ca8122eaea7eafcba980104", "committedDate": "2020-04-22T02:16:44Z", "message": "issue #923 - split keystore config into separate config file\n\nThis tells the openliberty docker.ci process not to bother with creating\na separate keystore, thereby removing the conflicting values warning:\n```\n  Property password has conflicting values:\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/configDropins/defaults/keystore.xml.\n    Secure value is set in\nfile:/opt/ol/wlp/usr/servers/fhir-server/server.xml.\n```\n\nI also added a version tag (20.0.0.3) to our Dockerfile to make our\nbuilds more consistent...this should be kept in-sync with our\nliberty-runtime dependency version in `fhir-parent/pom.xml`.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916927a8d52d010bf425ba066923b50aae66aa3e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/916927a8d52d010bf425ba066923b50aae66aa3e", "committedDate": "2020-04-22T02:16:45Z", "message": "Walk back the claims in WellKnown smart-configuration\n\nI also moved the keystore config back into server.xml to fix warnings\ngenerated by tools that aren't dropinConfig-aware.\n\nFinally, I removed the dockerfile-maven-plugin from the default build.\nNow you must invoke the docker build yourself after doing the main build.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98daf112dbd8f6a6f7addede53d1d6a39f272f57", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/98daf112dbd8f6a6f7addede53d1d6a39f272f57", "committedDate": "2020-04-21T22:23:20Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "4b17dea93df2829b4c691d56f6fb76287bac25b9", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/4b17dea93df2829b4c691d56f6fb76287bac25b9", "committedDate": "2020-04-22T03:39:37Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/567dc9b564a2f49586445d5a5dabaeb101290e99", "committedDate": "2020-04-22T04:00:59Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b17dea93df2829b4c691d56f6fb76287bac25b9", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/4b17dea93df2829b4c691d56f6fb76287bac25b9", "committedDate": "2020-04-22T03:39:37Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/567dc9b564a2f49586445d5a5dabaeb101290e99", "committedDate": "2020-04-22T04:00:59Z", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default\n\nPreviously, a user needed to create these tables themselves if they\nwanted to use liberty as an OAuth 2.0 provider with a databaseStore\n(e.g. to dynamically manage OAuth 2.0 clients).\n\nNow these tables will be created/updated as part of the\nfhir-persistence-schema create-schema/update-schema actions, or as part\nof derby bootstrapping.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTY2NjA3", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-398166607", "createdAt": "2020-04-22T13:02:51Z", "commit": {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMjo1MVrOGJ1N2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMjo1MVrOGJ1N2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MjI2NQ==", "bodyText": "this causes lazy loading.", "url": "https://github.com/IBM/FHIR/pull/939#discussion_r412962265", "createdAt": "2020-04-22T13:02:51Z", "author": {"login": "prb112"}, "path": "fhir-server/liberty-config/server.xml", "diffHunk": "@@ -2,99 +2,35 @@\n \n     <!-- Enable features -->\n     <featureManager>\n+        <feature>transportSecurity-1.0</feature>\n         <feature>appSecurity-2.0</feature>\n-        <feature>batchManagement-1.0</feature>\n         <feature>jaxrs-2.1</feature>\n+        <feature>servlet-4.0</feature>\n+        <feature>jsonp-1.1</feature>\n         <!-- the db2 jcc driver for 11.5.0.0 doesn't fully implement jdbc-4.2 -->\n         <feature>jdbc-4.1</feature>\n-        <feature>jsonp-1.1</feature>\n-        <feature>mpOpenAPI-1.0</feature>\n-        <feature>openidConnectServer-1.0</feature>\n-        <feature>servlet-4.0</feature>\n-        <feature>transportSecurity-1.0</feature>\n         <feature>websocket-1.1</feature>\n+        <feature>localConnector-1.0</feature>\n+        <feature>mpOpenAPI-1.0</feature>\n     </featureManager>\n \n     <!-- Disable welcome page so that internal server info won't be revealed in responses\n          to requests with an invalid context root.\n     -->\n-    <httpDispatcher enableWelcomePage=\"false\" />\n+    <httpDispatcher enableWelcomePage=\"false\"/>\n     <!-- Disable X-Powered-By header to avoid leaking information and\n          override the default error pages to avoid showing stack traces\n          for nonsensical queries like requests for a JSP page that doesn't exist.\n     -->\n-    <webContainer disableXPoweredBy=\"true\" \n-        displaytextwhennoerrorpagedefined=\"Unexpected request/response. Please check the URL and try again.\"\n-        deferServletLoad=\"false\" />\n+    <webContainer disableXPoweredBy=\"true\"\n+        displayTextWhenNoErrorPageDefined=\"Unexpected request/response. Please check the URL and try again.\"\n+        deferServletLoad=\"true\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15470b4bbe5635bf2c752ed11e7231356cdc1ba7", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/15470b4bbe5635bf2c752ed11e7231356cdc1ba7", "committedDate": "2020-04-22T13:05:12Z", "message": "Update fhir-server/liberty-config/server.xml\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjQxNTE1", "url": "https://github.com/IBM/FHIR/pull/939#pullrequestreview-398241515", "createdAt": "2020-04-22T14:20:30Z", "commit": {"oid": "15470b4bbe5635bf2c752ed11e7231356cdc1ba7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 346, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}