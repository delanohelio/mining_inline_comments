{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NDI5MTMz", "number": 1603, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzoxOVrOEvv6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNzo1NFrOEvwCDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzNTEyOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzoxOVrOHk5nOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzoxOVrOHk5nOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDcxNQ==", "bodyText": "Oh interesting... this is a good change.", "url": "https://github.com/IBM/FHIR/pull/1603#discussion_r508454715", "createdAt": "2020-10-20T12:23:19Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java", "diffHunk": "@@ -98,7 +99,9 @@\n     private static final String BASE_CAPABILITY_URL = \"http://hl7.org/fhir/CapabilityStatement/base\";\n     private static final String BASE_2_CAPABILITY_URL = \"http://hl7.org/fhir/CapabilityStatement/base2\";\n     private static final List<String> ALL_INTERACTIONS = Arrays.asList(\"create\", \"read\", \"vread\", \"update\", \"patch\", \"delete\", \"history\", \"search\");\n-    private static final List<ResourceType.ValueSet> ALL_RESOURCE_TYPES = Arrays.asList(ResourceType.ValueSet.values());\n+    private static final List<ResourceType.ValueSet> ALL_RESOURCE_TYPES = ModelSupport.getResourceTypes(false).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce32f1145019adfdb78828b9fa039b1c458fb09a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA0OTQxOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/resources/WellKnownTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNjozNFrOHk5vng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNjo0NVrOHk5wBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Njg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/IBM/FHIR/pull/1603#discussion_r508456862", "createdAt": "2020-10-20T12:26:34Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/resources/WellKnownTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.server.resources;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import javax.json.JsonObject;\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.server.test.MockHttpServletRequest;\n+import com.ibm.fhir.server.test.MockServletContext;\n+\n+public class WellKnownTest {\n+\n+    @BeforeClass\n+    void setup() {\n+        FHIRConfiguration.setConfigHome(\"target/test-classes\");\n+    }\n+\n+    @AfterClass\n+    void tearDown() throws FHIRException {\n+        FHIRConfiguration.setConfigHome(\"\");\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_enabled() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"smart-enabled\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        assertTrue(!smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(!smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertEquals(smartSupport.getJsonArray(\"scopes_supported\").size(), 6, \"Number of SMART scopes\");\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 7, \"Number of SMART capabilities\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_omitted() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"omitted\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        assertTrue(smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertNull(smartSupport.getJsonArray(\"scopes_supported\"));\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 0, \"Number of SMART capabilities\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_empty() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"empty\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        System.out.println(smartSupport);\n+        assertTrue(smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertNull(smartSupport.getJsonArray(\"scopes_supported\"));\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 0, \"Number of SMART capabilities\");\n+    }\n+\n+    /**\n+     * This class is required because the WellKnown class uses a few protected fields\n+     * that are normally injected by JAX-RS and so this is the only way to set them.\n+     */\n+    private static class WellKnownChild extends WellKnown {\n+        public WellKnownChild() throws Exception {\n+            super();\n+            this.context = new MockServletContext();\n+        }\n+\n+        @Override\n+        public Response smartConfig() throws ClassNotFoundException {\n+            httpServletRequest = new MockHttpServletRequest();\n+            return super.smartConfig();\n+        }\n+    }\n+}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce32f1145019adfdb78828b9fa039b1c458fb09a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Njk2Nw==", "bodyText": "absolutely optional", "url": "https://github.com/IBM/FHIR/pull/1603#discussion_r508456967", "createdAt": "2020-10-20T12:26:45Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/resources/WellKnownTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.server.resources;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import javax.json.JsonObject;\n+import javax.ws.rs.core.Response;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.exception.FHIRException;\n+import com.ibm.fhir.server.test.MockHttpServletRequest;\n+import com.ibm.fhir.server.test.MockServletContext;\n+\n+public class WellKnownTest {\n+\n+    @BeforeClass\n+    void setup() {\n+        FHIRConfiguration.setConfigHome(\"target/test-classes\");\n+    }\n+\n+    @AfterClass\n+    void tearDown() throws FHIRException {\n+        FHIRConfiguration.setConfigHome(\"\");\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_enabled() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"smart-enabled\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        assertTrue(!smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(!smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertEquals(smartSupport.getJsonArray(\"scopes_supported\").size(), 6, \"Number of SMART scopes\");\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 7, \"Number of SMART capabilities\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_omitted() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"omitted\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        assertTrue(smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertNull(smartSupport.getJsonArray(\"scopes_supported\"));\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 0, \"Number of SMART capabilities\");\n+    }\n+\n+    @Test\n+    void testSmartCapabilities_smart_empty() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"empty\");\n+        FHIRRequestContext.get().setOriginalRequestUri(\"http://example.com/.well-known/smart-configuration\");\n+        WellKnownChild c = new WellKnownChild();\n+\n+        Response capabilities = c.smartConfig();\n+        JsonObject smartSupport = capabilities.readEntity(JsonObject.class);\n+        System.out.println(smartSupport);\n+        assertTrue(smartSupport.getString(\"authorization_endpoint\").isEmpty());\n+        assertTrue(smartSupport.getString(\"token_endpoint\").isEmpty());\n+        assertNull(smartSupport.getJsonArray(\"scopes_supported\"));\n+        assertEquals(smartSupport.getJsonArray(\"capabilities\").size(), 0, \"Number of SMART capabilities\");\n+    }\n+\n+    /**\n+     * This class is required because the WellKnown class uses a few protected fields\n+     * that are normally injected by JAX-RS and so this is the only way to set them.\n+     */\n+    private static class WellKnownChild extends WellKnown {\n+        public WellKnownChild() throws Exception {\n+            super();\n+            this.context = new MockServletContext();\n+        }\n+\n+        @Override\n+        public Response smartConfig() throws ClassNotFoundException {\n+            httpServletRequest = new MockHttpServletRequest();\n+            return super.smartConfig();\n+        }\n+    }\n+}\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Njg2Mg=="}, "originalCommit": {"oid": "ce32f1145019adfdb78828b9fa039b1c458fb09a"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA1MjAxOnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/MockHttpServletRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNzoxNFrOHk5xQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNzoxNFrOHk5xQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NzI4Mw==", "bodyText": "Lots of Todos I suggest removing them since this is a Mock", "url": "https://github.com/IBM/FHIR/pull/1603#discussion_r508457283", "createdAt": "2020-10-20T12:27:14Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/MockHttpServletRequest.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.server.test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.Principal;\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.servlet.AsyncContext;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import javax.servlet.http.HttpUpgradeHandler;\n+import javax.servlet.http.Part;\n+\n+public class MockHttpServletRequest implements HttpServletRequest {\n+\n+    @Override\n+    public StringBuffer getRequestURL() {\n+        return new StringBuffer(\"http://example.com\");\n+    }\n+\n+    @Override\n+    public Object getAttribute(String name) {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce32f1145019adfdb78828b9fa039b1c458fb09a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA1NDg2OnYy", "diffSide": "RIGHT", "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/MockServletContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNzo1NFrOHk5y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyNzo1NFrOHk5y9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NzcxNw==", "bodyText": "same comment on the stubs, suggest removing them, but optional", "url": "https://github.com/IBM/FHIR/pull/1603#discussion_r508457717", "createdAt": "2020-10-20T12:27:54Z", "author": {"login": "prb112"}, "path": "fhir-server/src/test/java/com/ibm/fhir/server/test/MockServletContext.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.server.test;\n+\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Enumeration;\n+import java.util.EventListener;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterRegistration;\n+import javax.servlet.FilterRegistration.Dynamic;\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRegistration;\n+import javax.servlet.SessionCookieConfig;\n+import javax.servlet.SessionTrackingMode;\n+import javax.servlet.descriptor.JspConfigDescriptor;\n+\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.helper.FHIRPersistenceHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.server.listener.FHIRServletContextListener;\n+\n+/**\n+ *\n+ */\n+public class MockServletContext implements ServletContext {\n+\n+    @Override\n+    public Object getAttribute(String name) {\n+        if (FHIRServletContextListener.FHIR_SERVER_INIT_COMPLETE.equals(name)) {\n+            return true;\n+        }\n+\n+        if (FHIRPersistenceHelper.class.getName().equals(name)) {\n+            return new PersistenceHelper() {\n+                @Override\n+                public FHIRPersistence getFHIRPersistenceImplementation() throws FHIRPersistenceException {\n+                    return new MockPersistenceImpl();\n+                }\n+                @Override\n+                public FHIRPersistence getFHIRPersistenceImplementation(String factoryPropertyName) throws FHIRPersistenceException {\n+                    return new MockPersistenceImpl();\n+                }\n+            };\n+        }\n+\n+        return null;\n+    }\n+\n+    // All below methods are auto-generated stubs\n+    @Override\n+    public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) {\n+        // TODO Auto-generated method stub\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce32f1145019adfdb78828b9fa039b1c458fb09a"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4737, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}