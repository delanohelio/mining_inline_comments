{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTQ1OTkz", "number": 1667, "title": "Add reference target annotations, javadoc, and validation", "bodyText": "Previously, we only had these for fields of type reference with a max\ncardinality of 1. Now we have these for both repeating fields and for\nchoice types which include references as well.\nI think there are many more cases we're missing wrt validation of choice\ntypes and repeating fields of other types, but I was focused mainly on\nReferenceTargets for now (to address\n#1536 )\nSigned-off-by: Lee Surprenant lmsurpre@us.ibm.com", "createdAt": "2020-11-04T05:38:16Z", "url": "https://github.com/IBM/FHIR/pull/1667", "merged": true, "mergeCommit": {"oid": "26f793e62d231911bdb8bc23cc2c15c9d7fbd7c7"}, "closed": true, "closedAt": "2020-11-06T01:40:36Z", "author": {"login": "lmsurpre"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZHC2-AH2gAyNTE1MTQ1OTkzOjg5YThjMDNmZDFkZTM4NDQ0YmZlMjBlZGJlNWU3YzM0NGNmYjBhNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZs13YAH2gAyNTE1MTQ1OTkzOjM2YjY1ZDFlYTQ1ODJiNDAyNGEwMGJjMjdhYzI3MmIzZTUyNTVhMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "89a8c03fd1de38444bfe20edbe5e7c344cfb0a51", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/89a8c03fd1de38444bfe20edbe5e7c344cfb0a51", "committedDate": "2020-11-04T05:37:48Z", "message": "Add reference target annotations, javadoc, and validation\n\nPreviously, we only had these for fields of type reference with a max\ncardinality of 1. Now we have these for both repeating fields and for\nchoice types which include references as well.\n\nI think there are many more cases we're missing wrt validation of choice\ntypes and repeating fields of other types, but I was focused mainly on\nReferenceTargets for now (to address\nhttps://github.com/IBM/FHIR/issues/1536 )\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9e8318623c8bb5bbe07aa045a761fe3c6326ae", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/1c9e8318623c8bb5bbe07aa045a761fe3c6326ae", "committedDate": "2020-11-04T07:17:19Z", "message": "issue #1536 - update DataCreatorBase to generate better reference values\n\nThis builds on the previous commit which added ReferenceType annotations\nto the repeating fields.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03060998010b6549a8b69e4f5c9507d77f77e7c", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b03060998010b6549a8b69e4f5c9507d77f77e7c", "committedDate": "2020-11-04T13:00:53Z", "message": "issue #1536 - generate and commit updated examples\n\nThe new checks found a couple more spec examples with invalid content,\nso the expectation for those is updated in the corresponding index rows.\n\nI also noticed that the DataAbsent examples have significant updates as\nwell...presumably from a previous round of edits that were made but\nwhich were never used to generated updated examples yet.\n\nI also snuck in a minor update in CompleteMockDataCreator (for\nreferences with no target profiles).\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8e5d7eeb26da401879f712fbab50bb0bfcb2b0e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b8e5d7eeb26da401879f712fbab50bb0bfcb2b0e", "committedDate": "2020-11-04T07:53:37Z", "message": "issue #1536 - generate and commit updated examples\n\nThe new checks found a couple more spec examples with invalid content,\nso the expectation for those is updated in the corresponding index rows.\n\nI also noticed that the DataAbsent examples have significant updates as\nwell...presumably from a previous round of edits that were made but\nwhich were never used to generated updated examples yet.\n\nI also snuck in a minor update in CompleteMockDataCreator (for\nreferences with no target profiles).\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "b03060998010b6549a8b69e4f5c9507d77f77e7c", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b03060998010b6549a8b69e4f5c9507d77f77e7c", "committedDate": "2020-11-04T13:00:53Z", "message": "issue #1536 - generate and commit updated examples\n\nThe new checks found a couple more spec examples with invalid content,\nso the expectation for those is updated in the corresponding index rows.\n\nI also noticed that the DataAbsent examples have significant updates as\nwell...presumably from a previous round of edits that were made but\nwhich were never used to generated updated examples yet.\n\nI also snuck in a minor update in CompleteMockDataCreator (for\nreferences with no target profiles).\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d2440e9b19f112aa9d6693c558ecb83ba4fef2", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/a6d2440e9b19f112aa9d6693c558ecb83ba4fef2", "committedDate": "2020-11-04T16:44:38Z", "message": "Only omit coded element subfields when it has a required binding\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1eba2153c40f70e5481a10e8347f225d652f82d", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b1eba2153c40f70e5481a10e8347f225d652f82d", "committedDate": "2020-11-04T17:33:27Z", "message": "Move list and choice type checkReference logic into ValidationSupport\n\nper review feedback\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "06bdec1a964ec1c065880828808d8f39ac00220e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/06bdec1a964ec1c065880828808d8f39ac00220e", "committedDate": "2020-11-04T17:34:04Z", "message": "Move list and choice type checkReference logic into ValidationSupport\n\nper review feedback\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7fb158e3e7658b167c76bfc6f83b6a84ec74714", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b7fb158e3e7658b167c76bfc6f83b6a84ec74714", "committedDate": "2020-11-04T18:28:38Z", "message": "Move list and choice type checkReference logic into ValidationSupport\n\nper review feedback\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06bdec1a964ec1c065880828808d8f39ac00220e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/06bdec1a964ec1c065880828808d8f39ac00220e", "committedDate": "2020-11-04T17:34:04Z", "message": "Move list and choice type checkReference logic into ValidationSupport\n\nper review feedback\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "b7fb158e3e7658b167c76bfc6f83b6a84ec74714", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b7fb158e3e7658b167c76bfc6f83b6a84ec74714", "committedDate": "2020-11-04T18:28:38Z", "message": "Move list and choice type checkReference logic into ValidationSupport\n\nper review feedback\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1663a43f1d2b8b6a11f59d8175a2ecaee194659f", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/1663a43f1d2b8b6a11f59d8175a2ecaee194659f", "committedDate": "2020-11-04T20:54:25Z", "message": "Avoid problem case with complete-absent durations\n\nvalidCode implicitly constructs a coding from a quantity and this was\ncausing errors in the complete-absent case\n\nalso adjusted some more expectations in the index files\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e0f9576092834a1553282deafaf273323a6a686", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/9e0f9576092834a1553282deafaf273323a6a686", "committedDate": "2020-11-04T20:27:38Z", "message": "Avoid problem case with complete-absent durations\n\nvalidCode implicitly constructs a coding from a quantity and this was\ncausing errors in the complete-absent case\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}, "afterCommit": {"oid": "1663a43f1d2b8b6a11f59d8175a2ecaee194659f", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/1663a43f1d2b8b6a11f59d8175a2ecaee194659f", "committedDate": "2020-11-04T20:54:25Z", "message": "Avoid problem case with complete-absent durations\n\nvalidCode implicitly constructs a coding from a quantity and this was\ncausing errors in the complete-absent case\n\nalso adjusted some more expectations in the index files\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91bdbc32ff29379c011bbb35813027800e76adf", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/b91bdbc32ff29379c011bbb35813027800e76adf", "committedDate": "2020-11-04T21:11:13Z", "message": "Introduce Xhtml.from(String plainText) helper and add javadoc\n\nThis helper uses the OWASP Encoder (a small java dependency that we were\nalready using in the project, but not from `fhir-model`) to encode plain\ntext strings for use within HTML.\nIn addition to Xhtml javadoc, I also added javadoc for some of the code\nsubtype methods.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/fa13b56cb4e617316a427fc658f4da75d55f39bc", "committedDate": "2020-11-04T22:07:11Z", "message": "Merge pull request #1668 from IBM/lee-master\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13066b6c28421a130afc8cb6900c35a89038e63e", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/13066b6c28421a130afc8cb6900c35a89038e63e", "committedDate": "2020-11-05T01:59:49Z", "message": "remove unused COS constants from main constants file\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjgxMzAy", "url": "https://github.com/IBM/FHIR/pull/1667#pullrequestreview-524281302", "createdAt": "2020-11-05T13:54:19Z", "commit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1NDoxOVrOHuETXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoyMjowNVrOHuFi5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NzAzOA==", "bodyText": "this chunk of code is used above as well (lines 192-198) - might want to move to its own function", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518067038", "createdAt": "2020-11-05T13:54:19Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/DataCreatorBase.java", "diffHunk": "@@ -180,23 +186,52 @@ protected Object createArgument(Class<?> owningClass, Method builderMethod, Clas\n                         !PlanDefinition.Action.class.equals(parameterType) &&\n                         !QuestionnaireResponse.Item.class.equals(parameterType)) {\n                     // Otherwise just create a single element\n-                    elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    if (Reference.class.equals(parameterType)){\n+                        // Handling references specially\n+                        String elementName = builderMethod.getParameters()[i].getName();\n+                        Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                        if (!referenceTargetTypes.isEmpty()) {\n+                            String[] targetTypes = new String[referenceTargetTypes.size()];\n+                            referenceTargetTypes.toArray(targetTypes);\n+\n+                            // use the \"choiceIndicator\" to pick the reference type\n+                            String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];\n+                            elementList = Collections.singletonList(createReference(targetType));\n+                        } else {\n+                            elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                        }\n+                    } else {\n+                        elementList = Collections.singletonList(createElement((Class<? extends Element>)parameterType, choiceIndicator));\n+                    }\n                 }\n             }\n             return elementList;\n         } else if (Element.class.equals(parameterType)){\n             // Seeing a parameter of type Element is our clue that we have a choice element\n             String elementName = builderMethod.getParameters()[i].getName();\n             Class<? extends Element> choiceType = null;\n-            \n+\n             Set<Class<?>> choiceElementTypes = ModelSupport.getChoiceElementTypes(owningClass, elementName);\n             if (!choiceElementTypes.isEmpty()) {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<? extends Element>[] choiceTypesArray = new Class[choiceElementTypes.size()];\n                 choiceElementTypes.toArray(choiceTypesArray);\n-                choiceType = (Class<? extends Element>) choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+                choiceType = choiceTypesArray[(choiceTypesArray.length - 1) % choiceIndicator];\n+            }\n+\n+            if (Reference.class.equals(choiceType)){\n+\n+                // Handling references specially\n+                Set<String> referenceTargetTypes = ModelSupport.getReferenceTargetTypes(owningClass, elementName);\n+                if (!referenceTargetTypes.isEmpty()) {\n+                    String[] targetTypes = new String[referenceTargetTypes.size()];\n+                    referenceTargetTypes.toArray(targetTypes);\n+\n+                    // use the \"choiceIndicator\" to pick the reference type\n+                    String targetType = targetTypes[(targetTypes.length - 1) % choiceIndicator];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NzM5OA==", "bodyText": "I don't think you need to do this here since you're generating the ValidationSupport.checkReferenceType() call for reference-type choice elements now", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518087398", "createdAt": "2020-11-05T14:22:05Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njg1NTMx", "url": "https://github.com/IBM/FHIR/pull/1667#pullrequestreview-524685531", "createdAt": "2020-11-05T21:26:43Z", "commit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njg5MjA2", "url": "https://github.com/IBM/FHIR/pull/1667#pullrequestreview-524689206", "createdAt": "2020-11-05T21:32:46Z", "commit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozMjo0NlrOHuXe-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozMjo0NlrOHuXe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4MTMwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //do other validation here?\n          \n          \n            \n            //            if (element instanceof Reference) {\n          \n          \n            \n            //                checkReferenceType(element, elementName, ModelSupport.getReferenceTargetTypes(modelClass, elementName));\n          \n          \n            \n            //            }", "url": "https://github.com/IBM/FHIR/pull/1667#discussion_r518381307", "createdAt": "2020-11-05T21:32:46Z", "author": {"login": "lmsurpre"}, "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -285,6 +285,10 @@ public static void checkValue(String value, Pattern pattern) {\n                 List<String> typeNameList = Arrays.stream(types).map(Class::getSimpleName).collect(Collectors.toList());\n                 throw new IllegalStateException(String.format(\"Invalid type: %s for choice element: '%s' must be one of: %s\", elementType.getSimpleName(), elementName, typeNameList.toString()));\n             }\n+            //do other validation here?\n+//            if (element instanceof Reference) {\n+//                checkReferenceType(element, elementName, ModelSupport.getReferenceTargetTypes(modelClass, elementName));\n+//            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa13b56cb4e617316a427fc658f4da75d55f39bc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a0a7e998e3eec3070bb6aca5cc76645e4ab41c3", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/4a0a7e998e3eec3070bb6aca5cc76645e4ab41c3", "committedDate": "2020-11-05T21:33:29Z", "message": "remove commented out code\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36b65d1ea4582b4024a00bc27ac272b3e5255a18", "author": {"user": {"login": "lmsurpre", "name": "Lee Surprenant"}}, "url": "https://github.com/IBM/FHIR/commit/36b65d1ea4582b4024a00bc27ac272b3e5255a18", "committedDate": "2020-11-06T01:40:00Z", "message": "Merge pull request #1671 from IBM/lee-master\n\nremove unused COS constants from main constants file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 751, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}