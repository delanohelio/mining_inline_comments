{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjc2MTU1", "number": 578, "title": "_id and _lastUpdated search bindvariables are not added #577", "bodyText": "Add Bind Variables to Inclusion and Sorted Query Segment Aggregators\nVerify with tests\n\nWhole System Search with SORT and without SORT\nResource Specific Search with SORT and without SORT\n\n\n\nSigned-off-by: Paul Bastide pbastide@us.ibm.com", "createdAt": "2020-01-11T00:59:11Z", "url": "https://github.com/IBM/FHIR/pull/578", "merged": true, "mergeCommit": {"oid": "db72598d1f19919e0a0ecbd827fe18bae8031fcb"}, "closed": true, "closedAt": "2020-01-14T18:28:28Z", "author": {"login": "prb112"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5Iap5AH2gAyMzYxNjc2MTU1OmQ0MDQ3NGIxMDJiNjI4YzAyNDEwMjRlYjQzODBhMTI2ZWM5YzA2OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6VPAYAFqTM0Mjc0NDM4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d40474b102b628c0241024eb4380a126ec9c0698", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/d40474b102b628c0241024eb4380a126ec9c0698", "committedDate": "2020-01-11T00:56:58Z", "message": "_id and _lastUpdated search bindvariables are not added #577\n\n- Add Bind Variables to Inclusion and Sorted Query Segment Aggregators\n- Verify with tests\n\t- Whole System Search with SORT and without SORT\n\t- Resource Specific Search with SORT and without SORT\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d493a48ff9cbf6ea614e7b211ecc1b37090831f", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/0d493a48ff9cbf6ea614e7b211ecc1b37090831f", "committedDate": "2020-01-14T15:07:05Z", "message": "Update for #588 and #577\n\n- UriBuilder returns invalid self/url #588\n\t- Updated the lowerBound to be the only one output in queryparamval\n\t- Added test to check the reflexsivity of a URL in SearchAllTest\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a128879fb800ce26e5968e1d8417d6f6f2dac72", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/3a128879fb800ce26e5968e1d8417d6f6f2dac72", "committedDate": "2020-01-14T15:57:50Z", "message": "Update for #588 and #577\n\n- Update the Copyright headers to match YYYY,<SPACE>YYYY\n- Update InclusionQuerySegmentAggregator to support multiple\nbindvariables\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/5b9ca5861bcab98114315347df808f3b8d3d88fb", "committedDate": "2020-01-14T16:04:47Z", "message": "Update for #588\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjY3NDk4", "url": "https://github.com/IBM/FHIR/pull/578#pullrequestreview-342667498", "createdAt": "2020-01-14T16:29:34Z", "commit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTozNFrOFddyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTozNFrOFddyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MTA0Mw==", "bodyText": "are the other regular bind variables are added in this.addBindVariables(allBindVariables)?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366441043", "createdAt": "2020-01-14T16:29:34Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -133,17 +133,21 @@ protected SqlQueryData buildCountQuery() throws Exception {\n         final String METHODNAME = \"buildCountQuery\";\n         log.entering(CLASSNAME, METHODNAME);\n \n-        List<Object> allBindVariables = new ArrayList<>();\n-        this.addBindVariables(allBindVariables);\n-\n         StringBuilder queryString = new StringBuilder();\n         queryString.append(SELECT_COUNT_ROOT);\n         queryString.append(LEFT_PAREN);\n         queryString.append(QuerySegmentAggregator.SELECT_ROOT);\n         buildFromClause(queryString, resourceType.getSimpleName());\n-        allBindVariables.addAll(this.idsObjects);\n-        buildWhereClause(queryString, null);\n \n+        // An important step here is to add _id and _lastUpdated and then\n+        // the regular bind variables. \n+        List<Object> allBindVariables = new ArrayList<>();\n+        allBindVariables.addAll(idsObjects);\n+        allBindVariables.addAll(lastUpdatedObjects);\n+        this.addBindVariables(allBindVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjcwODU2", "url": "https://github.com/IBM/FHIR/pull/578#pullrequestreview-342670856", "createdAt": "2020-01-14T16:33:52Z", "commit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozMzo1MlrOFdd8Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozMzo1MlrOFdd8Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MzU5NQ==", "bodyText": "what the SqlParameterEncoder.encode is used for here?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366443595", "createdAt": "2020-01-14T16:33:52Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -232,13 +242,14 @@ private void executeIncludeSubQuery(StringBuilder queryString, InclusionParamete\n         //The subquery should return a list of strings in the FHIR Reference String value format \n         //(e.g. {@code \"Patient/<resource_id>\"})\n         SqlQueryData subQueryData = new SqlQueryData(subQueryString.toString(), bindVariables);\n+\n         boolean isFirstItem = true;\n         for (String strValue : this.resourceDao.searchStringValues(subQueryData)) {\n             if (!isFirstItem) {\n                 queryString.append(COMMA);\n             }\n             if (strValue != null) {\n-                queryString.append(QUOTE).append(strValue).append(QUOTE);\n+                queryString.append(QUOTE).append(SqlParameterEncoder.encode(strValue)).append(QUOTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjczNjMy", "url": "https://github.com/IBM/FHIR/pull/578#pullrequestreview-342673632", "createdAt": "2020-01-14T16:37:28Z", "commit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozNzoyOVrOFdeFGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjozNzoyOVrOFdeFGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NTg0OA==", "bodyText": "Could you add one \"gt\" test for _lastModified?", "url": "https://github.com/IBM/FHIR/pull/578#discussion_r366445848", "createdAt": "2020-01-14T16:37:29Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchIdAndLastUpdatedTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (C) Copyright IBM Corp. 2018, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.search.test;\n+\n+import static com.ibm.fhir.model.test.TestUtil.isResourceInResponse;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Basic;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.test.TestUtil;\n+\n+/**\n+ * <a href=\"https://hl7.org/fhir/search.html#date\">FHIR Specification: Search\n+ * - _id and _lastUpdated</a> Tests\n+ */\n+public abstract class AbstractSearchIdAndLastUpdatedTest extends AbstractPLSearchTest {\n+    private Boolean DEBUG = Boolean.FALSE;\n+\n+    protected Basic getBasicResource() throws Exception {\n+        return TestUtil.readExampleResource(\"json/ibm/basic/BasicDate.json\");\n+    }\n+\n+    protected void setTenant() throws Exception {\n+        FHIRRequestContext.get().setTenantId(\"default\");\n+\n+        // this might deserve its own method, but just use setTenant for now \n+        // since its called before creating any resources\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT-4:00\"));\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdated() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Resource.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResource() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    @Test\n+    public void testSearchWholeSystemUsingIdAndLastUpdatedResourceWithSort() throws Exception {\n+        Map<String, List<String>> queryParms = new HashMap<String, List<String>>();\n+        List<String> savedId = Collections.singletonList(savedResource.getId());\n+\n+        String dateTime = savedResource.getMeta().getLastUpdated().getValue().toString();\n+        List<String> savedLastUpdated = Collections.singletonList(dateTime);\n+        queryParms.put(\"_id\", savedId);\n+        queryParms.put(\"_lastUpdated\", savedLastUpdated);\n+\n+        // Sort id and then lastUpdated\n+        queryParms.put(\"_sort\", Collections.singletonList(\"_id,-_lastUpdated\"));\n+\n+        if (DEBUG) {\n+            generateOutput(savedResource);\n+        }\n+\n+        List<Resource> resources = runQueryTest(Basic.class, queryParms);\n+        assertNotNull(resources);\n+        assertEquals(resources.size(), 1, \"Number of resources returned\");\n+        assertTrue(isResourceInResponse(savedResource, resources), \"Expected resource not found in the response\");\n+    }\n+\n+    /*\n+     * generates the output into a resource.\n+     */\n+    public static void generateOutput(Resource resource) {\n+        try (StringWriter writer = new StringWriter();) {\n+            FHIRGenerator.generator(Format.JSON, true).generate(resource, System.out);\n+            System.out.println(writer.toString());\n+        } catch (FHIRGeneratorException e) {\n+            fail(\"unable to generate the fhir resource to JSON\", e);\n+        } catch (IOException e1) {\n+            fail(\"unable to generate the fhir resource to JSON (io problem) \", e1);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9ca5861bcab98114315347df808f3b8d3d88fb"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51d3d9cc94ae282b3db2768e9cb9ca8cbf0d9d9", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/c51d3d9cc94ae282b3db2768e9cb9ca8cbf0d9d9", "committedDate": "2020-01-14T17:19:54Z", "message": "Update for #588\n\n- per code review\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzQ0Mzgz", "url": "https://github.com/IBM/FHIR/pull/578#pullrequestreview-342744383", "createdAt": "2020-01-14T18:26:56Z", "commit": {"oid": "c51d3d9cc94ae282b3db2768e9cb9ca8cbf0d9d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 615, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}