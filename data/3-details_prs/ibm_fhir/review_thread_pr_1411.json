{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODUwNTI5", "number": 1411, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyOTo0MVrOEXtIjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoxODowNFrOEYIBOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjkyMTc0OnYy", "diffSide": "RIGHT", "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyOTo0MVrOG_pMng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjozODo1MFrOG_phjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4ODQ0Ng==", "bodyText": "should check that the maxValueSet does not have concepts, and if it does, do not generate the value set syntax check", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r469388446", "createdAt": "2020-08-12T16:29:41Z", "author": {"login": "michaelwschroeder"}, "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "diffHunk": "@@ -1132,6 +1134,31 @@ private void generateClass(JsonObject structureDefinition, List<String> paths, C\n                 }\n             }\n \n+            // Handle code/coding/codeableconcept fields with required (or maxValueSet) binding to syntax-based value set\n+            for (JsonObject elementDefinition : elementDefinitions) {\n+                String basePath = elementDefinition.getJsonObject(\"base\").getString(\"path\");\n+                if (elementDefinition.getString(\"path\").equals(basePath)) {\n+                    String elementName = getElementName(elementDefinition, path);\n+                    String fieldName = getFieldName(elementName);\n+                    String fieldType = getFieldType(structureDefinition, elementDefinition, false);\n+                    if (\"Code\".equals(fieldType) || \"Coding\".equals(fieldType) || \"CodeableConcept\".equals(fieldType)) {\n+                        JsonObject binding = getBinding(elementDefinition);\n+                        if (binding != null && binding.containsKey(\"valueSet\") && binding.containsKey(\"strength\")) {\n+                            String valueSet = binding.getString(\"valueSet\").split(\"\\\\|\")[0];\n+                            if (!\"required\".equals(binding.getString(\"strength\")) || hasConcepts(valueSet)) {\n+                                valueSet = getMaxValueSet(binding);\n+                                valueSet = (valueSet != null) ? valueSet.split(\"\\\\|\")[0] : valueSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346d567e9e82c16ad946716c3aca7f0c99a09e0b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5MzgwNQ==", "bodyText": "Check added.", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r469393805", "createdAt": "2020-08-12T16:38:50Z", "author": {"login": "tbieste"}, "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "diffHunk": "@@ -1132,6 +1134,31 @@ private void generateClass(JsonObject structureDefinition, List<String> paths, C\n                 }\n             }\n \n+            // Handle code/coding/codeableconcept fields with required (or maxValueSet) binding to syntax-based value set\n+            for (JsonObject elementDefinition : elementDefinitions) {\n+                String basePath = elementDefinition.getJsonObject(\"base\").getString(\"path\");\n+                if (elementDefinition.getString(\"path\").equals(basePath)) {\n+                    String elementName = getElementName(elementDefinition, path);\n+                    String fieldName = getFieldName(elementName);\n+                    String fieldType = getFieldType(structureDefinition, elementDefinition, false);\n+                    if (\"Code\".equals(fieldType) || \"Coding\".equals(fieldType) || \"CodeableConcept\".equals(fieldType)) {\n+                        JsonObject binding = getBinding(elementDefinition);\n+                        if (binding != null && binding.containsKey(\"valueSet\") && binding.containsKey(\"strength\")) {\n+                            String valueSet = binding.getString(\"valueSet\").split(\"\\\\|\")[0];\n+                            if (!\"required\".equals(binding.getString(\"strength\")) || hasConcepts(valueSet)) {\n+                                valueSet = getMaxValueSet(binding);\n+                                valueSet = (valueSet != null) ? valueSet.split(\"\\\\|\")[0] : valueSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4ODQ0Ng=="}, "originalCommit": {"oid": "346d567e9e82c16ad946716c3aca7f0c99a09e0b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzMyNDkzOnYy", "diffSide": "RIGHT", "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoxNzozNFrOHASwog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyNDo0NlrOHATBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTQxMA==", "bodyText": "pretty minor, but you could consider making \"en-US\" a constant since its used 3 times here...or potentially even make the Code.of(\"en-US\") the constant and re-use it", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470069410", "createdAt": "2020-08-13T16:17:34Z", "author": {"login": "lmsurpre"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java", "diffHunk": "@@ -186,8 +197,27 @@ public CompleteMockDataCreator() throws IOException {\n                     /////////////////\n                     // Special values\n                     /////////////////\n+                    // Must be a valid BCP-47 code (Code)\n+                    if ((builder instanceof Attachment.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof CodeSystem.Concept.Designation.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof Resource.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof ValueSet.Compose.Include.Concept.Designation.Builder && \"language\".equals(method.getName()))) {\n+                        argument = Code.of(\"en-US\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12194a144520db96314113b3bbd39f39b14c1f1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MzcxMA==", "bodyText": "Updated it to a constant.", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470073710", "createdAt": "2020-08-13T16:24:46Z", "author": {"login": "tbieste"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java", "diffHunk": "@@ -186,8 +197,27 @@ public CompleteMockDataCreator() throws IOException {\n                     /////////////////\n                     // Special values\n                     /////////////////\n+                    // Must be a valid BCP-47 code (Code)\n+                    if ((builder instanceof Attachment.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof CodeSystem.Concept.Designation.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof Resource.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof ValueSet.Compose.Include.Concept.Designation.Builder && \"language\".equals(method.getName()))) {\n+                        argument = Code.of(\"en-US\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTQxMA=="}, "originalCommit": {"oid": "e12194a144520db96314113b3bbd39f39b14c1f1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzMyNjY0OnYy", "diffSide": "RIGHT", "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoxODowNFrOHASxuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyNjoxMlrOHATE7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTY4OA==", "bodyText": "\ud83e\udd47", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470069688", "createdAt": "2020-08-13T16:18:04Z", "author": {"login": "lmsurpre"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java", "diffHunk": "@@ -62,7 +62,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         String definitionsDir = baseDir + \"/definitions\";\n \n         // Only runs for the fhir-model project, short-circuits otherwise.\n-        if (mavenProject.getArtifactId().contains(\"fhir-model\")) {\n+        if (mavenProject.getArtifactId().contains(\"fhir-examples-generator\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12194a144520db96314113b3bbd39f39b14c1f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NDYwNA==", "bodyText": "Update comment to match change.", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470074604", "createdAt": "2020-08-13T16:26:12Z", "author": {"login": "tbieste"}, "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java", "diffHunk": "@@ -62,7 +62,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         String definitionsDir = baseDir + \"/definitions\";\n \n         // Only runs for the fhir-model project, short-circuits otherwise.\n-        if (mavenProject.getArtifactId().contains(\"fhir-model\")) {\n+        if (mavenProject.getArtifactId().contains(\"fhir-examples-generator\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTY4OA=="}, "originalCommit": {"oid": "e12194a144520db96314113b3bbd39f39b14c1f1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4788, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}