{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NDM5MjAz", "number": 1604, "title": "issue #1366 schema for efficient storage of reference search parameters and tokens", "bodyText": "Includes reindex custom operation to support migration of search parameter data from old to new schemas.\nBecause the Db2 schema uses partition-based multi tenancy, some additional migration steps are required.\n# Apply the schema updates. This includes adding new columns and an index to a potentially large\n# table. If the schema hosts a lot of data, this may take a while to complete.\n# In addition, the Db2 catalog is susceptible to deadlocks when creating FK\n# constraints in parallel, so the update needs to be serialized using --pool-size 1\njava -jar schema/fhir-persistence-schema-*-cli.jar \\\n  --prop-file db2.properties --schema-name FHIRDATA --update-schema \\\n  --pool-size 1\n\n# Rerun grants to cover any new tables added by the above migration step \njava -jar schema/fhir-persistence-schema-*-cli.jar \\\n  --prop-file db2.properties --schema-name FHIRDATA --grant-to FHIRSERVER --pool-size 2\n\n# And make sure that any new tables have partitions for existing tenants\njava -jar schema/fhir-persistence-schema-*-cli.jar \\\n  --prop-file db2.properties --refresh-tenants\n\nOnce the schema has been migrated it is ready to handle the ingestion of new data. However, existing data needs to be reindexed before it can be searched using the new FHIR server build. The fhir-bucket CLI tool can be used to drive the reindex operation:\nJAR=\"/path/to/fhir-bucket-4.4.1-SNAPSHOT-cli.jar\"\n\njava \\\n  -Djava.util.logging.config.file=logging.properties \\\n  -jar \"${JAR}\" \\\n  --db-type postgresql \\\n  --db-properties postgres.properties \\\n  --cos-properties cos.properties \\\n  --fhir-properties fhir.properties \\\n  --bucket fhir-performance \\\n  --tenant-name performance \\\n  --file-type JSON \\\n  --max-concurrent-fhir-requests 200 \\\n  --max-concurrent-json-files 0 \\\n  --max-concurrent-ndjson-files 0 \\\n  --connection-pool-size 40 \\\n  --no-scan \\\n  --reindex-tstamp 2020-10-01 \\\n  --reindex-resource-count 10 \\\n  --reindex-concurrent-requests 200\n\nThe above command will call the FHIR server $reindex custom operation in parallel using 200 threads. Adjust the thread count based on the capabilities of the underlying system. Each $reindex operation will process 10 resources. Each resource is processed in its own transaction to avoid deadlock issues.", "createdAt": "2020-10-20T03:40:58Z", "url": "https://github.com/IBM/FHIR/pull/1604", "merged": true, "mergeCommit": {"oid": "23468d01cf38e2636c677444c226f04ea1142dc1"}, "closed": true, "closedAt": "2020-10-28T21:03:16Z", "author": {"login": "punktilious"}, "timelineItems": {"totalCount": 139, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW9veZAFqTUxODY2OTQ0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXEEhPgFqTUxOTA4MDcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjY5NDQ0", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518669444", "createdAt": "2020-10-28T13:39:37Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozOTozN1rOHpqfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozOTozN1rOHpqfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ0OTgyMg==", "bodyText": "Copyright Year", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513449822", "createdAt": "2020-10-28T13:39:37Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -52,6 +52,7 @@\n import com.ibm.fhir.persistence.jdbc.dto.LocationParmVal;\n import com.ibm.fhir.persistence.jdbc.dto.NumberParmVal;\n import com.ibm.fhir.persistence.jdbc.dto.QuantityParmVal;\n+import com.ibm.fhir.persistence.jdbc.dto.ReferenceParmVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjcxNTc3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518671577", "createdAt": "2020-10-28T13:41:44Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MTo0NFrOHpqmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MTo0NFrOHpqmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MTUzMA==", "bodyText": "Is this now off the view?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513451530", "createdAt": "2020-10-28T13:41:44Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -729,13 +789,12 @@ private void appendInnerSelect(StringBuilder whereClauseSegment, QueryParameter\n         String chainedParmTableAlias = chainedParmVar + \".\";\n \n         // Build this piece: SELECT 'resource-type-name' || '/' || CLRx.LOGICAL_ID\n-        whereClauseSegment.append(\"SELECT \").append(\"'\" + resourceTypeName\n-                + \"'\").append(\" || \").append(\"'/'\").append(\" || \").append(chainedLogicalResourceTableAlias)\n-                .append(\"LOGICAL_ID\");\n+        // Note since #1366, we no longer need to prepend the resourceTypeName\n+        whereClauseSegment.append(\"SELECT \").append(chainedLogicalResourceTableAlias).append(\"LOGICAL_ID\");\n \n         QueryParameter nextParameter = currentParm.getNextParameter();\n \n-        // Build this piece: FROM Device_RESOURCES CR1, Device_LOGICAL_RESOURCES CLR1, Device_STR_VALUES CP1 WHERE\n+        // Build this piece: FROM Device_RESOURCES CR1, Device_LOGICAL_RESOURCES CLR1, Device_TOKEN_VALUES CP1 WHERE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjczMjE3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518673217", "createdAt": "2020-10-28T13:43:23Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MzoyM1rOHpqrFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0MzoyM1rOHpqrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MjgyMg==", "bodyText": "Could be combined to one else if", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513452822", "createdAt": "2020-10-28T13:43:23Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -534,8 +564,10 @@ private SqlQueryData processReferenceParm(Class<?> resourceType, QueryParameter\n                                     + SqlParameterEncoder.encode(value.getValueString());\n                 } else {\n                     // This is a Reference type.\n-                    // As of versions greater than 4.4.0, we defer to the Search Layer to append the value.\n-                    searchValue = SqlParameterEncoder.encode(value.getValueString());\n+                    if (parts.length != 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc0MTkz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518674193", "createdAt": "2020-10-28T13:44:18Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NDoxOFrOHpqt_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NDoxOFrOHpqt_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MzU2NA==", "bodyText": "Would this ever be a URL reference?  e.g. http://localhost/fhir/api/v4/Patient/1", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513453564", "createdAt": "2020-10-28T13:44:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -520,10 +544,16 @@ private SqlQueryData processReferenceParm(Class<?> resourceType, QueryParameter\n \n         boolean parmValueProcessed = false;\n         for (QueryParameterValue value : queryParm.getValues()) {\n-            // Handle query parm representing this name/value pair construct:\n-            // <code> {name} = {resource-type/resource-id}</code>\n+            String targetResourceType = null;\n             searchValue = SqlParameterEncoder.encode(value.getValueString());\n-\n+            \n+            // Make sure we split out the resource type if it is included in the search value\n+            String[] parts = value.getValueString().split(\"/\");\n+            if (parts.length == 2) {\n+                targetResourceType = parts[0];\n+                searchValue = parts[1];\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc1NjMw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518675630", "createdAt": "2020-10-28T13:45:46Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NTo0NlrOHpqyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NTo0NlrOHpqyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NDYzNg==", "bodyText": "Should this use EQ?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513454636", "createdAt": "2020-10-28T13:45:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -609,14 +648,28 @@ protected SqlQueryData processChainedReferenceParm(QueryParameter queryParm) thr\n             if (nextParameter != null) {\n                 if (refParmIndex == 0) {\n                     // Must build this first piece using px placeholder table alias, which will be replaced with a\n-                    // generated value in the buildQuery() method.\n-                    // Build this piece:P1.PARAMETER_NAME_ID = x AND (p1.STR_VALUE IN\n+                    // generated value in the buildQuery() method. The CODE_SYSTEM_ID filter is added for issue #1366\n+                    // due to the normalization of token values\n+                    // Build this piece:P1.PARAMETER_NAME_ID = x AND AND P1.CODE_SYSTEM_ID = x AND (p1.TOKEN_VALUE IN\n                     this.populateNameIdSubSegment(whereClauseSegment, currentParm.getCode(), PARAMETER_TABLE_ALIAS);\n+\n+                    // The resource type of the reference is encoded as the code system associated with the token value\n+                    // so we need to add a filter to ensure we don't match logical-ids for other resource types\n+                    // Note if the match is for any resource, we simply don't filter on the resource type\n+                    final String codeSystemName = currentParm.getModifierResourceTypeName();\n+                    if (codeSystemName != null && !codeSystemName.equals(\"*\")) {\n+                        Integer codeSystemId = identityCache.getCodeSystemId(codeSystemName);\n+                        if (codeSystemId != null) {\n+                            whereClauseSegment.append(AND).append(PARAMETER_TABLE_ALIAS + DOT).append(CODE_SYSTEM_ID).append(\" = \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc1NzQ5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518675749", "createdAt": "2020-10-28T13:45:52Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NTo1MlrOHpqyjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NTo1MlrOHpqyjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NDczMw==", "bodyText": "Should this use EQ?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513454733", "createdAt": "2020-10-28T13:45:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -545,9 +577,16 @@ private SqlQueryData processReferenceParm(Class<?> resourceType, QueryParameter\n             } else {\n                 parmValueProcessed = true;\n             }\n-            // Build this piece: pX.str_value {operator} search-attribute-value\n-            whereClauseSegment.append(tableAlias).append(DOT).append(STR_VALUE).append(operator).append(BIND_VAR);\n+            // Build this piece: pX.token_value {operator} search-attribute-value [ AND pX.code_system_id = <n> ]\n+            whereClauseSegment.append(tableAlias).append(DOT).append(TOKEN_VALUE).append(operator).append(BIND_VAR);\n             bindVariables.add(searchValue);\n+            \n+            // add the [optional] condition for the resource type if we have one\n+            if (targetResourceType != null) {\n+                // Use a literal for the resource type code-system-id, not a parameter marker. Helps the cost-based optimizer\n+                int codeSystemIdForResourceType = getCodeSystemId(targetResourceType);\n+                whereClauseSegment.append(AND).append(tableAlias).append(DOT).append(CODE_SYSTEM_ID).append(\" = \").append(codeSystemIdForResourceType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc2MjQz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518676243", "createdAt": "2020-10-28T13:46:20Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NjoyMVrOHpq0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0NjoyMVrOHpq0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NTExNQ==", "bodyText": "Should this use EQ?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513455115", "createdAt": "2020-10-28T13:46:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -710,16 +765,21 @@ private SqlQueryData buildChainedIdClause(QueryParameter currentParm, String cha\n \n     private void appendMidChainParm(StringBuilder whereClauseSegment, QueryParameter currentParm, String chainedParmVar)\n             throws FHIRPersistenceDBConnectException, FHIRPersistenceDataAccessException, FHIRPersistenceException {\n-        Integer parameterNameId = ParameterNamesCache.getParameterNameId(currentParm.getCode());\n-        if (parameterNameId == null) {\n-            parameterNameId = this.parameterDao.readParameterNameId(currentParm.getCode());\n-            if (parameterNameId != null) {\n-                this.parameterDao.addParameterNamesCacheCandidate(currentParm.getCode(), parameterNameId);\n+        Integer parameterNameId = identityCache.getParameterNameId(currentParm.getCode());\n+        whereClauseSegment.append(chainedParmVar).append(DOT).append(\"PARAMETER_NAME_ID\").append(EQ)\n+                .append(parameterNameId);\n+\n+        // TODO handle code system lookup failures here. Perhaps = NULL to make the query return no rows?\n+        final String codeSystemName = currentParm.getModifierResourceTypeName();\n+        if (codeSystemName != null && !codeSystemName.equals(\"*\")) {\n+            Integer codeSystemId = identityCache.getCodeSystemId(codeSystemName);\n+            if (codeSystemId != null) {\n+                whereClauseSegment.append(AND).append(PARAMETER_TABLE_ALIAS + DOT).append(CODE_SYSTEM_ID).append(\" = \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc2NjAz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518676603", "createdAt": "2020-10-28T13:46:41Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0Njo0MlrOHpq1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0Njo0MlrOHpq1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NTM5NA==", "bodyText": "Repetition... maybe a helper method to manage?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513455394", "createdAt": "2020-10-28T13:46:42Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -710,16 +765,21 @@ private SqlQueryData buildChainedIdClause(QueryParameter currentParm, String cha\n \n     private void appendMidChainParm(StringBuilder whereClauseSegment, QueryParameter currentParm, String chainedParmVar)\n             throws FHIRPersistenceDBConnectException, FHIRPersistenceDataAccessException, FHIRPersistenceException {\n-        Integer parameterNameId = ParameterNamesCache.getParameterNameId(currentParm.getCode());\n-        if (parameterNameId == null) {\n-            parameterNameId = this.parameterDao.readParameterNameId(currentParm.getCode());\n-            if (parameterNameId != null) {\n-                this.parameterDao.addParameterNamesCacheCandidate(currentParm.getCode(), parameterNameId);\n+        Integer parameterNameId = identityCache.getParameterNameId(currentParm.getCode());\n+        whereClauseSegment.append(chainedParmVar).append(DOT).append(\"PARAMETER_NAME_ID\").append(EQ)\n+                .append(parameterNameId);\n+\n+        // TODO handle code system lookup failures here. Perhaps = NULL to make the query return no rows?\n+        final String codeSystemName = currentParm.getModifierResourceTypeName();\n+        if (codeSystemName != null && !codeSystemName.equals(\"*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc4MDY5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518678069", "createdAt": "2020-10-28T13:48:09Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0ODowOVrOHpq5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0ODowOVrOHpq5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NjQ2Ng==", "bodyText": "Do we actually care if this is length 2? when would it not be 2? should it be <= to consider _history?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513456466", "createdAt": "2020-10-28T13:48:09Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -936,9 +995,23 @@ protected SqlQueryData processInclusionCriteria(QueryParameter queryParm) throws\n                 // (pX.PARAMETER_NAME_ID = x AND\n                 this.populateNameIdSubSegment(whereClauseSegment, currentParm.getCode(), PARAMETER_TABLE_ALIAS);\n                 whereClauseSegment.append(AND);\n-                // Build this piece: pX.str_value = search-attribute-value\n-                whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(STR_VALUE).append(operator)\n+                \n+                // split the resource type name out (since issue #1366)\n+                String resourceTypeName = null;\n+                String[] parts = currentParmValue.split(\"/\");\n+                if (parts.length == 2) {\n+                    resourceTypeName = parts[0];\n+                    currentParmValue = parts[1];\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc4ODMw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518678830", "createdAt": "2020-10-28T13:48:51Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0ODo1MVrOHpq7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0ODo1MVrOHpq7hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NzAzMA==", "bodyText": "shouldn't this be split into two appends? .append(PARAMETER_TABLE_ALIAS).append(DOT)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513457030", "createdAt": "2020-10-28T13:48:51Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -936,9 +995,23 @@ protected SqlQueryData processInclusionCriteria(QueryParameter queryParm) throws\n                 // (pX.PARAMETER_NAME_ID = x AND\n                 this.populateNameIdSubSegment(whereClauseSegment, currentParm.getCode(), PARAMETER_TABLE_ALIAS);\n                 whereClauseSegment.append(AND);\n-                // Build this piece: pX.str_value = search-attribute-value\n-                whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(STR_VALUE).append(operator)\n+                \n+                // split the resource type name out (since issue #1366)\n+                String resourceTypeName = null;\n+                String[] parts = currentParmValue.split(\"/\");\n+                if (parts.length == 2) {\n+                    resourceTypeName = parts[0];\n+                    currentParmValue = parts[1];\n+                }\n+                \n+                // Build this piece: pX.token_value = search-attribute-value [ AND pX.code_system_id = <n> ]\n+                whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(TOKEN_VALUE).append(operator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 240}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc5MDA5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518679009", "createdAt": "2020-10-28T13:49:02Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OTowMlrOHpq7_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OTowMlrOHpq7_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NzE1MQ==", "bodyText": "shouldn't this be split into two appends? .append(PARAMETER_TABLE_ALIAS).append(DOT)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513457151", "createdAt": "2020-10-28T13:49:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -609,14 +648,28 @@ protected SqlQueryData processChainedReferenceParm(QueryParameter queryParm) thr\n             if (nextParameter != null) {\n                 if (refParmIndex == 0) {\n                     // Must build this first piece using px placeholder table alias, which will be replaced with a\n-                    // generated value in the buildQuery() method.\n-                    // Build this piece:P1.PARAMETER_NAME_ID = x AND (p1.STR_VALUE IN\n+                    // generated value in the buildQuery() method. The CODE_SYSTEM_ID filter is added for issue #1366\n+                    // due to the normalization of token values\n+                    // Build this piece:P1.PARAMETER_NAME_ID = x AND AND P1.CODE_SYSTEM_ID = x AND (p1.TOKEN_VALUE IN\n                     this.populateNameIdSubSegment(whereClauseSegment, currentParm.getCode(), PARAMETER_TABLE_ALIAS);\n+\n+                    // The resource type of the reference is encoded as the code system associated with the token value\n+                    // so we need to add a filter to ensure we don't match logical-ids for other resource types\n+                    // Note if the match is for any resource, we simply don't filter on the resource type\n+                    final String codeSystemName = currentParm.getModifierResourceTypeName();\n+                    if (codeSystemName != null && !codeSystemName.equals(\"*\")) {\n+                        Integer codeSystemId = identityCache.getCodeSystemId(codeSystemName);\n+                        if (codeSystemId != null) {\n+                            whereClauseSegment.append(AND).append(PARAMETER_TABLE_ALIAS + DOT).append(CODE_SYSTEM_ID).append(\" = \")\n+                                    .append(codeSystemId);\n+                        }\n+                    }\n+                    \n                     whereClauseSegment.append(AND);\n                     whereClauseSegment.append(LEFT_PAREN);\n-                    whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(STR_VALUE).append(IN);\n+                    whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(TOKEN_VALUE).append(IN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc5NDM4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518679438", "createdAt": "2020-10-28T13:49:27Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OToyN1rOHpq9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OToyN1rOHpq9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NzUwMQ==", "bodyText": "shouldn't this be split into two appends? .append(PARAMETER_TABLE_ALIAS).append(DOT)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513457501", "createdAt": "2020-10-28T13:49:27Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -936,9 +995,23 @@ protected SqlQueryData processInclusionCriteria(QueryParameter queryParm) throws\n                 // (pX.PARAMETER_NAME_ID = x AND\n                 this.populateNameIdSubSegment(whereClauseSegment, currentParm.getCode(), PARAMETER_TABLE_ALIAS);\n                 whereClauseSegment.append(AND);\n-                // Build this piece: pX.str_value = search-attribute-value\n-                whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(STR_VALUE).append(operator)\n+                \n+                // split the resource type name out (since issue #1366)\n+                String resourceTypeName = null;\n+                String[] parts = currentParmValue.split(\"/\");\n+                if (parts.length == 2) {\n+                    resourceTypeName = parts[0];\n+                    currentParmValue = parts[1];\n+                }\n+                \n+                // Build this piece: pX.token_value = search-attribute-value [ AND pX.code_system_id = <n> ]\n+                whereClauseSegment.append(PARAMETER_TABLE_ALIAS + DOT).append(TOKEN_VALUE).append(operator)\n                         .append(BIND_VAR);\n+                if (resourceTypeName != null) {\n+                    int codeSystemIdForResourceType = getCodeSystemId(resourceTypeName);\n+                    whereClauseSegment.append(AND).append(PARAMETER_TABLE_ALIAS + DOT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 244}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njc5NTI5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518679529", "createdAt": "2020-10-28T13:49:32Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OTozM1rOHpq9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0OTozM1rOHpq9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1NzU2Ng==", "bodyText": "shouldn't this be split into two appends? .append(PARAMETER_TABLE_ALIAS).append(DOT)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513457566", "createdAt": "2020-10-28T13:49:33Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -1023,13 +1096,9 @@ private SqlQueryData processTokenParm(QueryParameter queryParm, String tableAlia\n                     }\n                     whereClauseSegment.append(tableAlias + DOT).append(CODE_SYSTEM_ID).append(operator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjgwMzY5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518680369", "createdAt": "2020-10-28T13:50:18Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MDoxOFrOHprAJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MDoxOFrOHprAJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1ODIxNQ==", "bodyText": "Sounds ideal for a backlog issue", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513458215", "createdAt": "2020-10-28T13:50:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/InclusionQuerySegmentAggregator.java", "diffHunk": "@@ -208,23 +212,31 @@ protected SqlQueryData buildQuery() throws Exception {\n     }\n \n     /**\n+     * TODO This should not be executed, but instead performed in the database as a join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjgxNzU2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518681756", "createdAt": "2020-10-28T13:51:32Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MTozMlrOHprEeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MTozMlrOHprEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1OTMyMQ==", "bodyText": "Where do these stray tabs come from", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513459321", "createdAt": "2020-10-28T13:51:32Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/DerbyBootstrapper.java", "diffHunk": "@@ -137,7 +174,7 @@ public static void bootstrap(Connection connection, String adminSchemaName, Stri\n             populateResourceTypeAndParameterNameTableEntries(connection, adminSchemaName, dataSchemaName);\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjgxOTkz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518681993", "createdAt": "2020-10-28T13:51:46Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MTo0NlrOHprFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MTo0NlrOHprFDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1OTQ3MA==", "bodyText": "spaces", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513459470", "createdAt": "2020-10-28T13:51:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/DerbyBootstrapper.java", "diffHunk": "@@ -77,7 +80,7 @@ public static void bootstrapDb(DataSource fhirDb) throws SQLException {\n             if (dbDriverName != null && dbDriverName.contains(\"Derby\")) {\n                 final String adminSchemaName = \"admin_\" + tenantId + \"_\" + dsId;\n                 final String dataSchemaName = connection.getSchema();\n-\n+                ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjgzNTQ3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518683547", "createdAt": "2020-10-28T13:53:15Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MzoxNVrOHprJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1MzoxNVrOHprJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MDU4NQ==", "bodyText": "Wrong Package location", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513460585", "createdAt": "2020-10-28T13:53:15Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/Db2ResourceReferenceDAO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.postgresql;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ICommonTokenValuesCache;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceTokenValueRec;\n+import com.ibm.fhir.persistence.jdbc.dto.CommonTokenValue;\n+\n+\n+/**\n+ * Postgres-specific extension of the {@link ResourceReferenceDAO} to work around\n+ * some SQL syntax and Postgres concurrency issues\n+ */\n+public class Db2ResourceReferenceDAO extends ResourceReferenceDAO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njg0NDY4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518684468", "createdAt": "2020-10-28T13:54:08Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NDowOFrOHprL5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NDowOFrOHprL5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MTIyMA==", "bodyText": "Wrong package", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513461220", "createdAt": "2020-10-28T13:54:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/DerbyResourceReferenceDAO.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.postgresql;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ICommonTokenValuesCache;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceTokenValueRec;\n+import com.ibm.fhir.persistence.jdbc.dto.CommonTokenValue;\n+\n+\n+/**\n+ * Postgres-specific extension of the {@link ResourceReferenceDAO} to work around\n+ * some SQL syntax and Postgres concurrency issues\n+ */\n+public class DerbyResourceReferenceDAO extends ResourceReferenceDAO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njg2MTAw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518686100", "createdAt": "2020-10-28T13:55:46Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NTo0NlrOHprRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NTo0NlrOHprRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MjUzMQ==", "bodyText": "Note, we are inconsistent on the prefix for these classes.  I much prefer Postgres vs PostgreSQL\nAlso, this is a migration class?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513462531", "createdAt": "2020-10-28T13:55:46Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresResourceReferenceDAO.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.postgresql;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ICommonTokenValuesCache;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dto.CommonTokenValue;\n+\n+\n+/**\n+ * Postgres-specific extension of the {@link ResourceReferenceDAO} to work around\n+ * some SQL syntax and Postgres concurrency issues\n+ */\n+public class PostgresResourceReferenceDAO extends ResourceReferenceDAO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njg3Nzk0", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518687794", "createdAt": "2020-10-28T13:57:17Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NzoxOFrOHprWBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NzoxOFrOHprWBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MzgxMg==", "bodyText": "Inconsistent naming", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513463812", "createdAt": "2020-10-28T13:57:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceNoProcDAO.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.postgresql;\n+\n+import static com.ibm.fhir.persistence.jdbc.JDBCConstants.UTC;\n+\n+import java.sql.CallableStatement;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLIntegrityConstraintViolationException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceVersionIdMismatchException;\n+import com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCCache;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.IResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.JDBCIdentityCache;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ParameterDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.JDBCIdentityCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterVisitorBatchDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.dto.ExtractedParameterValue;\n+import com.ibm.fhir.persistence.jdbc.dto.Resource;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceFKVException;\n+import com.ibm.fhir.persistence.jdbc.impl.ParameterTransactionDataImpl;\n+import com.ibm.fhir.persistence.jdbc.util.ResourceTypesCache;\n+\n+/**\n+ * Data access object for writing FHIR resources to a PostgreSQL database.\n+ * Like the Derby implementation, this version uses individual SQL statements\n+ * instead of a stored procedure and is useful for debugging performance and/or\n+ * concurrency issues. It should not be used in production scenarios because\n+ * the numerous app-database round-trips slow things down considerably.\n+ * \n+ * @implNote This class follows the logic of the stored procedure, but does so\n+ * using a series of individual JDBC statements.\n+ */\n+public class PostgreSqlResourceNoProcDAO extends ResourceDAOImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njg4MTc3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518688177", "createdAt": "2020-10-28T13:57:38Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NzozOVrOHprXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NzozOVrOHprXIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NDA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Resource  insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)\n          \n          \n            \n                public Resource insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)\n          \n      \n    \n    \n  \n\nextra space", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513464099", "createdAt": "2020-10-28T13:57:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgreSqlResourceNoProcDAO.java", "diffHunk": "@@ -0,0 +1,541 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.postgresql;\n+\n+import static com.ibm.fhir.persistence.jdbc.JDBCConstants.UTC;\n+\n+import java.sql.CallableStatement;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLIntegrityConstraintViolationException;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceVersionIdMismatchException;\n+import com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCCache;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n+import com.ibm.fhir.persistence.jdbc.dao.api.FhirRefSequenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.IResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.JDBCIdentityCache;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ParameterDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.JDBCIdentityCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterVisitorBatchDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.dto.ExtractedParameterValue;\n+import com.ibm.fhir.persistence.jdbc.dto.Resource;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDataAccessException;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceFKVException;\n+import com.ibm.fhir.persistence.jdbc.impl.ParameterTransactionDataImpl;\n+import com.ibm.fhir.persistence.jdbc.util.ResourceTypesCache;\n+\n+/**\n+ * Data access object for writing FHIR resources to a PostgreSQL database.\n+ * Like the Derby implementation, this version uses individual SQL statements\n+ * instead of a stored procedure and is useful for debugging performance and/or\n+ * concurrency issues. It should not be used in production scenarios because\n+ * the numerous app-database round-trips slow things down considerably.\n+ * \n+ * @implNote This class follows the logic of the stored procedure, but does so\n+ * using a series of individual JDBC statements.\n+ */\n+public class PostgreSqlResourceNoProcDAO extends ResourceDAOImpl {\n+    private static final Logger logger = Logger.getLogger(PostgreSqlResourceDAO.class.getName());\n+    private static final String CLASSNAME = PostgreSqlResourceDAO.class.getSimpleName();\n+\n+    private static final String SQL_READ_RESOURCE_TYPE = \"{CALL %s.add_resource_type(?, ?)}\";\n+\n+    // DAO used to obtain sequence values from FHIR_REF_SEQUENCE\n+    private FhirRefSequenceDAO fhirRefSequenceDAO;\n+\n+    public PostgreSqlResourceNoProcDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd) {\n+        super(connection, schemaName, flavor, cache, rrd);\n+    }\n+\n+    public PostgreSqlResourceNoProcDAO(Connection connection, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd,\n+        ParameterTransactionDataImpl ptdi) {\n+        super(connection, schemaName, flavor, trxSynchRegistry, cache, rrd, ptdi);\n+    }\n+    \n+    /**\n+     * Inserts the passed FHIR Resource and associated search parameters to a Derby or PostgreSql FHIR database.\n+     * The search parameters are stored first by calling the passed parameterDao. Then the Resource is stored\n+     * by sql.\n+     * @param resource The FHIR Resource to be inserted.\n+     * @param parameters The Resource's search parameters to be inserted.\n+     * @param parameterDao\n+     * @return The Resource DTO\n+     * @throws FHIRPersistenceDataAccessException\n+     * @throws FHIRPersistenceDBConnectException\n+     * @throws FHIRPersistenceVersionIdMismatchException\n+     */\n+    @Override\n+    public Resource  insert(Resource resource, List<ExtractedParameterValue> parameters, ParameterDAO parameterDao)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjkyOTQ4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518692948", "createdAt": "2020-10-28T14:02:06Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMjowNlrOHprk0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMjowNlrOHprk0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NzYwMg==", "bodyText": "this one seems useful as a backlog issue / technical debt", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513467602", "createdAt": "2020-10-28T14:02:06Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -256,6 +282,8 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp, F\n         // For unit tests (outside of JEE), we also need our own mechanism for handling transactions\n         this.transactionAdapter = new FHIRTestTransactionAdapter(cp);\n \n+        // TODO connect the transactionAdapter to our cache so that we can handle tx events in a non-JEE world\n+        this.transactionDataImpl = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjkzNTAy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518693502", "createdAt": "2020-10-28T14:02:38Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMjozOFrOHprmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMjozOFrOHprmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2ODAxNw==", "bodyText": "Confirming... ONLY Derby?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513468017", "createdAt": "2020-10-28T14:02:38Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -267,7 +295,18 @@ public FHIRPersistenceJDBCImpl(Properties configProps, IConnectionProvider cp, F\n      */\n     protected Action buildActionChain() {\n         // Note: do not call setSchema on a connection. It exposes a bug in Liberty.\n-        return new SetTenantAction(this.configProvider);\n+        \n+        // Configure an action to set the tenant global variable the\n+        // first time we start using a connection in a transaction\n+        Action result = new SetTenantAction(this.configProvider);\n+        \n+        // For Derby, we also need to make sure that the declared global temporary tables\n+        // are created for the current session (connection). TODO. discuss if we only\n+        // want to invoke this for ingestion calls. These tables are not required for\n+        // reads/searches.\n+        result = new CreateTempTablesAction(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njk0NjQ3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518694647", "createdAt": "2020-10-28T14:03:45Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMzo0NVrOHprpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowMzo0NVrOHprpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2ODc4Nw==", "bodyText": "What's unchecked here?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513468787", "createdAt": "2020-10-28T14:03:45Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1640,9 +1690,188 @@ public String getSchemaForRequestContext(Connection connection) throws FHIRPersi\n             throw new FHIRPersistenceDBConnectException(\"Datastore configuration issue. Details in server logs\");\n         }\n     }\n+\n+    /**\n+     * Prefill the caches\n+     */\n+    public void doCachePrefill(Connection connection) throws FHIRPersistenceException {\n+        // Perform the cache prefill just once (for a given tenant). This isn't synchronous, so\n+        // there's a chance for other threads to slip in before the prefill completes. Those threads\n+        // just end up having cache-misses for the names they need.\n+        // Note - this is done as the first thing in a transaction so there's no concern about reading\n+        // uncommitted values.\n+        if (cache.needToPrefill()) {\n+            ResourceDAO resourceDao = makeResourceDAO(connection);\n+            ParameterDAO parameterDao = makeParameterDAO(connection);\n+            FHIRPersistenceJDBCCacheUtil.prefill(resourceDao, parameterDao, cache);\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isReindexSupported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp)\n+        throws FHIRPersistenceException {\n+        final String METHODNAME = \"reindex\";\n+        log.entering(CLASSNAME, METHODNAME);\n+        \n+        int result = 0;\n+        \n+        if (log.isLoggable(Level.FINE)) {\n+            log.fine(\"reindex _tstamp=\" + tstamp.toString());\n+        }\n+        \n+        if (tstamp.isAfter(java.time.Instant.now())) {\n+            // protect against setting a future timestamp, which could otherwise \n+            // disable the ability to reindex anything\n+            throw new FHIRPersistenceException(\"Reindex _tstamp cannot be in the future\");\n+        }\n+\n+        try (Connection connection = openConnection()) {\n+            ResourceDAO resourceDao = makeResourceDAO(connection);\n+            ParameterDAO parameterDao = makeParameterDAO(connection);\n+            ReindexResourceDAO reindexDAO = FHIRResourceDAOFactory.getReindexResourceDAO(connection, FhirSchemaConstants.FHIR_ADMIN, schemaNameSupplier.getSchemaForRequestContext(connection), connectionStrategy.getFlavor(), this.trxSynchRegistry, this.cache, parameterDao);\n+            // Obtain a resource we will reindex in this request/transaction. The record is locked as part\n+            // of its selection, so we avoid a lot of (but not all) deadlock issues\n+            long start = System.nanoTime();\n+            ResourceIndexRecord rir = reindexDAO.getResourceToReindex(tstamp);\n+            long end = System.nanoTime();\n+            \n+            if (log.isLoggable(Level.FINER)) {\n+                double elapsed = (end-start)/1e6;\n+                log.finer(String.format(\"Selected %d resource for reindexing in %.3f ms \", rir != null ? 1 : 0, elapsed));\n+            }\n+\n+            if (rir != null) {\n+                // result is only 0 if getResourceToReindex doesn't give us anything because this indicates\n+                // there's nothing left to do\n+                result = 1;\n+                \n+                // This is important so we log it as info\n+                log.info(\"Reindexing FHIR Resource '\" + rir.getResourceType() + \"/\" + rir.getLogicalId() + \"'\");\n+                    \n+                // Read the current resource\n+                com.ibm.fhir.persistence.jdbc.dto.Resource existingResourceDTO = resourceDao.read(rir.getLogicalId(), rir.getResourceType());\n+                if (existingResourceDTO != null) {\n+                    List<String> elements = Collections.emptyList();\n+                    Resource existingResource = this.convertResourceDTO(existingResourceDTO, Resource.class, elements);\n+                    \n+                    reindexDAO.setPersistenceContext(context);\n+                    reindexDAO.updateParameters(rir.getResourceType(), this.extractSearchParameters(existingResource, existingResourceDTO), rir.getLogicalId(), rir.getLogicalResourceId());\n+    \n+                    // Use an OperationOutcome Issue to let the caller know that some work was performed\n+                    final String diag = \"Processed \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+                    operationOutcomeResult.issue(Issue.builder().code(IssueType.INFORMATIONAL).severity(IssueSeverity.INFORMATION).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());\n+                } else {\n+                    // Reasonable to assume that this resource was deleted because we can't read it\n+                    final String diag = \"Failed to read resource: \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+                    operationOutcomeResult.issue(Issue.builder().code(IssueType.NOT_FOUND).severity(IssueSeverity.WARNING).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());\n+                }                \n+            }\n+            \n+        } catch(FHIRPersistenceFKVException e) {\n+            getTransaction().setRollbackOnly();\n+            throw e;\n+        } catch(FHIRPersistenceException e) {\n+            getTransaction().setRollbackOnly();\n+            throw e;\n+        } catch (DataAccessException dax) {\n+            getTransaction().setRollbackOnly();\n+            \n+            // It's possible this is a deadlock exception, in which case it could be considered retryable\n+            if (dax.isTransactionRetryable()) {\n+                log.log(Level.SEVERE, \"retryable error\", dax);\n+                FHIRPersistenceDataAccessException fpx = new FHIRPersistenceDataAccessException(\"Data access error while performing a reindex operation.\");\n+                fpx.setTransactionRetryable(true);\n+                throw fpx;\n+            } else {\n+                log.log(Level.SEVERE, \"non-retryable error\", dax);\n+                throw new FHIRPersistenceDataAccessException(\"Data access error while performing a reindex operation.\");\n+            }\n+        } catch(Throwable e) {\n+            getTransaction().setRollbackOnly();\n+            // don't chain the exception to avoid leaking secrets\n+            FHIRPersistenceException fx = new FHIRPersistenceException(\"Unexpected error while performing a reindex operation.\");\n+            log.log(Level.SEVERE, fx.getMessage(), e);\n+            throw fx;\n+        }\n+        finally {\n+            log.exiting(CLASSNAME, METHODNAME);\n+        }\n+        \n+        return result;\n+    }\n     \n     @Override\n     public String generateResourceId() {\n         return logicalIdentityProvider.createNewIdentityValue();\n     }\n+\n+    /**\n+     * Each datasource involved in a transaction gets its own TransactionData impl object\n+     * which is used to hold parameter data to be inserted into the datbase just prior to\n+     * commit.\n+     * @param datasourceId\n+     * @return the ParameterTransactionDataImpl used to hold onto data to persist at the end of the current transaction\n+     */\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 343}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njk4MTI5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518698129", "createdAt": "2020-10-28T14:06:58Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowNjo1OFrOHprzkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowNjo1OFrOHprzkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3MTM3OQ==", "bodyText": "Confirming here... it does not exist when the Temp Table already exists", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513471379", "createdAt": "2020-10-28T14:06:58Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/CreateCommonTokenValuesTmp.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+\n+\n+/**\n+ * Create the COMMON_TOKEN_VALUES_TMP table\n+ */\n+public class CreateCommonTokenValuesTmp implements IDatabaseStatement {\n+    private static final Logger logger = Logger.getLogger(CreateCommonTokenValuesTmp.class.getName());\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        \n+        if (!isExists(c)) {\n+            final String ddl = \"\"\n+                    + \"DECLARE GLOBAL TEMPORARY TABLE common_token_values_tmp (\"\n+                    + \"  token_value VARCHAR(\" + FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES + \"), \"\n+                    + \"  code_system_id INT\"\n+                    + \") NOT LOGGED\";\n+            \n+            try (Statement s = c.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                logger.log(Level.SEVERE, ddl, x);\n+                throw translator.translate(x);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njk4NTg2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518698586", "createdAt": "2020-10-28T14:07:24Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowNzoyNFrOHpr06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowNzoyNFrOHpr06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3MTcyMQ==", "bodyText": "This is fixed to something like 512?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513471721", "createdAt": "2020-10-28T14:07:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/CreateCommonTokenValuesTmp.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+\n+\n+/**\n+ * Create the COMMON_TOKEN_VALUES_TMP table\n+ */\n+public class CreateCommonTokenValuesTmp implements IDatabaseStatement {\n+    private static final Logger logger = Logger.getLogger(CreateCommonTokenValuesTmp.class.getName());\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        \n+        if (!isExists(c)) {\n+            final String ddl = \"\"\n+                    + \"DECLARE GLOBAL TEMPORARY TABLE common_token_values_tmp (\"\n+                    + \"  token_value VARCHAR(\" + FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES + \"), \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njk5MzUz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518699353", "createdAt": "2020-10-28T14:08:08Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowODowOFrOHpr3Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowODowOFrOHpr3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3MjI1OA==", "bodyText": "Is WHERE needed?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513472258", "createdAt": "2020-10-28T14:08:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/CreateCodeSystemsTmp.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+\n+/**\n+ * Create the CODE_SYSTEMS_TMP table\n+ */\n+public class CreateCodeSystemsTmp implements IDatabaseStatement {\n+    private static final Logger logger = Logger.getLogger(CreateCommonTokenValuesTmp.class.getName());\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        \n+        if (!isExists(c)) {\n+            final String ddl = \"\"\n+                    + \"DECLARE GLOBAL TEMPORARY TABLE SESSION.code_systems_tmp (\"\n+                    + \"  code_system_name VARCHAR(\" + FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES + \") \"\n+                    + \") NOT LOGGED\";\n+            \n+            try (Statement s = c.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                logger.log(Level.SEVERE, ddl, x);\n+                throw translator.translate(x);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Does the table currently exist\n+     * @param c\n+     * @return\n+     */\n+    private boolean isExists(Connection c) {\n+        boolean result = false;\n+        \n+        final String sql = \"SELECT 1 FROM SESSION.code_systems_tmp WHERE 1=0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Njk5NzE1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518699715", "createdAt": "2020-10-28T14:08:28Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowODoyOVrOHpr4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowODoyOVrOHpr4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3MjUyOA==", "bodyText": "Where is needed?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513472528", "createdAt": "2020-10-28T14:08:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/CreateCommonTokenValuesTmp.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+\n+\n+/**\n+ * Create the COMMON_TOKEN_VALUES_TMP table\n+ */\n+public class CreateCommonTokenValuesTmp implements IDatabaseStatement {\n+    private static final Logger logger = Logger.getLogger(CreateCommonTokenValuesTmp.class.getName());\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        \n+        if (!isExists(c)) {\n+            final String ddl = \"\"\n+                    + \"DECLARE GLOBAL TEMPORARY TABLE common_token_values_tmp (\"\n+                    + \"  token_value VARCHAR(\" + FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES + \"), \"\n+                    + \"  code_system_id INT\"\n+                    + \") NOT LOGGED\";\n+            \n+            try (Statement s = c.createStatement()) {\n+                s.executeUpdate(ddl);\n+            } catch (SQLException x) {\n+                logger.log(Level.SEVERE, ddl, x);\n+                throw translator.translate(x);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Does the table currently exist\n+     * @param c\n+     * @return\n+     */\n+    private boolean isExists(Connection c) {\n+        boolean result = false;\n+        \n+        final String sql = \"SELECT 1 FROM SESSION.common_token_values_tmp WHERE 1=0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzA3NzIz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518707723", "createdAt": "2020-10-28T14:14:08Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNDowOFrOHpsJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNDowOFrOHpsJ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3NzA3OQ==", "bodyText": "Does this truncate without warning?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513477079", "createdAt": "2020-10-28T14:14:08Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ResourceReferenceDAO.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.dao.impl;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ICommonTokenValuesCache;\n+import com.ibm.fhir.persistence.jdbc.dao.api.IResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dto.CommonTokenValue;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+\n+/**\n+ * DAO to handle maintenance of the local and external reference tables\n+ * which contain the relationships described by \"reference\" elements in\n+ * each resource (e.g. Observation.subject).\n+ * \n+ * The DAO uses a cache for looking up the ids for various entities. The\n+ * DAO can create new entries, but these can only be used locally until\n+ * the transaction commits, at which point they can be consolidated into\n+ * the shared cache. This has the benefit that we reduce the number of times\n+ * we need to lock the global cache, because we only update it once per\n+ * transaction.\n+ * \n+ * For improved performance, we also make use of batch statements which\n+ * are managed as member variables. This is why it's important to close\n+ * this DAO before the transaction commits, ensuring that any outstanding\n+ * DML batched but not yet executed is processed. Calling close does not\n+ * close the provided Connection. That is up to the caller to manage.\n+ * Close does close any statements which are opened inside the class.\n+ */\n+public abstract class ResourceReferenceDAO implements IResourceReferenceDAO, AutoCloseable {\n+    private static final Logger logger = Logger.getLogger(ResourceReferenceDAO.class.getName());\n+    \n+    private final String schemaName;\n+\n+    // hold on to the connection because we use batches to improve efficiency\n+    private final Connection connection;\n+    \n+    // The cache used to track the ids of the normalized entities we're managing\n+    private final ICommonTokenValuesCache cache;\n+    \n+    // The translator for the type of database we are connected to\n+    private final IDatabaseTranslator translator;\n+\n+    // The number of operations we allow before submitting a batch\n+    protected static final int BATCH_SIZE = 100;\n+    \n+    /**\n+     * Public constructor\n+     * @param c\n+     */\n+    public ResourceReferenceDAO(IDatabaseTranslator t, Connection c, String schemaName, ICommonTokenValuesCache cache) {\n+        this.translator = t;\n+        this.connection = c;\n+        this.cache = cache;\n+        this.schemaName = schemaName;\n+    }\n+\n+    /**\n+     * Getter for the {@link IDatabaseTranslator} held by this DAO\n+     * @return\n+     */\n+    protected IDatabaseTranslator getTranslator() {\n+        return this.translator;\n+    }\n+\n+    /**\n+     * Getter for the {@link ICommonTokenValuesCache} held by this DAO\n+     * @return\n+     */\n+    protected ICommonTokenValuesCache getCache() {\n+        return this.cache;\n+    }\n+\n+    /**\n+     * Getter for the {@link Connection} held by this DAO\n+     * @return\n+     */\n+    protected Connection getConnection() {\n+        return this.connection;\n+    }\n+\n+    /**\n+     * Getter for subclass access to the schemaName\n+     * @return\n+     */\n+    protected String getSchemaName() {\n+        return this.schemaName;\n+    }\n+\n+    @Override\n+    public void flush() throws FHIRPersistenceException {\n+    }\n+\n+    @Override\n+    public void close() throws FHIRPersistenceException {\n+        flush();\n+    }\n+\n+    @Override\n+    public ICommonTokenValuesCache getResourceReferenceCache() {\n+        return this.cache;\n+    }\n+\n+    /**\n+     * Look up the database id for the given externalSystemName\n+     * @param externalSystemName\n+     * @return the database id, or null if no record exists\n+     */\n+    public Integer queryExternalSystemId(String externalSystemName) {\n+        Integer result;\n+        \n+        final String SQL = \"SELECT external_system_id FROM external_systems where external_system_name = ?\";\n+\n+        try (PreparedStatement ps = connection.prepareStatement(SQL)) {\n+            ps.setString(1, externalSystemName);\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                result = rs.getInt(1);\n+            } else {\n+                result = null;\n+            }\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            throw translator.translate(x);\n+        }\n+        \n+        return result;\n+    }\n+    \n+    /**\n+     * Find the database id for the given externalReferenceValue\n+     * @param externalReferenceValue\n+     * @return\n+     */\n+    public Integer queryExternalReferenceValueId(String externalReferenceValue) {\n+        Integer result;\n+        \n+        final String SQL = \"SELECT external_reference_value_id FROM external_reference_values WHERE external_reference_value = ?\";\n+        try (PreparedStatement ps = connection.prepareStatement(SQL)) {\n+            ps.setString(1, externalReferenceValue);\n+            ResultSet rs = ps.executeQuery();\n+            if (rs.next()) {\n+                result = rs.getInt(1);\n+            } else {\n+                result = null;\n+            }\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, SQL, x);\n+            throw translator.translate(x);\n+        }\n+        \n+        return result;\n+    }\n+    \n+    /**\n+     * Get a list of matching records from external_reference_values. Cheaper to do as one\n+     * query instead of individuals\n+     * @param externalReferenceValue\n+     * @return\n+     */\n+    public List<ExternalReferenceValue> queryExternalReferenceValues(String... externalReferenceValues) {\n+        List<ExternalReferenceValue> result = new ArrayList<>();\n+        if (externalReferenceValues.length == 0) {\n+            throw new IllegalArgumentException(\"externalReferenceValues array cannot be empty\");\n+        }\n+\n+        final StringBuilder sql = new StringBuilder();\n+        sql.append(\"SELECT external_reference_value_id, external_reference_value FROM external_reference_values WHERE external_reference_value IN (\");\n+        \n+        for (int i=0; i<externalReferenceValues.length; i++) {\n+            if (i == 0) {\n+                sql.append(\"?\");\n+            } else {\n+                sql.append(\",?\");\n+            }\n+        }\n+        sql.append(\")\");\n+        \n+        try (PreparedStatement ps = connection.prepareStatement(sql.toString())) {\n+            int a = 1;\n+            for (String xrv: externalReferenceValues) {\n+                ps.setString(a++, xrv);\n+            }\n+            \n+            ResultSet rs = ps.executeQuery();\n+            while (rs.next()) {\n+                result.add(new ExternalReferenceValue(rs.getLong(1), rs.getString(2)));\n+            }\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, sql.toString(), x);\n+            throw translator.translate(x);\n+        }\n+        \n+        return result;\n+    }\n+    \n+    public List<ExternalSystem> queryExternalSystems(String... externalSystemNames) {\n+        List<ExternalSystem> result = new ArrayList<>();\n+        if (externalSystemNames.length == 0) {\n+            throw new IllegalArgumentException(\"externalReferenceValues array cannot be empty\");\n+        }\n+\n+        final StringBuilder sql = new StringBuilder();\n+        sql.append(\"SELECT external_system_id, external_system_name FROM external_systems WHERE external_system_name IN (\");\n+        \n+        for (int i=0; i<externalSystemNames.length; i++) {\n+            if (i == 0) {\n+                sql.append(\"?\");\n+            } else {\n+                sql.append(\",?\");\n+            }\n+        }\n+        sql.append(\")\");\n+        \n+        try (PreparedStatement ps = connection.prepareStatement(sql.toString())) {\n+            int a = 1;\n+            for (String xrv: externalSystemNames) {\n+                ps.setString(a++, xrv);\n+            }\n+            \n+            ResultSet rs = ps.executeQuery();\n+            while (rs.next()) {\n+                result.add(new ExternalSystem(rs.getLong(1), rs.getString(2)));\n+            }\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, sql.toString(), x);\n+            throw translator.translate(x);\n+        }\n+        \n+        return result;\n+    }\n+\n+    @Override\n+    public void deleteExternalReferences(int resourceTypeId, String logicalId) {\n+        final String DML = \"DELETE FROM external_references \"\n+                + \"WHERE logical_resource_id IN ( \"\n+                + \" SELECT logical_resource_id FROM logical_resources \"\n+                + \"  WHERE resource_type_id = ? \"\n+                + \"    AND logical_id = ?)\";\n+        \n+        try (PreparedStatement ps = connection.prepareStatement(DML)) {\n+            ps.setInt(1, resourceTypeId);\n+            ps.setString(2, logicalId);\n+            ps.executeUpdate();\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, DML, x);\n+            throw translator.translate(x);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void deleteLocalReferences(long logicalResourceId) {\n+        final String DML = \"DELETE FROM local_references WHERE logical_resource_id = ?\";\n+        \n+        try (PreparedStatement ps = connection.prepareStatement(DML)) {\n+            ps.setLong(1, logicalResourceId);\n+            ps.executeUpdate();\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, DML, x);\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteLogicalResourceCompartments(long logicalResourceId) {\n+        final String DML = \"DELETE FROM logical_resource_compartments WHERE logical_resource_id = ?\";\n+        \n+        try (PreparedStatement ps = connection.prepareStatement(DML)) {\n+            ps.setLong(1, logicalResourceId);\n+            ps.executeUpdate();\n+        } catch (SQLException x) {\n+            // make the exception a little bit more meaningful knowing the database type\n+            logger.log(Level.SEVERE, DML, x);\n+            throw translator.translate(x);\n+        }\n+    }\n+\n+    @Override\n+    public void addCommonTokenValues(String resourceType, Collection<ResourceTokenValueRec> xrefs) {\n+        // Grab the ids for all the code-systems, and upsert any misses\n+        List<ResourceTokenValueRec> systemMisses = new ArrayList<>();\n+        cache.resolveCodeSystems(xrefs, systemMisses);\n+        upsertCodeSystems(systemMisses);\n+\n+        // Now that all the code-systems ids are known, we can search the cache\n+        // for all the token values, upserting anything new\n+        List<ResourceTokenValueRec> valueMisses = new ArrayList<>();\n+        cache.resolveTokenValues(xrefs, valueMisses);\n+        upsertCommonTokenValues(valueMisses);\n+\n+        insertResourceTokenRefs(resourceType, xrefs);\n+    }\n+\n+    /**\n+     * Insert the values in the resource-type-specific _resource_token_refs table. This\n+     * is a simple batch insert because all the FKs have already been resolved and updated\n+     * in the ResourceTokenValueRec records\n+     * @param resourceType\n+     * @param xrefs\n+     */\n+    protected void insertResourceTokenRefs(String resourceType, Collection<ResourceTokenValueRec> xrefs) {\n+        // Now all the values should have ids assigned so we can go ahead and insert them\n+        // as a batch\n+        final String tableName = resourceType + \"_RESOURCE_TOKEN_REFS\";\n+        DataDefinitionUtil.assertValidName(tableName);\n+        final String insert = \"INSERT INTO \" + tableName + \"(\"\n+                + \"parameter_name_id, logical_resource_id, common_token_value_id, ref_version_id) \"\n+                + \"VALUES (?, ?, ?, ?)\";\n+        try (PreparedStatement ps = connection.prepareStatement(insert)) {\n+            int count = 0;\n+            for (ResourceTokenValueRec xr: xrefs) {\n+                ps.setInt(1, xr.getParameterNameId());\n+                ps.setLong(2, xr.getLogicalResourceId());\n+\n+                // common token value can be null\n+                if (xr.getCommonTokenValueId() != null) {\n+                    ps.setLong(3, xr.getCommonTokenValueId());\n+                } else {\n+                    ps.setNull(3, Types.BIGINT);                    \n+                }\n+\n+                // version can be null\n+                if (xr.getRefVersionId() != null) {\n+                    ps.setInt(4, xr.getRefVersionId());\n+                } else {\n+                    ps.setNull(4, Types.INTEGER);\n+                }\n+                ps.addBatch();\n+                if (++count == BATCH_SIZE) {\n+                    ps.executeBatch();\n+                    count = 0;\n+                }\n+            }\n+            \n+            if (count > 0) {\n+                ps.executeBatch();\n+            }\n+        } catch (SQLException x) {\n+            logger.log(Level.SEVERE, insert, x);\n+            throw translator.translate(x);\n+        }\n+    }\n+    \n+    /**\n+     * Add all the systems we currently don't have in the database. If all target\n+     * databases handled MERGE properly this would be easy, but they don't so\n+     * we go old-school with a negative outer join instead (which is pretty much\n+     * what MERGE does behind the scenes anyway).\n+     * @param systems\n+     */\n+    public void upsertCodeSystems(List<ResourceTokenValueRec> systems) {\n+        if (systems.isEmpty()) {\n+            return;\n+        }\n+        \n+        // Unique list so we don't try and create the same name more than once\n+        Set<String> systemNames = systems.stream().map(xr -> xr.getCodeSystemValue()).collect(Collectors.toSet());\n+        StringBuilder paramList = new StringBuilder();\n+        StringBuilder inList = new StringBuilder();\n+        for (int i=0; i<systemNames.size(); i++) {\n+            if (paramList.length() > 0) {\n+                paramList.append(\", \");\n+                inList.append(\",\");\n+            }\n+            paramList.append(\"(CAST(? AS VARCHAR(\" + FhirSchemaConstants.MAX_SEARCH_STRING_BYTES + \")))\");\n+            inList.append(\"?\");\n+        }\n+        \n+        final String paramListStr = paramList.toString();\n+        doCodeSystemsUpsert(paramListStr, systemNames);\n+        \n+        \n+        // Now grab the ids for the rows we just created. If we had a RETURNING implementation\n+        // which worked reliably across all our database platforms, we wouldn't need this\n+        // second query.\n+        StringBuilder select = new StringBuilder();\n+        select.append(\"SELECT code_system_name, code_system_id FROM code_systems WHERE code_system_name IN (\");\n+        select.append(inList);\n+        select.append(\")\");\n+        \n+        Map<String, Integer> idMap = new HashMap<>();\n+        try (PreparedStatement ps = connection.prepareStatement(select.toString())) {\n+            // load a map with all the ids we need which we can then use to update the\n+            // ExternalResourceReferenceRec objects\n+            int a = 1;\n+            for (String name: systemNames) {\n+                ps.setString(a++, name);\n+            }\n+\n+            ResultSet rs = ps.executeQuery();\n+            while (rs.next()) {\n+                idMap.put(rs.getString(1), rs.getInt(2));\n+            }\n+        } catch (SQLException x) {\n+            logger.log(Level.SEVERE, select.toString(), x);\n+            throw translator.translate(x);\n+        }\n+        \n+        // Now update the ids for all the matching systems in our list\n+        for (ResourceTokenValueRec xr: systems) {\n+            Integer id = idMap.get(xr.getCodeSystemValue());\n+            if (id != null) {\n+                xr.setCodeSystemValueId(id);\n+\n+                // Add this value to the (thread-local) cache\n+                cache.addCodeSystem(xr.getCodeSystemValue(), id);\n+            } else {\n+                // Unlikely...but need to handle just in case\n+                logger.severe(\"Record for code_system_name '\" + xr.getCodeSystemValue() + \"' inserted but not found\");\n+                throw new IllegalStateException(\"id deleted from database!\");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Insert any missing values into the code_systems table\n+     * @param paramList\n+     * @param systems\n+     */\n+    public abstract void doCodeSystemsUpsert(String paramList, Collection<String> systemNames);\n+    \n+    /**\n+     * Add reference value records for each unique reference name in the given list\n+     * @param values\n+     */\n+    public void upsertCommonTokenValues(List<ResourceTokenValueRec> values) {\n+        \n+        // Unique list so we don't try and create the same name more than once.\n+        // Ignore any null token-values, because we don't want to (can't) store\n+        // them in our common token values table.\n+        Set<CommonTokenValue> tokenValues = values.stream().filter(x -> x.getTokenValue() != null).map(xr -> new CommonTokenValue(xr.getCodeSystemValueId(), xr.getTokenValue())).collect(Collectors.toSet());\n+        \n+        if (tokenValues.isEmpty()) {\n+            // nothing to do\n+            return;\n+        }\n+\n+        // Build a string of parameter values we use in the query to drive the insert statement.\n+        // The database needs to know the type when it parses the query, hence the slightly verbose CAST functions:\n+        // VALUES ((CAST(? AS VARCHAR(1234)), CAST(? AS INT)), (...)) AS V(common_token_value, parameter_name_id, code_system_id)\n+        StringBuilder inList = new StringBuilder(); // for the select query later\n+        StringBuilder paramList = new StringBuilder();\n+        for (int i=0; i<tokenValues.size(); i++) {\n+            if (paramList.length() > 0) {\n+                paramList.append(\", \");\n+            }\n+            paramList.append(\"(CAST(? AS VARCHAR(\" + FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES + \"))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 474}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzA4NzU4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518708758", "createdAt": "2020-10-28T14:15:06Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNTowNlrOHpsM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNTowNlrOHpsM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzg2Mw==", "bodyText": "Local not External?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513477863", "createdAt": "2020-10-28T14:15:06Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/LocalResourceReferenceRec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.dao.impl;\n+\n+\n+/**\n+ * A DTO representing an external resource reference. This object is initialized\n+ * with names which are resolved to ids when passed through the cache. The idea\n+ * is to reduce the number of times we have to iterate over the list of records", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzA4OTAw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518708900", "createdAt": "2020-10-28T14:15:14Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNToxNFrOHpsNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNToxNFrOHpsNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The loca ref resource type\n          \n          \n            \n                // The local ref resource type", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513477981", "createdAt": "2020-10-28T14:15:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/LocalResourceReferenceRec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.dao.impl;\n+\n+\n+/**\n+ * A DTO representing an external resource reference. This object is initialized\n+ * with names which are resolved to ids when passed through the cache. The idea\n+ * is to reduce the number of times we have to iterate over the list of records\n+ */\n+public class LocalResourceReferenceRec extends ResourceRefRec {\n+\n+    // The loca ref resource type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzA5NTU3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518709557", "createdAt": "2020-10-28T14:15:52Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNTo1MlrOHpsPSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNTo1MlrOHpsPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3ODQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Look up the code system. If it doesn't exist, add it to the database\n          \n          \n            \n                 * Look up the code system. If it doesn't exist, adds it to the database", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513478474", "createdAt": "2020-10-28T14:15:52Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -194,17 +219,16 @@ public ParameterVisitorBatchDAO(Connection c, String adminSchemaName, String tab\n      * @return\n      */\n     protected int getParameterNameId(String parameterName) throws FHIRPersistenceException {\n-        return parameterNameCache.readOrAddParameterNameId(parameterName);\n-\n+        return identityCache.getParameterNameId(parameterName);\n     }\n \n     /**\n-     * Look up the code system\n+     * Look up the code system. If it doesn't exist, add it to the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzEwMjQx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518710241", "createdAt": "2020-10-28T14:16:29Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNjoyOVrOHpsRSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNjoyOVrOHpsRSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3ODk4NQ==", "bodyText": "maybe I'm missing this one? What does this todo mean?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513478985", "createdAt": "2020-10-28T14:16:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -370,9 +394,11 @@ public void visit(TokenParmVal param) throws FHIRPersistenceException {\n         String tokenValue = param.getValueCode();\n         try {\n             int parameterNameId = getParameterNameId(parameterName);\n-            int codeSystemId = getCodeSystemId(codeSystem);\n \n+            // TODO handle base (non-resource-specific) token values for issue #1366", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzExODE3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518711817", "createdAt": "2020-10-28T14:18:00Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxODowMVrOHpsV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxODowMVrOHpsV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MDE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final String endpoint = \"fhir-server/api/v4/\";\n          \n          \n            \n                        final String endpoint = \"fhir-server/api/v4/\";\n          \n      \n    \n    \n  \n\nThis is not always true.\nConsider our interop enviroment which has dev-1234", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513480172", "createdAt": "2020-10-28T14:18:01Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -708,4 +745,136 @@ private void closeStatement(PreparedStatement ps) {\n     private boolean isBase(ExtractedParameterValue param) {\n         return \"Resource\".equals(param.getBase());\n     }\n-}\n+    \n+    /**\n+     * Get the leading part of the url e.g. https://example.com\n+     * @return\n+     */\n+    private String getServerUrl() throws FHIRPersistenceException {\n+        \n+        if (this.serverBase != null) {\n+            return this.serverBase;\n+        }\n+        \n+        String uri = FHIRRequestContext.get().getOriginalRequestUri();\n+\n+        // request URI is not set for all unit-tests, so we need to take that into account\n+        if (uri == null) {\n+            return null;\n+        }\n+        \n+        try {\n+            StringBuilder result = new StringBuilder();\n+            URL url = new URL(uri);\n+            \n+            result.append(url.getProtocol());\n+            result.append(\"://\");\n+            result.append(url.getHost());\n+            \n+            if (url.getPort() != -1) {\n+                result.append(\":\");\n+                result.append(url.getPort());\n+            }\n+            \n+            // https://example.com:9443/\n+            result.append(\"/\");\n+            \n+            final String endpoint = \"fhir-server/api/v4/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 225}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzEzNDA3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518713407", "createdAt": "2020-10-28T14:19:29Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxOToyOVrOHpsaVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxOToyOVrOHpsaVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MTMwMQ==", "bodyText": "unused, but would be useful", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513481301", "createdAt": "2020-10-28T14:19:29Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/api/IResourceReferenceDAO.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.dao.api;\n+\n+import java.util.Collection;\n+\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceTokenValueRec;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.LocalResourceReferenceRec;\n+\n+/**\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzYwMDA1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518760005", "createdAt": "2020-10-28T14:59:59Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyMTo1OFrOHpvlpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyMjoyOFrOHpvnUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMzM0OA==", "bodyText": "Converged over iterations. Probably could be combined, but I don't think a necessary change at this stage.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513533348", "createdAt": "2020-10-28T15:21:58Z", "author": {"login": "punktilious"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/api/IResourceEntryProcessor.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.api;\n+\n+\n+/**\n+ * Process a ResourceEntry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNDQ2OQ=="}, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMzc3OQ==", "bodyText": "Issue is #1633", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513533779", "createdAt": "2020-10-28T15:22:28Z", "author": {"login": "punktilious"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/app/Main.java", "diffHunk": "@@ -284,18 +328,83 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"missing value for --path-prefix\");\n                 }\n                 break;\n+            case \"--target-bucket\":\n+                if (i < args.length + 1) {\n+                    this.targetBucket = args[++i];\n+                } else {\n+                    throw new IllegalArgumentException(\"missing value for --target-bucket\");\n+                }\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNjMxMg=="}, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8579329a579d6a6dddf28fc930011cf2c77959ab", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/8579329a579d6a6dddf28fc930011cf2c77959ab", "committedDate": "2020-10-28T17:24:08Z", "message": "issue #1366 addressed code review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDQzMzY2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-519043366", "createdAt": "2020-10-28T20:09:47Z", "commit": {"oid": "8579329a579d6a6dddf28fc930011cf2c77959ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDgwNzEz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-519080713", "createdAt": "2020-10-28T21:02:03Z", "commit": {"oid": "8579329a579d6a6dddf28fc930011cf2c77959ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1faa51e26cbdee54cc65db3f15d3d64dd326e1", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/5f1faa51e26cbdee54cc65db3f15d3d64dd326e1", "committedDate": "2020-09-08T04:11:17Z", "message": "issue #1402 added a simple read request load generator to measure impact of reads on ingestion\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b2814df25a89d9fe845b90d3eef9362947f857", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/88b2814df25a89d9fe845b90d3eef9362947f857", "committedDate": "2020-09-10T21:06:53Z", "message": "issue 1425 - do not allow database exceptions to fail main loops\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be136da9c5c00202c544ec5474b8a76dd05d378", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/5be136da9c5c00202c544ec5474b8a76dd05d378", "committedDate": "2020-09-10T21:08:38Z", "message": "Merge remote-tracking branch 'origin/master' into robin-proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ccbb430e69a165d882088ec4d29889edfd3fca0", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/4ccbb430e69a165d882088ec4d29889edfd3fca0", "committedDate": "2020-09-15T23:02:49Z", "message": "issue #1425 measure performance as database grows\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ad79dedd84e31fb30935d8e37e740213e08acf", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/e2ad79dedd84e31fb30935d8e37e740213e08acf", "committedDate": "2020-09-16T13:42:53Z", "message": "Merge remote-tracking branch 'origin/master' into robin-proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fffde8b2fd26a192bb9a16a32e3c5f1d2f3a20", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/45fffde8b2fd26a192bb9a16a32e3c5f1d2f3a20", "committedDate": "2020-09-21T03:21:33Z", "message": "WIP #1366 new reference schema design\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "091c8a833eb5d63fd744644f1592a1f2df03e2e5", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/091c8a833eb5d63fd744644f1592a1f2df03e2e5", "committedDate": "2020-09-22T20:29:53Z", "message": "issue #1366 working external_references test case\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd18587a3d69b8ffbd6e407e00dd2780dc5b3ef", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/2fd18587a3d69b8ffbd6e407e00dd2780dc5b3ef", "committedDate": "2020-09-23T03:32:25Z", "message": "issue #1366 working unit tests for external and local references\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29f3032f2317cfd22f65e705c3592013acb52d6", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/f29f3032f2317cfd22f65e705c3592013acb52d6", "committedDate": "2020-09-25T22:03:45Z", "message": "issue 1366 integrated cache and reference DAO with JDBC persistence layer\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a863e6f37bd14950ecd6e710753a1ea8a2f89f70", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/a863e6f37bd14950ecd6e710753a1ea8a2f89f70", "committedDate": "2020-09-25T22:04:35Z", "message": "Merge remote-tracking branch 'origin/master' into robin-proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc042c43e525bd5722211e121d12f823ae0d8cac", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/fc042c43e525bd5722211e121d12f823ae0d8cac", "committedDate": "2020-09-26T19:47:49Z", "message": "issue #1366 temp fix for broken AbstractSearchDateTest approx date range calculation\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f6539e228f0d1f89ffad5948e0ed93806c5613", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/78f6539e228f0d1f89ffad5948e0ed93806c5613", "committedDate": "2020-09-29T03:27:09Z", "message": "issue #1366 refactor for more efficient storage of token_values\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36f31f42837adbba786f158a4792f96162f777b7", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/36f31f42837adbba786f158a4792f96162f777b7", "committedDate": "2020-09-30T14:13:38Z", "message": "issue #1366 refactored parameter and resource type caches to reduce code entropy\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02515fb0811779b41d02e9254f8df0ebe7cd7eec", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/02515fb0811779b41d02e9254f8df0ebe7cd7eec", "committedDate": "2020-10-04T23:28:46Z", "message": "issue #1366 updated search queries for tokens and references\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53b2c4638f42494808b6a0a914253cd3ff259332", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/53b2c4638f42494808b6a0a914253cd3ff259332", "committedDate": "2020-10-06T03:45:46Z", "message": "issue #1366 added reindex custom operation to migrate data to new schema\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d3e0d5bf8e92878857329fa9007ab88c93c44f", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/66d3e0d5bf8e92878857329fa9007ab88c93c44f", "committedDate": "2020-10-08T03:38:03Z", "message": "issue #1366 added reindex custom operation to support migration to new token tables\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd9f9e738b66790d1df1a79b836cccb645be98f", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/0fd9f9e738b66790d1df1a79b836cccb645be98f", "committedDate": "2020-10-10T04:22:36Z", "message": "issue #1366 added deadlock transaction retry for reindex operation\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67218b4162d5c76669bbaf9fa078616d40f00d36", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/67218b4162d5c76669bbaf9fa078616d40f00d36", "committedDate": "2020-10-12T19:48:55Z", "message": "issue #1366 improved concurrency for reindex including optimization for postgres\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b611c79856fd1fbd27cff7d703b95a2c747b925", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/5b611c79856fd1fbd27cff7d703b95a2c747b925", "committedDate": "2020-10-18T15:00:17Z", "message": "issue #1366 reworked schema migration logic to avoid Liberty/Derby transaction defect\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01a95d24049168144cbb0445deaa0277617b2e70", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/01a95d24049168144cbb0445deaa0277617b2e70", "committedDate": "2020-10-19T19:26:17Z", "message": "issue #1366 merge conflict resolution with latest master\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "366049a6a89bcfbdb42aa0be2325067ae7460048", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/366049a6a89bcfbdb42aa0be2325067ae7460048", "committedDate": "2020-10-20T03:37:36Z", "message": "issue #1366 fixed reference search SIT regression following merge\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9120003a95c31b6e58102cf7b1dd7537e1235297", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/9120003a95c31b6e58102cf7b1dd7537e1235297", "committedDate": "2020-10-23T13:08:34Z", "message": "issue #1619 fix contention issue on inserts into common_token_values\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b36983c0016392d24b40bbda98e390407319a32", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/6b36983c0016392d24b40bbda98e390407319a32", "committedDate": "2020-10-24T17:55:39Z", "message": "issue #1366 fixes to support Db2 and merge latest from master\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525a134c335fc964e52e61c90b1ef7d0a180183f", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/525a134c335fc964e52e61c90b1ef7d0a180183f", "committedDate": "2020-10-24T20:00:41Z", "message": "issue #1366 cleaned info message when tokenValue is null\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5c381975f6252fbecd76cf32835676241fdde2", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/7d5c381975f6252fbecd76cf32835676241fdde2", "committedDate": "2020-10-25T02:36:18Z", "message": "issue #1366 use temp table for Derby to avoid huge DML statements causing failures during pipeline builds\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add7063934b9c5ff292068925ff2064483ade2b2", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/add7063934b9c5ff292068925ff2064483ade2b2", "committedDate": "2020-10-25T04:15:15Z", "message": "issue #1366 remove another stack overflow in Derby from pipeline build\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bada2f8bf768ac5b9965ee406a3f451fa4fccb5", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/7bada2f8bf768ac5b9965ee406a3f451fa4fccb5", "committedDate": "2020-10-25T13:46:40Z", "message": "issue #1366 serialize the db2 migration step to avoid deadlocks when adding FKs to a common table\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/2a7726893f06d291092861af3b1ef97e73f9a66a", "committedDate": "2020-10-25T15:18:21Z", "message": "issue #1366 db2 migration test update grants and partitions for new tables\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQxNzQ0", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516841744", "createdAt": "2020-10-26T14:36:01Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozNjowMVrOHoShUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozNjowMVrOHoShUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwODUzMA==", "bodyText": "Team needs to get this in release notes (note to anyone doing release notes)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512008530", "createdAt": "2020-10-26T14:36:01Z", "author": {"login": "prb112"}, "path": "build/docker/updateSchema.sh", "diffHunk": "@@ -10,6 +10,16 @@ set -ex\n DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n cd ${DIR}\n \n+# For #1366 the migration hits deadlock issues if run in parallel, so\n+# to avoid this, serialize the steps using --pool-size 1\n java -jar schema/fhir-persistence-schema-*-cli.jar \\\n   --prop-file db2.properties --schema-name FHIRDATA --update-schema \\\n-  --pool-size 20\n+  --pool-size 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQ0MjMx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516844231", "createdAt": "2020-10-26T14:38:25Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozODoyNlrOHoSo9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozODoyNlrOHoSo9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxMDQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In addition to data loading, the app has also can:\n          \n          \n            \n            In addition to data loading, the app can also:", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512010485", "createdAt": "2020-10-26T14:38:26Z", "author": {"login": "prb112"}, "path": "fhir-bucket/README.md", "diffHunk": "@@ -1,5 +1,10 @@\n ## Synthetic Data Loader\n-Scans cloud object storage buckets and uploads data using the FHIR REST API\n+Scans cloud object storage buckets and uploads data using the FHIR REST API.\n+\n+In addition to data loading, the app has also can:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQ1MDgw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516845080", "createdAt": "2020-10-26T14:39:18Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozOToxOFrOHoSrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozOToxOFrOHoSrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxMTE4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Synthetic Data Loader\n          \n          \n            \n            ## fhir-bucket - Synthetic Data Loader", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512011183", "createdAt": "2020-10-26T14:39:18Z", "author": {"login": "prb112"}, "path": "fhir-bucket/README.md", "diffHunk": "@@ -1,5 +1,10 @@\n ## Synthetic Data Loader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQ2NzAy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516846702", "createdAt": "2020-10-26T14:40:53Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0MDo1M1rOHoSwmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0MDo1M1rOHoSwmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxMjQ0MQ==", "bodyText": "This feels hidden in fhir-bucket.  Shouldn't it go in fhir-persistence-schema or a Database Design document?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512012441", "createdAt": "2020-10-26T14:40:53Z", "author": {"login": "prb112"}, "path": "fhir-bucket/README.md", "diffHunk": "@@ -307,3 +312,59 @@ SELECT loader_instance_id, substr(object_name, 1, 24) object_name, resource_type\n    AND lr.run_seconds > 0\n ;\n ```\n+\n+\n+## Configuring Logging\n+\n+Use `-Djava.util.logging.config.file=logging.properties` as the first argument on the command line to configure Java Util Logging using the `logging.properties` file. An example of this file is given below:\n+\n+```\n+handlers=java.util.logging.ConsoleHandler,java.util.logging.FileHandler\n+.level=INFO\n+\n+# Minimal console output\n+java.util.logging.ConsoleHandler.level = INFO\n+java.util.logging.ConsoleHandler.formatter=com.ibm.fhir.database.utils.common.LogFormatter\n+\n+# INFO to the log file, unless you want to see more\n+java.util.logging.FileHandler.level=INFO\n+\n+# 50MB * 20 files ~= 1GB of log retention\n+java.util.logging.FileHandler.formatter=com.ibm.fhir.database.utils.common.LogFormatter\n+java.util.logging.FileHandler.limit=50000000\n+java.util.logging.FileHandler.count=20\n+java.util.logging.FileHandler.pattern=fhirbucket-%u-%g.log\n+\n+\n+# See FINE stuff for the scanner\n+#com.ibm.fhir.bucket.scanner.level=FINE\n+```\n+\n+\n+\n+## Driving the `$reindex` Custom Operation\n+\n+When the IBM FHIR Server stores a FHIR resource, it extracts a configurable set of searchable parameter values and stores them in specially indexed tables which are used to support search queries. When the search parameter configuration is changed (perhaps because a profile has been updated), users may want to apply this new configuration to resources already stored. By default, such configuration changes only apply to new resources.\n+\n+The IBM FHIR Server supports a custom operation to rebuild or \"reindex\" the search parameters extracted from resources currently stored. The user selects a date or timestamp as the reindex \"marker\". This value is used to determine which resources have been reindexed, and which still need to be reindexed. When a resource is successfully reindexed, it is marked with this user-selected timestamp. Each reindex REST call will process up to the requested number of resources and return an OperationOutcome resource containing issues describing which resources were processed. When there are no resources left to update, the call returns an OperationOutcome with one issue indicating that the reindex is complete.\n+\n+To avoid read timeouts, the number of resources processed in a single reindex call can be limited. Reindex calls can be made in parallel to increase throughput. The best number for concurrent requests depends on the capabilities of the underlying platform and any desire to balance load with other users. Concurrency up to 200 threads have been tested. Monitor the IBM FHIR Server response times when increasing concurrency. Also, make sure that the connection pool configured in the FHIR server cluster can support the required number of threads. This also means that the database needs to be configured to support this number of connections (sessions) plus any overhead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQ5NDAx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516849401", "createdAt": "2020-10-26T14:43:28Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0MzoyOVrOHoS4hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0MzoyOVrOHoS4hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNDQ2OQ==", "bodyText": "from where? what is the difference between the processor and the resource handler? fhir-bucket/src/main/java/com/ibm/fhir/bucket/api/IResourceHandler.java", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512014469", "createdAt": "2020-10-26T14:43:29Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/api/IResourceEntryProcessor.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.api;\n+\n+\n+/**\n+ * Process a ResourceEntry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODQ5ODcy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516849872", "createdAt": "2020-10-26T14:43:56Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0Mzo1NlrOHoS56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0Mzo1NlrOHoS56g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNDgyNg==", "bodyText": "While I think I get the intent, what is the difference with fhir-bucket/src/main/java/com/ibm/fhir/bucket/api/IResourceEntryProcessor.java", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512014826", "createdAt": "2020-10-26T14:43:56Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/api/IResourceHandler.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.api;\n+\n+\n+/**\n+ * Interface for handling the processing of resources read from COS\n+ */\n+public interface IResourceHandler {\n+\n+    /**\n+     * Add the resource entry to the thread-pool for processing, subject to the\n+     * rate limiting we have to make sure memory consumption is kept in check\n+     * @param entry\n+     * @return\n+     */\n+    public boolean process(ResourceEntry entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODUwNzc4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516850778", "createdAt": "2020-10-26T14:44:45Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NDo0NVrOHoS8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NDo0NVrOHoS8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNTQ5Ng==", "bodyText": "I suggest just calling this Interop", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512015496", "createdAt": "2020-10-26T14:44:45Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/app/Main.java", "diffHunk": "@@ -152,7 +162,34 @@\n     private int recycleSeconds = -1;\n     \n     // Assign a higher cost to processing bundles to reduce concurrency and avoid overload/timeouts\n-    private int bundleCostFactor = 1;\n+    private double bundleCostFactor = 1.0;\n+    \n+    // How many payer scenario requests do we want to make at a time.\n+    private int concurrentPayerRequests = 0;\n+    \n+    // Simple scenario to add some read load to a FHIR server\n+    private CmsPayerInterop cmsPayerWorkload;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODUxODU4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516851858", "createdAt": "2020-10-26T14:45:47Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NTo0N1rOHoS_uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NTo0N1rOHoS_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNjMxMg==", "bodyText": "Where is the readme for this? There is a lot of surface area, and I'm afraid you are the only one who knows what they all do.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512016312", "createdAt": "2020-10-26T14:45:47Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/app/Main.java", "diffHunk": "@@ -284,18 +328,83 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"missing value for --path-prefix\");\n                 }\n                 break;\n+            case \"--target-bucket\":\n+                if (i < args.length + 1) {\n+                    this.targetBucket = args[++i];\n+                } else {\n+                    throw new IllegalArgumentException(\"missing value for --target-bucket\");\n+                }\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODUyNTc3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516852577", "createdAt": "2020-10-26T14:46:24Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NjoyNFrOHoTBzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0NjoyNFrOHoTBzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNjg0Nw==", "bodyText": "I suggest not using cmspayer.  let's just call it workload", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512016847", "createdAt": "2020-10-26T14:46:24Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/app/Main.java", "diffHunk": "@@ -579,7 +699,18 @@ protected void shutdown() {\n         this.resourceHandler.signalStop();\n         \n         \n-        this.scanner.waitForStop();\n+        if (this.scanner != null) {\n+            this.scanner.waitForStop();\n+        }\n+        \n+        if (driveReindexOperation != null) {\n+            driveReindexOperation.waitForStop();\n+        }\n+        \n+        if (cmsPayerWorkload != null) {\n+            cmsPayerWorkload.waitForStop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU0MDM5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516854039", "createdAt": "2020-10-26T14:47:40Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0Nzo0MFrOHoTFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0Nzo0MFrOHoTFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNzgzMg==", "bodyText": "Per convention please upper case this as FHIRClient\nI'd also suggest giving this a slightly different name FHIRBucketClient", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512017832", "createdAt": "2020-10-26T14:47:40Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/client/FhirClient.java", "diffHunk": "@@ -291,9 +290,11 @@ public FhirServerResponse post(String url, String body) {\n                 logger.fine(msg.toString());\n             }\n \n-            // If we are posting a bundle, then we need to parse the response entity\n-            boolean isBundle = url.isEmpty();\n-            return buildResponse(response, startTime, isBundle);\n+            // If we are posting a bundle or calling a custom operation, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU1NzU1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516855755", "createdAt": "2020-10-26T14:49:02Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0OTowM1rOHoTJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo0OTowM1rOHoTJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxODk0MQ==", "bodyText": "Per convention let's capitilize\nAlso FHIRBulkClientUtil (scoping it in typeaheads)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512018941", "createdAt": "2020-10-26T14:49:03Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/client/FhirClientUtil.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.client;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Resource;\n+\n+/**\n+ * Utilities for working with the FHIR client\n+ */\n+public class FhirClientUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU3MDk3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516857097", "createdAt": "2020-10-26T14:50:13Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MDoxM1rOHoTN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MDoxM1rOHoTN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxOTk2NQ==", "bodyText": "I'm almost certain there is an existing method for this in a lower level fhir-model - we should push this down there in that package.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512019965", "createdAt": "2020-10-26T14:50:13Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/client/FhirClientUtil.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.client;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Resource;\n+\n+/**\n+ * Utilities for working with the FHIR client\n+ */\n+public class FhirClientUtil {\n+    \n+    \n+    /**\n+     * Render the resource as a string\n+     * @param resource\n+     * @return\n+     */\n+    public static String resourceToString(Resource resource) {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(4096);\n+        try {\n+            FHIRGenerator.generator(Format.JSON, false).generate(resource, os);\n+            return new String(os.toByteArray(), StandardCharsets.UTF_8);\n+        } catch (FHIRGeneratorException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU4MjU4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516858258", "createdAt": "2020-10-26T14:51:12Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MToxMlrOHoTROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MToxMlrOHoTROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMDc5Mg==", "bodyText": "Do we care about binding this to the IBM Cloud?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512020792", "createdAt": "2020-10-26T14:51:12Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/cos/CosClient.java", "diffHunk": "@@ -50,6 +58,7 @@\n     // Set to false to tell a scan to return early\n     private volatile boolean running = true;\n     \n+    \n     static {\n         SDKGlobalConfiguration.IAM_ENDPOINT = \"https://iam.cloud.ibm.com/oidc/token\";\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU4NDkz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516858493", "createdAt": "2020-10-26T14:51:27Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MToyN1rOHoTR8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MToyN1rOHoTR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMDk3OQ==", "bodyText": "COS should also be capitalized per convention.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512020979", "createdAt": "2020-10-26T14:51:27Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/cos/CosClient.java", "diffHunk": "@@ -41,6 +46,9 @@\n  */\n public class CosClient {\n     private static final Logger logger = Logger.getLogger(CosClient.class.getName());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODYwMDI4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516860028", "createdAt": "2020-10-26T14:52:56Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1Mjo1NlrOHoTWYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1Mjo1NlrOHoTWYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMjExNQ==", "bodyText": "I assume the logformatter is injecting the thread ID so you can identifying which statement belongs to which thread?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512022115", "createdAt": "2020-10-26T14:52:56Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/cos/CosClient.java", "diffHunk": "@@ -175,4 +184,40 @@ public void scan(String bucketName, String pathPrefix, Function<String, FileType\n             }\n         } while (running && result != null && result.isTruncated());\n     }\n+\n+    /**\n+     * Write the payload to the given bundleName as key\n+     * @param bundleName\n+     * @param payload\n+     */\n+    public void write(String bucketName, String objectName, String payload) {\n+        byte[] raw = payload.getBytes(StandardCharsets.UTF_8);\n+        \n+        ObjectMetadata omd = new ObjectMetadata();\n+        omd.setContentLength(raw.length);\n+        omd.setContentEncoding(\"application/json\");\n+        \n+        logger.info(\"Writing to COS '\" + bucketName + \":\" + objectName + \"', bytes: \" + raw.length);\n+\n+        if (DEBUG) {\n+            try (FileOutputStream fos = new FileOutputStream(objectName)) {\n+                fos.write(raw);\n+                fos.flush();\n+            } catch (IOException x) {\n+                logger.log(Level.SEVERE, \"Writing \" + objectName, x);\n+            }\n+        } else {\n+            // Write the object to the target key (objectName) in the given bucket\n+            InputStream inputStream = new ByteArrayInputStream(raw);\n+            PutObjectResult result = client.putObject(new PutObjectRequest(bucketName, objectName, inputStream, omd));\n+            if (result != null) {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    logger.fine(\"Wrote [\" + bucketName + \"]/\" + objectName + \", ETag: \" + result.getETag());\n+                }\n+            } else {\n+                logger.warning(\"Writing failed for [\" + bucketName + \"]/\" + objectName + \", bytes: \" + raw.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODYwNTc3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516860577", "createdAt": "2020-10-26T14:53:27Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MzoyN1rOHoTX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MzoyN1rOHoTX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMjUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Very simple emulation of a possible CMS Payer Interop workload. Adds some random\n          \n          \n            \n             * Very simple emulation of a possible Interop workload. Adds some random", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512022513", "createdAt": "2020-10-26T14:53:27Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/interop/CmsPayerInterop.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.interop;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.bucket.scanner.DataAccess;\n+\n+/**\n+ * Very simple emulation of a possible CMS Payer Interop workload. Adds some random", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODYxNzc5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516861779", "createdAt": "2020-10-26T14:54:38Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NDozOFrOHoTbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NDozOFrOHoTbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMzQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CmsPayerScenario implements IPatientScenario {\n          \n          \n            \n            public class InteropPatientScenario implements IPatientScenario {\n          \n      \n    \n    \n  \n\nI don't think we should reference CmsPayer", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512023498", "createdAt": "2020-10-26T14:54:38Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/interop/CmsPayerScenario.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.interop;\n+\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.bucket.client.FhirClient;\n+import com.ibm.fhir.model.resource.Bundle;\n+\n+/**\n+ *\n+ */\n+public class CmsPayerScenario implements IPatientScenario {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODYyODY4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-516862868", "createdAt": "2020-10-26T14:55:39Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NTozOVrOHoTe8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NTozOVrOHoTe8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyNDMwNw==", "bodyText": "If you want to 'visit', the best is FHIRPath", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512024307", "createdAt": "2020-10-26T14:55:39Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/interop/GetExplanationOfBenefitDetail.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.interop;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.http.HttpStatus;\n+\n+import com.ibm.fhir.bucket.client.FhirClient;\n+import com.ibm.fhir.bucket.client.FhirClientUtil;\n+import com.ibm.fhir.bucket.client.FhirServerResponse;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Bundle.Entry;\n+import com.ibm.fhir.model.resource.Bundle.Entry.Request;\n+import com.ibm.fhir.model.resource.ExplanationOfBenefit;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Url;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+\n+/**\n+ * Use the response bundle from the GetPatientBundle request and use it to retrieve\n+ * other resources referenced by the ExplanationOfBenefit entries\n+ */\n+public class GetExplanationOfBenefitDetail {\n+    private static final Logger logger = Logger.getLogger(GetPatientBundle.class.getName());\n+    \n+    // The logical id of the Patient for which we are retrieving information\n+    private final Bundle inputBundle;\n+        \n+    public GetExplanationOfBenefitDetail(Bundle inputBundle) {\n+        this.inputBundle = inputBundle;\n+    }\n+\n+    /**\n+     * Get the bundle containing the Patient resource plus a list of ExplanationOfBenefit\n+     * resources associated with the patient\n+     * @param client\n+     * @return\n+     */\n+    public Bundle run(FhirClient client) {\n+        Bundle.Builder bundleBuilder = Bundle.builder();\n+        \n+        // Build a bundle with gets for each ExplanationOfBenefit we can find in the\n+        // inputBundle\n+        for (Entry entry: inputBundle.getEntry()) {\n+            Resource r = entry.getResource();\n+            if (r.is(Bundle.class)) {\n+                // this should be the result of the ExplanationOfBenefit search, so iterate\n+                // over each entry. TODO should visit instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDk0NDkx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517094491", "createdAt": "2020-10-26T19:09:31Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowOTozMVrOHoedOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowOTozMVrOHoedOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNDA5MQ==", "bodyText": "any reason you decided to prefix the parameter name with an underscore?  i've seen that in the base spec for built-in \"return parameters\", but would have favored just using resourceCount here.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512204091", "createdAt": "2020-10-26T19:09:31Z", "author": {"login": "lmsurpre"}, "path": "operation/fhir-operation-reindex/src/main/resources/reindex.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+\t\"resourceType\": \"OperationDefinition\",\n+\t\"id\": \"reindex\",\n+\t\"text\": {\n+\t\t\"status\": \"generated\",\n+\t\t\"div\": \"<div xmlns='http://www.w3.org/1999/xhtml'><h2>Reindex</h2><p>OPERATION: Reindex existing resources in the database</p><p>The reindex operation reads resources from the database and extracts and stores search parameters according to the latest configuration of the server.</p><p>URL: [base]/$reindex</p><p>Parameters</p><table class=\\\"grid\\\"><tr><td><b>Use</b></td><td><b>Name</b></td><td><b>Cardinality</b></td><td><b>Type</b></td><td><b>Binding</b></td><td><b>Documentation</b></td></tr><tr><td>OUT</td><td>return</td><td>1..1</td><td>OperationOutcome</td><td/><td><p>If the operation outcome does not list any errors, then the server expected to be healthy.</p></td></tr></table></div>\"\n+\t  },\n+\t\"url\": \"http://ibm.com/fhir/OperationDefinition/reindex\",\n+\t\"name\": \"Reindex\",\n+\t\"status\": \"draft\",\n+\t\"kind\": \"operation\",\n+\t\"publisher\": \"IBM FHIR Server\",\n+\t\"date\": \"2020-10-05\",\n+\t\"description\": \"The reindex operation recomputes and stores search parameters.\",\n+\t\"code\": \"reindex\",\n+\t\"system\": true,\n+\t\"type\": false,\n+\t\"instance\": false,\n+        \"parameter\": [\n+          {\n+            \"name\": \"_resourceCount\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDk0NjI5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517094629", "createdAt": "2020-10-26T19:09:44Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowOTo0NFrOHoedwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowOTo0NFrOHoedwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNDIyNA==", "bodyText": "any reason you decided to prefix the parameter name with an underscore? i've seen that in the base spec for built-in \"return parameters\", but would have favored just using timestamp here.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512204224", "createdAt": "2020-10-26T19:09:44Z", "author": {"login": "lmsurpre"}, "path": "operation/fhir-operation-reindex/src/main/resources/reindex.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+\t\"resourceType\": \"OperationDefinition\",\n+\t\"id\": \"reindex\",\n+\t\"text\": {\n+\t\t\"status\": \"generated\",\n+\t\t\"div\": \"<div xmlns='http://www.w3.org/1999/xhtml'><h2>Reindex</h2><p>OPERATION: Reindex existing resources in the database</p><p>The reindex operation reads resources from the database and extracts and stores search parameters according to the latest configuration of the server.</p><p>URL: [base]/$reindex</p><p>Parameters</p><table class=\\\"grid\\\"><tr><td><b>Use</b></td><td><b>Name</b></td><td><b>Cardinality</b></td><td><b>Type</b></td><td><b>Binding</b></td><td><b>Documentation</b></td></tr><tr><td>OUT</td><td>return</td><td>1..1</td><td>OperationOutcome</td><td/><td><p>If the operation outcome does not list any errors, then the server expected to be healthy.</p></td></tr></table></div>\"\n+\t  },\n+\t\"url\": \"http://ibm.com/fhir/OperationDefinition/reindex\",\n+\t\"name\": \"Reindex\",\n+\t\"status\": \"draft\",\n+\t\"kind\": \"operation\",\n+\t\"publisher\": \"IBM FHIR Server\",\n+\t\"date\": \"2020-10-05\",\n+\t\"description\": \"The reindex operation recomputes and stores search parameters.\",\n+\t\"code\": \"reindex\",\n+\t\"system\": true,\n+\t\"type\": false,\n+\t\"instance\": false,\n+        \"parameter\": [\n+          {\n+            \"name\": \"_resourceCount\",\n+            \"use\": \"in\",\n+            \"min\": 0,\n+            \"max\": \"1\",\n+            \"documentation\": \"The maximum number of resources to reindex in this call. If this number is too large, the processing time might exceed the transaction timeout and fail.\",\n+            \"type\": \"integer\"\n+          },\n+          {\n+            \"name\": \"_tstamp\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDk3NjEx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517097611", "createdAt": "2020-10-26T19:14:01Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNDowMVrOHoem0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNDowMVrOHoem0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNjU0NQ==", "bodyText": "since the design of $reindex involves getting invoked a lot in parallel, its probably worth guarding this with a logger.isLoggable", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512206545", "createdAt": "2020-10-26T19:14:01Z", "author": {"login": "lmsurpre"}, "path": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.operation.reindex;\n+\n+import java.io.InputStream;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.exception.FHIROperationException;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.OperationDefinition;\n+import com.ibm.fhir.model.resource.OperationOutcome;\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.code.IssueSeverity;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.server.operation.spi.AbstractOperation;\n+import com.ibm.fhir.server.operation.spi.FHIROperationContext;\n+import com.ibm.fhir.server.operation.spi.FHIRResourceHelpers;\n+import com.ibm.fhir.server.util.FHIROperationUtil;\n+\n+/**\n+ * Custom operation to invoke the persistence layer reindexing of resources\n+ */\n+public class ReindexOperation extends AbstractOperation {\n+    private static final Logger logger = Logger.getLogger(ReindexOperation.class.getName());\n+    \n+    private static final String PARAM_TSTAMP = \"_tstamp\";\n+    private static final String PARAM_RESOURCE_COUNT = \"_resourceCount\";\n+    \n+    static final DateTimeFormatter DAY_FORMAT = new DateTimeFormatterBuilder()\n+            .appendPattern(\"yyyy-MM-dd\")\n+            .parseDefaulting(ChronoField.NANO_OF_DAY, 0)\n+            .toFormatter()\n+            .withZone(ZoneId.of(\"UTC\"));\n+    \n+    public ReindexOperation() {\n+        super();\n+    }\n+\n+    @Override\n+    protected OperationDefinition buildOperationDefinition() {\n+        try (InputStream in = getClass().getClassLoader().getResourceAsStream(\"reindex.json\")) {\n+            return FHIRParser.parser(Format.JSON).parse(in);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    protected Parameters doInvoke(FHIROperationContext operationContext, Class<? extends Resource> resourceType,\n+            String logicalId, String versionId, Parameters parameters, FHIRResourceHelpers resourceHelper)\n+            throws FHIROperationException {\n+        \n+        // Allow only POST because we're changing the state of the database\n+        String method = (String) operationContext.getProperty(FHIROperationContext.PROPNAME_METHOD_TYPE);\n+        if (!\"POST\".equalsIgnoreCase(method)) {\n+            throw new FHIROperationException(\"HTTP method not supported: \" + method);\n+        }\n+        \n+        try {\n+            Instant tstamp = Instant.now();\n+            int resourceCount = 10;\n+            \n+            if (parameters != null) {\n+                for (Parameters.Parameter parameter : parameters.getParameter()) {\n+                    if (parameter.getValue() != null) {\n+                        logger.fine(\"reindex param: \" + parameter.getName().getValue() + \" = \" + parameter.getValue().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTA0MDkx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517104091", "createdAt": "2020-10-26T19:23:35Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMzozNVrOHoe7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMzozNVrOHoe7Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMTc1MQ==", "bodyText": "should we add it with the current/\"now\" timestamp instead?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512211751", "createdAt": "2020-10-26T19:23:35Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/resources/postgres/add_any_resource.sql", "diffHunk": "@@ -57,8 +57,8 @@ BEGIN\n     -- remember that we have a concurrent system...so there is a possibility\n     -- that another thread snuck in before us and created the logical resource. This\n     -- is easy to handle, just turn around and read it\n-    INSERT INTO {{SCHEMA_NAME}}.logical_resources (logical_resource_id, resource_type_id, logical_id)\n-         VALUES (v_logical_resource_id, v_resource_type_id, p_logical_id) ON CONFLICT DO NOTHING;\n+    INSERT INTO {{SCHEMA_NAME}}.logical_resources (logical_resource_id, resource_type_id, logical_id, reindex_tstamp)\n+         VALUES (v_logical_resource_id, v_resource_type_id, p_logical_id, '1970-01-01') ON CONFLICT DO NOTHING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTA0MTcz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517104173", "createdAt": "2020-10-26T19:23:41Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMzo0MVrOHoe7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMzo0MVrOHoe7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMTgwOQ==", "bodyText": "should we add it with the current/\"now\" timestamp instead?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512211809", "createdAt": "2020-10-26T19:23:41Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/resources/db2/add_any_resource.sql", "diffHunk": "@@ -69,9 +69,9 @@ BEGIN\n   THEN\n     VALUES NEXT VALUE FOR {{SCHEMA_NAME}}.fhir_sequence INTO v_logical_resource_id;\n     PREPARE stmt FROM\n-       'INSERT INTO ' || v_schema_name || '.logical_resources (mt_id, logical_resource_id, resource_type_id, logical_id) '\n-    || '     VALUES (?, ?, ?, ?)';\n-    EXECUTE stmt USING {{ADMIN_SCHEMA_NAME}}.sv_tenant_id, v_logical_resource_id, v_resource_type_id, p_logical_id;\n+       'INSERT INTO ' || v_schema_name || '.logical_resources (mt_id, logical_resource_id, resource_type_id, logical_id, reindex_tstamp) '\n+    || '     VALUES (?, ?, ?, ?, ?)';\n+    EXECUTE stmt USING {{ADMIN_SCHEMA_NAME}}.sv_tenant_id, v_logical_resource_id, v_resource_type_id, p_logical_id, '1970-01-01-00.00.00.0';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTA1MjAw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517105200", "createdAt": "2020-10-26T19:25:02Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNTowMlrOHoe-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNTowMlrOHoe-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMjY1OA==", "bodyText": "is this a \"3rd way\" to do schema migrations?  i was already concerned about supporting two different ways...", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512212658", "createdAt": "2020-10-26T19:25:02Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/patch/Main.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.patch;\n+\n+import static com.ibm.fhir.schema.app.util.CommonUtil.configureLogger;\n+import static com.ibm.fhir.schema.app.util.CommonUtil.getDbAdapter;\n+import static com.ibm.fhir.schema.app.util.CommonUtil.getPropertyAdapter;\n+import static com.ibm.fhir.schema.app.util.CommonUtil.loadDriver;\n+import static com.ibm.fhir.schema.app.util.CommonUtil.logClasspath;\n+import static com.ibm.fhir.schema.app.util.CommonUtil.printUsage;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.api.DatabaseNotReadyException;\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+import com.ibm.fhir.database.utils.common.DropForeignKeyConstraint;\n+import com.ibm.fhir.database.utils.common.JdbcPropertyAdapter;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Translator;\n+import com.ibm.fhir.database.utils.derby.DerbyTranslator;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.database.utils.postgresql.PostgreSqlTranslator;\n+import com.ibm.fhir.model.type.code.FHIRResourceType;\n+\n+/**\n+ * Utility to patch an old schema for use-cases which fall outside the standard\n+ * automatic schema migration process\n+ */\n+public class Main {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTA2ODQ3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517106847", "createdAt": "2020-10-26T19:27:20Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzoyMFrOHofD5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzoyMFrOHofD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzk5MA==", "bodyText": "I've got my eclipse set up to expand this on every save.  Any tips/tricks for selectively avoiding that?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512213990", "createdAt": "2020-10-26T19:27:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -6,43 +6,7 @@\n \n package com.ibm.fhir.schema.control;\n \n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_NAME;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_VALUES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_VALUE_DROPPED_COLUMN;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_REF_SEQUENCE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_SEQUENCE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUES;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANTS;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_HASH;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEYS;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEY_ID;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_NAME;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SALT;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SEQUENCE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_STATUS;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n-import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTE1MzQx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517115341", "createdAt": "2020-10-26T19:39:23Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozOToyM1rOHofeDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozOToyM1rOHofeDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMDY4NA==", "bodyText": "super minor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /// Build the multitenant variant of the schema\n          \n          \n            \n                // Build the multitenant variant of the schema", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512220684", "createdAt": "2020-10-26T19:39:23Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -90,6 +98,9 @@\n \n     // The session variable we depend on for access control\n     private final SessionVariableDef sessionVariable;\n+    \n+    /// Build the multitenant variant of the schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTE5MDIx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517119021", "createdAt": "2020-10-26T19:44:27Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0NDoyN1rOHofqAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0NDoyN1rOHofqAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMzc0NQ==", "bodyText": "is there a way to scope the warning to just derby dbs?\nand maybe reference the issue from a comment?  I think I saw you open one with openliberty but now I can't seem to locate it.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512223745", "createdAt": "2020-10-26T19:44:27Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-proxy/src/main/java/com/ibm/fhir/persistence/proxy/FHIRProxyConnection.java", "diffHunk": "@@ -348,6 +348,7 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {\n \n     @Override\n     public void setSchema(String schema) throws SQLException {\n+        logger.warning(\"Calling setSchema, which exposes a transaction bug in Liberty+Derby: \" + schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTI4Nzg3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517128787", "createdAt": "2020-10-26T19:58:30Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1ODozMFrOHogH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1ODozMFrOHogH0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMTM3OA==", "bodyText": "should we introduce a similar property for enabling/disabling the new ResourceReference caching?\nor maybe we should remove all of these...i'm not sure why someone would turn them off (unless they found a bug in our stuff).", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512231378", "createdAt": "2020-10-26T19:58:30Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -195,12 +219,13 @@ public FHIRPersistenceJDBCImpl() throws Exception {\n         ResourceTypesCache.setEnabled(fhirConfig.getBooleanProperty(PROPERTY_JDBC_ENABLE_RESOURCE_TYPES_CACHE,\n                                       Boolean.TRUE));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTc4NTMy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517178532", "createdAt": "2020-10-26T21:10:50Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo1MFrOHoihGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo1MFrOHoihGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDYxOQ==", "bodyText": "ooo, do we use this yet?   I know the IBM Cloud Databases for PostgreSQL recommends that applications add retry logic but I had assumed that we'd just pass that burden onto our clients for now...", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512270619", "createdAt": "2020-10-26T21:10:50Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/DataAccessException.java", "diffHunk": "@@ -14,6 +14,8 @@\n \n     // All exceptions are serializable\n     private static final long serialVersionUID = -3385697603070014498L;\n+    \n+    private boolean transactionRetryable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTc4OTI4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517178928", "createdAt": "2020-10-26T21:11:23Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToyM1rOHoiicQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToyM1rOHoiicQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDk2MQ==", "bodyText": "what does this mean?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512270961", "createdAt": "2020-10-26T21:11:23Z", "author": {"login": "lmsurpre"}, "path": "fhir-bucket/src/main/resources/stats/postgres/vacuum_full.sql", "diffHunk": "@@ -0,0 +1,72 @@\n+VACUUM FULL fhirdata.CarePlan_str_values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTgyNDA3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517182407", "createdAt": "2020-10-26T21:16:48Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNjo0OVrOHoitTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNjo0OVrOHoitTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3Mzc0MA==", "bodyText": "should we remove these lines?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512273740", "createdAt": "2020-10-26T21:16:49Z", "author": {"login": "lmsurpre"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/scanner/DataAccess.java", "diffHunk": "@@ -240,8 +244,22 @@ public void markJobDone(BucketLoaderJob job) {\n     public void recordLogicalIds(long resourceBundleLoadId, int lineNumber, List<ResourceIdValue> idValues, int batchSize) {\n         try (ITransaction tx = transactionProvider.getTransaction()) {\n             try {\n-                RecordLogicalIdList cmd = new RecordLogicalIdList(resourceBundleLoadId, lineNumber, idValues, resourceTypeMap, batchSize);\n-                dbAdapter.runStatement(cmd);\n+//                RecordLogicalIdList cmd = new RecordLogicalIdList(resourceBundleLoadId, lineNumber, idValues, resourceTypeMap, batchSize);\n+//                dbAdapter.runStatement(cmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTgyOTQw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517182940", "createdAt": "2020-10-26T21:17:40Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNzo0MFrOHoivAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNzo0MFrOHoivAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NDE3Nw==", "bodyText": "cool!", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512274177", "createdAt": "2020-10-26T21:17:40Z", "author": {"login": "lmsurpre"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/scanner/BundleBreakerResourceProcessor.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.scanner;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.bucket.api.IResourceEntryProcessor;\n+import com.ibm.fhir.bucket.api.ResourceEntry;\n+import com.ibm.fhir.bucket.cos.CosClient;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Bundle.Entry;\n+import com.ibm.fhir.model.resource.Bundle.Entry.Request;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Url;\n+import com.ibm.fhir.model.type.code.BundleType;\n+import com.ibm.fhir.model.type.code.HTTPVerb;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.model.util.ReferenceMappingVisitor;\n+import com.ibm.fhir.model.resource.Resource;\n+\n+\n+/**\n+ * Breaks a large Bundle into smaller Bundles, translating local references to external references to\n+ * maintain the relationships between the resources when they are loaded into the FHIR server. This\n+ * is experimental, and primarily used for analyzing the performance of different bundle sizes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjMyODY3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517632867", "createdAt": "2020-10-27T12:09:20Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowOToyMFrOHo5DKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowOToyMFrOHo5DKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzOTc4NA==", "bodyText": "should this get reconciled with com.ibm.fhir.core.util.LRUCache?  Its basically the same approach, although this new one has a tad more.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512639784", "createdAt": "2020-10-27T12:09:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/cache/LRUCache.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.cache;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An LRU implementation which limits the maximum number\n+ * of entries and ejects older entries. Null values are\n+ * not permitted in this implementation.\n+ */\n+public class LRUCache<K,V> extends LinkedHashMap<K,V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODY2Nzcy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-517866772", "createdAt": "2020-10-27T15:53:53Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo1Mzo1M1rOHpDtFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo1Mzo1M1rOHpDtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxNDM1Nw==", "bodyText": "This is a bit strange.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512814357", "createdAt": "2020-10-27T15:53:53Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/persistence/AllocateJobs.java", "diffHunk": "@@ -73,6 +79,21 @@ public void run(IDatabaseTranslator translator, Connection c) {\n             logger.log(Level.SEVERE, NEXTVAL, x);\n             throw new DataAccessException(\"Get next allocationId failed\");\n         }\n+\n+        // Build the bucket-path predicate if the user has specified any\n+        StringBuilder bpBuilder = new StringBuilder();\n+        for (@SuppressWarnings(\"unused\") BucketPath bp: bucketPaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDI3NDk0", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518027494", "createdAt": "2020-10-27T18:39:11Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozOToxMVrOHpLUtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozOToxMVrOHpLUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTE5MQ==", "bodyText": "This is all over the place (e.g. repeated code)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512939191", "createdAt": "2020-10-27T18:39:11Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/scanner/CosReader.java", "diffHunk": "@@ -203,20 +215,21 @@ public void mainAllocationLoop() {\n                 // We have more capacity than work is currently available in the database,\n                 // so take a nap before checking again\n                 logger.fine(\"No work. Napping\");\n-                safeSleep(5000);\n+                safeSleep(10000L);\n             }\n         }\n     }\n     \n     /**\n-     * Sleep this thread for the given milliseconds\n+     * Sleep current thread for given number of milliseconds or until\n+     * the thread is interrupted.\n      * @param millis\n      */\n     protected void safeSleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException x) {\n-            // NOP\n+            // woken up early from sleep, probably shutting down, so this is a NOP\n         }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDI4OTA3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518028907", "createdAt": "2020-10-27T18:41:05Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MTowNVrOHpLZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MTowNVrOHpLZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MDM0OA==", "bodyText": "Dead code", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512940348", "createdAt": "2020-10-27T18:41:05Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/scanner/FhirClientResourceProcessor.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bucket.scanner;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.http.HttpStatus;\n+\n+import com.ibm.fhir.bucket.api.IResourceEntryProcessor;\n+import com.ibm.fhir.bucket.api.ResourceBundleError;\n+import com.ibm.fhir.bucket.api.ResourceEntry;\n+import com.ibm.fhir.bucket.api.ResourceIdValue;\n+import com.ibm.fhir.bucket.client.FhirClient;\n+import com.ibm.fhir.bucket.client.FhirServerResponse;\n+import com.ibm.fhir.bucket.client.PostResource;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.generator.exception.FHIRGeneratorException;\n+import com.ibm.fhir.model.resource.Bundle;\n+import com.ibm.fhir.model.resource.Bundle.Entry.Response;\n+import com.ibm.fhir.model.resource.Resource;\n+\n+/**\n+ * Calls the FHIR REST API to create resources\n+ */\n+public class FhirClientResourceProcessor implements IResourceEntryProcessor {\n+    private static final Logger logger = Logger.getLogger(FhirClientResourceProcessor.class.getName());\n+    private static final int BATCH_SIZE = 200;\n+    \n+    // Nanos in a millisecond\n+    private static final long NANOS_MS = 1000000;\n+\n+    // Client for making FHIR server requests\n+    private final FhirClient fhirClient;\n+\n+    // Access to the FHIR bucket persistence layer to record logical ids\n+    private final DataAccess dataAccess;\n+    \n+    /**\n+     * Public constructor\n+     * @param poolSize\n+     */\n+    public FhirClientResourceProcessor(FhirClient fc, DataAccess dataAccess) {\n+        this.fhirClient = fc;\n+        this.dataAccess = dataAccess;\n+    }\n+\n+    @Override\n+    public void process(ResourceEntry re) {\n+        \n+        boolean success = false;\n+        try {\n+            Resource resource = re.getResource();\n+            final String resourceType = resource.getClass().getSimpleName();\n+            if (logger.isLoggable(Level.FINE)) {\n+                logger.fine(\"Processing resource: \" + resourceType);\n+            }\n+            \n+            // Build a post request for the resource and send to FHIR\n+            long start = System.nanoTime();\n+            PostResource post = new PostResource(resource);\n+            FhirServerResponse response = post.run(fhirClient);\n+            long end = System.nanoTime();\n+            switch (response.getStatusCode()) {\n+            case HttpStatus.SC_OK:\n+            case HttpStatus.SC_CREATED:\n+                String locn = response.getLocationHeader();\n+                if (response.getResource() != null) {\n+                    // Process the response bundle\n+                    success = processResponseResource(re, response.getResource());\n+                    \n+                    // Update the job with the response time for this entry (for local logging)\n+                    int responseTimeMs = (int)((end - start) / NANOS_MS);\n+                    re.getJob().setLastCallResponseTime(responseTimeMs);\n+                } else if (locn != null) {\n+                    if (locn.startsWith(\"https://\")) {\n+                        // the response was empty, so in this case we need to extract the id from\n+                        // the location header\n+                        int responseTimeMs = (int)((end - start) / NANOS_MS);\n+                        success = processLocation(re, locn, responseTimeMs);\n+                    } else {\n+                        logger.warning(\"FHIR bad location format [\" + re.toString() + \"]: \" + \n+                                locn);\n+                    }\n+                    \n+                } else {\n+                    logger.warning(\"FHIR request id not found [\" + re.toString() + \"]: \" + \n+                            response.getStatusCode() + \" \" + response.getStatusMessage());\n+                }\n+                break;\n+            default:\n+                logger.warning(\"FHIR request failed [\" + re.toString() + \"]: \" + \n+                        response.getStatusCode() + \" \" + response.getStatusMessage());\n+                processBadRequest(re, response);\n+                \n+                // Still set the response time so we can see if it failed because the transaction took too long\n+                int responseTimeMs = (int)((end - start) / NANOS_MS);\n+                re.getJob().setLastCallResponseTime(responseTimeMs);\n+                break;\n+            }\n+        } catch (Throwable x) {\n+            // don't let any exceptions propagate into the thread pool\n+            logger.log(Level.SEVERE, re.toString(), x);\n+        } finally {\n+            // Signal the processing is complete for this entry\n+            re.getJob().operationComplete(success);\n+        }\n+    }\n+\n+    /**\n+     * Process the bundle we received in the FHIR POST response to extract all the ids\n+     * Synthetic example:\n+        {           \n+            \"entry\": [\n+                {\n+                    \"response\": {\n+                        \"etag\": \"W/\\\"1\\\"\",\n+                        \"id\": \"1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309\",\n+                        \"lastModified\": \"2020-08-20T17:22:12.554128Z\",\n+                        \"location\": \"Patient/1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309/_history/1\",\n+                        \"status\": \"201\"\n+                    }\n+                },\n+                {\n+                    \"response\": {\n+                        \"etag\": \"W/\\\"1\\\"\",\n+                        \"id\": \"1740ce47574-fb9b6b7e-15a4-4abc-bc33-f6b4fdb3d1e3\",\n+                        \"lastModified\": \"2020-08-20T17:22:12.980788Z\",\n+                        \"location\": \"Organization/1740ce47574-fb9b6b7e-15a4-4abc-bc33-f6b4fdb3d1e3/_history/1\",\n+                        \"status\": \"201\"\n+                    }\n+                },\n+                ...\n+            ],  \n+            \"resourceType\": \"Bundle\",\n+            \"type\": \"transaction-response\"\n+        }\n+     * \n+     * @param bundle\n+     * @return\n+     */\n+    private boolean processResponseResource(ResourceEntry re, Resource resource) {\n+        boolean result;\n+        \n+        if (Bundle.class.isAssignableFrom(resource.getClass())) {\n+            Bundle bundle = resource.as(Bundle.class);\n+            result = processResponseBundle(re, bundle);\n+        } else {\n+            logger.severe(\"Resource is not a bundle. Skipping: \" + resource.getClass().getSimpleName());\n+            result = false;\n+        }\n+        \n+        \n+        return result;\n+    }\n+    \n+    private boolean processResponseBundle(ResourceEntry re, Bundle bundle) {\n+        \n+        // Extract the location from every entry in the bundle. Collect them\n+        // together so that we can make a single batch insert into the database\n+        // which is going to be a lot more efficient than individual inserts\n+        List<ResourceIdValue> idValues = new ArrayList<>();\n+        re.getJob().addTotalResourceCount(bundle.getEntry().size());\n+        for (Bundle.Entry entry: bundle.getEntry()) {\n+            Response response = entry.getResponse();\n+            if (response != null) {\n+                if (response.getLocation() != null && response.getLocation().getValue() != null) {\n+                    String locn = response.getLocation().getValue();\n+                    if (logger.isLoggable(Level.FINE)) {\n+                        logger.fine(\"New resource: \" + locn);\n+                    }\n+                    ResourceIdValue rid = getResourceIdValue(locn);\n+                    if (rid != null) {\n+                        idValues.add(rid);\n+                    }\n+                }\n+            }\n+        }\n+\n+        processResourceIdValues(re, idValues);\n+        return idValues.size() > 0;\n+    }\n+\n+    /**\n+     * Process the list of resource ids as a batch\n+     * @param re\n+     * @param idValues\n+     * @return\n+     */\n+    private void processResourceIdValues(ResourceEntry re, List<ResourceIdValue> idValues) {\n+        dataAccess.recordLogicalIds(re.getJob().getResourceBundleLoadId(), re.getLineNumber(), idValues, BATCH_SIZE);\n+    }\n+    /**\n+     * Parse the location to create a {@link ResourceIdValue} DTO object.\n+     * The location can take one of two forms:\n+     *   \"Patient/1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309/_history/1\"\n+     *   \"https://localhost:9443/fhir-server/api/v4/DiagnosticReport/173eed87a99-605de23b-266d-4b4d-b64f-31e769fda112/_history/1\"\n+     * @param location\n+     * @return\n+     */\n+    private ResourceIdValue getResourceIdValue(String location) {\n+        ResourceIdValue result;\n+    \n+        String[] parts = location.split(\"/\");\n+        if (parts.length == 10) {\n+            String resourceType = parts[6];\n+            String id = parts[7];\n+            result = new ResourceIdValue(resourceType, id);\n+        } else if (parts.length == 4) {\n+            String resourceType = parts[0];\n+            String id = parts[1];\n+            result = new ResourceIdValue(resourceType, id);\n+        } else {\n+            result = null;\n+        }\n+        \n+        return result;\n+    }\n+    \n+    private boolean processLocation(ResourceEntry re, String location, int responseTimeMs) {\n+        boolean result = false;\n+        // the response was empty, so in this case we need to extract the id from\n+        // the location header, which means cracking the string into parts:\n+        // https://localhost:9443/fhir-server/api/v4/DiagnosticReport/173eed87a99-605de23b-266d-4b4d-b64f-31e769fda112/_history/1\n+        re.getJob().addTotalResourceCount(1);\n+        String[] parts = location.split(\"/\");\n+        if (parts.length == 10) {\n+            String resourceType = parts[6];\n+            String id = parts[7];\n+            logger.info(\"[\" +re.toString() + \"] new \" + resourceType + \"/\" + id + \" [took \" + responseTimeMs + \" ms]\");\n+            dataAccess.recordLogicalId(resourceType, id, re.getJob().getResourceBundleLoadId(), re.getLineNumber(), responseTimeMs);\n+            result = true;\n+        }\n+        \n+        return result;\n+    }\n+\n+    /**\n+     * Record the error in the database\n+     * @param re\n+     * @param response\n+     */\n+    protected void processBadRequest(ResourceEntry re, FhirServerResponse response) {\n+        \n+        if (logger.isLoggable(Level.FINE)) {\n+            // dump the resource and full operational outcome to the log\n+            logger.fine(re.getJob().getObjectKey() + \"[\" + re.getLineNumber() + \"]: \"\n+                + resourceToString(re.getResource()));\n+            logger.fine(re.getJob().getObjectKey() + \"[\" + re.getLineNumber() + \"]: \"\n+                + response.getOperationalOutcomeText());\n+        }\n+        \n+        List<ResourceBundleError> errors = new ArrayList<>();\n+        errors.add(new ResourceBundleError(re.getLineNumber(), response.getOperationalOutcomeText(), \n+            response.getResponseTime(), response.getStatusCode(), response.getStatusMessage()));\n+        \n+        dataAccess.recordErrors(re.getJob().getResourceBundleLoadId(), re.getLineNumber(), errors);\n+    }\n+\n+    /**\n+     * Render the resource as a string (for logging)\n+     * @param resource\n+     * @return\n+     */\n+    private String resourceToString(Resource resource) {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(4096);\n+        try {\n+            FHIRGenerator.generator(Format.JSON, false).generate(resource, os);\n+            return new String(os.toByteArray(), StandardCharsets.UTF_8);\n+        } catch (FHIRGeneratorException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void init() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 288}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDI5NTIz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518029523", "createdAt": "2020-10-27T18:41:53Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MTo1M1rOHpLbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MTo1M1rOHpLbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MDg1OA==", "bodyText": "Where is this called, and is this more than dead code?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512940858", "createdAt": "2020-10-27T18:41:53Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/java/com/ibm/fhir/bucket/scanner/ResourceHandler.java", "diffHunk": "@@ -152,227 +124,9 @@ public boolean process(ResourceEntry entry) {\n         \n         return result;\n     }\n-    \n-    /**\n-     * Process the resource in the thread pool\n-     * @param resource\n-     */\n-    public void processThr(ResourceEntry re) {\n-        \n-        boolean success = false;\n-        try {\n-            Resource resource = re.getResource();\n-            final String resourceType = resource.getClass().getSimpleName();\n-            if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"Processing resource: \" + resourceType);\n-            }\n-            \n-            // Build a post request for the resource and send to FHIR\n-            long start = System.nanoTime();\n-            PostResource post = new PostResource(resource);\n-            FhirServerResponse response = post.run(fhirClient);\n-            long end = System.nanoTime();\n-            switch (response.getStatusCode()) {\n-            case HttpStatus.SC_OK:\n-            case HttpStatus.SC_CREATED:\n-                String locn = response.getLocationHeader();\n-                if (response.getResource() != null) {\n-                    // Process the response bundle\n-                    success = processResponseResource(re, response.getResource());\n-                } else if (locn != null) {\n-                    if (locn.startsWith(\"https://\")) {\n-                        // the response was empty, so in this case we need to extract the id from\n-                        // the location header\n-                        int responseTimeMs = (int)((end - start) / NANOS_MS);\n-                        success = processLocation(re, locn, responseTimeMs);\n-                    } else {\n-                        logger.warning(\"FHIR bad location format [\" + re.toString() + \"]: \" + \n-                                locn);\n-                    }\n-                    \n-                } else {\n-                    logger.warning(\"FHIR request id not found [\" + re.toString() + \"]: \" + \n-                            response.getStatusCode() + \" \" + response.getStatusMessage());\n-                }\n-                break;\n-            default:\n-                logger.warning(\"FHIR request failed [\" + re.toString() + \"]: \" + \n-                        response.getStatusCode() + \" \" + response.getStatusMessage());\n-                processBadRequest(re, response);\n-                break;\n-            }\n-        } catch (Throwable x) {\n-            // don't let any exceptions propagate into the thread pool\n-            logger.log(Level.SEVERE, re.toString(), x);\n-        } finally {\n-            // Signal the processing is complete for this entry\n-            re.getJob().operationComplete(success);\n-        }\n-    }\n-\n-    /**\n-     * Process the bundle we received in the FHIR POST response to extract all the ids\n-     * Synthetic example:\n-        {           \n-            \"entry\": [\n-                {\n-                    \"response\": {\n-                        \"etag\": \"W/\\\"1\\\"\",\n-                        \"id\": \"1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309\",\n-                        \"lastModified\": \"2020-08-20T17:22:12.554128Z\",\n-                        \"location\": \"Patient/1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309/_history/1\",\n-                        \"status\": \"201\"\n-                    }\n-                },\n-                {\n-                    \"response\": {\n-                        \"etag\": \"W/\\\"1\\\"\",\n-                        \"id\": \"1740ce47574-fb9b6b7e-15a4-4abc-bc33-f6b4fdb3d1e3\",\n-                        \"lastModified\": \"2020-08-20T17:22:12.980788Z\",\n-                        \"location\": \"Organization/1740ce47574-fb9b6b7e-15a4-4abc-bc33-f6b4fdb3d1e3/_history/1\",\n-                        \"status\": \"201\"\n-                    }\n-                },\n-                ...\n-            ],  \n-            \"resourceType\": \"Bundle\",\n-            \"type\": \"transaction-response\"\n-        }\n-     * \n-     * @param bundle\n-     * @return\n-     */\n-    private boolean processResponseResource(ResourceEntry re, Resource resource) {\n-        boolean result;\n-        \n-        if (Bundle.class.isAssignableFrom(resource.getClass())) {\n-            Bundle bundle = resource.as(Bundle.class);\n-            result = processResponseBundle(re, bundle);\n-        } else {\n-            logger.severe(\"Resource is not a bundle. Skipping: \" + resource.getClass().getSimpleName());\n-            result = false;\n-        }\n-        \n-        \n-        return result;\n-    }\n-    \n-    private boolean processResponseBundle(ResourceEntry re, Bundle bundle) {\n-        \n-        // Extract the location from every entry in the bundle. Collect them\n-        // together so that we can make a single batch insert into the database\n-        // which is going to be a lot more efficient than individual inserts\n-        List<ResourceIdValue> idValues = new ArrayList<>();\n-        for (Bundle.Entry entry: bundle.getEntry()) {\n-            Response response = entry.getResponse();\n-            if (response != null) {\n-                if (response.getLocation() != null && response.getLocation().getValue() != null) {\n-                    String locn = response.getLocation().getValue();\n-                    logger.info(\"New resource: \" + locn);\n-                    ResourceIdValue rid = getResourceIdValue(locn);\n-                    if (rid != null) {\n-                        idValues.add(rid);\n-                    }\n-                }\n-            }\n-        }\n-\n-        processResourceIdValues(re, idValues);\n-        return idValues.size() > 0;\n-    }\n-\n-    /**\n-     * Process the list of resource ids as a batch\n-     * @param re\n-     * @param idValues\n-     * @return\n-     */\n-    private void processResourceIdValues(ResourceEntry re, List<ResourceIdValue> idValues) {\n-        dataAccess.recordLogicalIds(re.getJob().getResourceBundleLoadId(), re.getLineNumber(), idValues, BATCH_SIZE);\n-    }\n-    /**\n-     * Parse the location to create a {@link ResourceIdValue} DTO object.\n-     * The location can take one of two forms:\n-     *   \"Patient/1740ce473c9-aecca6ca-6824-44a0-a8d8-4cfd230e0309/_history/1\"\n-     *   \"https://localhost:9443/fhir-server/api/v4/DiagnosticReport/173eed87a99-605de23b-266d-4b4d-b64f-31e769fda112/_history/1\"\n-     * @param location\n-     * @return\n-     */\n-    private ResourceIdValue getResourceIdValue(String location) {\n-        ResourceIdValue result;\n-    \n-        String[] parts = location.split(\"/\");\n-        if (parts.length == 10) {\n-            String resourceType = parts[6];\n-            String id = parts[7];\n-            result = new ResourceIdValue(resourceType, id);\n-        } else if (parts.length == 4) {\n-            String resourceType = parts[0];\n-            String id = parts[1];\n-            result = new ResourceIdValue(resourceType, id);\n-        } else {\n-            result = null;\n-        }\n-        \n-        return result;\n-    }\n-    \n-    private boolean processLocation(ResourceEntry re, String location, int responseTimeMs) {\n-        boolean result = false;\n-        // the response was empty, so in this case we need to extract the id from\n-        // the location header, which means cracking the string into parts:\n-        // https://localhost:9443/fhir-server/api/v4/DiagnosticReport/173eed87a99-605de23b-266d-4b4d-b64f-31e769fda112/_history/1\n-        String[] parts = location.split(\"/\");\n-        if (parts.length == 10) {\n-            String resourceType = parts[6];\n-            String id = parts[7];\n-            logger.info(\"[\" +re.toString() + \"] new \" + resourceType + \"/\" + id + \" [took \" + responseTimeMs + \" ms]\");\n-            dataAccess.recordLogicalId(resourceType, id, re.getJob().getResourceBundleLoadId(), re.getLineNumber(), responseTimeMs);\n-            result = true;\n-        }\n-        \n-        return result;\n-    }\n-\n-    /**\n-     * Record the error in the database\n-     * @param re\n-     * @param response\n-     */\n-    protected void processBadRequest(ResourceEntry re, FhirServerResponse response) {\n-        \n-        if (logger.isLoggable(Level.FINE)) {\n-            // dump the resource and full operational outcome to the log\n-            logger.fine(re.getJob().getObjectKey() + \"[\" + re.getLineNumber() + \"]: \"\n-                + resourceToString(re.getResource()));\n-            logger.fine(re.getJob().getObjectKey() + \"[\" + re.getLineNumber() + \"]: \"\n-                + response.getOperationalOutcomeText());\n-        }\n-        \n-        List<ResourceBundleError> errors = new ArrayList<>();\n-        errors.add(new ResourceBundleError(re.getLineNumber(), response.getOperationalOutcomeText(), \n-            response.getResponseTime(), response.getStatusCode(), response.getStatusMessage()));\n-        \n-        dataAccess.recordErrors(re.getJob().getResourceBundleLoadId(), re.getLineNumber(), errors);\n-    }\n-\n-    /**\n-     * Render the resource as a string (for logging)\n-     * @param resource\n-     * @return\n-     */\n-    private String resourceToString(Resource resource) {\n-        ByteArrayOutputStream os = new ByteArrayOutputStream(4096);\n-        try {\n-            FHIRGenerator.generator(Format.JSON, false).generate(resource, os);\n-            return new String(os.toByteArray(), StandardCharsets.UTF_8);\n-        } catch (FHIRGeneratorException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n \n     /**\n-     * \n+     * Perform any initialization after things have been wired up\n      */\n     public void init() {\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 329}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDI5OTc2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518029976", "createdAt": "2020-10-27T18:42:28Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MjoyOFrOHpLcwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MjoyOFrOHpLcwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTI0OQ==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512941249", "createdAt": "2020-10-27T18:42:28Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/scratch/randomPatientIds.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+     SELECT lr.logical_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMwMzEy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518030312", "createdAt": "2020-10-27T18:42:55Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0Mjo1NlrOHpLdxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0Mjo1NlrOHpLdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTUwOA==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512941508", "createdAt": "2020-10-27T18:42:56Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/index_sizes.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+select param_table, pg_size_pretty(total_size - table_size) as index_size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMwNTg3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518030587", "createdAt": "2020-10-27T18:43:15Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MzoxNVrOHpLehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MzoxNVrOHpLehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTcwMw==", "bodyText": "this seems valuable outside of bucket", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512941703", "createdAt": "2020-10-27T18:43:15Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/index_sizes.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+select param_table, pg_size_pretty(total_size - table_size) as index_size\n+from (\n+select resource_type || param.nm AS param_table, \n+pg_relation_size('fhirdata.' || resource_type || param.nm) AS table_size,\n+pg_total_relation_size('fhirdata.' || resource_type || param.nm) AS total_size\n+  from fhirdata.resource_types,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMwNzMy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518030732", "createdAt": "2020-10-27T18:43:27Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MzoyN1rOHpLe8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MzoyN1rOHpLe8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTgwOQ==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512941809", "createdAt": "2020-10-27T18:43:27Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/resource_counts.sql", "diffHunk": "@@ -0,0 +1,6 @@\n+select rt.resource_type, count(*) \n+from fhirdata.logical_resources lr,\n+      fhirdata.resource_types rt\n+where lr.resource_type_id = rt.resource_type_id\n+group by rt.resource_type\n+order by 2 DESC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMxMjc5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518031279", "createdAt": "2020-10-27T18:44:06Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDowNlrOHpLghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDowNlrOHpLghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MjIxMw==", "bodyText": "Suggested change", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512942213", "createdAt": "2020-10-27T18:44:06Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/str_values.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+select * from fhirdata.observation_str_values \n+where logical_resource_id = 170200592\n+fetch first 20 rows only;\n+\n+select max(logical_resource_id) from fhirdata.observation_str_values;\n+\n+select count(*) from observation_str_values where str_value = 'Patient/1746b099b1c-4b2f2cd7-12eb-457e-9e90-4dfb935959b9'\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMxNTEx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518031511", "createdAt": "2020-10-27T18:44:23Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDoyM1rOHpLhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDoyM1rOHpLhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MjQ1MQ==", "bodyText": "this feels like debug code, and probably not useful here", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512942451", "createdAt": "2020-10-27T18:44:23Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/str_values.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+select * from fhirdata.observation_str_values ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMxNjk3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518031697", "createdAt": "2020-10-27T18:44:38Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDozOFrOHpLiDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDozOFrOHpLiDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MjYwNw==", "bodyText": "Copyright header", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512942607", "createdAt": "2020-10-27T18:44:38Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/table_sizes.sql", "diffHunk": "@@ -0,0 +1,114 @@\n+select resource_type || param.nm AS param_table, pg_relation_size('fhirdata.' || resource_type || param.nm)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMxODk2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518031896", "createdAt": "2020-10-27T18:44:52Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDo1MlrOHpLixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NDo1MlrOHpLixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0Mjc4OA==", "bodyText": "dead lines", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512942788", "createdAt": "2020-10-27T18:44:52Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/table_sizes.sql", "diffHunk": "@@ -0,0 +1,114 @@\n+select resource_type || param.nm AS param_table, pg_relation_size('fhirdata.' || resource_type || param.nm)\n+  from fhirdata.resource_types,\n+    (VALUES \n+\t   ('_str_values'),('_token_values'),('_date_values'),\n+\t   ('_logical_resources'),('_resources'),('_number_values'),\n+\t   ('_quantity_values'),('_composites'),('_latlng_values'),('_token_resource_refs')\n+\t) AS param(nm)\n+order by 2 DESC, resource_type, param.nm\n+;\n+\n+-- better in GB\n+select resource_type, round(total_size / 1073741824) AS total_gb, \n+   round(tbl_size / 1073741824) AS tbl_gb, round(index_size / 1073741824) AS index_gb\n+  from (\n+select resource_type,\n+        sum(pg_indexes_size('fhirdata.' || resource_type || param.nm)) index_size,\n+        sum(pg_relation_size('fhirdata.' || resource_type || param.nm)) tbl_size,\n+        sum(pg_total_relation_size('fhirdata.' || resource_type || param.nm)) total_size\n+  from fhirdata.resource_types,\n+    (VALUES \n+\t   ('_str_values'),('_token_values'),('_date_values'),\n+\t   ('_logical_resources'),('_resources'),('_number_values'),\n+\t   ('_quantity_values'),('_composites'),('_latlng_values')\n+\t) AS param(nm)\n+GROUP BY resource_type\n+  ) sub\n+order by 2 DESC, 1\n+;\n+\n+\n+\n+-- token_values replaced by resource_token_refs\n+select resource_type, round(total_size / 1073741824) AS total_gb, \n+   round(tbl_size / 1073741824) AS tbl_gb, round(index_size / 1073741824) AS index_gb\n+  from (\n+select resource_type,\n+        sum(pg_indexes_size('fhirdata.' || resource_type || param.nm)) index_size,\n+        sum(pg_relation_size('fhirdata.' || resource_type || param.nm)) tbl_size,\n+        sum(pg_total_relation_size('fhirdata.' || resource_type || param.nm)) total_size\n+  from fhirdata.resource_types,\n+    (VALUES \n+\t   ('_str_values'),('_date_values'),\n+\t   ('_logical_resources'),('_resources'),('_number_values'),\n+\t   ('_quantity_values'),('_composites'),('_latlng_values'),\n+           ('_resource_token_refs')\n+\t) AS param(nm)\n+GROUP BY resource_type\n+  ) sub\n+WHERE round(tbl_size / 1073741824) > 0\n+order by 2 DESC, 1\n+;\n+\n+\n+-- vacuum commands for all resource types\n+select 'VACUUM FULL ' || 'fhirdata.' || resource_type || param.nm\n+  from fhirdata.resource_types,\n+    (VALUES\n+           ('_str_values'),('_date_values'),\n+           ('_logical_resources'),('_resources'),('_number_values'),\n+           ('_quantity_values'),('_composites'),('_latlng_values'),\n+           ('_resource_token_refs')\n+        ) AS param(nm)\n+;\n+\n+-- vacuum commands for one resource type\n+select 'VACUUM FULL ' || 'fhirdata.' || resource_type || param.nm || ';'\n+  from fhirdata.resource_types,\n+    (VALUES\n+           ('_str_values'),('_date_values'),\n+           ('_logical_resources'),('_resources'),('_number_values'),\n+           ('_quantity_values'),('_composites'),('_latlng_values'),\n+           ('_resource_token_refs')\n+        ) AS param(nm)\n+\t\tWHERE resource_type IN ( \n+                           'Encounter', 'Procedure', 'DiagnosticReport',\n+                           'MedicationRequest', 'CarePlan', 'Condition', 'Immunization',\n+                           'CareTeam', 'Practitioner', 'Organization', 'Patient', 'Goal' )\n+;\n+\n+VACUUM FULL fhirdata.ExplanationOfBenefit_str_values;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_date_values;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_logical_resources;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_resources;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_number_values;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_quantity_values;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_composites;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_latlng_values;\n+VACUUM FULL fhirdata.ExplanationOfBenefit_resource_token_refs;\n+\n+VACUUM FULL fhirdata.Claim_str_values;\n+VACUUM FULL fhirdata.Claim_date_values;\n+VACUUM FULL fhirdata.Claim_logical_resources;\n+VACUUM FULL fhirdata.Claim_resources;\n+VACUUM FULL fhirdata.Claim_number_values;\n+VACUUM FULL fhirdata.Claim_quantity_values;\n+VACUUM FULL fhirdata.Claim_composites;\n+VACUUM FULL fhirdata.Claim_latlng_values;\n+VACUUM FULL fhirdata.Claim_resource_token_refs;\n+\n+\n+VACUUM FULL fhirdata.Observation_str_values;\n+VACUUM FULL fhirdata.Observation_date_values;\n+VACUUM FULL fhirdata.Observation_logical_resources;\n+VACUUM FULL fhirdata.Observation_resources;\n+VACUUM FULL fhirdata.Observation_number_values;\n+VACUUM FULL fhirdata.Observation_quantity_values;\n+VACUUM FULL fhirdata.Observation_composites;\n+VACUUM FULL fhirdata.Observation_latlng_values;\n+VACUUM FULL fhirdata.Observation_resource_token_refs;\n+\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMyMzY1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518032365", "createdAt": "2020-10-27T18:45:31Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTozMVrOHpLkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTozMVrOHpLkIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MzEzNg==", "bodyText": "Copyright... and what is this good for?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512943136", "createdAt": "2020-10-27T18:45:31Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/time_series.sql", "diffHunk": "@@ -0,0 +1,8 @@\n+SELECT day.hour, hour.second", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMyNTI0", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518032524", "createdAt": "2020-10-27T18:45:44Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTo0NVrOHpLkpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTo0NVrOHpLkpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MzI3MQ==", "bodyText": "Copyright\nand useful outside of it", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512943271", "createdAt": "2020-10-27T18:45:45Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/total_sizes.sql", "diffHunk": "@@ -0,0 +1,15 @@\n+select resource_type, total_size, total_size - tbl_size AS index_size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDMyNjY2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518032666", "createdAt": "2020-10-27T18:45:54Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTo1NFrOHpLlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0NTo1NFrOHpLlFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MzM4Mw==", "bodyText": "Needs copyright", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512943383", "createdAt": "2020-10-27T18:45:54Z", "author": {"login": "prb112"}, "path": "fhir-bucket/src/main/resources/stats/postgres/vacuum_full.sql", "diffHunk": "@@ -0,0 +1,72 @@\n+VACUUM FULL fhirdata.CarePlan_str_values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDM2NDI2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518036426", "createdAt": "2020-10-27T18:50:32Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MDozMlrOHpLwmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MDozMlrOHpLwmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NjMzMQ==", "bodyText": "How is this different than what we had before? The ordered columns?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512946331", "createdAt": "2020-10-27T18:50:32Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CreateIndexStatement.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.model.OrderedColumnDef;\n+\n+/**\n+ * Create an index\n+ */\n+public class CreateIndexStatement implements IDatabaseStatement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDM3MzMz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518037333", "createdAt": "2020-10-27T18:51:42Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MTo0M1rOHpLzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MTo0M1rOHpLzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NzAwMg==", "bodyText": "Is this always going to be an ArrayList or ordered list underneath?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512947002", "createdAt": "2020-10-27T18:51:43Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DataDefinitionUtil.java", "diffHunk": "@@ -109,6 +110,16 @@ public static String join(Collection<String> things) {\n         return things.stream().collect(Collectors.joining(\",\"));\n     }\n \n+    /**\n+     * Join the ordered column definitions\n+     * @param things\n+     * @return\n+     */\n+    public static String joinOrderedColumnDefs(Collection<OrderedColumnDef> things) {\n+        return things.stream().map(c -> c.toString()).collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDM4NDEy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518038412", "createdAt": "2020-10-27T18:53:07Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MzowN1rOHpL2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1MzowN1rOHpL2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NzgxMA==", "bodyText": "Why finest?  typically we target FINE? this is a curiosity question.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512947810", "createdAt": "2020-10-27T18:53:07Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/JdbcTarget.java", "diffHunk": "@@ -33,6 +36,10 @@ public JdbcTarget(Connection c) {\n \n     @Override\n     public void runStatement(IDatabaseTranslator translator, String ddl) {\n+        if (logger.isLoggable(Level.FINEST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDM4OTkw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518038990", "createdAt": "2020-10-27T18:53:53Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Mzo1M1rOHpL4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Mzo1M1rOHpL4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0ODIyNw==", "bodyText": "please set your save actions to remove trailing spaces (per team convention)", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512948227", "createdAt": "2020-10-27T18:53:53Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -207,9 +245,9 @@ public void run() {\n             // Not cool. This means that only some of the tables will have the partition assigned\n             throw new DataAccessException(\"Tenant partition creation did not complete\");\n         }\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDM5NzM5", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518039739", "createdAt": "2020-10-27T18:54:52Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1NDo1MlrOHpL6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1NDo1MlrOHpL6YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0ODgzMg==", "bodyText": "interesting code from the prior commit.\nLet's remove this commented line", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512948832", "createdAt": "2020-10-27T18:54:52Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyTranslator.java", "diffHunk": "@@ -179,11 +179,24 @@ public String dualTableName() {\n     @Override\n     public String selectSequenceNextValue(String schemaName, String sequenceName) {\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n-        return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";\n+        // return \"SELECT NEXT VALUE FOR \" + qname + \" FROM SYSIBM.SYSDUMMY1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQxMjg2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518041286", "createdAt": "2020-10-27T18:56:55Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Njo1NVrOHpL_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Njo1NVrOHpL_BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1MDAyMA==", "bodyText": "Random tabs... save action in Eclipse", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512950020", "createdAt": "2020-10-27T18:56:55Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java", "diffHunk": "@@ -281,14 +281,24 @@ public Builder addSmallIntColumn(String columnName, Integer defaultValue, boolea\n             columns.add(cd);\n             return this;\n         }\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQxNjMz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518041633", "createdAt": "2020-10-27T18:57:23Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1NzoyM1rOHpMANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1NzoyM1rOHpMANw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1MDMyNw==", "bodyText": "same save action comment", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512950327", "createdAt": "2020-10-27T18:57:23Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/TimestampColumn.java", "diffHunk": "@@ -16,14 +16,14 @@\n      * The number of fractional second decimals to store or null to use the database's default\n      */\n     private final Integer precision;\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQyMDU4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518042058", "createdAt": "2020-10-27T18:57:55Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Nzo1NVrOHpMBaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo1Nzo1NVrOHpMBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1MDYzMw==", "bodyText": "unused comment.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512950633", "createdAt": "2020-10-27T18:57:55Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/View.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQ0MTQw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518044140", "createdAt": "2020-10-27T19:00:43Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowMDo0NFrOHpMHng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTowMDo0NFrOHpMHng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1MjIyMg==", "bodyText": "seems strange to flip to another paradigm to build the ddl - I think it's OK though.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r512952222", "createdAt": "2020-10-27T19:00:44Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DropViewDAO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.tenant;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+\n+/**\n+ * Executes a DROP VIEW statement\n+ */\n+public class DropViewDAO implements IDatabaseStatement {\n+    private static final Logger logger = Logger.getLogger(DropViewDAO.class.getName());\n+    \n+    private final String schemaName;\n+    \n+    private final String viewName;\n+    \n+    private final boolean propagateError;\n+    \n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param viewName\n+     * @param propagateError if false, errors will be suppressed, if true, they will be propagated\n+     */\n+    public DropViewDAO(String schemaName, String viewName, boolean propagateError) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(viewName);\n+        this.schemaName = schemaName;\n+        this.viewName = viewName;\n+        this.propagateError = propagateError;\n+    }\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, viewName);\n+        final StringBuilder ddl = new StringBuilder();\n+        ddl.append(\"DROP VIEW \");\n+        ddl.append(qualifiedName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjE3NjQ3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518617647", "createdAt": "2020-10-28T12:43:09Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo0MzoxMFrOHpoHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo0MzoxMFrOHpoHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQxMDk2MA==", "bodyText": "The comment doesn't appear to agree with the classes purpose.\nAlso where is this used?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513410960", "createdAt": "2020-10-28T12:43:10Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/CreateTempTablesAction.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigProvider;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n+import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n+import com.ibm.fhir.database.utils.api.BadTenantNameException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Adapter;\n+import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n+import com.ibm.fhir.database.utils.derby.DerbyAdapter;\n+import com.ibm.fhir.database.utils.derby.DerbyTranslator;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.derby.CreateCodeSystemsTmp;\n+import com.ibm.fhir.persistence.jdbc.derby.CreateCommonTokenValuesTmp;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Set the tenant variable in the session (part of Db2 multi-tenancy\n+ * support). This needs to be executed at the beginning of an\n+ * interaction with a database connection, before any other\n+ * DML/SQL.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjE4MTgw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518618180", "createdAt": "2020-10-28T12:43:47Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo0Mzo0N1rOHpoJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo0Mzo0N1rOHpoJFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQxMTM0OQ==", "bodyText": "Is this actually used?  It appears that this might be a longer term thing?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513411349", "createdAt": "2020-10-28T12:43:47Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/connection/CreateTempTablesAction.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.connection;\n+\n+import java.sql.Connection;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.config.FHIRConfigProvider;\n+import com.ibm.fhir.config.FHIRConfiguration;\n+import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.database.utils.api.BadTenantFrozenException;\n+import com.ibm.fhir.database.utils.api.BadTenantKeyException;\n+import com.ibm.fhir.database.utils.api.BadTenantNameException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.common.JdbcTarget;\n+import com.ibm.fhir.database.utils.db2.Db2Adapter;\n+import com.ibm.fhir.database.utils.db2.Db2SetTenantVariable;\n+import com.ibm.fhir.database.utils.derby.DerbyAdapter;\n+import com.ibm.fhir.database.utils.derby.DerbyTranslator;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.derby.CreateCodeSystemsTmp;\n+import com.ibm.fhir.persistence.jdbc.derby.CreateCommonTokenValuesTmp;\n+import com.ibm.fhir.persistence.jdbc.exception.FHIRPersistenceDBConnectException;\n+\n+/**\n+ * Set the tenant variable in the session (part of Db2 multi-tenancy\n+ * support). This needs to be executed at the beginning of an\n+ * interaction with a database connection, before any other\n+ * DML/SQL.\n+ */\n+public class CreateTempTablesAction extends ChainedAction {\n+    private static final Logger log = Logger.getLogger(SetTenantAction.class.getName());\n+        \n+    /**\n+     * Public constructor. No next action, so this will be the last action applied\n+     */\n+    public CreateTempTablesAction() {\n+        super();\n+    }\n+    \n+    /**\n+     * Public constructor\n+     * @param next the next action in the chain\n+     */\n+    public CreateTempTablesAction(Action next) {\n+        super(next);\n+    }\n+\n+    @Override\n+    public void performOn(FHIRDbFlavor flavor, Connection connection) throws FHIRPersistenceDBConnectException {\n+\n+        if (flavor.getType() == DbType.DERBY) {\n+            // This is only used for Derby databases\n+            JdbcTarget target = new JdbcTarget(connection);\n+            DerbyAdapter adapter = new DerbyAdapter(target);\n+    \n+            createCodeSystemsTmp(adapter);\n+            createCommonTokenValuesTmp(adapter);\n+        }\n+        \n+        // perform next action in the chain\n+        super.performOn(flavor, connection);\n+    }\n+\n+    /**\n+     * Create the declared global temporary table COMMON_TOKEN_VALUES_TMP\n+     * @param connection\n+     * @throws FHIRPersistenceDBConnectException\n+     */\n+    public void createCommonTokenValuesTmp(DerbyAdapter adapter) throws FHIRPersistenceDBConnectException {\n+        IDatabaseStatement cmd = new CreateCommonTokenValuesTmp();\n+        adapter.runStatement(cmd);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjI1MjEw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518625210", "createdAt": "2020-10-28T12:52:31Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1MjozMVrOHpoeBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1MjozMVrOHpoeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQxNjcxMQ==", "bodyText": "Where are the unit tests? is this suppose to be abstract?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513416711", "createdAt": "2020-10-28T12:52:31Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/impl/test/ResourceReferenceDAOTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.impl.test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+\n+import com.ibm.fhir.database.utils.derby.DerbyMaster;\n+import com.ibm.fhir.database.utils.derby.DerbyTranslator;\n+import com.ibm.fhir.database.utils.model.DbType;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCCache;\n+import com.ibm.fhir.persistence.jdbc.cache.CommonTokenValuesCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.cache.FHIRPersistenceJDBCCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.cache.NameIdCache;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavorImpl;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.postgresql.DerbyResourceReferenceDAO;\n+import com.ibm.fhir.schema.derby.DerbyFhirDatabase;\n+\n+/**\n+ * Unit tests for {@link ResourceReferenceDAO}\n+ */\n+public class ResourceReferenceDAOTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjMwOTEx", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518630911", "createdAt": "2020-10-28T12:59:06Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1OTowNlrOHpovFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1OTowNlrOHpovFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyMTA3OA==", "bodyText": "Should this be a warning? I realize it's informational, and hasn't yet failed.", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513421078", "createdAt": "2020-10-28T12:59:06Z", "author": {"login": "prb112"}, "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -2669,4 +2671,31 @@ private void setOperationContextProperties(FHIROperationContext operationContext\n         operationContext.setProperty(FHIROperationContext.PROPNAME_PERSISTENCE_IMPL, persistence);\n         operationContext.setProperty(FHIROperationContext.PROPNAME_REQUEST_PROPERTIES, requestProperties);\n     }\n+\n+    @Override\n+    public int doReindex(FHIROperationContext operationContext, OperationOutcome.Builder operationOutcomeResult, Instant tstamp) throws Exception {\n+        int result = 0;\n+        // handle some retries in case of deadlock exceptions\n+        final int TX_ATTEMPTS = 5;\n+        int attempt = 1;\n+        do {\n+            FHIRTransactionHelper txn = new FHIRTransactionHelper(getTransaction());\n+            txn.begin();\n+            try {\n+                FHIRPersistenceContext persistenceContext = null;\n+                result = persistence.reindex(persistenceContext, operationOutcomeResult, tstamp);\n+                attempt = TX_ATTEMPTS; // end the retry loop\n+            } catch (FHIRPersistenceDataAccessException x) {\n+                if (x.isTransactionRetryable() && attempt < TX_ATTEMPTS) {\n+                    log.info(\"attempt #\" + attempt + \" failed, retrying transaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjMxNTU3", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518631557", "createdAt": "2020-10-28T12:59:51Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1OTo1MVrOHpoxGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjo1OTo1MVrOHpoxGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyMTU5NA==", "bodyText": "Copyright Year", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513421594", "createdAt": "2020-10-28T12:59:51Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/test/MockPersistenceImpl.java", "diffHunk": "@@ -6,6 +6,8 @@\n \n package com.ibm.fhir.persistence.test;\n \n+import java.time.Instant;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjMyNzc1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518632775", "createdAt": "2020-10-28T13:01:17Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowMToxOFrOHpo0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowMToxOFrOHpo0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyMjU0MA==", "bodyText": "Best practice with test-ng is to use @BeforeTest and @aftertest.  it may be worth parking that in your arsernal", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513422540", "createdAt": "2020-10-28T13:01:18Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchDateTest.java", "diffHunk": "@@ -631,11 +635,17 @@ public void testSearchDate_date_missing() throws Exception {\n     }\n     @Test\n     public void testSearchDate_date_chained() throws Exception {\n-        // Date is specific - 2018-10-29\n-        assertSearchReturnsComposition(\"subject:Basic.date\", \"2018-10-29\");\n-        assertSearchDoesntReturnComposition(\"subject:Basic.date\", \"2018-10-29T17:12:00-04:00\");\n-        assertSearchDoesntReturnComposition(\"subject:Basic.date\", \"2018-10-29T17:12:00\");\n-        assertSearchDoesntReturnComposition(\"subject:Basic.date\", \"2025-10-29\");\n+        final String METHOD = \"testSearchDate_date_chained\";\n+        logger.entering(CLASSNAME, METHOD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjM2MTI4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518636128", "createdAt": "2020-10-28T13:05:13Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowNToxM1rOHpo-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowNToxM1rOHpo-lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyNTA0Ng==", "bodyText": "Unused todos", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513425046", "createdAt": "2020-10-28T13:05:13Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/connection/MockTransactionSynchronizationRegistry.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.test.connection;\n+\n+import javax.transaction.Synchronization;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRUserTransactionAdapter;\n+\n+\n+/**\n+ * Mock implementation of {@link TransactionSynchronizationRegistry} for testing the {@link FHIRUserTransactionAdapter}\n+ */\n+public class MockTransactionSynchronizationRegistry implements TransactionSynchronizationRegistry {\n+\n+    @Override\n+    public Object getTransactionKey() {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjM3NzUw", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518637750", "createdAt": "2020-10-28T13:07:01Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowNzowMlrOHppDXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzowNzowMlrOHppDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyNjI2OQ==", "bodyText": "hum... should there be a copyright here too?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513426269", "createdAt": "2020-10-28T13:07:02Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/docs/tests/QueryText.md", "diffHunk": "@@ -0,0 +1,28 @@\n+# Scratch Area for Query Development", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjQ0Mjc4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518644278", "createdAt": "2020-10-28T13:14:03Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNDowNFrOHppV4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNDowNFrOHppV4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMTAxMQ==", "bodyText": "is this useful?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513431011", "createdAt": "2020-10-28T13:14:04Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -436,25 +419,82 @@ public void buildDatabaseSpecificArtifactsPostgres(PhysicalDataModel model) {\n      */\n     public void addLogicalResources(PhysicalDataModel pdm) {\n         final String tableName = LOGICAL_RESOURCES;\n+        \n+        final String IDX_LOGICAL_RESOURCES_RITS = \"IDX_\" + LOGICAL_RESOURCES + \"_RITS\";\n \n         Table tbl = Table.builder(schemaName, tableName)\n                 .setTenantColumnName(MT_ID)\n                 .addBigIntColumn(LOGICAL_RESOURCE_ID, false)\n                 .addIntColumn(RESOURCE_TYPE_ID, false)\n                 .addVarcharColumn(LOGICAL_ID, LOGICAL_ID_BYTES, false)\n+                .addTimestampColumn(REINDEX_TSTAMP, false, \"CURRENT_TIMESTAMP\") // new column for V0006\n+                .addBigIntColumn(REINDEX_TXID, false, \"0\")                      // new column for V0006\n                 .addPrimaryKey(tableName + \"_PK\", LOGICAL_RESOURCE_ID)\n                 .addUniqueIndex(\"UNQ_\" + LOGICAL_RESOURCES, RESOURCE_TYPE_ID, LOGICAL_ID)\n+                .addIndex(IDX_LOGICAL_RESOURCES_RITS, new OrderedColumnDef(REINDEX_TSTAMP, OrderedColumnDef.Direction.DESC, null))\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .addForeignKeyConstraint(FK + tableName + \"_RTID\", schemaName, RESOURCE_TYPES, RESOURCE_TYPE_ID)\n                 .enableAccessControl(this.sessionVariable)\n+                .setVersion(FhirSchemaVersion.V0006.vid())\n+                .addMigration(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == FhirSchemaVersion.V0001.vid()) {\n+                        // Add statements to migrate from version V0001 to V0006 of this object\n+                        List<ColumnBase> cols = ColumnDefBuilder.builder()\n+                                .addTimestampColumn(REINDEX_TSTAMP, false, \"CURRENT_TIMESTAMP\")\n+                                .addBigIntColumn(REINDEX_TXID, false, \"0\")\n+                                .buildColumns();\n+\n+                        statements.add(new AddColumn(schemaName, tableName, cols.get(0)));\n+                        statements.add(new AddColumn(schemaName, tableName, cols.get(1)));\n+                        \n+                        // Add the new index on REINDEX_TSTAMP. This index is special because it's the\n+                        // first index in our schema to use DESC.\n+                        final String mtId = this.multitenant ? MT_ID : null;\n+                        List<OrderedColumnDef> indexCols = Arrays.asList(new OrderedColumnDef(REINDEX_TSTAMP, OrderedColumnDef.Direction.DESC, null));\n+                        statements.add(new CreateIndexStatement(schemaName, IDX_LOGICAL_RESOURCES_RITS, tableName, mtId, indexCols));\n+                    }\n+                    return statements;\n+                })\n                 .build(pdm);\n \n         // TODO should not need to add as a table and an object. Get the table to add itself?\n         tbl.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n         this.procedureDependencies.add(tbl);\n         pdm.addTable(tbl);\n         pdm.addObject(tbl);\n+        \n+        // For V0006 we also add a couple of new columns and an index to support\n+        // reindexing of resources. Note CURRENT_TIMESTAMP works for Derby, Postgres and Db2.\n+//        List<ColumnBase> cols = new ColumnDefBuilder()\n+//                .addTimestampColumn(REINDEX_TSTAMP, false, \"CURRENT_TIMESTAMP\")\n+//                .addBigIntColumn(REINDEX_TXID, false, \"0\")\n+//                .buildColumns();\n+//        AlterTableAddColumn addCols = new AlterTableAddColumn(schemaName, tableName, FhirSchemaVersion.V0006.vid(), cols);\n+//        addCols.addDependency(tbl); // table must be created before we try to alter it\n+//        pdm.addObject(addCols);\n+\n+        // Make sure we have an index on the REINDEX_TSTAMP column so that we can quickly\n+        // identify which resources need to be reindexed. For the reindex resource selection\n+        // query, it's essential that we collate the reindex_tstamp with NULLS FIRST\n+//        CreateIndex tsidx = CreateIndex.builder()\n+//                .setSchemaName(schemaName)\n+//                .setTableName(tableName)\n+//                .setTenantColumnName(MT_ID)\n+//                .setIndexName(\"IDX_\" + LOGICAL_RESOURCES + \"_RITS\")\n+//                .setVersion(FhirSchemaVersion.V0006.vid())\n+//                .addColumn(REINDEX_TSTAMP, OrderedColumnDef.Direction.DESC, null)\n+//                .build();\n+//        tsidx.addDependency(addCols);\n+//        pdm.addObject(tsidx);\n+\n+\n+        // Create a new sequence to use as a transaction id for our reindexing process\n+//        Sequence seq = new Sequence(schemaName, FhirSchemaConstants.REINDEX_SEQ, FhirSchemaVersion.V0001.vid(), 1, 100, 1);\n+//        seq.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+//        sequencePrivileges.forEach(p -> p.addToObject(seq));\n+//        pdm.addObject(seq);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjQ0ODYz", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518644863", "createdAt": "2020-10-28T13:14:39Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNDozOVrOHppX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNDozOVrOHppX3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMTUxOQ==", "bodyText": "the question made me smile... but makes sense", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513431519", "createdAt": "2020-10-28T13:14:39Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirSchemaGenerator.java", "diffHunk": "@@ -704,6 +787,94 @@ protected void addCodeSystems(PhysicalDataModel model) {\n \n     }\n \n+    /**\n+     * Table used to store normalized values for tokens, shared by all the\n+     * <RESOURCE_TYPE>_TOKEN_VALUES tables. Although this requires an additional\n+     * join, it cuts down on space by avoiding repeating long strings (e.g. urls).\n+     * This also helps to reduce the total sizes of the indexes, helping to improve\n+     * cache hit rates for a given buffer cache size.\n+     * Token values may or may not have an associated code system, in which case,\n+     * it assigned a default system. This is why CODE_SYSTEM_ID is not nullable and \n+     * has a FK constraint. \n+     * \n+     * We never need to find all token values for a given code-system, so there's no need\n+     * for a second index (CODE_SYSTEM_ID, TOKEN_VALUE). Do not add it.\n+     * \n+     * Because different parameter names may reference the same token value (e.g. \n+     * 'Observation.subject' and 'Claim.patient' are both patient references), the\n+     * common token value is not distinguished by a parameter_name_id.\n+     * \n+     * Where common token values are used to represent local relationships between two resources,\n+     * the code_system encodes the resource type of the referenced resource and\n+     * the token_value represents its logical_id. This approach simplifies query writing when\n+     * following references.\n+     * \n+     * @param pdm\n+     * @return the table definition\n+     */\n+    public void addCommonTokenValues(PhysicalDataModel pdm) {\n+        final String tableName = COMMON_TOKEN_VALUES;\n+        commonTokenValuesTable = Table.builder(schemaName, tableName)\n+                .setVersion(FhirSchemaVersion.V0006.vid())\n+                .setTenantColumnName(MT_ID)\n+                .addBigIntColumn(     COMMON_TOKEN_VALUE_ID,                          false)\n+                .setIdentityColumn(   COMMON_TOKEN_VALUE_ID, Generated.ALWAYS)\n+                .addIntColumn(               CODE_SYSTEM_ID,                          false)\n+                .addVarcharColumn(              TOKEN_VALUE, MAX_TOKEN_VALUE_BYTES,   false)\n+                .addUniqueIndex(IDX + tableName + \"_TVCP\", TOKEN_VALUE, CODE_SYSTEM_ID)\n+                .addPrimaryKey(tableName + \"_PK\", COMMON_TOKEN_VALUE_ID)\n+                .addForeignKeyConstraint(FK + tableName + \"_CSID\", schemaName, CODE_SYSTEMS, CODE_SYSTEM_ID)\n+                .setTablespace(fhirTablespace)\n+                .addPrivileges(resourceTablePrivileges)\n+                .enableAccessControl(this.sessionVariable)\n+                .build(pdm);\n+\n+        // TODO should not need to add as a table and an object. Get the table to add itself?\n+        commonTokenValuesTable.addTag(SCHEMA_GROUP_TAG, FHIRDATA_GROUP);\n+        pdm.addTable(commonTokenValuesTable);\n+        pdm.addObject(commonTokenValuesTable);\n+    }\n+\n+    /**\n+     * Add the system-wide RESOURCE_TOKEN_REFS table which is used for\n+     * _tag and _security search properties in R4 (new table\n+     * for issue #1366 V0006 schema change). Replaces the\n+     * previous TOKEN_VALUES table. All token values are now\n+     * normalized in the COMMON_TOKEN_VALUES table\n+     * @param pdm\n+     * @return Table the table that was added to the PhysicalDataModel\n+     */\n+    public Table addResourceTokenRefs(PhysicalDataModel pdm) {\n+\n+        final String tableName = RESOURCE_TOKEN_REFS;\n+\n+        // logical_resources (0|1) ---- (*) resource_token_refs\n+        Table tbl = Table.builder(schemaName, tableName)\n+                .setVersion(FhirSchemaVersion.V0006.vid())\n+                .setTenantColumnName(MT_ID)\n+                .addIntColumn(       PARAMETER_NAME_ID,    false)\n+                .addBigIntColumn(COMMON_TOKEN_VALUE_ID,     true) // support for null token value entries\n+                .addBigIntColumn(  LOGICAL_RESOURCE_ID,    false)\n+                .addIntColumn(          REF_VERSION_ID,     true) // for when the referenced value is a logical resource with a version\n+                .addIndex(IDX + tableName + \"_TVLR\", COMMON_TOKEN_VALUE_ID, LOGICAL_RESOURCE_ID)\n+                .addIndex(IDX + tableName + \"_LRTV\", LOGICAL_RESOURCE_ID, COMMON_TOKEN_VALUE_ID)\n+                .addForeignKeyConstraint(FK + tableName + \"_CTV\", schemaName, COMMON_TOKEN_VALUES, COMMON_TOKEN_VALUE_ID)\n+                .addForeignKeyConstraint(FK + tableName + \"_LR\", schemaName, LOGICAL_RESOURCES, LOGICAL_RESOURCE_ID)\n+                .addForeignKeyConstraint(FK + tableName + \"_PNID\", schemaName, PARAMETER_NAMES, PARAMETER_NAME_ID)\n+                .setTablespace(fhirTablespace)\n+                .addPrivileges(resourceTablePrivileges)\n+                .enableAccessControl(this.sessionVariable)\n+                .build(pdm);\n+\n+        // TODO should not need to add as a table and an object. Get the table to add itself?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 366}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjQ2MTQ2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518646146", "createdAt": "2020-10-28T13:15:57Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNTo1N1rOHppbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNTo1N1rOHppbfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMjQ0Ng==", "bodyText": "Is this too optimistic? What happens if the table isn't deployed?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513432446", "createdAt": "2020-10-28T13:15:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/derby/DerbyFhirDatabase.java", "diffHunk": "@@ -108,21 +126,18 @@ public void populateResourceTypeAndParameterNameTableEntries() throws SQLExcepti\n         try (Connection connection = getConnection()) {\n \n             // Ensures we don't double up the generated derby db prepopulation.\n-            // Docs for the table are at https://db.apache.org/derby/docs/10.5/ref/rrefsistabs24269.html\n-            boolean process = true;\n-            final String sql = \"SELECT COUNT(TABLENAME) AS CNT FROM SYS.SYSTABLES WHERE TABLENAME = 'PARAMETER_NAMES'\";\n-            try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n-                stmt.execute();\n-                ResultSet set = stmt.getResultSet();\n-                if (set.next()) {\n-                    int val = set.getInt(\"CNT\");\n-                    if (val > 0) {\n-                        process = false;\n-                    }\n+            boolean populated;\n+            final String sql = \"SELECT 1 FROM PARAMETER_NAMES FETCH FIRST 1 ROWS ONLY\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjUwODUy", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518650852", "createdAt": "2020-10-28T13:20:59Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoyMDo1OVrOHppo5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoyMDo1OVrOHppo5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzNTg3OA==", "bodyText": "Copyright", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513435878", "createdAt": "2020-10-28T13:20:59Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/TokenParmVal.java", "diffHunk": "@@ -27,6 +27,12 @@\n     public TokenParmVal() {\n         super();\n     }\n+    \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjUxMDg1", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518651085", "createdAt": "2020-10-28T13:21:14Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoyMToxNFrOHpppkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoyMToxNFrOHpppkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzNjA0OA==", "bodyText": "Copyright", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513436048", "createdAt": "2020-10-28T13:21:14Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -9,15 +9,26 @@\n import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n import com.ibm.fhir.search.SearchConstants.Type;\n \n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjYyNTY4", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518662568", "createdAt": "2020-10-28T13:32:57Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozMjo1N1rOHpqLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozMjo1N1rOHpqLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ0NDczNg==", "bodyText": "When is this important?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513444736", "createdAt": "2020-10-28T13:32:57Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/ReindexResourceDAO.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+\n+import java.security.SecureRandom;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceResourceDeletedException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceResourceNotFoundException;\n+import com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCCache;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n+import com.ibm.fhir.persistence.jdbc.dao.api.IResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.JDBCIdentityCache;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ParameterDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ResourceIndexRecord;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.JDBCIdentityCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterVisitorBatchDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.dto.ExtractedParameterValue;\n+import com.ibm.fhir.persistence.jdbc.impl.ParameterTransactionDataImpl;\n+\n+/**\n+ * DAO used to contain the logic required to reindex a given resource\n+ */\n+public class ReindexResourceDAO extends ResourceDAOImpl {\n+    private static final Logger logger = Logger.getLogger(ReindexResourceDAO.class.getName());\n+    private static final String CLASSNAME = ReindexResourceDAO.class.getSimpleName();\n+    private static final SecureRandom random = new SecureRandom();\n+\n+    // The translator specific to the database type we're working with\n+    private final IDatabaseTranslator translator;\n+    \n+    private final ParameterDAO parameterDao;\n+\n+    /**\n+     * Public constructor\n+     * @param connection\n+     * @param translator\n+     * @param parameterDao\n+     * @param schemaName\n+     * @param flavor\n+     * @param cache\n+     * @param rrd\n+     */\n+    public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator, ParameterDAO parameterDao, String schemaName, FHIRDbFlavor flavor, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd) {\n+        super(connection, schemaName, flavor, cache, rrd);\n+        this.translator = translator;\n+        this.parameterDao = parameterDao;\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param connection\n+     * @param translator\n+     * @param parameterDao\n+     * @param schemaName\n+     * @param flavor\n+     * @param trxSynchRegistry\n+     * @param cache\n+     * @param rrd\n+     */\n+    public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator, ParameterDAO parameterDao, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd, ParameterTransactionDataImpl ptdi) {\n+        super(connection, schemaName, flavor, trxSynchRegistry, cache, rrd, ptdi);\n+        this.translator = translator;\n+        this.parameterDao = parameterDao;\n+\n+    }\n+\n+    /**\n+     * Getter for the translator currently held by this DAO\n+     * @return\n+     */\n+    protected IDatabaseTranslator getTranslator() {\n+        return this.translator;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjYyOTU2", "url": "https://github.com/IBM/FHIR/pull/1604#pullrequestreview-518662956", "createdAt": "2020-10-28T13:33:21Z", "commit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozMzoyMVrOHpqMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzozMzoyMVrOHpqMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ0NTAwNg==", "bodyText": "why not just this.translator?", "url": "https://github.com/IBM/FHIR/pull/1604#discussion_r513445006", "createdAt": "2020-10-28T13:33:21Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/derby/ReindexResourceDAO.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.derby;\n+\n+\n+import java.security.SecureRandom;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.transaction.TransactionSynchronizationRegistry;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceResourceDeletedException;\n+import com.ibm.fhir.persistence.exception.FHIRPersistenceResourceNotFoundException;\n+import com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCCache;\n+import com.ibm.fhir.persistence.jdbc.connection.FHIRDbFlavor;\n+import com.ibm.fhir.persistence.jdbc.dao.api.IResourceReferenceDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.JDBCIdentityCache;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ParameterDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.api.ResourceIndexRecord;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.JDBCIdentityCacheImpl;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ParameterVisitorBatchDAO;\n+import com.ibm.fhir.persistence.jdbc.dao.impl.ResourceDAOImpl;\n+import com.ibm.fhir.persistence.jdbc.dto.ExtractedParameterValue;\n+import com.ibm.fhir.persistence.jdbc.impl.ParameterTransactionDataImpl;\n+\n+/**\n+ * DAO used to contain the logic required to reindex a given resource\n+ */\n+public class ReindexResourceDAO extends ResourceDAOImpl {\n+    private static final Logger logger = Logger.getLogger(ReindexResourceDAO.class.getName());\n+    private static final String CLASSNAME = ReindexResourceDAO.class.getSimpleName();\n+    private static final SecureRandom random = new SecureRandom();\n+\n+    // The translator specific to the database type we're working with\n+    private final IDatabaseTranslator translator;\n+    \n+    private final ParameterDAO parameterDao;\n+\n+    /**\n+     * Public constructor\n+     * @param connection\n+     * @param translator\n+     * @param parameterDao\n+     * @param schemaName\n+     * @param flavor\n+     * @param cache\n+     * @param rrd\n+     */\n+    public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator, ParameterDAO parameterDao, String schemaName, FHIRDbFlavor flavor, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd) {\n+        super(connection, schemaName, flavor, cache, rrd);\n+        this.translator = translator;\n+        this.parameterDao = parameterDao;\n+    }\n+\n+    /**\n+     * Public constructor\n+     * @param connection\n+     * @param translator\n+     * @param parameterDao\n+     * @param schemaName\n+     * @param flavor\n+     * @param trxSynchRegistry\n+     * @param cache\n+     * @param rrd\n+     */\n+    public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator, ParameterDAO parameterDao, String schemaName, FHIRDbFlavor flavor, TransactionSynchronizationRegistry trxSynchRegistry, FHIRPersistenceJDBCCache cache, IResourceReferenceDAO rrd, ParameterTransactionDataImpl ptdi) {\n+        super(connection, schemaName, flavor, trxSynchRegistry, cache, rrd, ptdi);\n+        this.translator = translator;\n+        this.parameterDao = parameterDao;\n+\n+    }\n+\n+    /**\n+     * Getter for the translator currently held by this DAO\n+     * @return\n+     */\n+    protected IDatabaseTranslator getTranslator() {\n+        return this.translator;\n+    }\n+    \n+    /**\n+     * Pick the next resource to process resource and lock it. Specializations for different\n+     * databases may use different techniques to optimize locking/concurrency control\n+     * @param reindexTstamp\n+     * @return\n+     * @throws Exception\n+     */\n+    protected ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexTstamp) throws Exception {\n+        ResourceIndexRecord result = null;\n+        \n+        // no need to close\n+        Connection connection = getConnection();\n+        IDatabaseTranslator translator = getTranslator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7726893f06d291092861af3b1ef97e73f9a66a"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 905, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}