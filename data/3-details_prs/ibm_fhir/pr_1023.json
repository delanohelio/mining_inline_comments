{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTk4NDMw", "number": 1023, "title": "Issue #1014 - added between function", "bodyText": "Signed-off-by: John T.E. Timm johntimm@us.ibm.com", "createdAt": "2020-05-05T15:45:06Z", "url": "https://github.com/IBM/FHIR/pull/1023", "merged": true, "mergeCommit": {"oid": "f73dd7465c7811c466562c7bb6de44d0704cb147"}, "closed": true, "closedAt": "2020-05-06T19:30:26Z", "author": {"login": "JohnTimm"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceWC2VAH2gAyNDEzNTk4NDMwOjY2ZmRhY2NlMGExZDYwZTg0Yzg5MjI3ZjkxMjY2NDk2YmMxYWZlZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABces5CaAH2gAyNDEzNTk4NDMwOjg5NTU3MTgxYzQzZGU1NTEyMmY5ZjdjYzU3ZjlhYzZhMjZiOTcxMWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/66fdacce0a1d60e84c89227f91266496bc1afedb", "committedDate": "2020-05-05T15:44:50Z", "message": "Issue #1014 - added between function\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTE4NTQy", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405918542", "createdAt": "2020-05-05T15:46:38Z", "commit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NjozOFrOGQvuxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NjozOFrOGQvuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMjQyMQ==", "bodyText": "can we remove it?", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420212421", "createdAt": "2020-05-05T15:46:38Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/FHIRPathDateTimeValue.java", "diffHunk": "@@ -60,73 +60,78 @@\n             .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n             .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n             .toFormatter();\n-    \n+\n     private final TemporalAccessor dateTime;\n     private final TimePrecision timePrecision;\n     private final Temporal temporal;\n-    \n+\n     protected FHIRPathDateTimeValue(Builder builder) {\n         super(builder);\n         dateTime = builder.dateTime;\n         timePrecision = builder.timePrecision;\n         temporal = getTemporal(dateTime);\n     }\n-    \n+\n     @Override\n     public boolean isDateTimeValue() {\n         return true;\n     }\n-    \n+\n     /**\n      * Indicates whether the date/time value wrapped by this FHIRPathDateTimeValue node is partial\n-     * \n+     *\n      * @return\n      *     true if the date/time value wrapped by this FHIRPathDateTimeValue node is partial, otherwise false\n      */\n     public boolean isPartial() {\n         return !(dateTime instanceof ZonedDateTime);\n     }\n-    \n+\n     @Override\n     public TemporalAccessor temporalAccessor() {\n         return dateTime;\n     }\n-    \n+\n     /**\n      * The date/time value wrapped by this FHIRPathDateTimeValue node\n-     * \n+     *\n      * @return\n      *     the date/time value wrapped by this FHIRPathDateTimeValue node\n      */\n     public TemporalAccessor dateTime() {\n         return dateTime;\n     }\n-    \n+\n     @Override\n     public TimePrecision timePrecision() {\n         return timePrecision;\n     }\n-    \n+\n     @Override\n     public Temporal temporal() {\n         return temporal;\n     }\n-    \n+\n     /**\n      * Static factory method for creating FHIRPathDateTimeValue instances from a {@link String} value\n-     * \n+     *\n      * @param text\n      *     the {@link String} value that is parsed into a {@link TemporalAccessor} date/time\n      * @return\n      *     a new FHIRPathDateTimeValue instance\n      */\n     public static FHIRPathDateTimeValue dateTimeValue(String text) {\n-        return FHIRPathDateTimeValue.builder(DATE_TIME_PARSER_FORMATTER.parseBest(text, ZonedDateTime::from, LocalDateTime::from, LocalDate::from, YearMonth::from, Year::from), getTimePrecision(text)).build();\n+//      return FHIRPathDateTimeValue.builder(PARSER_FORMATTER.parseBest(text, ZonedDateTime::from, LocalDateTime::from, LocalDate::from, YearMonth::from, Year::from), getTimePrecision(text)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTE4OTA4", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405918908", "createdAt": "2020-05-05T15:47:01Z", "commit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NzowMlrOGQvv0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NzowMlrOGQvv0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMjY4OQ==", "bodyText": "can we remove it?", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420212689", "createdAt": "2020-05-05T15:47:02Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/FHIRPathTimeValue.java", "diffHunk": "@@ -26,9 +26,9 @@\n /**\n  * A {@link FHIRPathTemporalValue} node that wraps a {@link LocalTime} value\n  */\n-public class FHIRPathTimeValue extends FHIRPathAbstractNode implements FHIRPathTemporalValue {    \n-    private static final DateTimeFormatter TIME_PARSER_FORMATTER = new DateTimeFormatterBuilder()\n-            .appendLiteral(\"T\")\n+public class FHIRPathTimeValue extends FHIRPathAbstractNode implements FHIRPathTemporalValue {\n+    public static final DateTimeFormatter PARSER_FORMATTER = new DateTimeFormatterBuilder()\n+//          .appendLiteral(\"T\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTIwNTA0", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405920504", "createdAt": "2020-05-05T15:48:42Z", "commit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0ODo0MlrOGQv0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0ODo0MlrOGQv0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMzkzNg==", "bodyText": "can we remove it?", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420213936", "createdAt": "2020-05-05T15:48:42Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1068,19 +1079,20 @@ private IllegalArgumentException unexpectedNumberOfArguments(int arity, String f\n         @Override\n         public Collection<FHIRPathNode> visitDateLiteral(FHIRPathParser.DateLiteralContext ctx) {\n             debug(ctx);\n-            return singleton(FHIRPathDateValue.dateValue(ctx.getText().substring(1)));\n+            return singleton(dateValue(ctx.getText().substring(1)));\n         }\n \n         @Override\n         public Collection<FHIRPathNode> visitDateTimeLiteral(FHIRPathParser.DateTimeLiteralContext ctx) {\n             debug(ctx);\n-            return singleton(FHIRPathDateTimeValue.dateTimeValue(ctx.getText().substring(1)));\n+            return singleton(dateTimeValue(ctx.getText().substring(1)));\n         }\n \n         @Override\n         public Collection<FHIRPathNode> visitTimeLiteral(FHIRPathParser.TimeLiteralContext ctx) {\n             debug(ctx);\n-            return singleton(FHIRPathTimeValue.timeValue(ctx.getText().substring(1)));\n+//          return singleton(timeValue(ctx.getText().substring(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "originalPosition": 163}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/f490171b3c2e67e2294fd42ae4fb1977062cb31f", "committedDate": "2020-05-05T16:09:21Z", "message": "Issue #1014 - updated per PR feedback\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQxNTM1", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405941535", "createdAt": "2020-05-05T16:11:33Z", "commit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxMTozM1rOGQw2kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxMTozM1rOGQw2kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDgwMw==", "bodyText": "should it support variations of those string units per the fhirpath spec", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420230803", "createdAt": "2020-05-05T16:11:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/util/FHIRPathUtil.java", "diffHunk": "@@ -415,6 +588,29 @@ public static TemporalAmount getTemporalAmount(FHIRPathQuantityValue quantityVal\n         }\n     }\n \n+    public static ChronoUnit getChronoUnit(String unit) {\n+        switch (unit) {\n+        case \"years\":\n+            return ChronoUnit.YEARS;\n+        case \"months\":\n+            return ChronoUnit.MONTHS;\n+        case \"weeks\":\n+            return ChronoUnit.WEEKS;\n+        case \"days\":\n+            return ChronoUnit.DAYS;\n+        case \"hours\":\n+            return ChronoUnit.HOURS;\n+        case \"minutes\":\n+            return ChronoUnit.MINUTES;\n+        case \"seconds\":\n+            return ChronoUnit.SECONDS;\n+        case \"milliseconds\":\n+            return ChronoUnit.MILLIS;\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported unit: \" + unit);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fdacce0a1d60e84c89227f91266496bc1afedb"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQzOTY1", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405943965", "createdAt": "2020-05-05T16:14:20Z", "commit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDoyMFrOGQw-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxNDoyMFrOGQw-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMjcxNg==", "bodyText": "javadoc?", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420232716", "createdAt": "2020-05-05T16:14:20Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/BetweenFunction.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.path.function;\n+\n+\n+import static com.ibm.fhir.path.FHIRPathQuantityValue.quantityValue;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.getChronoUnit;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.getString;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.getTemporalValue;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.hasTemporalValue;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.isStringValue;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.singleton;\n+\n+import java.math.BigDecimal;\n+import java.time.temporal.ChronoUnit;\n+import java.time.temporal.Temporal;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator.EvaluationContext;\n+\n+public class BetweenFunction extends FHIRPathAbstractFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQ5Mjk3", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405949297", "createdAt": "2020-05-05T16:20:40Z", "commit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMDo0MFrOGQxO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMDo0MFrOGQxO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzAyNg==", "bodyText": "could use some javadoc to further distinguish it from evaluatesToTrue;  this one would basically just say it returns true iff it convertsToBoolean and has a true value", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420237026", "createdAt": "2020-05-05T16:20:40Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/util/FHIRPathUtil.java", "diffHunk": "@@ -270,41 +302,166 @@ public static boolean hasQuantityValue(Collection<FHIRPathNode> nodes) {\n     }\n \n     public static boolean evaluatesToBoolean(Collection<FHIRPathNode> nodes) {\n-        return isTrue(nodes) || isFalse(nodes);\n+        return evaluatesToTrue(nodes) || isFalse(nodes);\n+    }\n+\n+    /**\n+     * Indicates whether the collection of nodes evaluates to a boolean per:\n+     * <a href=\"http://hl7.org/fhirpath/N1/index.html#singleton-evaluation-of-collections\">Singleton Evaluation of Collections</a>\n+     *\n+     * @param nodes\n+     *    the collection of nodes\n+     * @return\n+     *    true if the collection of nodes evaluates to a boolean, false otherwise\n+     */\n+    public static boolean evaluatesToTrue(Collection<FHIRPathNode> nodes) {\n+        if (convertsToBoolean(nodes)) {\n+            return toBoolean(nodes) == true;\n+        }\n+        return isSingleton(nodes);\n     }\n \n     public static boolean isTrue(Collection<FHIRPathNode> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTQ5OTI5", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405949929", "createdAt": "2020-05-05T16:21:25Z", "commit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMToyNVrOGQxQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMToyNVrOGQxQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzUzNw==", "bodyText": "maybe some javadoc here with a link to explain that returns true if the value can be implicitly or explicitly converted to a boolean as of that table in the spec", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420237537", "createdAt": "2020-05-05T16:21:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/util/FHIRPathUtil.java", "diffHunk": "@@ -270,41 +302,166 @@ public static boolean hasQuantityValue(Collection<FHIRPathNode> nodes) {\n     }\n \n     public static boolean evaluatesToBoolean(Collection<FHIRPathNode> nodes) {\n-        return isTrue(nodes) || isFalse(nodes);\n+        return evaluatesToTrue(nodes) || isFalse(nodes);\n+    }\n+\n+    /**\n+     * Indicates whether the collection of nodes evaluates to a boolean per:\n+     * <a href=\"http://hl7.org/fhirpath/N1/index.html#singleton-evaluation-of-collections\">Singleton Evaluation of Collections</a>\n+     *\n+     * @param nodes\n+     *    the collection of nodes\n+     * @return\n+     *    true if the collection of nodes evaluates to a boolean, false otherwise\n+     */\n+    public static boolean evaluatesToTrue(Collection<FHIRPathNode> nodes) {\n+        if (convertsToBoolean(nodes)) {\n+            return toBoolean(nodes) == true;\n+        }\n+        return isSingleton(nodes);\n     }\n \n     public static boolean isTrue(Collection<FHIRPathNode> nodes) {\n+        return convertsToBoolean(nodes) && toBoolean(nodes) == true;\n+    }\n+\n+    public static boolean isFalse(Collection<FHIRPathNode> nodes) {\n+        return convertsToBoolean(nodes) && toBoolean(nodes) == false;\n+    }\n+\n+    public static boolean convertsToBoolean(Collection<FHIRPathNode> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTU0MjY2", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-405954266", "createdAt": "2020-05-05T16:26:37Z", "commit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyNjozN1rOGQxeUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyNjozN1rOGQxeUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDk3OQ==", "bodyText": "could use TestNG expectedExceptions, but this is fine", "url": "https://github.com/IBM/FHIR/pull/1023#discussion_r420240979", "createdAt": "2020-05-05T16:26:37Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/test/java/com/ibm/fhir/path/test/BetweenFunctionTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.path.test;\n+\n+import static com.ibm.fhir.path.FHIRPathQuantityValue.quantityValue;\n+import static com.ibm.fhir.path.util.FHIRPathUtil.getQuantityValue;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import java.math.BigDecimal;\n+import java.time.DateTimeException;\n+import java.util.Collection;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.resource.Patient;\n+import com.ibm.fhir.model.type.Date;\n+import com.ibm.fhir.path.FHIRPathNode;\n+import com.ibm.fhir.path.evaluator.FHIRPathEvaluator;\n+import com.ibm.fhir.path.exception.FHIRPathException;\n+\n+public class BetweenFunctionTest {\n+    @Test\n+    public void testBetweenFunction1() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@1970-01-01, @2020-01-01, 'years')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(50), \"years\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction2() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@1970-01-01, @2020-01-01, 'months')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(600), \"months\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction3() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@1970-01-01, @2020-01-01, 'weeks')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(2608), \"weeks\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction4() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@1970-01-01, @2020-01-01, 'days')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(18262), \"days\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction5() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@T00:00:00.000, @T12:34:56.789, 'hours')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(12), \"hours\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction6() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@T00:00:00.000, @T12:34:56.789, 'minutes')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(754), \"minutes\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction7() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@T00:00:00.000, @T12:34:56.789, 'seconds')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(45296), \"seconds\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction8() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@T00:00:00.000, @T12:34:56.789, 'milliseconds')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(45296789), \"milliseconds\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction9() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@2020-01-01, @1970-01-01, 'years')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(-50), \"years\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction10() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        Collection<FHIRPathNode> result = evaluator.evaluate(\"between(@1970-01-01, @2020-01-01T00:00:00Z, 'years')\");\n+        assertEquals(getQuantityValue(result), quantityValue(new BigDecimal(50), \"years\"));\n+    }\n+\n+    @Test\n+    public void testBetweenFunction11() throws Exception {\n+        FHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\n+        try {\n+            evaluator.evaluate(\"between(@1970-01-01T00:00:00Z, @2020-01-01, 'years')\");\n+            fail();\n+        } catch (Exception e) {\n+            assertTrue(e instanceof FHIRPathException);\n+            assertTrue(e.getCause() instanceof DateTimeException);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f490171b3c2e67e2294fd42ae4fb1977062cb31f"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20cfebb0e4a044828576ca780948902241774a44", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/20cfebb0e4a044828576ca780948902241774a44", "committedDate": "2020-05-05T16:33:11Z", "message": "Issue #1014 - added Javadoc per PR feedback\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a3ddb75694d295b233efe6cb73bb2cdcf1528b", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/f5a3ddb75694d295b233efe6cb73bb2cdcf1528b", "committedDate": "2020-05-06T17:34:24Z", "message": "Issue #1014 - refactor of isComparableTo, compareTo and equals methods\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6d79adf640e759d2f21d7b565c0887110a3683", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/ab6d79adf640e759d2f21d7b565c0887110a3683", "committedDate": "2020-05-06T17:56:54Z", "message": "Issue #1014 - minor tweak\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODY5NjAy", "url": "https://github.com/IBM/FHIR/pull/1023#pullrequestreview-406869602", "createdAt": "2020-05-06T18:16:13Z", "commit": {"oid": "ab6d79adf640e759d2f21d7b565c0887110a3683"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89557181c43de55122f9f7cc57f9ac6a26b9711f", "author": {"user": {"login": "JohnTimm", "name": "John T.E. Timm"}}, "url": "https://github.com/IBM/FHIR/commit/89557181c43de55122f9f7cc57f9ac6a26b9711f", "committedDate": "2020-05-06T18:21:56Z", "message": "Issue #1014 - reverted changes to test suite\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 436, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}