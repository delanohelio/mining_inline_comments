{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NjMzMzQ1", "number": 710, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0OVrODiuHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozNDoyNFrODiuXlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzMzNzk4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0OVrOFuH9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0OVrOFuH9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTE5MA==", "bodyText": "small suggestion here, LOW HIGH and match the common pattern for Java constants.", "url": "https://github.com/IBM/FHIR/pull/710#discussion_r383909190", "createdAt": "2020-02-25T14:23:49Z", "author": {"login": "prb112"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java", "diffHunk": "@@ -30,8 +30,8 @@\n     public static final String CODE = \"CODE\";\n     public static final String NUMBER_VALUE = \"NUMBER_VALUE\";\n     public static final String QUANTITY_VALUE = \"QUANTITY_VALUE\";\n-    public static final String QUANTITY_VALUE_LOW = \"QUANTITY_VALUE_LOW\";\n-    public static final String QUANTITY_VALUE_HIGH = \"QUANTITY_VALUE_HIGH\";\n+    public static final String _LOW = \"_LOW\";\n+    public static final String _HIGH = \"_HIGH\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60b1e76badb0d8a1634cf2d923df79b7b456b3c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzM3NDg5OnYy", "diffSide": "LEFT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchNumberTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozMzoyMFrOFuIUTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozMzoyMFrOFuIUTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNTA4NA==", "bodyText": "I'm almost positive we've discussed this... this one is checking range? if so, this makes sense", "url": "https://github.com/IBM/FHIR/pull/710#discussion_r383915084", "createdAt": "2020-02-25T14:33:20Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchNumberTest.java", "diffHunk": "@@ -193,8 +193,8 @@ public void testSearchNumber_decimal() throws Exception {\n         assertSearchDoesntReturnSavedResource(\"decimal\", \"lt99\");\n         assertSearchDoesntReturnSavedResource(\"decimal\", \"lt99.98499\");\n         assertSearchDoesntReturnSavedResource(\"decimal\", \"lt99.985\");\n-        assertSearchDoesntReturnSavedResource(\"decimal\", \"lt99.99\");\n-        assertSearchDoesntReturnSavedResource(\"decimal\", \"lt9999e-2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60b1e76badb0d8a1634cf2d923df79b7b456b3c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzM3ODc4OnYy", "diffSide": "RIGHT", "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchNumberTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozNDoyNFrOFuIWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozNDoyNFrOFuIWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNTY4NQ==", "bodyText": "let's discuss this one... (and the one below, just so I can understand)", "url": "https://github.com/IBM/FHIR/pull/710#discussion_r383915685", "createdAt": "2020-02-25T14:34:24Z", "author": {"login": "prb112"}, "path": "fhir-persistence/src/test/java/com/ibm/fhir/persistence/search/test/AbstractSearchNumberTest.java", "diffHunk": "@@ -223,13 +223,16 @@ public void testSearchNumber_decimal() throws Exception {\n         assertSearchReturnsSavedResource(\"decimal\", \"ge99.985\");\n         assertSearchReturnsSavedResource(\"decimal\", \"ge99.99\");\n         assertSearchReturnsSavedResource(\"decimal\", \"ge9999e-2\");\n-        assertSearchDoesntReturnSavedResource(\"decimal\", \"ge99.99499\");\n-        assertSearchDoesntReturnSavedResource(\"decimal\", \"ge99.995\");\n+        assertSearchReturnsSavedResource(\"decimal\", \"ge99.99499\");\n+        // We need to track whether the high is inclusive or not to get this right\n+        // For decimals, the high is exclusive, but for Range the high is inclusive\n+//        assertSearchDoesntReturnSavedResource(\"decimal\", \"ge99.995\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60b1e76badb0d8a1634cf2d923df79b7b456b3c"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}