{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Njg2MDU0", "number": 1345, "title": "issue #1341 use larger cache for identity sequences in Db2", "bodyText": "Addresses Db2 performance concerns with high concurrency causing contention on sequences used to support parameter table row_id identity columns.\nClosing #1341.", "createdAt": "2020-07-21T18:54:41Z", "url": "https://github.com/IBM/FHIR/pull/1345", "merged": true, "mergeCommit": {"oid": "f13b31e03463df12ad4167bbef741359e4a94874"}, "closed": true, "closedAt": "2020-07-21T20:08:38Z", "author": {"login": "punktilious"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3KophAH2gAyNDU0Njg2MDU0OjMwOGNkOTUyMzMwYTE5NGY2MjRmN2U4MDAwMjgwYTJiNDQ2ZDVlZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3Luv2AFqTQ1Mjc3OTk5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "308cd952330a194f624f7e8000280a2b446d5eff", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/308cd952330a194f624f7e8000280a2b446d5eff", "committedDate": "2020-07-21T18:35:22Z", "message": "issue #1341 use larger cache for identity sequences\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/bc3aa6a9219003bfe97037af65a08e378d1cdeba", "committedDate": "2020-07-21T18:36:42Z", "message": "Merge remote-tracking branch 'origin/master' into issue-1327c"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzQzNDc0", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452743474", "createdAt": "2020-07-21T18:57:31Z", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozMVrOG1Fofg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozMVrOG1Fofg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTk5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // modify the CACHE property of the identity column\n          \n          \n            \n                    final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n          \n      \n    \n    \n  \n\nIf not supported, shouldn't this be removed?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458319998", "createdAt": "2020-07-21T18:57:31Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzQzNzQ0", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452743744", "createdAt": "2020-07-21T18:57:53Z", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1Nzo1M1rOG1FpSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1Nzo1M1rOG1FpSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nextra whitespace", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458320201", "createdAt": "2020-07-21T18:57:53Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -228,6 +228,20 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         dropSequence(schemaName, sequenceName);\n         createSequence(schemaName, sequenceName, restartWith, cache);\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by Derby\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in Derby: \" + ddl);\n+    }\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzQ0MDg3", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452744087", "createdAt": "2020-07-21T18:58:20Z", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1ODoyMFrOG1FqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1ODoyMFrOG1FqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDQ1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nextra whitespace", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458320451", "createdAt": "2020-07-21T18:58:20Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/CommonDatabaseAdapter.java", "diffHunk": "@@ -549,6 +549,21 @@ public void alterSequenceRestartWith(String schemaName, String sequenceName, lon\n         runStatement(ddl);\n     }\n \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Check input strings are clean\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+        \n+        // so important, we log it\n+        logger.info(ddl);\n+        \n+        runStatement(ddl);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzQ2MTY0", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452746164", "createdAt": "2020-07-21T19:01:14Z", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMToxNVrOG1Fwlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMToxNVrOG1Fwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjA3MA==", "bodyText": "What do the above two methods do? Shouldn't these just be logged out?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458322070", "createdAt": "2020-07-21T19:01:15Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/AlterTableIdentityCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n+\n+/**\n+ * Modify an existing sequence to start with a higher value\n+ */\n+public class AlterTableIdentityCache extends BaseObject {\n+    private final String columnName;\n+    \n+    // caching sequence values for tuning\n+    private final int cache;\n+\n+    /**\n+     * Public constructor\n+     * \n+     * @param schemaName\n+     * @param sequenceName\n+     * @param version\n+     * @param startWith\n+     * @param cache\n+     */\n+    public AlterTableIdentityCache(String schemaName, String tableName, String columnName, int cache, int version) {\n+        super(schemaName, tableName, DatabaseObjectType.SEQUENCE, version);\n+        this.columnName = columnName;\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getTypeNameVersion() {\n+        // There's typically only one identity column on a table, but we still\n+        // want to qualify the name with the column just to make sure it's unique\n+        return getObjectType().name() + \":\" + getQualifiedName() + \".\" + this.columnName + \":\" + this.version;\n+        \n+    }\n+\n+    @Override\n+    public void apply(IDatabaseAdapter target) {\n+        target.alterTableColumnIdentityCache(getSchemaName(), getObjectName(), this.columnName, this.cache);\n+    }\n+\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        apply(target);\n+    }\n+\n+    @Override\n+    public void drop(IDatabaseAdapter target) {\n+        target.dropSequence(getSchemaName(), getObjectName());\n+    }\n+\n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantSequencePrivileges(getSchemaName(), getObjectName(), group, toUser);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzQ2NjM4", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452746638", "createdAt": "2020-07-21T19:01:57Z", "commit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTo1OFrOG1FyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTo1OFrOG1FyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjQ0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                    final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n          \n          \n            \n                    DataDefinitionUtil.assertValidName(columnName);\n          \n          \n            \n                    \n          \n          \n            \n                    // modify the CACHE property of the identity column\n          \n          \n            \n                    final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n          \n      \n    \n    \n  \n\nWhy generate the string?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458322445", "createdAt": "2020-07-21T19:01:58Z", "author": {"login": "prb112"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3aa6a9219003bfe97037af65a08e378d1cdeba"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/71cbdcd3224db96c3cc873f278c950529b483036", "committedDate": "2020-07-21T19:27:32Z", "message": "issue #1341 addresses review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzY3ODA0", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452767804", "createdAt": "2020-07-21T19:33:28Z", "commit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzc5OTk4", "url": "https://github.com/IBM/FHIR/pull/1345#pullrequestreview-452779998", "createdAt": "2020-07-21T19:51:55Z", "commit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MTo1NVrOG1HZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1MTo1NVrOG1HZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0ODg0Mg==", "bodyText": "is there a way to support it in PostgreSQL?\ndo we think we won't have the problem there?", "url": "https://github.com/IBM/FHIR/pull/1345#discussion_r458348842", "createdAt": "2020-07-21T19:51:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/postgresql/PostgreSqlAdapter.java", "diffHunk": "@@ -367,4 +368,17 @@ public void setIntegrityUnchecked(String schemaName, String tableName) {\n         // not expecting this to be called for this adapter\n         throw new UnsupportedOperationException(\"Set integrity unchecked not supported for this adapter.\");\n     }\n+    \n+    @Override\n+    public void alterTableColumnIdentityCache(String schemaName, String tableName, String columnName, int cache) {\n+        // Not supported by PostgreSQL\n+        \n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        DataDefinitionUtil.assertValidName(columnName);\n+        \n+        // modify the CACHE property of the identity column\n+        final String ddl = \"ALTER TABLE \" + qname + \" ALTER COLUMN \" + columnName + \" SET CACHE \" + cache;\n+\n+        warnOnce(MessageKey.ALTER_TABLE_SEQ_CACHE, \"Not supported in PostgreSQL: \" + ddl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71cbdcd3224db96c3cc873f278c950529b483036"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1353, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}