{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDQxMTI5", "number": 803, "title": "issue #786 #787 #807 BulkimportJob enhancements", "bodyText": "(1) changed to use nano time instead of system.currentmillise when calculating job duration.\n(2) Enhanced COSFileBreaker tool to be able to get certain number of distinct FHIR resources from COS object, using the generated files with distinct resource IDs in the multiple javabatch job partitions can avoid the deadlock issue.\n(3) added FHIR resource validation support to bulkimportjob.", "createdAt": "2020-03-17T19:45:03Z", "url": "https://github.com/IBM/FHIR/pull/803", "merged": true, "mergeCommit": {"oid": "e102db1c0d7dd52ceacb87a38e9c47cd80d57795"}, "closed": true, "closedAt": "2020-03-18T19:08:17Z", "author": {"login": "albertwang-ibm"}, "timelineItems": {"totalCount": 92, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNHMIYgH2gAyMzkwMDQxMTI5OmFiOTkxMTZmYzZiNjU3NGE1MWMwNDViMmU0MDljMGFmYWE5ODQ0MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO7qffAFqTM3NzEzMjgxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab99116fc6b6574a51c045b2e409c0afaa984422", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/ab99116fc6b6574a51c045b2e409c0afaa984422", "committedDate": "2020-03-13T02:49:41Z", "message": "Merge pull request #780 from IBM/issue-673\n\nIssue 673"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0351c61e9c3a621cef347ddca9b4b0c9c21ac0fb", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/0351c61e9c3a621cef347ddca9b4b0c9c21ac0fb", "committedDate": "2020-03-16T14:35:42Z", "message": "Merge pull request #790 from IBM/issue-787\n\nIssue 787"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74464284a5c8815ed06c0f2b80cfda2f1a30a49", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f74464284a5c8815ed06c0f2b80cfda2f1a30a49", "committedDate": "2020-03-17T13:43:13Z", "message": "Merge pull request #798 from IBM/issue-787\n\nIssue 787"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9de09e03d9e7fd267edb90bb2c6d78439a754b", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/4c9de09e03d9e7fd267edb90bb2c6d78439a754b", "committedDate": "2020-03-17T19:43:29Z", "message": "issue #786 job duration fix\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d675321e062efdf4296e0551a92e044501c9a7a4", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/d675321e062efdf4296e0551a92e044501c9a7a4", "committedDate": "2020-03-17T23:11:00Z", "message": "issue #787 Enhance COSBreaker to get fhir resources with distinct IDs\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee48ae35b95aad84c67efd2dd909f63f68083f0", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/eee48ae35b95aad84c67efd2dd909f63f68083f0", "committedDate": "2020-03-18T02:53:15Z", "message": "issue #807 Add resource validation support to ImportJob\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "committedDate": "2020-03-18T02:54:54Z", "message": "issue #807 resource validation support\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzkyMDM2", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376792036", "createdAt": "2020-03-18T11:53:00Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1MzowMFrOF4Bkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1MzowMFrOF4Bkmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.fine(\"Validation warnings for input resource: \" + info);\n          \n          \n            \n                                logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n          \n      \n    \n    \n  \n\nI suggest adding a delimiter", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290330", "createdAt": "2020-03-18T11:53:00Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzkyNzQ0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376792744", "createdAt": "2020-03-18T11:54:09Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDowOVrOF4Bm7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDowOVrOF4Bm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDkyNw==", "bodyText": "needless nesting of else and if,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (logger.isLoggable(Level.FINE)) {\n          \n          \n            \n                        } else if (logger.isLoggable(Level.FINE)) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290927", "createdAt": "2020-03-18T11:54:09Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzkyODU0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376792854", "createdAt": "2020-03-18T11:54:19Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDoxOVrOF4BnQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NDoxOVrOF4BnQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394291011", "createdAt": "2020-03-18T11:54:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk0MjEz", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376794213", "createdAt": "2020-03-18T11:56:29Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NjoyOVrOF4Brrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NjoyOVrOF4Brrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg==", "bodyText": "please update the documentation to explain the new value", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292142", "createdAt": "2020-03-18T11:56:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -45,6 +45,7 @@\n     public static final String IMPORT_PARTITTION_WORKITEM = \"import.partiton.workitem\";\n     public static final String IMPORT_PARTITTION_RESOURCE_TYPE = \"import.partiton.resourcetype\";\n     public static final String IMPORT_FHIR_STORAGE_TYPE = \"import.fhir.storagetype\";\n+    public static final String IMPORT_FHIR_IS_VALIDATION_ON = \"import.fhir.validation\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk0OTMw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376794930", "createdAt": "2020-03-18T11:57:36Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NzozNlrOF4Bt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1NzozNlrOF4Bt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ==", "bodyText": "what is unchecked below?", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292729", "createdAt": "2020-03-18T11:57:36Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk1NTYy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376795562", "createdAt": "2020-03-18T11:58:38Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1ODozOFrOF4BwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1ODozOFrOF4BwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MzI2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n          \n            \n                        isValidationOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n      \n    \n    \n  \n\nspelling", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394293266", "createdAt": "2020-03-18T11:58:38Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n+        boolean isValidtionOn = false;\n+        if (fhirValidation != null) {\n+            isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk3MzE0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376797314", "createdAt": "2020-03-18T12:01:18Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMToxOFrOF4B1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMToxOFrOF4B1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ==", "bodyText": "if this is a constant, it'll always be true or false... put this on the same line as line 149, and combine the logic with an AND (which is what it's doing)", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394294629", "createdAt": "2020-03-18T12:01:18Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk3ODQ2", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376797846", "createdAt": "2020-03-18T12:02:04Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjowNFrOF4B28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjowNFrOF4B28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTAyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n          \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStreamForImportError());\n          \n      \n    \n    \n  \n\nplease dont use 4", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295026", "createdAt": "2020-03-18T12:02:04Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk4MDMw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376798030", "createdAt": "2020-03-18T12:02:21Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjoyMVrOF4B3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMjoyMVrOF4B3fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTE2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n          \n          \n            \n                                    chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295165", "createdAt": "2020-03-18T12:02:21Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk5NDY2", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376799466", "createdAt": "2020-03-18T12:04:29Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDoyOVrOF4B7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDoyOVrOF4B7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng==", "bodyText": "Not if you want Milliseconds, you can just pass the unit into java.time\nTimeUnit.NANOSECONDS.toMillis(VALUE);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296246", "createdAt": "2020-03-18T12:04:29Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -44,7 +49,7 @@ public void afterJob() {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - jobExecution.getStartTime().getTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk5ODAz", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376799803", "createdAt": "2020-03-18T12:04:59Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDo1OVrOF4B8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNDo1OVrOF4B8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw==", "bodyText": "best to use TimeUnit, you get someone else to do these conversions.", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296517", "createdAt": "2020-03-18T12:04:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -29,9 +35,15 @@\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n+    /**\n+     * The number of nanoseconds in a second.\n+     */\n+    private static final double NANOS = 1000 * Constants.NANOMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Nzk5OTY5", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376799969", "createdAt": "2020-03-18T12:05:13Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNToxM1rOF4B9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNToxM1rOF4B9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjYzNw==", "bodyText": "please change 2 to To", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296637", "createdAt": "2020-03-18T12:05:13Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -68,25 +80,45 @@\n      */\n     private static String cosFile2Break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAwMTU1", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376800155", "createdAt": "2020-03-18T12:05:30Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTozMVrOF4B93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTozMVrOF4B93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc5Nw==", "bodyText": "Change to To", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296797", "createdAt": "2020-03-18T12:05:31Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -135,7 +167,7 @@ public void parseArgs(String[] args) {\n                     cosCredentialIbm = args[i];\n                 }\n                 else {\n-                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm(Y/N) argument at posn: \" + i);\n                 }\n                 break;\n             case \"--cosFile2Break\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAwNDIw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376800420", "createdAt": "2020-03-18T12:05:54Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTo1NFrOF4B-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNTo1NFrOF4B-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ==", "bodyText": "best to leave these parameters as lower case and not mixed case", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297015", "createdAt": "2020-03-18T12:05:54Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -154,6 +194,14 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n                 }\n                 break;\n+            case \"--numberOfTotalResources\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAwNTQ0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376800544", "createdAt": "2020-03-18T12:06:06Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjowN1rOF4B_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjowN1rOF4B_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzA5OQ==", "bodyText": "change 4 to for", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297099", "createdAt": "2020-03-18T12:06:07Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAwNjkw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376800690", "createdAt": "2020-03-18T12:06:19Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjoyMFrOF4B_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNjoyMFrOF4B_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzE5OQ==", "bodyText": "use the diamond operator\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<String>();\n          \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<>();", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297199", "createdAt": "2020-03-18T12:06:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAxMzM4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376801338", "createdAt": "2020-03-18T12:07:19Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzoyMFrOF4CBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzoyMFrOF4CBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg==", "bodyText": "If you are splitting resources into separate files, how do you ensure that the same resource or ID is in the same file?", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297712", "createdAt": "2020-03-18T12:07:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAxNzAx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376801701", "createdAt": "2020-03-18T12:07:50Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzo1MFrOF4CCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowNzo1MFrOF4CCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA==", "bodyText": "should still wrap this in a try-catch-close", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298008", "createdAt": "2020-03-18T12:07:50Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 258}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAxOTAy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376801902", "createdAt": "2020-03-18T12:08:09Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODoxMFrOF4CDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODoxMFrOF4CDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {\n          \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numForSeg, isSegBySize)) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298206", "createdAt": "2020-03-18T12:08:10Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+                       } catch (Exception ioe) {\n+                           throw ioe;\n+                       }\n+                    num4Seg = totalNum/numberOfFiles;\n+                }\n+            }\n \n             item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             try (S3ObjectInputStream s3InStream = item.getObjectContent();\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+                if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 283}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAyMjkx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376802291", "createdAt": "2020-03-18T12:08:44Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODo0NFrOF4CEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowODo0NFrOF4CEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODUyMQ==", "bodyText": "line spacing looks strange, please check spacing", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298521", "createdAt": "2020-03-18T12:08:44Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAyNDgw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376802480", "createdAt": "2020-03-18T12:09:01Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOTowMVrOF4CFGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOTowMVrOF4CFGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODY0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        long num4Seg;\n          \n          \n            \n                        long numForSeg;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298649", "createdAt": "2020-03-18T12:09:01Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAyNTk0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376802594", "createdAt": "2020-03-18T12:09:12Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToxMlrOF4CFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToxMlrOF4CFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    isMore2Read = false;\n          \n          \n            \n                                    isMoreToRead = false;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298730", "createdAt": "2020-03-18T12:09:12Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                    || (segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                    || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                    || !isMore2Read) {\n+                String segName = cosFile2Break + \"_seg\" + segNum;\n+                if (uploadId == null) {\n+                    uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                }\n \n-                    if (bufferStream.size() > 0) {\n-                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n-                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n-                        bufferStream.reset();\n-                    }\n+                if (bufferStream.size() > 0) {\n+                    dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                            new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                    bufferStream.reset();\n+                }\n \n-                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n-                            || !isMore2Read) {\n-                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n-                        logger.info(\"Finished writting for \" + segName);\n-                        lineRed = 0;\n-                        segNum++;\n-                        uploadId = null;\n-                        partNum = 1;\n-                        dataPackTags.clear();\n+                if ((segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                        || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                        || !isMore2Read) {\n+                    BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                    logger.info(\"Finished writting for \" + segName);\n+                    lineRed = 0;\n+                    segNum++;\n+                    if (segNum == numberOfFiles && isMore2Read) {\n+                        isMore2Read = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAyNzk4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376802798", "createdAt": "2020-03-18T12:09:28Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToyOFrOF4CF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOToyOFrOF4CF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODg3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean isMore2Read = true;\n          \n          \n            \n                    boolean isMoreToRead = true;", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298873", "createdAt": "2020-03-18T12:09:28Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODAzMjcx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376803271", "createdAt": "2020-03-18T12:10:13Z", "commit": {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "committedDate": "2020-03-18T13:20:32Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edd7ffe0c1e9c9f51bdbed8c002ad3100f50369", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/4edd7ffe0c1e9c9f51bdbed8c002ad3100f50369", "committedDate": "2020-03-18T13:21:18Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e6ef881c4e7bd8b7f9773c66e8ea65a7578fb42", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/2e6ef881c4e7bd8b7f9773c66e8ea65a7578fb42", "committedDate": "2020-03-18T13:21:31Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "committedDate": "2020-03-18T13:23:08Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9243febd91c4d4881710545ab849c27529dcb1", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/4b9243febd91c4d4881710545ab849c27529dcb1", "committedDate": "2020-03-18T13:24:13Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c3610113b097a80487849bbfbe0129275994f6", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a8c3610113b097a80487849bbfbe0129275994f6", "committedDate": "2020-03-18T13:24:37Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0358e64c27f4abe93cc358814a724a0543d13987", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/0358e64c27f4abe93cc358814a724a0543d13987", "committedDate": "2020-03-18T13:26:44Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60a542458c50f241095c1687e016bd0969d4957f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/60a542458c50f241095c1687e016bd0969d4957f", "committedDate": "2020-03-18T13:30:47Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a7b9e9cb86e97c2e4682db3a797a586e17d64a", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a7a7b9e9cb86e97c2e4682db3a797a586e17d64a", "committedDate": "2020-03-18T13:31:01Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/4898f7808d673b85073d8f2ed327280f6e37f6a9", "committedDate": "2020-03-18T13:31:16Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d", "committedDate": "2020-03-18T13:31:43Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODg4MTA0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-376888104", "createdAt": "2020-03-18T13:58:33Z", "commit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1ODozM1rOF4GLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1ODozM1rOF4GLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ==", "bodyText": "line 141, please change objResJasonList to objResJsonList", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394365759", "createdAt": "2020-03-18T13:58:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2adfd5626995d80e358dea026221d0a769a3379", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/e2adfd5626995d80e358dea026221d0a769a3379", "committedDate": "2020-03-18T15:48:26Z", "message": "issue #786 #787 #807 changes per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/5508aaf04552708d6dfa13237b83eadff19c9a2c", "committedDate": "2020-03-18T15:54:22Z", "message": "issue #786 fix a typo error\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDQ0MDYy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377044062", "createdAt": "2020-03-18T16:40:19Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo0MDoxOVrOF4NoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo0MDoxOVrOF4NoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ==", "bodyText": "this is used", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394487825", "createdAt": "2020-03-18T16:40:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU2OTY2", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377056966", "createdAt": "2020-03-18T16:55:00Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NTowMFrOF4OPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NTowMFrOF4OPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Nzk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } catch (FHIRValidationException|FHIROperationException e) {\n          \n          \n            \n                            } catch (FHIRValidationException | FHIROperationException e) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394497970", "createdAt": "2020-03-18T16:55:00Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -137,26 +151,34 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         // This doesn't really start the transaction, because the transaction has already been started by the JavaBatch\n         // framework at this time point.\n         txn.enroll();\n-        for (Object objResJasonList : arg0) {\n-            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+        for (Object objResJsonList : arg0) {\n+            @SuppressWarnings(\"unchecked\")\n+            List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidationOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        if (operationOutcome != null) {\n-                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStream4Import());\n-                            chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n-                        }\n+                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU4NDU1", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377058455", "createdAt": "2020-03-18T16:56:47Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Njo0N1rOF4OUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Njo0N1rOF4OUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTE2Nw==", "bodyText": "pushImportOperationOutcomes2COS ?\nis this the right log 2 COS??", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499167", "createdAt": "2020-03-18T16:56:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU4NzAx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377058701", "createdAt": "2020-03-18T16:57:05Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzowNlrOF4OVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzowNlrOF4OVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n          \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNumForOperationOutcomes(chunkData.getPartNumForOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499360", "createdAt": "2020-03-18T16:57:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU4OTIz", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377058923", "createdAt": "2020-03-18T16:57:20Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzoyMFrOF4OV1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzoyMFrOF4OV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n          \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNumForOperationOutcomes()));", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499541", "createdAt": "2020-03-18T16:57:20Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU5MTM4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377059138", "createdAt": "2020-03-18T16:57:37Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzozN1rOF4OWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NzozN1rOF4OWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n          \n          \n            \n                        if (chunkData.getUploadIdForFailureOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499713", "createdAt": "2020-03-18T16:57:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU5Mjg3", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377059287", "createdAt": "2020-03-18T16:57:47Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo0N1rOF4OW5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo0N1rOF4OW5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTgxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                            chunkData.setUploadIdForFailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499814", "createdAt": "2020-03-18T16:57:47Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU5NDg4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377059488", "createdAt": "2020-03-18T16:57:59Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo1OVrOF4OXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Nzo1OVrOF4OXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTk4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                chunkData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499984", "createdAt": "2020-03-18T16:57:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDU5OTgy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377059982", "createdAt": "2020-03-18T16:58:33Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODozM1rOF4OZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODozM1rOF4OZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDM4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n          \n          \n            \n                            logger.fine(\"pushImportOperationOutcomesToCOS: \" + chunkData.getBufferStreamForImport().size()", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500381", "createdAt": "2020-03-18T16:58:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYwMjEw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377060210", "createdAt": "2020-03-18T16:58:49Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0OVrOF4OZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0OVrOF4OZzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueIDForImportFailureOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500558", "createdAt": "2020-03-18T16:58:49Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYwNDM4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377060438", "createdAt": "2020-03-18T16:59:03Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTowM1rOF4Oacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTowM1rOF4Oacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDcyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                        chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500722", "createdAt": "2020-03-18T16:59:03Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n+                    chunkData.getBufferStreamForImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n             chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYxMjUw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377061250", "createdAt": "2020-03-18T16:59:57Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1N1rOF4Oc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1N1rOF4Oc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeUnit time = TimeUnit.NANOSECONDS;\n          \n          \n            \n                \n          \n      \n    \n    \n  \n\nNo need to cache this at all.   put it in line on 37", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501354", "createdAt": "2020-03-18T16:59:57Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -19,6 +20,9 @@\n \n public class ImportJobListener implements JobListener {\n     private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n+    private TimeUnit time = TimeUnit.NANOSECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYxNjUy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377061652", "createdAt": "2020-03-18T17:00:25Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDoyNVrOF4OeLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDoyNVrOF4OeLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTY3OQ==", "bodyText": "call TimeUnit directly", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501679", "createdAt": "2020-03-18T17:00:25Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -85,6 +89,7 @@ public void afterJob() {\n \n     @Override\n     public void beforeJob() {\n+        currentExecutionStartTimeInMS = time.toMillis(System.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYxODEx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377061811", "createdAt": "2020-03-18T17:00:37Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDozN1rOF4Oexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDozN1rOF4Oexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501830", "createdAt": "2020-03-18T17:00:37Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n-                            partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n+                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYxOTM4", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377061938", "createdAt": "2020-03-18T17:00:46Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo0NlrOF4OfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo0NlrOF4OfHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n          \n          \n            \n                                partitionSummaryData.getDataPacksForOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501917", "createdAt": "2020-03-18T17:00:46Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYyMTQw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377062140", "createdAt": "2020-03-18T17:00:59Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo1OVrOF4OfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMDo1OVrOF4OfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjA3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502076", "createdAt": "2020-03-18T17:00:59Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYyMzQx", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377062341", "createdAt": "2020-03-18T17:01:15Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMToxNVrOF4OgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMToxNVrOF4OgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjIzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502237", "createdAt": "2020-03-18T17:01:15Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYyNTcw", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377062570", "createdAt": "2020-03-18T17:01:33Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTozM1rOF4OhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTozM1rOF4OhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                                    partitionSummaryData.setUploadIdForOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502424", "createdAt": "2020-03-18T17:01:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYyNzU0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377062754", "createdAt": "2020-03-18T17:01:47Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTo0OFrOF4Ohsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMTo0OFrOF4Ohsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n          \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502578", "createdAt": "2020-03-18T17:01:48Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYzMDEz", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377063013", "createdAt": "2020-03-18T17:02:06Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjowNlrOF4OiXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjowNlrOF4OiXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjc1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502750", "createdAt": "2020-03-18T17:02:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYzMTc3", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377063177", "createdAt": "2020-03-18T17:02:19Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjoxOVrOF4Oi9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjoxOVrOF4Oi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjkwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502902", "createdAt": "2020-03-18T17:02:19Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYzMzU0", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377063354", "createdAt": "2020-03-18T17:02:33Z", "commit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjozM1rOF4OjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzowMjozM1rOF4OjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n          \n          \n            \n                            if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394503065", "createdAt": "2020-03-18T17:02:33Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n                 if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73164d8c7358eb623d41f0cff56fe5108bf0f42a", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/73164d8c7358eb623d41f0cff56fe5108bf0f42a", "committedDate": "2020-03-18T17:06:54Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57011bf394333ddda183c260d2b864235fb4ad14", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/57011bf394333ddda183c260d2b864235fb4ad14", "committedDate": "2020-03-18T17:07:11Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add1749e5f541e9e6715ab2137311c3c11e11528", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/add1749e5f541e9e6715ab2137311c3c11e11528", "committedDate": "2020-03-18T17:07:26Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/2a3ae605d75049a9fc51d95a41b9f3745189672f", "committedDate": "2020-03-18T17:07:44Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d62266aace9e02fbed1f1e4f4de5707cb6aebd", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/92d62266aace9e02fbed1f1e4f4de5707cb6aebd", "committedDate": "2020-03-18T17:08:01Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f68824cdee18216fe9881273b5c4abfde11ee64", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/2f68824cdee18216fe9881273b5c4abfde11ee64", "committedDate": "2020-03-18T17:08:52Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfeedce97269aca23509faa69a391c98cd779381", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/dfeedce97269aca23509faa69a391c98cd779381", "committedDate": "2020-03-18T17:09:16Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3261d0ac6a2bcd16b92c6395f4eb2b900ebd8ac", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a3261d0ac6a2bcd16b92c6395f4eb2b900ebd8ac", "committedDate": "2020-03-18T17:09:39Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9782ce1e247454a61a01b255793e292ab163933b", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/9782ce1e247454a61a01b255793e292ab163933b", "committedDate": "2020-03-18T17:10:22Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a06bfb04c4712b5471672a89a38973a54ba6fb96", "committedDate": "2020-03-18T17:10:52Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2fdbf4973a256814d49a1edb7797396592b9ec0", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a2fdbf4973a256814d49a1edb7797396592b9ec0", "committedDate": "2020-03-18T17:11:17Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31c2d3270775907334e733f6cc92eb27ce11f167", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/31c2d3270775907334e733f6cc92eb27ce11f167", "committedDate": "2020-03-18T17:11:43Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515bd82233dea4f1f4e02358239606a167aa92b6", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/515bd82233dea4f1f4e02358239606a167aa92b6", "committedDate": "2020-03-18T17:12:04Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c79902a33e6f3b4915872ee5eb8778b9c2fa2bb", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/8c79902a33e6f3b4915872ee5eb8778b9c2fa2bb", "committedDate": "2020-03-18T17:12:17Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d795bda44790839e24ba72aa356814d14a4444c4", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/d795bda44790839e24ba72aa356814d14a4444c4", "committedDate": "2020-03-18T17:12:34Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6622617b0b8dd0a1e9a492f9795967bb028f099f", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/6622617b0b8dd0a1e9a492f9795967bb028f099f", "committedDate": "2020-03-18T17:12:48Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/d70f880ad959a84096fdb3a287a2241e313ccd89", "committedDate": "2020-03-18T17:13:37Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f230877045db47879fadcf0198b8d5f76c67662d", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f230877045db47879fadcf0198b8d5f76c67662d", "committedDate": "2020-03-18T17:18:48Z", "message": "issue #786 minor changes\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDc3MjY3", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377077267", "createdAt": "2020-03-18T17:19:21Z", "commit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOToyMlrOF4PNyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOToyMlrOF4PNyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzg2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportFailureOperationOutcomes(),", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513864", "createdAt": "2020-03-18T17:19:22Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDc3NTAy", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377077502", "createdAt": "2020-03-18T17:19:35Z", "commit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozNlrOF4POcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozNlrOF4POcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNDAzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), partitionSummaryData.getDataPacksForFailureOperationOutcomes());", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394514032", "createdAt": "2020-03-18T17:19:36Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51e2651bdf08b815653dc2f19bd321cafe71130", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/c51e2651bdf08b815653dc2f19bd321cafe71130", "committedDate": "2020-03-18T17:23:27Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ddbc23b4c416b3fe5041a434f332f4d6a44758a", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/5ddbc23b4c416b3fe5041a434f332f4d6a44758a", "committedDate": "2020-03-18T17:23:38Z", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8048fdfcef1c77b5d01882517e10b8df0f222f2", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f8048fdfcef1c77b5d01882517e10b8df0f222f2", "committedDate": "2020-03-18T17:52:32Z", "message": "issue #786 #787 #807 change '4' to 'For' for functions and variables\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880f9c0f4994b33fffd946297c5f2bf753e2bf4d", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/880f9c0f4994b33fffd946297c5f2bf753e2bf4d", "committedDate": "2020-03-18T18:14:13Z", "message": "issue #786 minor change\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTMyODE5", "url": "https://github.com/IBM/FHIR/pull/803#pullrequestreview-377132819", "createdAt": "2020-03-18T18:31:50Z", "commit": {"oid": "880f9c0f4994b33fffd946297c5f2bf753e2bf4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 527, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}