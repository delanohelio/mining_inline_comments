{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzg2MjIw", "number": 1220, "title": "Issue 1129 implement drop tenant", "bodyText": "See fhir-persistence-schema/docs/DropTenant.md for background and usage.", "createdAt": "2020-06-11T01:27:56Z", "url": "https://github.com/IBM/FHIR/pull/1220", "merged": true, "mergeCommit": {"oid": "c9ba2bb37e25bce2fed747b36911146a9b0afd68"}, "closed": true, "closedAt": "2020-06-11T17:15:27Z", "author": {"login": "punktilious"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp_8abgH2gAyNDMyNzg2MjIwOmJmYzUwM2Q5MTdhOGY0NzhhM2IxMjM3MjE5NjVjNjc0NDFlMjhhZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqQHekgFqTQyOTAzNzYyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bfc503d917a8f478a3b123721965c67441e28afa", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/bfc503d917a8f478a3b123721965c67441e28afa", "committedDate": "2020-06-10T20:46:59Z", "message": "issue-1129 - implement drop tenant support for multi-tenant schemas\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3f10af9f61f7f7dd79dd8176c5010b2e79afed", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/7b3f10af9f61f7f7dd79dd8176c5010b2e79afed", "committedDate": "2020-06-10T21:58:17Z", "message": "Merge remote-tracking branch 'origin/HEAD' into issue-1129"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/15625b8715507454043b8708e63ac7a549483880", "committedDate": "2020-06-11T01:23:18Z", "message": "issue-1129 - fixed space issues for checkstyle\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODMzMjg4", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428833288", "createdAt": "2020-06-11T11:48:37Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo0ODozOFrOGiZwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo0ODozOFrOGiZwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjY3Ng==", "bodyText": "interesting idea of tenant pooling. that means we can  pre-allocate some tenants and then associate them later with tenant names.", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438726676", "createdAt": "2020-06-11T11:48:38Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/TenantStatus.java", "diffHunk": "@@ -10,9 +10,9 @@\n  * Tenant Status Enumeration\n  */\n public enum TenantStatus {\n-    PROVISIONING,\n-    FREE,\n-    ALLOCATED,\n-    FROZEN,\n-    DROPPED\n+    PROVISIONING, // in the process of adding the partitions to the schema\n+    FREE,         // unused tenant, available for allocation (e.g. tenant pooling)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODM4MjUx", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428838251", "createdAt": "2020-06-11T11:56:47Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo1Njo0OFrOGiZ_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo1Njo0OFrOGiZ_Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDU3MA==", "bodyText": "this does remind me a question, if a new table is added to the schema during the schema upgrade, will the according partitions be created automatically for all tenants in this schema?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438730570", "createdAt": "2020-06-11T11:56:48Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODQyOTU3", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428842957", "createdAt": "2020-06-11T12:04:27Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNDoyOFrOGiaNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNDoyOFrOGiaNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDE2Ng==", "bodyText": "format, could you move \"else {\" to the above line", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438734166", "createdAt": "2020-06-11T12:04:28Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n+        }\n     }\n \n     @Override\n-    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId,\n-            String tenantStagingTable) {\n+    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n+        // Identify all the partitioned tables contained within schemaName\n         Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n         loadPartitionInfoMap(partitionInfoMap, schemaName);\n \n         for (Table t: tables) {\n-            PartitionInfo pi = partitionInfoMap.get(t.getName());\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n             if (pi == null) {\n                 // We should only be dealing with partitioned tables at this stage, so this\n                 // is a fatal error\n-                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName());\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n                 throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n             }\n             else {\n                 final String partitionName = \"TENANT\" + tenantId;\n-                final String targetTableName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName() + \"_\" + partitionName);\n-                removeTenantPartition(schemaName, t.getName(), partitionName, targetTableName, tenantStagingTable);\n+                final String targetTableName = getDetachedPartitionTableName(t, tenantId);\n+                detachPartition(schemaName, t.getObjectName(), partitionName, targetTableName);\n             }\n         }\n     }\n \n-    protected void removeTenantPartition(String schemaName, String tableName, String partitionName, String targetTableName,\n-            String tenantStagingTable) {\n-\n-        // Detach the given partition of the table into the targetTableName (within the same schema).\n-        detachPartition(schemaName, tableName, partitionName, targetTableName);\n+    @Override\n+    public void dropDetachedPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n-        // We need to add this target table name to the tenantStagingTable so that we\n-        // can remember to delete it later...an operation which can only be done in\n-        // a new transaction\n-        Db2AddTableToStaging cmd = new Db2AddTableToStaging(schemaName, tenantStagingTable, targetTableName);\n-        runStatement(cmd);\n+        // Only process tables which are partitioned\n+        Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n+        loadPartitionInfoMap(partitionInfoMap, schemaName);\n+        \n+        for (Table t : tables) {\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n+            if (pi == null) {\n+                // We should only be dealing with partitioned tables at this stage, so this\n+                // is a fatal error\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n+                throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n+            } \n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODQzNDAz", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428843403", "createdAt": "2020-06-11T12:05:12Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNToxMlrOGiaOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNToxMlrOGiaOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDQ4Mg==", "bodyText": "format, could you more \"catch (Exception x) {\" to above line?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438734482", "createdAt": "2020-06-11T12:05:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n+        }\n     }\n \n     @Override\n-    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId,\n-            String tenantStagingTable) {\n+    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n+        // Identify all the partitioned tables contained within schemaName\n         Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n         loadPartitionInfoMap(partitionInfoMap, schemaName);\n \n         for (Table t: tables) {\n-            PartitionInfo pi = partitionInfoMap.get(t.getName());\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n             if (pi == null) {\n                 // We should only be dealing with partitioned tables at this stage, so this\n                 // is a fatal error\n-                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName());\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n                 throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n             }\n             else {\n                 final String partitionName = \"TENANT\" + tenantId;\n-                final String targetTableName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName() + \"_\" + partitionName);\n-                removeTenantPartition(schemaName, t.getName(), partitionName, targetTableName, tenantStagingTable);\n+                final String targetTableName = getDetachedPartitionTableName(t, tenantId);\n+                detachPartition(schemaName, t.getObjectName(), partitionName, targetTableName);\n             }\n         }\n     }\n \n-    protected void removeTenantPartition(String schemaName, String tableName, String partitionName, String targetTableName,\n-            String tenantStagingTable) {\n-\n-        // Detach the given partition of the table into the targetTableName (within the same schema).\n-        detachPartition(schemaName, tableName, partitionName, targetTableName);\n+    @Override\n+    public void dropDetachedPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n-        // We need to add this target table name to the tenantStagingTable so that we\n-        // can remember to delete it later...an operation which can only be done in\n-        // a new transaction\n-        Db2AddTableToStaging cmd = new Db2AddTableToStaging(schemaName, tenantStagingTable, targetTableName);\n-        runStatement(cmd);\n+        // Only process tables which are partitioned\n+        Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n+        loadPartitionInfoMap(partitionInfoMap, schemaName);\n+        \n+        for (Table t : tables) {\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n+            if (pi == null) {\n+                // We should only be dealing with partitioned tables at this stage, so this\n+                // is a fatal error\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n+                throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n+            } \n+            else {\n+                // drop the table which now represents the detached partition\n+                final String detachedPartitionTableName = getDetachedPartitionTableName(t, tenantId);\n+                try {\n+                    logger.info(\"Dropping detached partition (table): '\" + detachedPartitionTableName + \"'\");\n+                    dropTable(schemaName, detachedPartitionTableName);\n+                } \n+                catch (Exception x) {\n+                    // we want this to be idempotent, so we suppress propagation of any error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODQ4ODcy", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428848872", "createdAt": "2020-06-11T12:13:39Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMzozOVrOGiaeGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMzozOVrOGiaeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczODQ1Ng==", "bodyText": "format, how about moving \"catch (DataAccessException x) {\" to above line?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438738456", "createdAt": "2020-06-11T12:13:39Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODUxNTEw", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428851510", "createdAt": "2020-06-11T12:17:36Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxNzozNlrOGial0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxNzozNlrOGial0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDQzMw==", "bodyText": "curious, why using \"visited\" instead of \"visit\"?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438740433", "createdAt": "2020-06-11T12:17:36Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitor.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.database.utils.model;\n+\n+\n+/**\n+ * Visitor interface used to traverse the PhysicalDataModel\n+ */\n+public interface DataModelVisitor {\n+\n+    /**\n+     * Process a foreign key constraint from the model\n+     * @param fk\n+     */\n+    public void visited(Table fromChildTable, ForeignKeyConstraint fk);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODU1OTE4", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428855918", "createdAt": "2020-06-11T12:24:11Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyNDoxMlrOGiayjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyNDoxMlrOGiayjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MzY5NA==", "bodyText": "move \"catch (SQLException x) {\" to above line?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438743694", "createdAt": "2020-06-11T12:24:12Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.tenant;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+\n+/**\n+ * Delete the tenant meta-data after it has been dropped. Deletes\n+ * data in TENANT_KEYS and TENANTS.\n+ */\n+public class DeleteTenantDAO implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final int tenantId;\n+    \n+    /**\n+     * Get partition information for all tables in the tableSchema, using\n+     * the catalogSchema as the schema containing the DATAPARTITIONS system table\n+     * \n+     * @param schemaName the name of the admin schema hosting the tenants and tenant_keys tables\n+     * @param tenantId the id of the tenant to delete\n+     */\n+    public DeleteTenantDAO(String schemaName, int tenantId) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        this.schemaName = schemaName;\n+        this.tenantId = tenantId;\n+    }\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        deleteFromTenantKeys(translator, c);\n+        deleteFromTenants(translator, c);\n+    }\n+    \n+    protected void deleteFromTenantKeys(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANT_KEYS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.executeUpdate();\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODU2MjUx", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428856251", "createdAt": "2020-06-11T12:24:37Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyNDozN1rOGiazmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyNDozN1rOGiazmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0Mzk2Mg==", "bodyText": "move \"catch (SQLException x) {\" to above line?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438743962", "createdAt": "2020-06-11T12:24:37Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.tenant;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+\n+/**\n+ * Delete the tenant meta-data after it has been dropped. Deletes\n+ * data in TENANT_KEYS and TENANTS.\n+ */\n+public class DeleteTenantDAO implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final int tenantId;\n+    \n+    /**\n+     * Get partition information for all tables in the tableSchema, using\n+     * the catalogSchema as the schema containing the DATAPARTITIONS system table\n+     * \n+     * @param schemaName the name of the admin schema hosting the tenants and tenant_keys tables\n+     * @param tenantId the id of the tenant to delete\n+     */\n+    public DeleteTenantDAO(String schemaName, int tenantId) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        this.schemaName = schemaName;\n+        this.tenantId = tenantId;\n+    }\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        deleteFromTenantKeys(translator, c);\n+        deleteFromTenants(translator, c);\n+    }\n+    \n+    protected void deleteFromTenantKeys(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANT_KEYS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.executeUpdate();\n+        }\n+        catch (SQLException x) {\n+            // Translate the exception into something a little more meaningful\n+            // for this database type and application\n+            throw translator.translate(x);\n+        }\n+        \n+    }\n+\n+    protected void deleteFromTenants(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANTS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                + \"      AND tenant_status = ?\"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.setString(2, TenantStatus.DROPPED.name());\n+            int rows = ps.executeUpdate();\n+            \n+            if (rows < 1) {\n+                throw new DataAccessException(\"Invalid tenant_id or tenant not DROPPED\");\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODYxNjQ5", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428861649", "createdAt": "2020-06-11T12:32:31Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozMjozMVrOGibCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozMjozMVrOGibCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0Nzg0NQ==", "bodyText": "do we add the schema info to the tanant table now? or we still have to visit the system table as you showed me to get the schema info for a tenant.", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438747845", "createdAt": "2020-06-11T12:32:31Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/docs/DropTenant.md", "diffHunk": "@@ -0,0 +1,129 @@\n+# Removing a tenant from the database\n+\n+Use this guide when removing a tenant from the Db2 multi-tenant database. The tenant's data will be removed from the database along with any associated storage.\n+\n+To obtain a list of the tenants currently managed in a given database, run the following:\n+\n+```sh\n+    java -jar schema/fhir-persistence-schema-*-cli.jar \\\n+      --prop-file db2.properties --list-tenants\n+```\n+\n+```\n+ TenantId     Status       TenantName Schema\n+        1  ALLOCATED            test1 FHIRDATA\n+        2  ALLOCATED            test2 FHIRDATA2\n+        3    DROPPED            test3 <not-known>\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODY0NTIz", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428864523", "createdAt": "2020-06-11T12:36:30Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozNjozMFrOGibLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozNjozMFrOGibLAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0OTk1NQ==", "bodyText": "just curious, could a tenant be partially dropped? e.g, what if the tool fails to finish all steps for whatever reason.", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438749955", "createdAt": "2020-06-11T12:36:30Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/docs/DropTenant.md", "diffHunk": "@@ -0,0 +1,129 @@\n+# Removing a tenant from the database\n+\n+Use this guide when removing a tenant from the Db2 multi-tenant database. The tenant's data will be removed from the database along with any associated storage.\n+\n+To obtain a list of the tenants currently managed in a given database, run the following:\n+\n+```sh\n+    java -jar schema/fhir-persistence-schema-*-cli.jar \\\n+      --prop-file db2.properties --list-tenants\n+```\n+\n+```\n+ TenantId     Status       TenantName Schema\n+        1  ALLOCATED            test1 FHIRDATA\n+        2  ALLOCATED            test2 FHIRDATA2\n+        3    DROPPED            test3 <not-known>\n+```\n+\n+Note that after the tenant is dropped, it is no longer associated with a schema.\n+\n+## Background\n+\n+Tenant data is stored in a Db2 table partition attached to each of the IBM FHIR Server data tables. Removal occurs in two phases:\n+\n+- **Phase 1**. The tenant's partitions are detached from each data table and converted into a stand-alone table.\n+- **Phase 2**. The stand-alone tables are dropped. Once all the tables are dropped, the tablespace will also be dropped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODY5ODY1", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428869865", "createdAt": "2020-06-11T12:43:52Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo0Mzo1M1rOGibapg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo0Mzo1M1rOGibapg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1Mzk1OA==", "bodyText": "could we add a locked status to tenant which can help us to create a feature in the future to prevent access to the tenant temporarily?   or maybe we can re-use \"FROZEN\" for the purpose if it's not dedicated to dropped only.", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438753958", "createdAt": "2020-06-11T12:43:53Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/TenantStatus.java", "diffHunk": "@@ -10,9 +10,9 @@\n  * Tenant Status Enumeration\n  */\n public enum TenantStatus {\n-    PROVISIONING,\n-    FREE,\n-    ALLOCATED,\n-    FROZEN,\n-    DROPPED\n+    PROVISIONING, // in the process of adding the partitions to the schema\n+    FREE,         // unused tenant, available for allocation (e.g. tenant pooling)\n+    ALLOCATED,    // allocated and in use\n+    FROZEN,       // about to be dropped\n+    DROPPED       // all tenant resources have been release", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODc2NzQy", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428876742", "createdAt": "2020-06-11T12:53:04Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1MzowNVrOGibuwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1MzowNVrOGibuwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTEwNQ==", "bodyText": "format ...", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438759105", "createdAt": "2020-06-11T12:53:05Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -697,6 +709,30 @@ protected void allocateTenant() {\n         }\n     }\n \n+    /**\n+     * List the tenants currently configured\n+     */\n+    protected void listTenants() {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n+            return;\n+        }\n+        Db2Adapter adapter = new Db2Adapter(connectionPool);\n+        try (ITransaction tx = TransactionFactory.openTransaction(connectionPool)) {\n+            try {\n+                GetTenantList rtListGetter = new GetTenantList(adminSchemaName);\n+                List<TenantInfo> tenants = adapter.runStatement(rtListGetter);\n+                \n+                System.out.println(TenantInfo.getHeader());\n+                tenants.forEach(t -> System.out.println(t.toString()));\n+            } \n+            catch (DataAccessException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODc5MjE1", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428879215", "createdAt": "2020-06-11T12:56:19Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1NjoxOVrOGib1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1NjoxOVrOGib1-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDk1Mg==", "bodyText": "it's a little bit strange that \"drop-tenant\" doesn't really drop the detached tables. maybe we should change it to \"detach-tenant\"?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438760952", "createdAt": "2020-06-11T12:56:19Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/util/CommonUtil.java", "diffHunk": "@@ -116,7 +116,18 @@ public static void printUsage() {\n \n         // Drops a Tenant\n         ps.println(\"--drop-tenant tenantName\");\n-        ps.println(\" * drops the tenant given the tenantName\");\n+        ps.println(\" * (phase 1) drops the tenant given the tenantName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODgwMzM1", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428880335", "createdAt": "2020-06-11T12:57:50Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Nzo1MFrOGib5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Nzo1MFrOGib5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTgxNw==", "bodyText": "format ... move to above line?", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438761817", "createdAt": "2020-06-11T12:57:50Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the {@link TenantInfo} for the tenantName. Returns a null\n+ * TenantInfo if the tenant does not exist\n+ */\n+public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    private final String adminSchema;\n+    private final String tenantName;\n+\n+    public GetTenantInfo(String adminSchema, String tenantName) {\n+        this.adminSchema = adminSchema;\n+        this.tenantName = tenantName;\n+    }\n+\n+    @Override\n+    public TenantInfo run(IDatabaseTranslator translator, Connection c) {\n+        TenantInfo result;\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'LOGICAL_RESOURCES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" WHERE t.tenant_name = ?\";\n+        \n+\n+        try (PreparedStatement s = c.prepareStatement(SQL)) {\n+            s.setString(1, tenantName);\n+            ResultSet rs = s.executeQuery();\n+            if (rs.next()) {\n+                result = new TenantInfo();\n+                result.setTenantId(rs.getInt(1));\n+                result.setTenantName(rs.getString(2));\n+                result.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                result.setTenantSchema(rs.getString(4));\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODgwNDI3", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428880427", "createdAt": "2020-06-11T12:57:56Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Nzo1N1rOGib5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Nzo1N1rOGib5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTg4Nw==", "bodyText": "format ...", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438761887", "createdAt": "2020-06-11T12:57:57Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the {@link TenantInfo} for the tenantName. Returns a null\n+ * TenantInfo if the tenant does not exist\n+ */\n+public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    private final String adminSchema;\n+    private final String tenantName;\n+\n+    public GetTenantInfo(String adminSchema, String tenantName) {\n+        this.adminSchema = adminSchema;\n+        this.tenantName = tenantName;\n+    }\n+\n+    @Override\n+    public TenantInfo run(IDatabaseTranslator translator, Connection c) {\n+        TenantInfo result;\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'LOGICAL_RESOURCES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" WHERE t.tenant_name = ?\";\n+        \n+\n+        try (PreparedStatement s = c.prepareStatement(SQL)) {\n+            s.setString(1, tenantName);\n+            ResultSet rs = s.executeQuery();\n+            if (rs.next()) {\n+                result = new TenantInfo();\n+                result.setTenantId(rs.getInt(1));\n+                result.setTenantName(rs.getString(2));\n+                result.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                result.setTenantSchema(rs.getString(4));\n+            }\n+            else {\n+                result = null;\n+            }\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODgwNjc4", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428880678", "createdAt": "2020-06-11T12:58:14Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1ODoxNFrOGib6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1ODoxNFrOGib6Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MjA1MQ==", "bodyText": "format ...", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438762051", "createdAt": "2020-06-11T12:58:14Z", "author": {"login": "albertwang-ibm"}, "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the list of tenants currently configured\n+ */\n+public class GetTenantList implements IDatabaseSupplier<List<TenantInfo>> {\n+    private final String adminSchema;\n+\n+    public GetTenantList(String adminSchema) {\n+        this.adminSchema = adminSchema;\n+    }\n+\n+    @Override\n+    public List<TenantInfo> run(IDatabaseTranslator translator, Connection c) {\n+        List<TenantInfo> result = new ArrayList<>();\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'PARAMETER_NAMES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" ORDER BY t.mt_id\";\n+        \n+\n+        try (Statement s = c.createStatement()) {\n+            ResultSet rs = s.executeQuery(SQL);\n+            while (rs.next()) {\n+                TenantInfo dto = new TenantInfo();\n+                dto.setTenantId(rs.getInt(1));\n+                dto.setTenantName(rs.getString(2));\n+                dto.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                dto.setTenantSchema(rs.getString(4));\n+                result.add(dto);\n+            }\n+        }\n+        catch (SQLException x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODg2Njg4", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-428886688", "createdAt": "2020-06-11T13:05:57Z", "commit": {"oid": "15625b8715507454043b8708e63ac7a549483880"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "author": {"user": {"login": "punktilious", "name": "Robin Arnold"}}, "url": "https://github.com/IBM/FHIR/commit/2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "committedDate": "2020-06-11T14:32:42Z", "message": "issue-1129 - code style review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDM3NjI5", "url": "https://github.com/IBM/FHIR/pull/1220#pullrequestreview-429037629", "createdAt": "2020-06-11T15:37:33Z", "commit": {"oid": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 268, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}