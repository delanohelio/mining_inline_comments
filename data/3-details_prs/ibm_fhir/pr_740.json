{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTE2MDYy", "number": 740, "title": "issue #675 enable tenant/datastore support for searchalltest", "bodyText": "Signed-off-by: Albert Wang xuwang@us.ibm.com", "createdAt": "2020-02-28T17:49:30Z", "url": "https://github.com/IBM/FHIR/pull/740", "merged": true, "mergeCommit": {"oid": "f0c6e9999cd9613636692775a84117ae9dd7f557"}, "closed": true, "closedAt": "2020-03-03T17:16:30Z", "author": {"login": "albertwang-ibm"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIzps3gH2gAyMzgxNTE2MDYyOmZjYmFlNDgyN2RkMTMzYjJmYTE4MzU1NmNkMWM1MzY4NzA3Mzc0MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKFdmhgFqTM2ODE2MzA0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fcbae4827dd133b2fa183556cd1c536870737406", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/fcbae4827dd133b2fa183556cd1c536870737406", "committedDate": "2020-02-28T17:48:11Z", "message": "issue #675 enable tenant/datastore support for searchalltest\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/f94d6226704e48cb15ad96f17776e447546bae94", "committedDate": "2020-03-03T14:58:56Z", "message": "#issue #675 tool for breaking huge COS ndjson files\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDUzMzgy", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368053382", "createdAt": "2020-03-03T15:02:38Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMjozOFrOFxJdQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowMjozOFrOFxJdQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTQ5MQ==", "bodyText": "date\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387079491", "createdAt": "2020-03-03T15:02:38Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDU1NTAx", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368055501", "createdAt": "2020-03-03T15:05:01Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTowMlrOFxJjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTowMlrOFxJjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTA4OA==", "bodyText": "it's not really an override? it's a specific implementation", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387081088", "createdAt": "2020-03-03T15:05:02Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -767,15 +768,16 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+                    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDU2MTY1", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368056165", "createdAt": "2020-03-03T15:05:43Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTo0M1rOFxJlcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowNTo0M1rOFxJlcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTU4Ng==", "bodyText": "addRequestHeaders - where does this come from what does it do?", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387081586", "createdAt": "2020-03-03T15:05:43Z", "author": {"login": "prb112"}, "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -452,10 +452,11 @@ public FHIRResponse searchAll(FHIRParameters parameters, boolean isPost, FHIRReq\n         } else {\n             endpoint = endpoint.path(\"_search\");\n             builder = endpoint.request(getDefaultMimeType());\n+            builder = addRequestHeaders(builder, headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDY1MDky", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368065092", "createdAt": "2020-03-03T15:15:58Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxNTo1OFrOFxKA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToxNTo1OFrOFxKA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4ODYzNA==", "bodyText": "Should the test be renamed to indicate that it is testing a different tenant?", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387088634", "createdAt": "2020-03-03T15:15:58Z", "author": {"login": "prb112"}, "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchAllTest.java", "diffHunk": "@@ -390,7 +407,10 @@ public void testCreatePatientAndObservationWithUniqueTag() throws Exception {\n                         .build();\n \n         Entity<Patient> entity = Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n-        Response response = target.path(\"Patient\").request().post(entity, Response.class);\n+        Response response = target.path(\"Patient\").request()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDcwNTA0", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368070504", "createdAt": "2020-03-03T15:22:06Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjowNlrOFxKRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjowNlrOFxKRvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MjkyNw==", "bodyText": "I don't think this is necessary... Let it naturally fall out.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387092927", "createdAt": "2020-03-03T15:22:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);\n+               }\n+\n+            long end = System.nanoTime();\n+            logger.info(String.format(\"Total Resources: %d, Took: %6.3f seconds\", totalNum, (end-start)/NANOS));\n+        }\n+        catch (Exception x) {\n+            logger.log(Level.SEVERE, \"Failed to run\", x);\n+        }\n+        finally {\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 275}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDcwOTcy", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368070972", "createdAt": "2020-03-03T15:22:35Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjozNVrOFxKTCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMjozNVrOFxKTCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MzI1OQ==", "bodyText": "Use a logger", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387093259", "createdAt": "2020-03-03T15:22:35Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDcyNTQx", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368072541", "createdAt": "2020-03-03T15:24:21Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNDoyMVrOFxKYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNDoyMVrOFxKYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDY4NA==", "bodyText": "There are a lot of System.exits here... .throw an exception, and handle one time.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387094684", "createdAt": "2020-03-03T15:24:21Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.\n+ */\n+public class Main {\n+    private static final Logger logger = Logger.getLogger(Main.class.getName());\n+\n+    // number of nanoseconds in a second\n+    private static final double NANOS = 1e9;\n+\n+    /**\n+     * The IBM COS API key or S3 access key.\n+     */\n+    private static String cosApiKey;\n+\n+    /**\n+     * The IBM COS service instance id or S3 secret key.\n+     */\n+    private static String cosSrvinstId;\n+\n+    /**\n+     * The IBM COS or S3 End point URL.\n+     */\n+    private static String cosEndpintUrl;\n+\n+    /**\n+     * The IBM COS or S3 location.\n+     */\n+    private static String cosLocation;\n+\n+    /**\n+     * The IBM COS or S3 bucket name to import from.\n+     */\n+    private static String cosBucketName;\n+\n+    /**\n+     * If use IBM credential.\n+     */\n+    private static String cosCredentialIbm;\n+\n+    /**\n+     * The COS file to break.\n+     */\n+    private static String cosFile2Break;\n+\n+    /**\n+     * The number of files to break into.\n+     */\n+    private static int numberOfFiles;\n+\n+    /**\n+     * Parse the command line arguments\n+     *   --cosApiKey\n+     *   --cosSrvinstId\n+     *   --cosEndpintUrl\n+     *   --cosLocation\n+     *   --cosBucketName\n+     *   --cosCredentialIbm\n+     *   --cosFile2Break\n+     *   --numberOfFiles\n+     * @param args\n+     */\n+    public void parseArgs(String[] args) {\n+        // really simple args, so nothing fancy needed here\n+        for (int i=0; i<args.length; i++) {\n+            String arg = args[i];\n+            switch (arg) {\n+            case \"--cosApiKey\":\n+                if (++i < args.length) {\n+                    cosApiKey = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosApiKey argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosSrvinstId\":\n+                if (++i < args.length) {\n+                    cosSrvinstId = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosSrvinstId argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosEndpintUrl\":\n+                if (++i < args.length) {\n+                    cosEndpintUrl = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosEndpintUrl argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosLocation\":\n+                if (++i < args.length) {\n+                    cosLocation = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosLocation argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosBucketName\":\n+                if (++i < args.length) {\n+                    cosBucketName = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosCredentialIbm\":\n+                if (++i < args.length) {\n+                    cosCredentialIbm = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--cosFile2Break\":\n+                if (++i < args.length) {\n+                    cosFile2Break = args[i];\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --cosFile2Break argument at posn: \" + i);\n+                }\n+                break;\n+            case \"--numberOfFiles\":\n+                if (++i < args.length) {\n+                    numberOfFiles = Integer.parseInt(args[i]);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid argument: \" + arg);\n+            }\n+        }\n+    }\n+\n+\n+    private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) throws Exception {\n+        int lineRed = 0;\n+        while (true) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Count finished!!!!!\");\n+                    break;\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+        }\n+        return lineRed;\n+    }\n+\n+\n+\n+    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+        int lineRed = 0;\n+        int segNum = 0;\n+        List<PartETag> dataPackTags = new ArrayList<>();\n+        String uploadId = null;\n+        int partNum = 1;\n+        boolean isMore2Read = true;\n+        while (isMore2Read) {\n+                String resLine = resReader.readLine();\n+                lineRed++;\n+                if (resLine == null) {\n+                    System.out.println(\"\\n Read finished!!!!!\");\n+                    isMore2Read = false;\n+                } else {\n+                    System.out.print(\".\");\n+                    bufferStream.write(resLine.getBytes());\n+                    bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                }\n+\n+                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n+                        || !isMore2Read) {\n+                    String segName = cosFile2Break + \"_seg\" + segNum;\n+                    if (uploadId == null) {\n+                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                    }\n+\n+                    if (bufferStream.size() > 0) {\n+                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                        bufferStream.reset();\n+                    }\n+\n+                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n+                            || !isMore2Read) {\n+                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                        System.out.println(\"Finished writting for \" + segName);\n+                        lineRed = 0;\n+                        segNum++;\n+                        uploadId = null;\n+                        partNum = 1;\n+                        dataPackTags.clear();\n+                    }\n+                }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Main entry\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        Main m = new Main();\n+        try {\n+            m.parseArgs(args);\n+\n+            long start = System.nanoTime();\n+            int totalNum = 0;\n+\n+            AmazonS3 cosClient = BulkDataUtils.getCosClient(cosCredentialIbm, cosApiKey, cosSrvinstId, cosEndpintUrl,\n+                    cosLocation);\n+            if (cosClient == null) {\n+                logger.warning(\"Failed to get CosClient!\");\n+                System.exit(1);\n+            }\n+\n+            S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+               } catch (Exception ioe) {\n+                   logger.warning(\"Error proccesing file \" + cosFile2Break + \" - \" + ioe.getMessage());\n+                   System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 253}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDczMjI5", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368073229", "createdAt": "2020-03-03T15:25:06Z", "commit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTowNlrOFxKa1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTowNlrOFxKa1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTI1NA==", "bodyText": "Elaborate as to why it's being done, and what the case for using it is... recommendation, not a requirement of the review.", "url": "https://github.com/IBM/FHIR/pull/740#discussion_r387095254", "createdAt": "2020-03-03T15:25:06Z", "author": {"login": "prb112"}, "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.bulktools;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.cloud.objectstorage.services.s3.AmazonS3;\n+import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3Object;\n+import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectInputStream;\n+import com.ibm.fhir.bulkcommon.BulkDataUtils;\n+import com.ibm.fhir.bulkcommon.Constants;\n+\n+/**\n+ * Tool to break large COS file into multiple ones.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f94d6226704e48cb15ad96f17776e447546bae94"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28f85486b097de8a91c3b4dcda028fe0ebbd2e7", "author": {"user": {"login": "albertwang-ibm", "name": "Albert(Xu) Wang"}}, "url": "https://github.com/IBM/FHIR/commit/a28f85486b097de8a91c3b4dcda028fe0ebbd2e7", "committedDate": "2020-03-03T15:53:00Z", "message": "issue #675 changes per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTYzMDQx", "url": "https://github.com/IBM/FHIR/pull/740#pullrequestreview-368163041", "createdAt": "2020-03-03T17:07:11Z", "commit": {"oid": "a28f85486b097de8a91c3b4dcda028fe0ebbd2e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 716, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}