{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzMyMDMx", "number": 1225, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTowMDoxMlrOEFKUIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTowMDoxMlrOEFKUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQ3MzI4OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTowMDoxMlrOGjOqIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToyMDo1OVrOGjPLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzUwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v,FHIRRegistryResource registryResource){\n          \n          \n            \n                private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v, FHIRRegistryResource registryResource) {", "url": "https://github.com/IBM/FHIR/pull/1225#discussion_r439593506", "createdAt": "2020-06-12T19:00:12Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -270,4 +274,31 @@ private Resource getResource(FHIRRegistryResource registryResource, String url,\n         }\n         return providers;\n     }\n-}\n+\n+    /**\n+     * Given the list of providers, the method scans through the list to find all profile resource, and merge them together\n+     * in order to develop a list of resource specific canonical URLs.\n+     * @return\n+     */\n+    public Map<String,Set<Canonical>> getProfileResources() {\n+        Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls = new HashMap<>();\n+        providers.stream().map(provider -> provider.getProfileResources())\n+                .flatMap(Collection::stream)\n+                .forEach(r -> processResource(r, resourceTypeWithCanonicalUrls));\n+        return resourceTypeWithCanonicalUrls;\n+    }\n+\n+    private void processResource(FHIRRegistryResource registryResource, Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls) {\n+        String type = registryResource.getType();\n+        resourceTypeWithCanonicalUrls.compute(type, (k,v) -> checkOrCreateSet(k,v,registryResource));\n+    }\n+\n+    private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v,FHIRRegistryResource registryResource){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMDc4NA==", "bodyText": "Doing this locally..", "url": "https://github.com/IBM/FHIR/pull/1225#discussion_r439600784", "createdAt": "2020-06-12T19:17:49Z", "author": {"login": "prb112"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -270,4 +274,31 @@ private Resource getResource(FHIRRegistryResource registryResource, String url,\n         }\n         return providers;\n     }\n-}\n+\n+    /**\n+     * Given the list of providers, the method scans through the list to find all profile resource, and merge them together\n+     * in order to develop a list of resource specific canonical URLs.\n+     * @return\n+     */\n+    public Map<String,Set<Canonical>> getProfileResources() {\n+        Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls = new HashMap<>();\n+        providers.stream().map(provider -> provider.getProfileResources())\n+                .flatMap(Collection::stream)\n+                .forEach(r -> processResource(r, resourceTypeWithCanonicalUrls));\n+        return resourceTypeWithCanonicalUrls;\n+    }\n+\n+    private void processResource(FHIRRegistryResource registryResource, Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls) {\n+        String type = registryResource.getType();\n+        resourceTypeWithCanonicalUrls.compute(type, (k,v) -> checkOrCreateSet(k,v,registryResource));\n+    }\n+\n+    private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v,FHIRRegistryResource registryResource){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzUwNg=="}, "originalCommit": {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMjA4Mg==", "bodyText": "Fixed", "url": "https://github.com/IBM/FHIR/pull/1225#discussion_r439602082", "createdAt": "2020-06-12T19:20:59Z", "author": {"login": "prb112"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -270,4 +274,31 @@ private Resource getResource(FHIRRegistryResource registryResource, String url,\n         }\n         return providers;\n     }\n-}\n+\n+    /**\n+     * Given the list of providers, the method scans through the list to find all profile resource, and merge them together\n+     * in order to develop a list of resource specific canonical URLs.\n+     * @return\n+     */\n+    public Map<String,Set<Canonical>> getProfileResources() {\n+        Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls = new HashMap<>();\n+        providers.stream().map(provider -> provider.getProfileResources())\n+                .flatMap(Collection::stream)\n+                .forEach(r -> processResource(r, resourceTypeWithCanonicalUrls));\n+        return resourceTypeWithCanonicalUrls;\n+    }\n+\n+    private void processResource(FHIRRegistryResource registryResource, Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls) {\n+        String type = registryResource.getType();\n+        resourceTypeWithCanonicalUrls.compute(type, (k,v) -> checkOrCreateSet(k,v,registryResource));\n+    }\n+\n+    private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v,FHIRRegistryResource registryResource){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzUwNg=="}, "originalCommit": {"oid": "d15d9634dcd2dd6abba420f556fe303242ced727"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}