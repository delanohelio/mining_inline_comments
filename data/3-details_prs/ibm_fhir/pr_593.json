{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMjM0MTIz", "number": 593, "title": "issue #280", "bodyText": "Signed-off-by: Paul Bastide pbastide@us.ibm.com", "createdAt": "2020-01-15T16:44:51Z", "url": "https://github.com/IBM/FHIR/pull/593", "merged": true, "mergeCommit": {"oid": "a5021d0699b5651016b8cd557fe241abb92f7c68"}, "closed": true, "closedAt": "2020-01-30T19:20:48Z", "author": {"login": "prb112"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6oWsyAH2gAyMzYzMjM0MTIzOmYxZjZkYjc2YmM3ZmIxOTRlOGE1YWMzZTU2ZWI3ZWE0OWQ1MjI0MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_fF0LAH2gAyMzYzMjM0MTIzOjY1MzIwNTQ4YTI0OGFhNTA1NmJlNzg4NGE2YmU1ODQ3YTgxMDJhNjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f1f6db76bc7fb194e8a5ac3e56eb7ea49d522411", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/f1f6db76bc7fb194e8a5ac3e56eb7ea49d522411", "committedDate": "2020-01-15T16:43:32Z", "message": "issue 280\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1238d9343a102b28b66ed6832a74dd9831264059", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/1238d9343a102b28b66ed6832a74dd9831264059", "committedDate": "2020-01-15T16:53:38Z", "message": "issue 280\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca3795794dfa487a67aca29e0fa755d7b61396e", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/2ca3795794dfa487a67aca29e0fa755d7b61396e", "committedDate": "2020-01-15T16:55:49Z", "message": "issue 280\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/1831c67fea4c0ad05c225f7760b0c4edbac85062", "committedDate": "2020-01-15T21:21:12Z", "message": "issue 280\n\n- SQL for date-value changes\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTU0ODcz", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344554873", "createdAt": "2020-01-17T12:46:24Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo0NjoyNVrOFe39KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo0NjoyNVrOFe39KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxODM3Nw==", "bodyText": "This line is confusing to me:\n\nFurther, optimizations to the custom SearchParameter extensions may add explict casts to the intended type and activate the specific behavior refSequence.start-end.as(FHIRQuantity).", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r367918377", "createdAt": "2020-01-17T12:46:25Z", "author": {"login": "lmsurpre"}, "path": "docs/src/pages/guides/FHIRSearchConfiguration.md", "diffHunk": "@@ -100,34 +98,15 @@ The `fhir-search` module requires that the [expression](https://www.hl7.org/fhir\n \n A few things to note are: \n - This SearchParameter includes an xpath element for completeness, but the IBM FHIR Server does not use the XPath during extraction; it only uses the expression (FHIRPath).\n-- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type and the Resource's data type (using the extension-search-parameters-valuetypes.json). \n+- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type . \n - Each time a resource is created or updated, the FHIR server evaluates the FHIRPath expression applicable to the resource type and indexes the values of the matching elements, making these available via a search where the query parameter name matches the `code` element on the `SearchParameter` definition.\n \n In the preceding example, extension elements (on a Patient resource) with a url of `http://ibm.com/fhir/extension/Patient/favorite-color` are indexed by the `favorite-color` search parameter. To search for Patients with a favorite color of \"pink\", users could send an HTTP GET request to a URL like `[base]/api/v1/Patient?favorite-color:exact=pink`.\n \n For more information on search parameters, see the HL7 FHIR specification.\n \n-#### 1.1.2 Search Parameters Configuration: extension-search-parameters-valuetypes.json\n-The extension-search-parameters-valuetypes.json must be configured in concert with each search parameter to identify the expected data type(s) for the element(s) selected by that search parameter's expression. \n-\n-For each Search Parameter, there needs to be an entry with the following fields:\n-    - `resourceType` - the FHIR resource type. \n-    - `name` - the SearchParameter code that matches to this mapping. \n-    - `targetClasses` - an array of fhir-model simple Class names that correspond to the expected data types for this search parameter. \n-\n-```\n-{\n-    \"value-types\": \"default-extensions\",\n-    \"mappings\": [{\n-        \"resourceType\": \"Patient\",\n-        \"name\": \"favorite-color\",\n-        \"targetClasses\": [\"String\"]\n-    }]\n-}\n-```\n-\n-#### 1.1.3 Test\n-When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. \n+#### 1.1.2 Test\n+When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. Further, optimizations to the custom SearchParameter extensions may add explict casts to the intended type and activate the specific behavior `refSequence.start-end.as(FHIRQuantity)`. An entry may look like `\"expression\": \"Basic.extension.where(url='http://example.org/decimal').value.as(Decimal)\"`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTU4MTI0", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344558124", "createdAt": "2020-01-17T12:53:16Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo1MzoxNlrOFe4HBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo1MzoxNlrOFe4HBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyMDkwMA==", "bodyText": "Its interesting to see that we DID have a case where we'd populate the Value and not the Start or End.  Good catch.", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r367920900", "createdAt": "2020-01-17T12:53:16Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1236,7 +1236,7 @@ private ExtractedParameterValue processPrimitiveValue(FHIRPathSystemValue system\n             DateParmVal p = new DateParmVal();\n             TemporalAccessor v = systemValue.asTemporalValue().temporal();\n             java.time.Instant inst = DateTimeHandler.generateValue(v);\n-            p.setValueDate(DateTimeHandler.generateTimestamp(inst));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk3NDg1", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344697485", "createdAt": "2020-01-17T16:32:23Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMjoyM1rOFe-hXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMjoyM1rOFe-hXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTk0OA==", "bodyText": "Is this needed?  How would we get here if the SearchParamType isn't date?", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r368025948", "createdAt": "2020-01-17T16:32:23Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java", "diffHunk": "@@ -925,13 +908,10 @@ private SqlQueryData processDateParm(Class<?> resourceType, QueryParameter query\n         final String METHODNAME = \"processDateParm\";\n         log.entering(CLASSNAME, METHODNAME, queryParm.toString());\n \n-        boolean isDateSearch = isDateSearch(resourceType, queryParm);\n-        boolean isDateRangeSearch = isDateRangeSearch(resourceType, queryParm);\n-\n-        if (log.isLoggable(Level.FINE)) {\n-            log.fine(\"isDateSearch=\" + isDateSearch + \"  isDateRangeSearch=\" + isDateRangeSearch);\n-        }\n-        if (!isDateSearch && !isDateRangeSearch) {\n+        // Check to see if this is of a type is date. \n+        String code = queryParm.getCode();\n+        SearchParamType type = SearchUtil.getSearchParameter(resourceType, code).getType();\n+        if (!SearchParamType.DATE.getValue().equals(type.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk4Nzc5", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344698779", "createdAt": "2020-01-17T16:34:22Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNDoyMlrOFe-lag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNDoyMlrOFe-lag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjk4Ng==", "bodyText": "this looks like its more related to that issue we were getting when _lastUpdate and _id weren't getting handled right.  i guess there still some case where we're failing to use those properly?  maybe we need to get this fix into 4.0.1?", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r368026986", "createdAt": "2020-01-17T16:34:22Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/SortedQuerySegmentAggregator.java", "diffHunk": "@@ -129,6 +122,15 @@ public SqlQueryData buildQuery() throws Exception {\n             // Build FROM clause\n             buildFromClause(sqlSortQuery, resourceType.getSimpleName());\n \n+            // Gather up all bind variables from the query segments\n+            // An important step here is to add _id and _lastUpdated\n+            List<Object> allBindVariables = new ArrayList<>();\n+            allBindVariables.addAll(idsObjects);\n+            allBindVariables.addAll(lastUpdatedObjects);\n+            for (SqlQueryData querySegment : this.querySegments) {\n+                allBindVariables.addAll(querySegment.getBindVariables());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk5OTg2", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344699986", "createdAt": "2020-01-17T16:36:13Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNjoxNFrOFe-pGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNjoxNFrOFe-pGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzkyOA==", "bodyText": "Is it ok to use DATE_START and no DATE_END?  I'm not sure if I really understand how this getValueAttributeNames is used...", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r368027928", "createdAt": "2020-01-17T16:36:14Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/SortedQuerySegmentAggregator.java", "diffHunk": "@@ -254,7 +256,7 @@ private String buildAggregateExpression(SortParameter sortParm, int sortParmInde\n             attributeNames.add(STR_VALUE);\n             break;\n         case DATE:\n-            attributeNames.add(DATE_VALUE);\n+            attributeNames.add(DATE_START);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzA1ODE5", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344705819", "createdAt": "2020-01-17T16:45:20Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NToyMVrOFe-6MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NToyMVrOFe-6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMjMwNQ==", "bodyText": "Are you sure we need to treat integer search as \"special\"?\nIt seems like a lot of code just to fail something.  I don't think supporting \"eb\" and \"sa\" prefixes for integers would cause anyone any issue.", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r368032305", "createdAt": "2020-01-17T16:45:21Z", "author": {"login": "lmsurpre"}, "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/type/NumberParmBehaviorUtil.java", "diffHunk": "@@ -269,14 +284,7 @@ public static int calculateSignificantFigures(BigDecimal original) {\n     public static boolean checkIntegerSearchWithSaEb(Prefix prefix, Class<?> resourceType, QueryParameter queryParm,\n             BigDecimal originalNumber)\n             throws FHIRPersistenceException {\n-        boolean isIntegerSearch = false;\n-        try {\n-            isIntegerSearch = ValueTypesFactory.getValueTypesProcessor().isIntegerSearch(resourceType, queryParm);\n-        } catch (FHIRSearchException e) {\n-            log.log(Level.INFO, \"Caught exception while checking the value types for parameter '\"\n-                    + queryParm.getCode() + \"'; continuing...\", e);\n-            // do nothing\n-        }\n+        boolean isIntegerSearch = isIntegerSearch(resourceType, queryParm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzEwMjA1", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-344710205", "createdAt": "2020-01-17T16:52:14Z", "commit": {"oid": "1831c67fea4c0ad05c225f7760b0c4edbac85062"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0b72eea8bd5671db6c80fbaeedea54a37ddb39", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/fa0b72eea8bd5671db6c80fbaeedea54a37ddb39", "committedDate": "2020-01-23T18:46:18Z", "message": "issue 280\n\n- Updates per Code Review\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4f4db67408207064cbc6f4cf210eef01d969b0", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/4b4f4db67408207064cbc6f4cf210eef01d969b0", "committedDate": "2020-01-23T18:46:45Z", "message": "Merge branch 'master' into issue-280"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcfaa1f4aa457b28dd7b8547eefdd641a274f2b7", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/fcfaa1f4aa457b28dd7b8547eefdd641a274f2b7", "committedDate": "2020-01-23T19:18:58Z", "message": "issue #280\n\n- Edit Conformance.md per discussion\n- Update NumberParmBehavior for consistent experience with number\nsearches\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/a4a3dd5d9742ad805bf760cf835ee315f298ec3f", "committedDate": "2020-01-23T19:52:38Z", "message": "issue #280\n\n- Update JDBC tests\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzEzOTM2", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-348713936", "createdAt": "2020-01-27T14:44:06Z", "commit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzE3NTE0", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-348717514", "createdAt": "2020-01-27T14:48:38Z", "commit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODozOVrOFiFR8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODozOVrOFiFR8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. An entry may look like `\"expression\": \"Basic.extension.where(url='http://example.org/decimal').value`.\n          \n          \n            \n            When creating the SearchParameter FHIRPath expression, one should test the FHIRPath expression and test the search parameter. \n          \n          \n            \n            \n          \n          \n            \n            If a search parameter expression extracts an element with a data type that is incompatible with the declared search parameter type, the server skips the value and logs a message. For choice elements, like Extension.value, its recommended to restrict the expression to values of the desired type by using the `as` function. For example, to select only Decimal values from the http://example.org/demical extension, use an expressions like Basic.extension.where(url='http://example.org/decimal').value.as(Decimal).", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r371282416", "createdAt": "2020-01-27T14:48:39Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRSearchConfiguration.md", "diffHunk": "@@ -100,34 +98,15 @@ The `fhir-search` module requires that the [expression](https://www.hl7.org/fhir\n \n A few things to note are: \n - This SearchParameter includes an xpath element for completeness, but the IBM FHIR Server does not use the XPath during extraction; it only uses the expression (FHIRPath).\n-- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type and the Resource's data type (using the extension-search-parameters-valuetypes.json). \n+- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type . \n - Each time a resource is created or updated, the FHIR server evaluates the FHIRPath expression applicable to the resource type and indexes the values of the matching elements, making these available via a search where the query parameter name matches the `code` element on the `SearchParameter` definition.\n \n In the preceding example, extension elements (on a Patient resource) with a url of `http://ibm.com/fhir/extension/Patient/favorite-color` are indexed by the `favorite-color` search parameter. To search for Patients with a favorite color of \"pink\", users could send an HTTP GET request to a URL like `[base]/api/v1/Patient?favorite-color:exact=pink`.\n \n For more information on search parameters, see the HL7 FHIR specification.\n \n-#### 1.1.2 Search Parameters Configuration: extension-search-parameters-valuetypes.json\n-The extension-search-parameters-valuetypes.json must be configured in concert with each search parameter to identify the expected data type(s) for the element(s) selected by that search parameter's expression. \n-\n-For each Search Parameter, there needs to be an entry with the following fields:\n-    - `resourceType` - the FHIR resource type. \n-    - `name` - the SearchParameter code that matches to this mapping. \n-    - `targetClasses` - an array of fhir-model simple Class names that correspond to the expected data types for this search parameter. \n-\n-```\n-{\n-    \"value-types\": \"default-extensions\",\n-    \"mappings\": [{\n-        \"resourceType\": \"Patient\",\n-        \"name\": \"favorite-color\",\n-        \"targetClasses\": [\"String\"]\n-    }]\n-}\n-```\n-\n-#### 1.1.3 Test\n-When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. \n+#### 1.1.2 Test\n+When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. An entry may look like `\"expression\": \"Basic.extension.where(url='http://example.org/decimal').value`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzE3NzI5", "url": "https://github.com/IBM/FHIR/pull/593#pullrequestreview-348717729", "createdAt": "2020-01-27T14:48:53Z", "commit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODo1NFrOFiFSkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODo1NFrOFiFSkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjU3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### 1.1.2 Test\n          \n          \n            \n            #### 1.1.2 Recommendations", "url": "https://github.com/IBM/FHIR/pull/593#discussion_r371282577", "createdAt": "2020-01-27T14:48:54Z", "author": {"login": "prb112"}, "path": "docs/src/pages/guides/FHIRSearchConfiguration.md", "diffHunk": "@@ -100,34 +98,15 @@ The `fhir-search` module requires that the [expression](https://www.hl7.org/fhir\n \n A few things to note are: \n - This SearchParameter includes an xpath element for completeness, but the IBM FHIR Server does not use the XPath during extraction; it only uses the expression (FHIRPath).\n-- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type and the Resource's data type (using the extension-search-parameters-valuetypes.json). \n+- The SearchParameter with a path including `value` use the Choice data types which are determined based on the SearchParameter type . \n - Each time a resource is created or updated, the FHIR server evaluates the FHIRPath expression applicable to the resource type and indexes the values of the matching elements, making these available via a search where the query parameter name matches the `code` element on the `SearchParameter` definition.\n \n In the preceding example, extension elements (on a Patient resource) with a url of `http://ibm.com/fhir/extension/Patient/favorite-color` are indexed by the `favorite-color` search parameter. To search for Patients with a favorite color of \"pink\", users could send an HTTP GET request to a URL like `[base]/api/v1/Patient?favorite-color:exact=pink`.\n \n For more information on search parameters, see the HL7 FHIR specification.\n \n-#### 1.1.2 Search Parameters Configuration: extension-search-parameters-valuetypes.json\n-The extension-search-parameters-valuetypes.json must be configured in concert with each search parameter to identify the expected data type(s) for the element(s) selected by that search parameter's expression. \n-\n-For each Search Parameter, there needs to be an entry with the following fields:\n-    - `resourceType` - the FHIR resource type. \n-    - `name` - the SearchParameter code that matches to this mapping. \n-    - `targetClasses` - an array of fhir-model simple Class names that correspond to the expected data types for this search parameter. \n-\n-```\n-{\n-    \"value-types\": \"default-extensions\",\n-    \"mappings\": [{\n-        \"resourceType\": \"Patient\",\n-        \"name\": \"favorite-color\",\n-        \"targetClasses\": [\"String\"]\n-    }]\n-}\n-```\n-\n-#### 1.1.3 Test\n-When creating a SearchParameter extension, it is recommended that the FHIRPath expression is checked for validity. Many examples exist in the module `fhir-search`. \n+#### 1.1.2 Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a3dd5d9742ad805bf760cf835ee315f298ec3f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6cd72b87511fea69c98e0a0f525896828622eb4", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/f6cd72b87511fea69c98e0a0f525896828622eb4", "committedDate": "2020-01-27T14:53:16Z", "message": "Apply suggestions from code review\r\n\r\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65320548a248aa5056be7884a6be5847a8102a67", "author": {"user": {"login": "prb112", "name": "Paul Bastide"}}, "url": "https://github.com/IBM/FHIR/commit/65320548a248aa5056be7884a6be5847a8102a67", "committedDate": "2020-01-30T18:45:34Z", "message": "revert schema changes\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 629, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}