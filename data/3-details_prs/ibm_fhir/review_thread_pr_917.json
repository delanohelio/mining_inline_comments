{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTUwOTE1", "number": 917, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NToyOVrODwgO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowNTo0N1rODwgqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg2MzM4OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NToyOVrOGDi9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowNTo0NlrOGDjqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MTU5OA==", "bodyText": "should it verify that the urls match before it compares them?\ntwo canonicals aren't comparable unless they have the same url value, right?", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406371598", "createdAt": "2020-04-09T17:45:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -26,6 +29,13 @@\n public final class FHIRRegistry {\n     private static final Logger log = Logger.getLogger(FHIRRegistry.class.getName());\n \n+    private static final Comparator<Canonical> CANONICAL_COMPARATOR = new Comparator<Canonical>() {\n+        @Override\n+        public int compare(Canonical first, Canonical second) {\n+            return first.getValue().compareTo(second.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MjAwOQ==", "bodyText": "should it try to parse out the version part of the canonicals and compare those?", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406372009", "createdAt": "2020-04-09T17:46:15Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -26,6 +29,13 @@\n public final class FHIRRegistry {\n     private static final Logger log = Logger.getLogger(FHIRRegistry.class.getName());\n \n+    private static final Comparator<Canonical> CANONICAL_COMPARATOR = new Comparator<Canonical>() {\n+        @Override\n+        public int compare(Canonical first, Canonical second) {\n+            return first.getValue().compareTo(second.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MTU5OA=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzE0NQ==", "bodyText": "for the purpose of sorting (which is all this is used for), the value of the canonical can be compared.", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406383145", "createdAt": "2020-04-09T18:05:46Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -26,6 +29,13 @@\n public final class FHIRRegistry {\n     private static final Logger log = Logger.getLogger(FHIRRegistry.class.getName());\n \n+    private static final Comparator<Canonical> CANONICAL_COMPARATOR = new Comparator<Canonical>() {\n+        @Override\n+        public int compare(Canonical first, Canonical second) {\n+            return first.getValue().compareTo(second.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MTU5OA=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4MDk0OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MDoyMVrOGDjILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowODoyNFrOGDjvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDQ0NQ==", "bodyText": "maybe add a reference to getResources(Class<T> resourceType) to make it clear how one would get all search parameters (irregardless of type)", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406374445", "createdAt": "2020-04-09T17:50:21Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));\n     }\n \n     /**\n-     * Determine if the resource associated with the given url exists in the registry.\n+     * Get the resources for the given resource type\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param resourceType\n+     *     the resource type\n      * @return\n-     *     true if the resource associated with the given url exists in the registry, false otherwise\n+     *     the resources for the given resource type\n      */\n-    public boolean hasResource(String url) {\n-        if (url == null) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource resource = findResource(url, version);\n-        return (id != null) ? (getResource(resource, url, id) != null) : (resource != null);\n+    public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n+        Objects.requireNonNull(resourceType);\n+        return providers.stream()\n+                .map(provider -> provider.getRegistryResources(resourceType))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n-\n     /**\n-     * Unload the resource associated with the given url.\n+     * Get the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param type\n+     *     the constrained type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      */\n-    public void unloadResource(String url) {\n-        if (url == null) {\n-            return;\n-        }\n-\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        return providers.stream().map(provider -> provider.getProfileResources(type))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()))\n+                .sorted(CANONICAL_COMPARATOR)\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        FHIRRegistryResource resource = findResource(url, version);\n-        if (resource != null) {\n-            resource.unload();\n-        }\n+    /**\n+     * Get the search parameters with the given search parameter type (e.g. string, token, etc.)\n+     *\n+     * @param type\n+     *     the search parameter type\n+     * @return\n+     *     the search parameters with the given search parameter type\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NDUxNw==", "bodyText": "added", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406384517", "createdAt": "2020-04-09T18:08:24Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));\n     }\n \n     /**\n-     * Determine if the resource associated with the given url exists in the registry.\n+     * Get the resources for the given resource type\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param resourceType\n+     *     the resource type\n      * @return\n-     *     true if the resource associated with the given url exists in the registry, false otherwise\n+     *     the resources for the given resource type\n      */\n-    public boolean hasResource(String url) {\n-        if (url == null) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource resource = findResource(url, version);\n-        return (id != null) ? (getResource(resource, url, id) != null) : (resource != null);\n+    public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n+        Objects.requireNonNull(resourceType);\n+        return providers.stream()\n+                .map(provider -> provider.getRegistryResources(resourceType))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n-\n     /**\n-     * Unload the resource associated with the given url.\n+     * Get the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param type\n+     *     the constrained type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      */\n-    public void unloadResource(String url) {\n-        if (url == null) {\n-            return;\n-        }\n-\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        return providers.stream().map(provider -> provider.getProfileResources(type))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()))\n+                .sorted(CANONICAL_COMPARATOR)\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        FHIRRegistryResource resource = findResource(url, version);\n-        if (resource != null) {\n-            resource.unload();\n-        }\n+    /**\n+     * Get the search parameters with the given search parameter type (e.g. string, token, etc.)\n+     *\n+     * @param type\n+     *     the search parameter type\n+     * @return\n+     *     the search parameters with the given search parameter type\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDQ0NQ=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4NjIyOnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MTo1NVrOGDjLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowOTo1N1rOGDjzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTMyMQ==", "bodyText": "worth explicitly mentioning that this can be a Resource type OR a data type (Or something else?)", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406375321", "createdAt": "2020-04-09T17:51:55Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));\n     }\n \n     /**\n-     * Determine if the resource associated with the given url exists in the registry.\n+     * Get the resources for the given resource type\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param resourceType\n+     *     the resource type\n      * @return\n-     *     true if the resource associated with the given url exists in the registry, false otherwise\n+     *     the resources for the given resource type\n      */\n-    public boolean hasResource(String url) {\n-        if (url == null) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource resource = findResource(url, version);\n-        return (id != null) ? (getResource(resource, url, id) != null) : (resource != null);\n+    public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n+        Objects.requireNonNull(resourceType);\n+        return providers.stream()\n+                .map(provider -> provider.getRegistryResources(resourceType))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n-\n     /**\n-     * Unload the resource associated with the given url.\n+     * Get the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param type\n+     *     the constrained type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NTQ0NA==", "bodyText": "added to the Javadoc to clarify that I am referring to constrained resource type not general type (resource, complex-type, primitive-type)", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406385444", "createdAt": "2020-04-09T18:09:57Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));\n     }\n \n     /**\n-     * Determine if the resource associated with the given url exists in the registry.\n+     * Get the resources for the given resource type\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param resourceType\n+     *     the resource type\n      * @return\n-     *     true if the resource associated with the given url exists in the registry, false otherwise\n+     *     the resources for the given resource type\n      */\n-    public boolean hasResource(String url) {\n-        if (url == null) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        String version = null;\n-        index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            version = url.substring(index + 1);\n-            url = url.substring(0, index);\n-        }\n-\n-        FHIRRegistryResource resource = findResource(url, version);\n-        return (id != null) ? (getResource(resource, url, id) != null) : (resource != null);\n+    public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n+        Objects.requireNonNull(resourceType);\n+        return providers.stream()\n+                .map(provider -> provider.getRegistryResources(resourceType))\n+                .flatMap(Collection::stream)\n+                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     }\n \n-\n     /**\n-     * Unload the resource associated with the given url.\n+     * Get the profiles that constrain the given type as a collection of {@link Canonical} URLs\n      *\n-     * @param url\n-     *     the url of the resource\n+     * @param type\n+     *     the constrained type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTMyMQ=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkwNTYzOnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1NzoyNVrOGDjYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowNzo0MFrOGDjt_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODUwOQ==", "bodyText": "Unrelated to this PR, but when does FHIRRegistry get initialized?  I know Mark was asking for that to happen during server start, but wasn't sure if it was addressed in this PR or not.", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406378509", "createdAt": "2020-04-09T17:57:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -34,57 +44,55 @@ private FHIRRegistry() {\n         providers = loadProviders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzU1Ng==", "bodyText": "It is initialized in servlet context listener", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406383556", "createdAt": "2020-04-09T18:06:36Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -34,57 +44,55 @@ private FHIRRegistry() {\n         providers = loadProviders();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODUwOQ=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NDEyNA==", "bodyText": "ah, now I see it in FHIRServletContextListener.java  ...looks good", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406384124", "createdAt": "2020-04-09T18:07:40Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -34,57 +44,55 @@ private FHIRRegistry() {\n         providers = loadProviders();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODUwOQ=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkwOTU2OnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODoyOVrOGDjadg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoxMTo1M1rOGDj3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTEyNg==", "bodyText": "worth adding @throws ClassCastException to the javadoc or you think its implied?", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406379126", "createdAt": "2020-04-09T17:58:29Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjQ2MQ==", "bodyText": "added javadoc", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406386461", "createdAt": "2020-04-09T18:11:53Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -121,89 +133,77 @@ public String getLatestVersion(String url) {\n             url = url.substring(0, index);\n         }\n \n-        return resourceType.cast(getResource(findResource(url, version), url, id));\n+        return resourceType.cast(getResource(findRegistryResource(resourceType, url, version), url, id));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTEyNg=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkyMjcxOnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowMjoxOVrOGDji0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoxMjo1MlrOGDj5VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MTI2NA==", "bodyText": "worth repeating here that this is optional?", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406381264", "createdAt": "2020-04-09T18:02:19Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "diffHunk": "@@ -8,44 +8,77 @@\n \n import java.util.Collection;\n \n+import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n \n /**\n  * An SPI for {@link FHIRRegistryResource} instances\n  */\n public interface FHIRRegistryResourceProvider {\n     /**\n-     * Get the FHIR registry resources for this provider. A FHIR registry resource contains all of the information necessary\n-     * to load an actual FHIR resource into memory. FHIR registry resources must have a unique url+version pair. If this method\n-     * returns a collection containing FHIR registry resources with duplicate url+version pairs, then the first one will be\n-     * added to the registry and any subsequent duplicates will be ignored.\n+     * Get the registry resource from this provider for the given resource type, url and version\n      *\n-     * @return\n-     *     the FHIR registry resources for this provider.\n-     */\n-    Collection<FHIRRegistryResource> getResources();\n-\n-    /**\n-     * Get the FHIR registry resource with the given url and version. If the version is null, then the latest version of\n-     * the registry resource is returned.\n+     * <p>If the version is null, then the latest version of the registry resource is returned (if available)\n      *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n      * @param url\n      *     the url of the registry resource\n      * @param version\n      *     the version of the registry resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MTg1OQ==", "bodyText": "i guess its right above this, so maybe not", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406381859", "createdAt": "2020-04-09T18:03:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "diffHunk": "@@ -8,44 +8,77 @@\n \n import java.util.Collection;\n \n+import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n \n /**\n  * An SPI for {@link FHIRRegistryResource} instances\n  */\n public interface FHIRRegistryResourceProvider {\n     /**\n-     * Get the FHIR registry resources for this provider. A FHIR registry resource contains all of the information necessary\n-     * to load an actual FHIR resource into memory. FHIR registry resources must have a unique url+version pair. If this method\n-     * returns a collection containing FHIR registry resources with duplicate url+version pairs, then the first one will be\n-     * added to the registry and any subsequent duplicates will be ignored.\n+     * Get the registry resource from this provider for the given resource type, url and version\n      *\n-     * @return\n-     *     the FHIR registry resources for this provider.\n-     */\n-    Collection<FHIRRegistryResource> getResources();\n-\n-    /**\n-     * Get the FHIR registry resource with the given url and version. If the version is null, then the latest version of\n-     * the registry resource is returned.\n+     * <p>If the version is null, then the latest version of the registry resource is returned (if available)\n      *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n      * @param url\n      *     the url of the registry resource\n      * @param version\n      *     the version of the registry resource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MTI2NA=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NzAyOQ==", "bodyText": "added to the javadoc", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406387029", "createdAt": "2020-04-09T18:12:52Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "diffHunk": "@@ -8,44 +8,77 @@\n \n import java.util.Collection;\n \n+import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n \n /**\n  * An SPI for {@link FHIRRegistryResource} instances\n  */\n public interface FHIRRegistryResourceProvider {\n     /**\n-     * Get the FHIR registry resources for this provider. A FHIR registry resource contains all of the information necessary\n-     * to load an actual FHIR resource into memory. FHIR registry resources must have a unique url+version pair. If this method\n-     * returns a collection containing FHIR registry resources with duplicate url+version pairs, then the first one will be\n-     * added to the registry and any subsequent duplicates will be ignored.\n+     * Get the registry resource from this provider for the given resource type, url and version\n      *\n-     * @return\n-     *     the FHIR registry resources for this provider.\n-     */\n-    Collection<FHIRRegistryResource> getResources();\n-\n-    /**\n-     * Get the FHIR registry resource with the given url and version. If the version is null, then the latest version of\n-     * the registry resource is returned.\n+     * <p>If the version is null, then the latest version of the registry resource is returned (if available)\n      *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n      * @param url\n      *     the url of the registry resource\n      * @param version\n      *     the version of the registry resource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MTI2NA=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkzNDQwOnYy", "diffSide": "RIGHT", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowNTo0N1rOGDjqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoxNjoyMFrOGDkBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzE1NQ==", "bodyText": "worth explicitly mentioning that this can be a Resource type OR a data type (Or something else?)", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406383155", "createdAt": "2020-04-09T18:05:47Z", "author": {"login": "lmsurpre"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "diffHunk": "@@ -8,44 +8,77 @@\n \n import java.util.Collection;\n \n+import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n \n /**\n  * An SPI for {@link FHIRRegistryResource} instances\n  */\n public interface FHIRRegistryResourceProvider {\n     /**\n-     * Get the FHIR registry resources for this provider. A FHIR registry resource contains all of the information necessary\n-     * to load an actual FHIR resource into memory. FHIR registry resources must have a unique url+version pair. If this method\n-     * returns a collection containing FHIR registry resources with duplicate url+version pairs, then the first one will be\n-     * added to the registry and any subsequent duplicates will be ignored.\n+     * Get the registry resource from this provider for the given resource type, url and version\n      *\n-     * @return\n-     *     the FHIR registry resources for this provider.\n-     */\n-    Collection<FHIRRegistryResource> getResources();\n-\n-    /**\n-     * Get the FHIR registry resource with the given url and version. If the version is null, then the latest version of\n-     * the registry resource is returned.\n+     * <p>If the version is null, then the latest version of the registry resource is returned (if available)\n      *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n      * @param url\n      *     the url of the registry resource\n      * @param version\n      *     the version of the registry resource\n      * @return\n-     *     the FHIR registry resource for the given url+version pair if exists, null otherwise\n+     *     the registry resource from this provider for the given resource type, url and version if exists, null otherwise\n+     */\n+    FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version);\n+\n+    /**\n+     * Get the registry resources from this provider for the given resource type\n+     *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n+     * @return\n+     *     the registry resources from this provider for the given resource type\n+     */\n+    Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType);\n+\n+    /**\n+     * Get all the registry resources from this provider\n+     *\n+     * @return\n+     *     all of the registry resources from this provider\n      */\n-    FHIRRegistryResource getResource(String url, String version);\n+    Collection<FHIRRegistryResource> getRegistryResources();\n \n     /**\n-     * Get the profile resources from this provider for the given type. A profile resource is a FHIR registry resource that refers\n-     * to a StructureDefinition with kind=resource and is not defined in the base specification.\n+     * Get the profile resources from this provider that constrain the given type\n      *\n      * @param type\n-     *     the type of resource that the profile resources are derived from\n+     *     the constrained type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4OTA0NQ==", "bodyText": "updated javadoc and added validation", "url": "https://github.com/IBM/FHIR/pull/917#discussion_r406389045", "createdAt": "2020-04-09T18:16:20Z", "author": {"login": "JohnTimm"}, "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java", "diffHunk": "@@ -8,44 +8,77 @@\n \n import java.util.Collection;\n \n+import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n \n /**\n  * An SPI for {@link FHIRRegistryResource} instances\n  */\n public interface FHIRRegistryResourceProvider {\n     /**\n-     * Get the FHIR registry resources for this provider. A FHIR registry resource contains all of the information necessary\n-     * to load an actual FHIR resource into memory. FHIR registry resources must have a unique url+version pair. If this method\n-     * returns a collection containing FHIR registry resources with duplicate url+version pairs, then the first one will be\n-     * added to the registry and any subsequent duplicates will be ignored.\n+     * Get the registry resource from this provider for the given resource type, url and version\n      *\n-     * @return\n-     *     the FHIR registry resources for this provider.\n-     */\n-    Collection<FHIRRegistryResource> getResources();\n-\n-    /**\n-     * Get the FHIR registry resource with the given url and version. If the version is null, then the latest version of\n-     * the registry resource is returned.\n+     * <p>If the version is null, then the latest version of the registry resource is returned (if available)\n      *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n      * @param url\n      *     the url of the registry resource\n      * @param version\n      *     the version of the registry resource\n      * @return\n-     *     the FHIR registry resource for the given url+version pair if exists, null otherwise\n+     *     the registry resource from this provider for the given resource type, url and version if exists, null otherwise\n+     */\n+    FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version);\n+\n+    /**\n+     * Get the registry resources from this provider for the given resource type\n+     *\n+     * @param resourceType\n+     *     the resource type of the registry resource\n+     * @return\n+     *     the registry resources from this provider for the given resource type\n+     */\n+    Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType);\n+\n+    /**\n+     * Get all the registry resources from this provider\n+     *\n+     * @return\n+     *     all of the registry resources from this provider\n      */\n-    FHIRRegistryResource getResource(String url, String version);\n+    Collection<FHIRRegistryResource> getRegistryResources();\n \n     /**\n-     * Get the profile resources from this provider for the given type. A profile resource is a FHIR registry resource that refers\n-     * to a StructureDefinition with kind=resource and is not defined in the base specification.\n+     * Get the profile resources from this provider that constrain the given type\n      *\n      * @param type\n-     *     the type of resource that the profile resources are derived from\n+     *     the constrained type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzE1NQ=="}, "originalCommit": {"oid": "9a9a7328ae082b0ba440eca4fd90949184029e0a"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 182, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}