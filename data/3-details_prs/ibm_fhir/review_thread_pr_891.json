{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODA3NDgy", "number": 891, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMDo1ODozMFrODu8BRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMToxMToyM1rODu8GYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ0NDU0OnYy", "diffSide": "RIGHT", "path": "fhir-ig-carin-bb/src/test/resources/JSON/EOB1.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMDo1ODozMFrOGBFCNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMToyMFrOGBfQ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDI0NQ==", "bodyText": "do we make the examples accessible from the registry, or we need it in the test dir too?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403784245", "createdAt": "2020-04-06T00:58:30Z", "author": {"login": "lmsurpre"}, "path": "fhir-ig-carin-bb/src/test/resources/JSON/EOB1.json", "diffHunk": "@@ -0,0 +1,1101 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMzk5Nw==", "bodyText": "We do not make examples accessible from the registry. This example did not come from the IG package. It was in the IG github repo.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404213997", "createdAt": "2020-04-06T16:11:20Z", "author": {"login": "JohnTimm"}, "path": "fhir-ig-carin-bb/src/test/resources/JSON/EOB1.json", "diffHunk": "@@ -0,0 +1,1101 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDI0NQ=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ0NzY2OnYy", "diffSide": "RIGHT", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowMTo0MFrOGBFD2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTowNDo0OFrOGBl2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDY2Ng==", "bodyText": "Please update the class-level javadoc to indicate that we've added our own flavor of 'memberOf' which allows the caller to pass a binding strength", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403784666", "createdAt": "2020-04-06T01:01:40Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -63,7 +67,7 @@ public int getMinArity() {\n \n     @Override\n     public int getMaxArity() {\n-        return 1;\n+        return 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMjkwMg==", "bodyText": "Done", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404222902", "createdAt": "2020-04-06T16:24:16Z", "author": {"login": "JohnTimm"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -63,7 +67,7 @@ public int getMinArity() {\n \n     @Override\n     public int getMaxArity() {\n-        return 1;\n+        return 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDY2Ng=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyMTg3Ng==", "bodyText": "new class doc looks good", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404321876", "createdAt": "2020-04-06T19:04:48Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -63,7 +67,7 @@ public int getMinArity() {\n \n     @Override\n     public int getMaxArity() {\n-        return 1;\n+        return 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDY2Ng=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ0OTA5OnYy", "diffSide": "RIGHT", "path": "fhir-ig-mcode/src/test/java/com/ibm/fhir/ig/mcode/test/ConstraintGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowMzoxN1rOGBFErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxNToyMlrOGBfcZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDg3OQ==", "bodyText": "should it be a proper test?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403784879", "createdAt": "2020-04-06T01:03:17Z", "author": {"login": "lmsurpre"}, "path": "fhir-ig-mcode/src/test/java/com/ibm/fhir/ig/mcode/test/ConstraintGeneratorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.ig.mcode.test;\n+\n+import com.ibm.fhir.ig.mcode.MCODEResourceProvider;\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.profile.ProfileSupport;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+\n+public class ConstraintGeneratorTest {\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNjkzNQ==", "bodyText": "This is more of a diagnostic driver to print out the generated constraints for manual inspection. I don't anticipate that we will make this part of the automated unit tests for this module.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404216935", "createdAt": "2020-04-06T16:15:22Z", "author": {"login": "JohnTimm"}, "path": "fhir-ig-mcode/src/test/java/com/ibm/fhir/ig/mcode/test/ConstraintGeneratorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.ig.mcode.test;\n+\n+import com.ibm.fhir.ig.mcode.MCODEResourceProvider;\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.util.ModelSupport;\n+import com.ibm.fhir.profile.ProfileSupport;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+\n+public class ConstraintGeneratorTest {\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDg3OQ=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1MDkyOnYy", "diffSide": "RIGHT", "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowNDo1OVrOGBFFrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NDoyOFrOGBlIuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTEzMw==", "bodyText": "is it only warnings, or might we expect errors here too?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403785133", "createdAt": "2020-04-06T01:04:59Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {\n+            constraint = null;\n+        }\n+\n+        /**\n+         * Get the constraint currently under evaluation\n+         *\n+         * @return\n+         *     the constraint currently under evaluation if exists, otherwise null\n+         */\n+        public Constraint getConstraint() {\n+            return constraint;\n+        }\n+\n+        /**\n+         * Indicates whether this evaluation context has an associated constraint\n+         *\n+         * @return\n+         *     true if this evaluation context has an associated constraint, otherwise false\n+         */\n+        public boolean hasConstraint() {\n+            return constraint != null;\n+        }\n+\n+        /**\n+         * Get the list of issues that occurred during evaluation\n+         *\n+         * @return\n+         *     the list of issues that occurred during evaluation\n+         */\n+        public List<Issue> getIssues() {\n+            return issues;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNDMwNA==", "bodyText": "I made it flexible enough to support both.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404214304", "createdAt": "2020-04-06T16:11:45Z", "author": {"login": "JohnTimm"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {\n+            constraint = null;\n+        }\n+\n+        /**\n+         * Get the constraint currently under evaluation\n+         *\n+         * @return\n+         *     the constraint currently under evaluation if exists, otherwise null\n+         */\n+        public Constraint getConstraint() {\n+            return constraint;\n+        }\n+\n+        /**\n+         * Indicates whether this evaluation context has an associated constraint\n+         *\n+         * @return\n+         *     true if this evaluation context has an associated constraint, otherwise false\n+         */\n+        public boolean hasConstraint() {\n+            return constraint != null;\n+        }\n+\n+        /**\n+         * Get the list of issues that occurred during evaluation\n+         *\n+         * @return\n+         *     the list of issues that occurred during evaluation\n+         */\n+        public List<Issue> getIssues() {\n+            return issues;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTEzMw=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NDcxOQ==", "bodyText": "but currently, an error will result in a thrown exception, right?  and presumably an empty list of issues?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404294719", "createdAt": "2020-04-06T18:18:25Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {\n+            constraint = null;\n+        }\n+\n+        /**\n+         * Get the constraint currently under evaluation\n+         *\n+         * @return\n+         *     the constraint currently under evaluation if exists, otherwise null\n+         */\n+        public Constraint getConstraint() {\n+            return constraint;\n+        }\n+\n+        /**\n+         * Indicates whether this evaluation context has an associated constraint\n+         *\n+         * @return\n+         *     true if this evaluation context has an associated constraint, otherwise false\n+         */\n+        public boolean hasConstraint() {\n+            return constraint != null;\n+        }\n+\n+        /**\n+         * Get the list of issues that occurred during evaluation\n+         *\n+         * @return\n+         *     the list of issues that occurred during evaluation\n+         */\n+        public List<Issue> getIssues() {\n+            return issues;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTEzMw=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMDIwMA==", "bodyText": "Added javadoc to clarify that these are \"supplemental issues\" used to convey additional information to the client.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404310200", "createdAt": "2020-04-06T18:44:28Z", "author": {"login": "JohnTimm"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {\n+            constraint = null;\n+        }\n+\n+        /**\n+         * Get the constraint currently under evaluation\n+         *\n+         * @return\n+         *     the constraint currently under evaluation if exists, otherwise null\n+         */\n+        public Constraint getConstraint() {\n+            return constraint;\n+        }\n+\n+        /**\n+         * Indicates whether this evaluation context has an associated constraint\n+         *\n+         * @return\n+         *     true if this evaluation context has an associated constraint, otherwise false\n+         */\n+        public boolean hasConstraint() {\n+            return constraint != null;\n+        }\n+\n+        /**\n+         * Get the list of issues that occurred during evaluation\n+         *\n+         * @return\n+         *     the list of issues that occurred during evaluation\n+         */\n+        public List<Issue> getIssues() {\n+            return issues;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTEzMw=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1MzA4OnYy", "diffSide": "RIGHT", "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowNzoyM1rOGBFHDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyNDoyNlrOGBf0Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTQ4NA==", "bodyText": "maybe a comment to explain this line?  like why do we only add the vocabulary constraint if the child has no constraints.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403785484", "createdAt": "2020-04-06T01:07:23Z", "author": {"login": "lmsurpre"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -161,15 +171,17 @@ private String generate(Node node) {\n         }\n \n         if (hasVocabularyConstraint(elementDefinition)) {\n-            return generateVocabularyConstraint(elementDefinition);\n+            String expr = generateVocabularyConstraint(elementDefinition);\n+            if (node.children.stream().noneMatch(child -> hasConstraint(child))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzAzNA==", "bodyText": "Added comments to clarify the behavior.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404223034", "createdAt": "2020-04-06T16:24:26Z", "author": {"login": "JohnTimm"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -161,15 +171,17 @@ private String generate(Node node) {\n         }\n \n         if (hasVocabularyConstraint(elementDefinition)) {\n-            return generateVocabularyConstraint(elementDefinition);\n+            String expr = generateVocabularyConstraint(elementDefinition);\n+            if (node.children.stream().noneMatch(child -> hasConstraint(child))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTQ4NA=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1MzgxOnYy", "diffSide": "RIGHT", "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowNzo1MlrOGBFHaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMjoyM1rOGBfT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTU3OQ==", "bodyText": "will there ALWAYS be another constraint following this and?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403785579", "createdAt": "2020-04-06T01:07:52Z", "author": {"login": "lmsurpre"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -161,15 +171,17 @@ private String generate(Node node) {\n         }\n \n         if (hasVocabularyConstraint(elementDefinition)) {\n-            return generateVocabularyConstraint(elementDefinition);\n+            String expr = generateVocabularyConstraint(elementDefinition);\n+            if (node.children.stream().noneMatch(child -> hasConstraint(child))) {\n+                return expr;\n+            }\n+            sb.append(expr).append(\" and \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNDc4Mw==", "bodyText": "if hasConstraint returns true on the check above it, then yes.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404214783", "createdAt": "2020-04-06T16:12:23Z", "author": {"login": "JohnTimm"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -161,15 +171,17 @@ private String generate(Node node) {\n         }\n \n         if (hasVocabularyConstraint(elementDefinition)) {\n-            return generateVocabularyConstraint(elementDefinition);\n+            String expr = generateVocabularyConstraint(elementDefinition);\n+            if (node.children.stream().noneMatch(child -> hasConstraint(child))) {\n+                return expr;\n+            }\n+            sb.append(expr).append(\" and \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTU3OQ=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1NjAwOnYy", "diffSide": "RIGHT", "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTowOToyOFrOGBFIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMjo0MFrOGBfU0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTg2NQ==", "bodyText": "quite a piece of logic here, maybe a comment to explain?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403785865", "createdAt": "2020-04-06T01:09:28Z", "author": {"login": "lmsurpre"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -514,8 +534,12 @@ private boolean hasVocabularyConstraint(ElementDefinition elementDefinition) {\n             String baseValueSet = (baseBinding != null) ? baseBinding.getValueSet().getValue() : null;\n             String strength = binding.getStrength().getValue();\n             String valueSet = binding.getValueSet().getValue();\n-            return (!\"required\".equals(baseStrength) && \"required\".equals(strength))\n-                    || (\"required\".equals(baseStrength) && \"required\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet));\n+            return (!\"preferred\".equals(baseStrength) && \"preferred\".equals(strength)) ||\n+                    (\"preferred\".equals(baseStrength) && \"preferred\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet)) ||\n+                    (!\"extensible\".equals(baseStrength) && \"extensible\".equals(strength)) ||\n+                    (\"extensible\".equals(baseStrength) && \"extensible\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet)) ||\n+                    (!\"required\".equals(baseStrength) && \"required\".equals(strength)) ||\n+                    (\"required\".equals(baseStrength) && \"required\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNDk5Mw==", "bodyText": "I have simplified this logic in the latest commit. It should be much easier to understand now.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404214993", "createdAt": "2020-04-06T16:12:40Z", "author": {"login": "JohnTimm"}, "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -514,8 +534,12 @@ private boolean hasVocabularyConstraint(ElementDefinition elementDefinition) {\n             String baseValueSet = (baseBinding != null) ? baseBinding.getValueSet().getValue() : null;\n             String strength = binding.getStrength().getValue();\n             String valueSet = binding.getValueSet().getValue();\n-            return (!\"required\".equals(baseStrength) && \"required\".equals(strength))\n-                    || (\"required\".equals(baseStrength) && \"required\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet));\n+            return (!\"preferred\".equals(baseStrength) && \"preferred\".equals(strength)) ||\n+                    (\"preferred\".equals(baseStrength) && \"preferred\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet)) ||\n+                    (!\"extensible\".equals(baseStrength) && \"extensible\".equals(strength)) ||\n+                    (\"extensible\".equals(baseStrength) && \"extensible\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet)) ||\n+                    (!\"required\".equals(baseStrength) && \"required\".equals(strength)) ||\n+                    (\"required\".equals(baseStrength) && \"required\".equals(strength) && !valueSetEqualsIgnoreVersion(valueSet, baseValueSet));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTg2NQ=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1NzUwOnYy", "diffSide": "RIGHT", "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMToxMTowN1rOGBFJbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTowNDozM1rOGBl13Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjA5NA==", "bodyText": "when is setting the constraint required?  when is it not required?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403786094", "createdAt": "2020-04-06T01:11:07Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNjMxOQ==", "bodyText": "It is driven by the Validator to give the FHIRPathEvaluator and any FHIRPathFunction(s) access to it during evaluation. Thus far, the only function that cares about it is MemberOfFunction.", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404216319", "createdAt": "2020-04-06T16:14:32Z", "author": {"login": "JohnTimm"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjA5NA=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyMTc1Nw==", "bodyText": "new method doc looks good", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404321757", "createdAt": "2020-04-06T19:04:33Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjA5NA=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTQ1NzYyOnYy", "diffSide": "RIGHT", "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMToxMToyM1rOGBFJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMzozNlrOGBfXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjEyMA==", "bodyText": "when is unsetting the constraint required? when is it not required?", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r403786120", "createdAt": "2020-04-06T01:11:23Z", "author": {"login": "lmsurpre"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTY2Mg==", "bodyText": "The unset is driven by the Validator (after it has evaluated the current constraint and before it changes to the context constraint).", "url": "https://github.com/IBM/FHIR/pull/891#discussion_r404215662", "createdAt": "2020-04-06T16:13:36Z", "author": {"login": "JohnTimm"}, "path": "fhir-path/src/main/java/com/ibm/fhir/path/evaluator/FHIRPathEvaluator.java", "diffHunk": "@@ -1457,5 +1462,59 @@ public void unsetExternalConstant(String name) {\n         public boolean hasExternalConstant(String name) {\n             return externalConstantMap.containsKey(name);\n         }\n+\n+        /**\n+         * Set the constraint currently under evaluation\n+         *\n+         * @param constraint\n+         *     the constraint currently under evaluation\n+         */\n+        public void setConstraint(Constraint constraint) {\n+            this.constraint = constraint;\n+        }\n+\n+        /**\n+         * Unset the constraint currently under evaluation\n+         */\n+        public void unsetConstraint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjEyMA=="}, "originalCommit": {"oid": "3b047baabbadbb0968dfeb48e3fcd5094c0f0f38"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 161, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}