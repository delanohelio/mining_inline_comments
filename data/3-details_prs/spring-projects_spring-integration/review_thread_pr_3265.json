{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMTUwMzk1", "number": 3265, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToxODozNVrOD3PxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjozMzowNFrOD3SAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjU2NjM4OnYy", "diffSide": "RIGHT", "path": "src/reference/asciidoc/polling-consumer.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToxODozNVrOGNZWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToxODozNVrOGNZWKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5OTk0Nw==", "bodyText": "(The", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416699947", "createdAt": "2020-04-28T15:18:35Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjU3NDM0OnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/aop/CompoundTriggerAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToyMDoxN1rOGNZbIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToyMzo0OVrOGNZmYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMTIxNg==", "bodyText": "Wouldn't something like Advisable<T> be better than Object?", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416701216", "createdAt": "2020-04-28T15:20:17Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/aop/CompoundTriggerAdvice.java", "diffHunk": "@@ -47,8 +51,21 @@ public CompoundTriggerAdvice(CompoundTrigger compoundTrigger, Trigger overrideTr\n \t\tthis.override = overrideTrigger;\n \t}\n \n+\t/**\n+\t * @param result the received message.\n+\t * @param source the message source.\n+\t * @return the message or null\n+\t * @deprecated since 5.3 in favor of {@link #afterReceive(Message, Object)}\n+\t */\n \t@Override\n+\t@Deprecated\n \tpublic Message<?> afterReceive(Message<?> result, MessageSource<?> source) {\n+\t\treturn afterReceive(result, (Object) source);\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic Message<?> afterReceive(@Nullable Message<?> result, Object source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwNDA5Nw==", "bodyText": "Well, in most cases it is really about both MessageSource and PollableChannel, so even with generic argument it still going to be an Object \ud83d\ude04\nI thought about a Supplier for both those interfaces, but this is not what we are going to use with the receive(timeout).\nTherefore I'm OK to stick with an Object for a source argument.", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416704097", "createdAt": "2020-04-28T15:23:49Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/aop/CompoundTriggerAdvice.java", "diffHunk": "@@ -47,8 +51,21 @@ public CompoundTriggerAdvice(CompoundTrigger compoundTrigger, Trigger overrideTr\n \t\tthis.override = overrideTrigger;\n \t}\n \n+\t/**\n+\t * @param result the received message.\n+\t * @param source the message source.\n+\t * @return the message or null\n+\t * @deprecated since 5.3 in favor of {@link #afterReceive(Message, Object)}\n+\t */\n \t@Override\n+\t@Deprecated\n \tpublic Message<?> afterReceive(Message<?> result, MessageSource<?> source) {\n+\t\treturn afterReceive(result, (Object) source);\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic Message<?> afterReceive(@Nullable Message<?> result, Object source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMTIxNg=="}, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjkzMjk1OnYy", "diffSide": "RIGHT", "path": "src/reference/asciidoc/polling-consumer.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjozMzowNFrOGNc1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjozMzowNFrOGNc1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NzE1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)\n          \n          \n            \n            (The `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416757152", "createdAt": "2020-04-28T16:33:04Z", "author": {"login": "artembilan"}, "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2037, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}