{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjE1NTcw", "number": 3173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1MTo1NlrODeLHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1NDo1NVrODeLJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY1OTg1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1MTo1NlrOFnMjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNjowNzozM1rOFnRDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NDQyOA==", "bodyText": "Or you will move Spring AMQP 2.2.4 release to February 12th: https://github.com/spring-projects/spring-integration/milestone/23.\nOr this PR will be placed on hold until February 26th.\nBut we can't release the next Spring Integration milestone without proper dependencies.\nThanks for understanding.", "url": "https://github.com/spring-projects/spring-integration/pull/3173#discussion_r376644428", "createdAt": "2020-02-07T22:51:56Z", "author": {"login": "artembilan"}, "path": "build.gradle", "diffHunk": "@@ -90,7 +90,7 @@ ext {\n \trsocketVersion = '1.0.0-RC6'\n \tservletApiVersion = '4.0.1'\n \tsmackVersion = '4.3.4'\n-\tspringAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '2.2.3.RELEASE'\n+\tspringAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '2.2.4.BUILD-SNAPSHOT'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0aa7ddfd59b7196dc4c1d911e76d8bb54d19c50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxODA4OQ==", "bodyText": "I moved the release to 2/12.", "url": "https://github.com/spring-projects/spring-integration/pull/3173#discussion_r376718089", "createdAt": "2020-02-08T16:07:33Z", "author": {"login": "garyrussell"}, "path": "build.gradle", "diffHunk": "@@ -90,7 +90,7 @@ ext {\n \trsocketVersion = '1.0.0-RC6'\n \tservletApiVersion = '4.0.1'\n \tsmackVersion = '4.3.4'\n-\tspringAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '2.2.3.RELEASE'\n+\tspringAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '2.2.4.BUILD-SNAPSHOT'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NDQyOA=="}, "originalCommit": {"oid": "f0aa7ddfd59b7196dc4c1d911e76d8bb54d19c50"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY2NjI0OnYy", "diffSide": "RIGHT", "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/EndpointUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1NDo1NVrOFnMm5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1NDo1NVrOFnMm5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NTM1MA==", "bodyText": "@since 5.3? Because of new public API", "url": "https://github.com/spring-projects/spring-integration/pull/3173#discussion_r376645350", "createdAt": "2020-02-07T22:54:55Z", "author": {"login": "artembilan"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/EndpointUtils.java", "diffHunk": "@@ -50,9 +52,28 @@ public static ListenerExecutionFailedException errorMessagePayload(Message messa\n \t\t\tChannel channel, boolean isManualAck, Exception ex) {\n \n \t\treturn isManualAck\n-\t\t\t\t? new ManualAckListenerExecutionFailedException(LEFE_MESSAGE, ex, message, channel,\n-\t\t\t\t\t\tmessage.getMessageProperties().getDeliveryTag())\n+\t\t\t\t? new ManualAckListenerExecutionFailedException(LEFE_MESSAGE, ex, channel,\n+\t\t\t\t\t\tmessage.getMessageProperties().getDeliveryTag(), message)\n \t\t\t\t: new ListenerExecutionFailedException(LEFE_MESSAGE, ex, message);\n \t}\n \n+\t/**\n+\t * Return an {@link ListenerExecutionFailedException} or a {@link ManualAckListenerExecutionFailedException}\n+\t * depending on whether isManualAck is false or true.\n+\t * @param messages the failed messages.\n+\t * @param channel the channel.\n+\t * @param isManualAck true if the container uses manual acknowledgment.\n+\t * @param ex the exception.\n+\t * @return the exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0aa7ddfd59b7196dc4c1d911e76d8bb54d19c50"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1965, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}