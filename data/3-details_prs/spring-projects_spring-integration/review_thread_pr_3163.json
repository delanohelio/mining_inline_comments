{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzE4NTMw", "number": 3163, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTozNVrODcTFhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTozNVrODcTFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTk5NDI4OnYy", "diffSide": "RIGHT", "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTozNVrOFkRwjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoxODozN1rOFkSNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw==", "bodyText": "Formatting inconsistent with the two changes above. This one looks more correct to me.", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373584013", "createdAt": "2020-01-31T17:01:35Z", "author": {"login": "garyrussell"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA5MA==", "bodyText": "Really? And I don't like breaking by dot and leaving a variable on the line with other calls. \ud83d\ude04", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373589090", "createdAt": "2020-01-31T17:13:23Z", "author": {"login": "artembilan"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}, "originalCommit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MDI2Mw==", "bodyText": "I don't really mind either way; but I think it should be consistent.", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373590263", "createdAt": "2020-01-31T17:16:05Z", "author": {"login": "garyrussell"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}, "originalCommit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTM3MA==", "bodyText": "Yes, please, see the latest commit.\nThanks", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373591370", "createdAt": "2020-01-31T17:18:37Z", "author": {"login": "artembilan"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}, "originalCommit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}