{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTY3MTM3", "number": 3162, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1MjoxMlrODb_JmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODozM1rODcAF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjcyNzkzOnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1MjoxMlrOFjyTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1MjoxMlrOFjyTIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2ODU3OA==", "bodyText": "Why is this needed? This is the default.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373068578", "createdAt": "2020-01-30T16:52:12Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -118,6 +115,7 @@\n \tpublic AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t\tAssert.notNull(uriExpression, \"URI Expression is required\");\n \t\tthis.uriExpression = uriExpression;\n+\t\tthis.uriFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjczMjM2OnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1MzoyOFrOFjyV3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzowOTo0M1rOFjy5ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw==", "bodyText": "Why package visibility?\nWhy not UriBuilderFactory?", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069277", "createdAt": "2020-01-30T16:53:28Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -85,6 +82,8 @@\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n+\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3MzcxMQ==", "bodyText": "The UriBuilderFactory doesn't have a setEncodingMode()", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373073711", "createdAt": "2020-01-30T17:01:01Z", "author": {"login": "artembilan"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -85,6 +82,8 @@\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n+\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw=="}, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3ODQzMA==", "bodyText": "and package?", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373078430", "createdAt": "2020-01-30T17:09:43Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -85,6 +82,8 @@\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n+\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw=="}, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjczNjY3OnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1NDo0MVrOFjyYlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzoxMDoxN1rOFjy6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ==", "bodyText": "Why not setUriBuilderFactory ?", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069975", "createdAt": "2020-01-30T16:54:41Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -127,9 +125,25 @@ public AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t * <code>true</code>.\n \t * @param encodeUri true if the URI should be encoded.\n \t * @see UriComponentsBuilder\n+\t * @deprecated since 5.3 in favor of {@link #setEncodingMode}\n \t */\n+\t@Deprecated\n \tpublic void setEncodeUri(boolean encodeUri) {\n-\t\tthis.encodeUri = encodeUri;\n+\t\tsetEncodingMode(\n+\t\t\t\tencodeUri\n+\t\t\t\t\t\t? DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES\n+\t\t\t\t\t\t: DefaultUriBuilderFactory.EncodingMode.NONE);\n+\t}\n+\n+\t/**\n+\t * Set the encoding mode to use.\n+\t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * @param encodingMode the mode to use for uri encoding\n+\t * @since 5.3\n+\t */\n+\tpublic void setEncodingMode(DefaultUriBuilderFactory.EncodingMode encodingMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3NTEyNQ==", "bodyText": "Right. I'm going to document that for more complex scenarios it would be better to configure an external RestTemplate and already use its setUriTemplateHandler().\nI would even go with all the RestTempalte options as an external reference. I'm not a fun of mutating internal objects.\nBut that would be too drastic even in the point release...", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373075125", "createdAt": "2020-01-30T17:03:31Z", "author": {"login": "artembilan"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -127,9 +125,25 @@ public AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t * <code>true</code>.\n \t * @param encodeUri true if the URI should be encoded.\n \t * @see UriComponentsBuilder\n+\t * @deprecated since 5.3 in favor of {@link #setEncodingMode}\n \t */\n+\t@Deprecated\n \tpublic void setEncodeUri(boolean encodeUri) {\n-\t\tthis.encodeUri = encodeUri;\n+\t\tsetEncodingMode(\n+\t\t\t\tencodeUri\n+\t\t\t\t\t\t? DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES\n+\t\t\t\t\t\t: DefaultUriBuilderFactory.EncodingMode.NONE);\n+\t}\n+\n+\t/**\n+\t * Set the encoding mode to use.\n+\t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * @param encodingMode the mode to use for uri encoding\n+\t * @since 5.3\n+\t */\n+\tpublic void setEncodingMode(DefaultUriBuilderFactory.EncodingMode encodingMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ=="}, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3ODczMw==", "bodyText": "Ok, makes sense; proceed with the remaining work \ud83d\ude04", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373078733", "createdAt": "2020-01-30T17:10:17Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -127,9 +125,25 @@ public AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t * <code>true</code>.\n \t * @param encodeUri true if the URI should be encoded.\n \t * @see UriComponentsBuilder\n+\t * @deprecated since 5.3 in favor of {@link #setEncodingMode}\n \t */\n+\t@Deprecated\n \tpublic void setEncodeUri(boolean encodeUri) {\n-\t\tthis.encodeUri = encodeUri;\n+\t\tsetEncodingMode(\n+\t\t\t\tencodeUri\n+\t\t\t\t\t\t? DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES\n+\t\t\t\t\t\t: DefaultUriBuilderFactory.EncodingMode.NONE);\n+\t}\n+\n+\t/**\n+\t * Set the encoding mode to use.\n+\t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * @param encodingMode the mode to use for uri encoding\n+\t * @since 5.3\n+\t */\n+\tpublic void setEncodingMode(DefaultUriBuilderFactory.EncodingMode encodingMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ=="}, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg4MDc0OnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODowNlrOFjzzWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODowNlrOFjzzWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzIwOQ==", "bodyText": "Unusual formatting.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093209", "createdAt": "2020-01-30T17:38:06Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -192,13 +200,15 @@ public void withUrlAndTemplate() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlAndTemplate, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg4MTU2OnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODoxOFrOFjzzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODoxOFrOFjzzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzMxOQ==", "bodyText": "Here too.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093319", "createdAt": "2020-01-30T17:38:18Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -224,13 +234,15 @@ public void withUrlExpression() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpression, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isNotSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg4MjMzOnYy", "diffSide": "RIGHT", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODozM1rOFjz0Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODozM1rOFjz0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzQzOA==", "bodyText": "And here", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093438", "createdAt": "2020-01-30T17:38:33Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -257,13 +269,15 @@ public void withUrlExpressionAndTemplate() {\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpressionAndTemplate, \"handler.restTemplate\",\n \t\t\t\t\t\tRestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}