{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzE4NTMw", "number": 3163, "title": "Populate a JsonHeaders.RESOLVABLE_TYPE on reply", "bodyText": "Fixes spring-projects/spring-integration-samples#277\nIn the AbstractAmqpOutboundEndpoint the JsonHeaders.RESOLVABLE_TYPE\nfrom request message is copied to reply message making inconsistency downstream.\nThe JsonToObjectTransformer consults first a JsonHeaders.RESOLVABLE_TYPE\nand deserialize payload to wrong type\n\nFix DefaultAmqpHeaderMapper to populate a JsonHeaders.RESOLVABLE_TYPE\nalongside with other JsonHeaders populated from the reply AMQP message.\nThis way a JsonHeaders.RESOLVABLE_TYPE from request message won't have effect\nTo get access to classes, supply AbstractHeaderMapper with a bean factory ClassLoader\nIntroduce a couple utility methods into JsonHeaders for building a ResolvableType\n\nCherry-pick to 5.2.x", "createdAt": "2020-01-30T22:22:03Z", "url": "https://github.com/spring-projects/spring-integration/pull/3163", "merged": true, "mergeCommit": {"oid": "2f4394d8b527b227d0ee2ff43de0ec2a50ffefef"}, "closed": true, "closedAt": "2020-01-31T19:17:20Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_iLtNgH2gAyMzY5MzE4NTMwOjFlZTA5MGNhOGZhOTQ1Nzg5NjJlZTdlNDM3ZTQ2MDIwNzA4NjRmODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_0JHtgFqTM1MTcxOTcwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/1ee090ca8fa94578962ee7e437e4602070864f85", "committedDate": "2020-01-30T22:21:43Z", "message": "Populate a JsonHeaders.RESOLVABLE_TYPE on reply\n\nFixes https://github.com/spring-projects/spring-integration-samples/issues/277\n\nIn the `AbstractAmqpOutboundEndpoint` the `JsonHeaders.RESOLVABLE_TYPE`\nfrom request message is copied to reply message making inconsistency downstream.\nThe `JsonToObjectTransformer` consults first a `JsonHeaders.RESOLVABLE_TYPE`\nand deserialize payload to wrong type\n\n* Fix `DefaultAmqpHeaderMapper` to populate a `JsonHeaders.RESOLVABLE_TYPE`\nalongside with other `JsonHeaders` populated from the reply AMQP message.\nThis way a `JsonHeaders.RESOLVABLE_TYPE` from request message won't have effect\n* To get access to classes, supply `AbstractHeaderMapper` with a bean factory `ClassLoader`\n* Introduce a couple utility methods into `JsonHeaders` for building a `ResolvableType`\n\n**Cherry-pick to 5.2.x**"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjQ0Njkx", "url": "https://github.com/spring-projects/spring-integration/pull/3163#pullrequestreview-351644691", "createdAt": "2020-01-31T17:01:35Z", "commit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTozNVrOFkRwjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTozNVrOFkRwjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw==", "bodyText": "Formatting inconsistent with the two changes above. This one looks more correct to me.", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373584013", "createdAt": "2020-01-31T17:01:35Z", "author": {"login": "garyrussell"}, "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee090ca8fa94578962ee7e437e4602070864f85"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e0c72102348574daa18dbdee0e0657caf2bf84", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/33e0c72102348574daa18dbdee0e0657caf2bf84", "committedDate": "2020-01-31T17:14:27Z", "message": "* Fix code formatting for arguments wrapping"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzE5NzA0", "url": "https://github.com/spring-projects/spring-integration/pull/3163#pullrequestreview-351719704", "createdAt": "2020-01-31T19:17:11Z", "commit": {"oid": "33e0c72102348574daa18dbdee0e0657caf2bf84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 163, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}