{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDU1MjQz", "number": 3167, "title": "GH-3155: Add support for Java DSL extensions", "bodyText": "Fixes #3155\nProvide an IntegrationFlowExtension for possible custom EI-operators\nin the target project use-cases.", "createdAt": "2020-02-05T16:05:30Z", "url": "https://github.com/spring-projects/spring-integration/pull/3167", "merged": true, "mergeCommit": {"oid": "867a8cf108ff60028a303e92af3f95a937f4710c"}, "closed": true, "closedAt": "2020-02-07T18:40:40Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBxD6tAFqTM1NDc1ODQ3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCDXRgAFqTM1NTMzODc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NzU4NDc1", "url": "https://github.com/spring-projects/spring-integration/pull/3167#pullrequestreview-354758475", "createdAt": "2020-02-06T20:43:51Z", "commit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDo0Mzo1MVrOFmplXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDo0OToyN1rOFmpvTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3MTUxNw==", "bodyText": "s/allow to extend an existing.../allow extension of the existing Java DSL with custom or composed.../", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376071517", "createdAt": "2020-02-06T20:43:51Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/dsl.adoc", "diffHunk": "@@ -1202,3 +1202,63 @@ That `errorRecovererFlow` can be used as follows:\n private Function<String, String> errorRecovererFlowGateway;\n ----\n ====\n+\n+[[java-dsl-extensions]]\n+=== DSL Extensions\n+\n+Starting with version 5.3, an `IntegrationFlowExtension` has been introduced to allow to extend an existing Java DSL to any possible custom or composed EIP-operators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3MjA5Mg==", "bodyText": "All that is needed is an extension of this class that provides methods which can be used in...", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376072092", "createdAt": "2020-02-06T20:45:06Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/dsl.adoc", "diffHunk": "@@ -1202,3 +1202,63 @@ That `errorRecovererFlow` can be used as follows:\n private Function<String, String> errorRecovererFlowGateway;\n ----\n ====\n+\n+[[java-dsl-extensions]]\n+=== DSL Extensions\n+\n+Starting with version 5.3, an `IntegrationFlowExtension` has been introduced to allow to extend an existing Java DSL to any possible custom or composed EIP-operators.\n+There is only enough to extend this class and write methods which are going to be used in the `IntegrationFlow` bean definitions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3Mjc4Mw==", "bodyText": "return s/an/the/ extension", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376072783", "createdAt": "2020-02-06T20:46:39Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/dsl.adoc", "diffHunk": "@@ -1202,3 +1202,63 @@ That `errorRecovererFlow` can be used as follows:\n private Function<String, String> errorRecovererFlowGateway;\n ----\n ====\n+\n+[[java-dsl-extensions]]\n+=== DSL Extensions\n+\n+Starting with version 5.3, an `IntegrationFlowExtension` has been introduced to allow to extend an existing Java DSL to any possible custom or composed EIP-operators.\n+There is only enough to extend this class and write methods which are going to be used in the `IntegrationFlow` bean definitions.\n+The extension class can also be used for custom `IntegrationComponentSpec` configuration; for example, missed or default options can be implemented in the existing `IntegrationComponentSpec` extension.\n+The sample below demonstrates a composite custom operator and usage of an `AggregatorSpec` extension for a default custom `outputProcessor`:\n+\n+====\n+[source,java]\n+----\n+public class CustomIntegrationFlowDefinition\n+        extends IntegrationFlowExtension<CustomIntegrationFlowDefinition> {\n+\n+    public CustomIntegrationFlowDefinition upperCaseAfterSplit() {\n+        return split()\n+                .transform(\"payload.toUpperCase()\");\n+    }\n+\n+    public CustomIntegrationFlowDefinition customAggregate(Consumer<CustomAggregatorSpec> aggregator) {\n+        return register(new CustomAggregatorSpec(), aggregator);\n+    }\n+\n+}\n+\n+public class CustomAggregatorSpec extends AggregatorSpec {\n+\n+    CustomAggregatorSpec() {\n+        outputProcessor(group ->\n+                group.getMessages()\n+                        .stream()\n+                        .map(Message::getPayload)\n+                        .map(String.class::cast)\n+                        .collect(Collectors.joining(\", \")));\n+    }\n+\n+}\n+----\n+====\n+\n+For a method chain flow the new DSL operator in these extensions must return an extension class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3MzEzOA==", "bodyText": "s/will look naturally with/will work with/", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376073138", "createdAt": "2020-02-06T20:47:26Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/dsl.adoc", "diffHunk": "@@ -1202,3 +1202,63 @@ That `errorRecovererFlow` can be used as follows:\n private Function<String, String> errorRecovererFlowGateway;\n ----\n ====\n+\n+[[java-dsl-extensions]]\n+=== DSL Extensions\n+\n+Starting with version 5.3, an `IntegrationFlowExtension` has been introduced to allow to extend an existing Java DSL to any possible custom or composed EIP-operators.\n+There is only enough to extend this class and write methods which are going to be used in the `IntegrationFlow` bean definitions.\n+The extension class can also be used for custom `IntegrationComponentSpec` configuration; for example, missed or default options can be implemented in the existing `IntegrationComponentSpec` extension.\n+The sample below demonstrates a composite custom operator and usage of an `AggregatorSpec` extension for a default custom `outputProcessor`:\n+\n+====\n+[source,java]\n+----\n+public class CustomIntegrationFlowDefinition\n+        extends IntegrationFlowExtension<CustomIntegrationFlowDefinition> {\n+\n+    public CustomIntegrationFlowDefinition upperCaseAfterSplit() {\n+        return split()\n+                .transform(\"payload.toUpperCase()\");\n+    }\n+\n+    public CustomIntegrationFlowDefinition customAggregate(Consumer<CustomAggregatorSpec> aggregator) {\n+        return register(new CustomAggregatorSpec(), aggregator);\n+    }\n+\n+}\n+\n+public class CustomAggregatorSpec extends AggregatorSpec {\n+\n+    CustomAggregatorSpec() {\n+        outputProcessor(group ->\n+                group.getMessages()\n+                        .stream()\n+                        .map(Message::getPayload)\n+                        .map(String.class::cast)\n+                        .collect(Collectors.joining(\", \")));\n+    }\n+\n+}\n+----\n+====\n+\n+For a method chain flow the new DSL operator in these extensions must return an extension class.\n+This way a target `IntegrationFlow` definition will look naturally with new and existing DSL operators:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3MzYzNA==", "bodyText": "Same change as first comment in adoc above.", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376073634", "createdAt": "2020-02-06T20:48:27Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -27,18 +27,20 @@ See its JavaDocs and <<./graph.adoc#integration-graph,Integration Graph>> for mo\n The `ReactiveMessageHandler` is now natively supported in the framework.\n See <<./reactive-streams.adoc/reactive-message-handler,ReactiveMessageHandler>> for more information.\n \n+[[x5.3-java-dsl-extensions]]\n+==== Java DSL Extensions\n+\n+A new `IntegrationFlowExtension` API has been introduced to allow to extend an existing Java DSL for custom and composite EIP-operators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3Mzc2Mg==", "bodyText": "can be used to introduce customizers...", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376073762", "createdAt": "2020-02-06T20:48:47Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -27,18 +27,20 @@ See its JavaDocs and <<./graph.adoc#integration-graph,Integration Graph>> for mo\n The `ReactiveMessageHandler` is now natively supported in the framework.\n See <<./reactive-streams.adoc/reactive-message-handler,ReactiveMessageHandler>> for more information.\n \n+[[x5.3-java-dsl-extensions]]\n+==== Java DSL Extensions\n+\n+A new `IntegrationFlowExtension` API has been introduced to allow to extend an existing Java DSL for custom and composite EIP-operators.\n+This also can be used for introduction customizers for any out-of-the-box `IntegrationComponentSpec` extensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3NDA2Mw==", "bodyText": "matches the header in the first message of the group.", "url": "https://github.com/spring-projects/spring-integration/pull/3167#discussion_r376074063", "createdAt": "2020-02-06T20:49:27Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -48,6 +50,9 @@ See <<./gateway.adoc/gateway-calling-default-methods,Invoking `default` Methods>\n Internal components (such as `_org.springframework.integration.errorLogger`) now have a shortened name when they are represented in the integration graph.\n See <<./graph.adoc#integration-graph,Integration Graph>> for more information.\n \n+In the aggregator, when the `MessageGroupProcessor` returns a `Message`, the `MessageBuilder.popSequenceDetails()` is performed on the output message if the `sequenceDetails` matches with first message of group.\n+See <<./aggregator.adoc#aggregator-api,Aggregator Programming Model>> for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ceb433d8ba2dbdbd2cc35c3c3a36cf884d34deb", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/8ceb433d8ba2dbdbd2cc35c3c3a36cf884d34deb", "committedDate": "2020-02-06T21:56:37Z", "message": "GH-3155: Add support for Java DSL extensions\n\nFixes https://github.com/spring-projects/spring-integration/issues/3155\n\nProvide an `IntegrationFlowExtension` for possible custom EI-operators\nin the target project use-cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53a45650eb32f6ee5124c51d7c67664babf633de", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/53a45650eb32f6ee5124c51d7c67664babf633de", "committedDate": "2020-02-06T21:57:03Z", "message": "* Move `IntegrationFlowExtension` tests ot its own test class\n* Make all the `IntegrationComponentSpec` ctors as `protected` for possible custom extensions\n* Make some `BaseIntegrationFlowDefinition` methods and properties as `protected` to get them\naccess from the `IntegrationFlowExtension` implementations\n* Document the feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e01869584c715f47a0a6ed5f61a0f9cee6a44b", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/41e01869584c715f47a0a6ed5f61a0f9cee6a44b", "committedDate": "2020-02-06T22:03:59Z", "message": "* Fix language and typos in docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1053e8a287e1d35c3ea2cd31e42e9efe82e605c", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/e1053e8a287e1d35c3ea2cd31e42e9efe82e605c", "committedDate": "2020-02-06T20:21:34Z", "message": "* Move `IntegrationFlowExtension` tests ot its own test class\n* Make all the `IntegrationComponentSpec` ctors as `protected` for possible custom extensions\n* Make some `BaseIntegrationFlowDefinition` methods and properties as `protected` to get them\naccess from the `IntegrationFlowExtension` implementations\n* Document the feature"}, "afterCommit": {"oid": "41e01869584c715f47a0a6ed5f61a0f9cee6a44b", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/41e01869584c715f47a0a6ed5f61a0f9cee6a44b", "committedDate": "2020-02-06T22:03:59Z", "message": "* Fix language and typos in docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM1MDgy", "url": "https://github.com/spring-projects/spring-integration/pull/3167#pullrequestreview-355235082", "createdAt": "2020-02-07T15:27:45Z", "commit": {"oid": "41e01869584c715f47a0a6ed5f61a0f9cee6a44b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e9d63bb061205e0c40be6e66ea3ad4aba8050c", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/f2e9d63bb061205e0c40be6e66ea3ad4aba8050c", "committedDate": "2020-02-07T16:52:54Z", "message": "* Add `protected` to one more `GatewayEndpointSpec` ctor\n* Add JavaDocs to `GatewayEndpointSpec` methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce41b88b82cdadaf493375de78e3873c29b795d", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/5ce41b88b82cdadaf493375de78e3873c29b795d", "committedDate": "2020-02-07T17:52:28Z", "message": "* Add `protected` to one more `JmsPollableMessageChannelSpec` ctor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzM4Nzgy", "url": "https://github.com/spring-projects/spring-integration/pull/3167#pullrequestreview-355338782", "createdAt": "2020-02-07T18:09:04Z", "commit": {"oid": "5ce41b88b82cdadaf493375de78e3873c29b795d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 167, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}