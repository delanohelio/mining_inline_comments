{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMTUwMzk1", "number": 3265, "title": "Introduce a `ReceiveMessageAdvice`", "bodyText": "Deprecate an AbstractMessageSourceAdvice in favor of\ndefault method in the MessageSourceMutator\nMove a applyReceiveOnlyAdviceChain() logic into the AbstractPollingEndpoint:\nnow both PollingConsumer and SourcePollingChannelAdapter can use\nReceiveMessageAdvice\nIntroduce a SimpleActiveIdleReceiveMessageAdvice based already\non the ReceiveMessageAdvice and deprecate a SimpleActiveIdleMessageSourceAdvice\nwhich is fully replaceable with newly introduced SimpleActiveIdleReceiveMessageAdvice\nAdd @SuppressWarnings(\"deprecation\") for those out-of-the-box ReceiveMessageAdvice\nimplementation which still use an AbstractMessageSourceAdvice for\nbackward compatibility\nDocument a new feature and give the MessageSourceMutator a new meaning", "createdAt": "2020-04-28T14:19:44Z", "url": "https://github.com/spring-projects/spring-integration/pull/3265", "merged": true, "mergeCommit": {"oid": "2d9a5f60f48330e03e5a24ddc887560d6d02b514"}, "closed": true, "closedAt": "2020-04-28T17:03:30Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccEoKZgH2gAyNDEwMTUwMzk1OmM3YWJmNjQ2MWFiZGIyYzYxYWNlYTYxZDdmMjQ5MjEwY2E3NjYwNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccGjHigH2gAyNDEwMTUwMzk1Ojg4MDE3N2NiNTk2M2ExNDBkYzJmMDJkZjhjNmY2NTVhNDMxYTU4ZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/c7abf6461abdb2c61acea61d7f249210ca766069", "committedDate": "2020-04-28T14:19:27Z", "message": "Introduce a `ReceiveMessageAdvice`\n\n* Deprecate an `AbstractMessageSourceAdvice` in favor of\n`default` method in the `MessageSourceMutator`\n* Move a `applyReceiveOnlyAdviceChain()` logic into the `AbstractPollingEndpoint`:\nnow both `PollingConsumer` and `SourcePollingChannelAdapter` can use\n`ReceiveMessageAdvice`\n* Introduce a `SimpleActiveIdleReceiveMessageAdvice` based already\non the `ReceiveMessageAdvice` and deprecate a `SimpleActiveIdleMessageSourceAdvice`\nwhich is fully replaceable with newly introduced `SimpleActiveIdleReceiveMessageAdvice`\n* Add `@SuppressWarnings(\"deprecation\")` for those out-of-the-box `ReceiveMessageAdvice`\nimplementation which still use an `AbstractMessageSourceAdvice` for\nbackward compatibility\n* Document a new feature and give the `MessageSourceMutator` a new meaning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTQzNjAx", "url": "https://github.com/spring-projects/spring-integration/pull/3265#pullrequestreview-401943601", "createdAt": "2020-04-28T15:18:35Z", "commit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToxODozNVrOGNZWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNToyMDoxN1rOGNZbIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5OTk0Nw==", "bodyText": "(The", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416699947", "createdAt": "2020-04-28T15:18:35Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMTIxNg==", "bodyText": "Wouldn't something like Advisable<T> be better than Object?", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416701216", "createdAt": "2020-04-28T15:20:17Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/aop/CompoundTriggerAdvice.java", "diffHunk": "@@ -47,8 +51,21 @@ public CompoundTriggerAdvice(CompoundTrigger compoundTrigger, Trigger overrideTr\n \t\tthis.override = overrideTrigger;\n \t}\n \n+\t/**\n+\t * @param result the received message.\n+\t * @param source the message source.\n+\t * @return the message or null\n+\t * @deprecated since 5.3 in favor of {@link #afterReceive(Message, Object)}\n+\t */\n \t@Override\n+\t@Deprecated\n \tpublic Message<?> afterReceive(Message<?> result, MessageSource<?> source) {\n+\t\treturn afterReceive(result, (Object) source);\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic Message<?> afterReceive(@Nullable Message<?> result, Object source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDEzMjc0", "url": "https://github.com/spring-projects/spring-integration/pull/3265#pullrequestreview-402013274", "createdAt": "2020-04-28T16:33:04Z", "commit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjozMzowNFrOGNc1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjozMzowNFrOGNc1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NzE1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)\n          \n          \n            \n            (The `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416757152", "createdAt": "2020-04-28T16:33:04Z", "author": {"login": "artembilan"}, "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7abf6461abdb2c61acea61d7f249210ca766069"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880177cb5963a140dc2f02df8c6f655a431a58e9", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/880177cb5963a140dc2f02df8c6f655a431a58e9", "committedDate": "2020-04-28T16:33:45Z", "message": "* Fix language in the `polling-consumer.adoc`"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 231, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}