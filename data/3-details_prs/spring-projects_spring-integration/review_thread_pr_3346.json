{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMzUyOTIy", "number": 3346, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTo0NFrOEQOzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozOTo1NVrOEQTfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU1MTYyOnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTo0NFrOG0RXtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyNTo0MVrOG0TGdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzczNA==", "bodyText": "Can we not capture this condition as a final boolean by checking the return type in a CTOR (to avoid running this code on every non-null return)?", "url": "https://github.com/spring-projects/spring-integration/pull/3346#discussion_r457463734", "createdAt": "2020-07-20T14:55:44Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java", "diffHunk": "@@ -1093,13 +1094,18 @@ void setInvocableHandlerMethod(InvocableHandlerMethod newInvocableHandlerMethod)\n \t\t\tthis.invocableHandlerMethod = newInvocableHandlerMethod;\n \t\t}\n \n+\t\t@Nullable\n \t\tpublic Object invoke(ParametersWrapper parameters) {\n \t\t\tMessage<?> message = parameters.getMessage();\n \t\t\tif (this.canProcessMessageList) {\n \t\t\t\tmessage = new MutableMessage<>(parameters.getMessages(), parameters.getHeaders());\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\treturn this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tObject result = this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tif (result != null && result.getClass().getName().equals(\"kotlin.Unit\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69f4d374e422ed83ec6449e1ac035995e30a7ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4MzE3Nw==", "bodyText": "Well, we can avoid something indeed, when a return type is void  or Unit. However in this case the return type is Object so end-user can return null ()or just don't have return in the function lambda and we don't produce a reply message.\nIn this case Kotlin for non-return in function lambda produces for us that Unit which is not a null apparently.\nSo, we produce some weird reply message.\nTherefore even if we have some final checks for return type, we still would have some logic to check the returned value to be sure that we don't produce a reply message with Unit payload.\nTo summarize: when have void return this result is always going to be null, therefore we don't go to check a class name for Unit. If the value not null, it already doesn't matter what void check we have in advance: we still have to check this result for Unit type.\nDoes it make sense?", "url": "https://github.com/spring-projects/spring-integration/pull/3346#discussion_r457483177", "createdAt": "2020-07-20T15:16:18Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java", "diffHunk": "@@ -1093,13 +1094,18 @@ void setInvocableHandlerMethod(InvocableHandlerMethod newInvocableHandlerMethod)\n \t\t\tthis.invocableHandlerMethod = newInvocableHandlerMethod;\n \t\t}\n \n+\t\t@Nullable\n \t\tpublic Object invoke(ParametersWrapper parameters) {\n \t\t\tMessage<?> message = parameters.getMessage();\n \t\t\tif (this.canProcessMessageList) {\n \t\t\t\tmessage = new MutableMessage<>(parameters.getMessages(), parameters.getHeaders());\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\treturn this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tObject result = this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tif (result != null && result.getClass().getName().equals(\"kotlin.Unit\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzczNA=="}, "originalCommit": {"oid": "e69f4d374e422ed83ec6449e1ac035995e30a7ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4OTY4MQ==", "bodyText": "Could we at least do something like...\nif (result != null && this.isKotlinLambda && result.getClass().getName().equals(\"kotlin.Unit\")) {\n?\nThis result.getClass().getName().equals(\"kotlin.Unit\") just seems like a lot of overhead for this one corner case and not good for the 99.9% of calls.", "url": "https://github.com/spring-projects/spring-integration/pull/3346#discussion_r457489681", "createdAt": "2020-07-20T15:23:03Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java", "diffHunk": "@@ -1093,13 +1094,18 @@ void setInvocableHandlerMethod(InvocableHandlerMethod newInvocableHandlerMethod)\n \t\t\tthis.invocableHandlerMethod = newInvocableHandlerMethod;\n \t\t}\n \n+\t\t@Nullable\n \t\tpublic Object invoke(ParametersWrapper parameters) {\n \t\t\tMessage<?> message = parameters.getMessage();\n \t\t\tif (this.canProcessMessageList) {\n \t\t\t\tmessage = new MutableMessage<>(parameters.getMessages(), parameters.getHeaders());\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\treturn this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tObject result = this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tif (result != null && result.getClass().getName().equals(\"kotlin.Unit\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzczNA=="}, "originalCommit": {"oid": "e69f4d374e422ed83ec6449e1ac035995e30a7ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5MjA4NA==", "bodyText": "Ah! OK. Makes sense.\nI'll think what we can do...\nThanks for the pointer!", "url": "https://github.com/spring-projects/spring-integration/pull/3346#discussion_r457492084", "createdAt": "2020-07-20T15:25:41Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java", "diffHunk": "@@ -1093,13 +1094,18 @@ void setInvocableHandlerMethod(InvocableHandlerMethod newInvocableHandlerMethod)\n \t\t\tthis.invocableHandlerMethod = newInvocableHandlerMethod;\n \t\t}\n \n+\t\t@Nullable\n \t\tpublic Object invoke(ParametersWrapper parameters) {\n \t\t\tMessage<?> message = parameters.getMessage();\n \t\t\tif (this.canProcessMessageList) {\n \t\t\t\tmessage = new MutableMessage<>(parameters.getMessages(), parameters.getHeaders());\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\treturn this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tObject result = this.invocableHandlerMethod.invoke(message);\n+\t\t\t\tif (result != null && result.getClass().getName().equals(\"kotlin.Unit\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzczNA=="}, "originalCommit": {"oid": "e69f4d374e422ed83ec6449e1ac035995e30a7ce"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMyMDc1OnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/util/ClassUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozOTo1NVrOG0Yjrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozOTo1NVrOG0Yjrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MTQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @since 5.4\n          \n          \n            \n            \t * @since 5.3.2", "url": "https://github.com/spring-projects/spring-integration/pull/3346#discussion_r457581487", "createdAt": "2020-07-20T17:39:55Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/util/ClassUtils.java", "diffHunk": "@@ -247,4 +264,14 @@ public static boolean isKotlinFaction1(Class<?> aClass) {\n \t\treturn KOTLIN_FUNCTION_1_CLASS != null && KOTLIN_FUNCTION_1_CLASS.isAssignableFrom(aClass);\n \t}\n \n+\t/**\n+\t * Check if class is {@code kotlin.Unit}.\n+\t * @param aClass the {@link Class} to check.\n+\t * @return true if class is a {@code kotlin.Unit} implementation.\n+\t * @since 5.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14caf0fdf7056cc54c915f58bb1e03063186d344"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1865, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}