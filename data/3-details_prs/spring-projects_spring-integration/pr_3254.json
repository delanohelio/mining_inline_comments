{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDY1MTA4", "number": 3254, "title": "Add `ReactiveMessageSourceProducer`", "bodyText": "The ReactiveMessageSourceProducer wraps a provided MessageSource\ninto a Flux for subscription in the subscribeToPublisher(Publisher<? extends Message<?>>)\nto make a source polling feature fully based on a reactive, on demand solution\n\nIntroduce a IntegrationReactiveUtils replacing existing MessageChannelReactiveUtils\nwith more functionality\nReplace a deprecated MessageChannelReactiveUtils with a new IntegrationReactiveUtils\nTest and document the feature", "createdAt": "2020-04-22T18:33:51Z", "url": "https://github.com/spring-projects/spring-integration/pull/3254", "merged": true, "mergeCommit": {"oid": "02407f7dff320f3278c65864ca77e55fdb02d9c7"}, "closed": true, "closedAt": "2020-04-23T19:28:17Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaPfOsAFqTM5ODYxNDEwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaiCrwgFqTM5OTQwOTUxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjE0MTAz", "url": "https://github.com/spring-projects/spring-integration/pull/3254#pullrequestreview-398614103", "createdAt": "2020-04-22T21:47:42Z", "commit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0Nzo0MlrOGKNQHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1MDoyNFrOGKNVkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NjA2MQ==", "bodyText": "mentioned", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356061", "createdAt": "2020-04-22T21:47:42Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NjM4OQ==", "bodyText": "it is 1 second.", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356389", "createdAt": "2020-04-22T21:48:21Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1Njc5MA==", "bodyText": "in the headers\nif the downstream flow throws\nwith the failed messagee", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356790", "createdAt": "2020-04-22T21:49:07Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.\n+If the `MessageSource` produces messages with a `IntegrationMessageHeaderAccessor.ACKNOWLEDGMENT_CALLBACK` information in headers, it is acknowledged (if necessary) in the `doOnSuccess()` of the original `Mono` and rejected in the `doOnError()` if downstream flow throws a `MessagingException` with failed message to reject.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzI0Ng==", "bodyText": "a polling channel adapter's features", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413357246", "createdAt": "2020-04-22T21:49:57Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.\n+If the `MessageSource` produces messages with a `IntegrationMessageHeaderAccessor.ACKNOWLEDGMENT_CALLBACK` information in headers, it is acknowledged (if necessary) in the `doOnSuccess()` of the original `Mono` and rejected in the `doOnError()` if downstream flow throws a `MessagingException` with failed message to reject.\n+This `ReactiveMessageSourceProducer` could be used for any use-case when a polling channel adapter features should be turned into a reactive, on demand solution for any existing `MessageSource<?>` implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzQ1Ng==", "bodyText": "into a Flux", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413357456", "createdAt": "2020-04-22T21:50:24Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -27,6 +27,13 @@ See its JavaDocs and <<./graph.adoc#integration-graph,Integration Graph>> for mo\n The `ReactiveMessageHandler` is now natively supported in the framework.\n See <<./reactive-streams.adoc#reactive-message-handler,ReactiveMessageHandler>> for more information.\n \n+\n+[[x5.3-reactive-message-source-producer]]\n+==== `ReactiveMessageSourceProducer`\n+\n+The `ReactiveMessageSourceProducer` is a reactive implementation of the `MessageProducerSupport` to wrap a provided `MessageSource` into the `Flux` for on demand `receive()` calls.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ff705cba5e38ff213c4186a1671044df15256ba", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/7ff705cba5e38ff213c4186a1671044df15256ba", "committedDate": "2020-04-22T18:33:20Z", "message": "Add `ReactiveMessageSourceProducer`\n\nThe `ReactiveMessageSourceProducer` wraps a provided `MessageSource`\ninto a `Flux` for subscription in the `subscribeToPublisher(Publisher<? extends Message<?>>)`\nto make a source polling feature fully based on a reactive, on demand solution\n\n* Introduce a `IntegrationReactiveUtils` replacing existing `MessageChannelReactiveUtils`\nwith more functionality\n* Replace a deprecated `MessageChannelReactiveUtils` with a new `IntegrationReactiveUtils`\n* Test and document the feature"}, "afterCommit": {"oid": "559474f8c04a2ed429dbcbe2895b66a0905d7ba3", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/559474f8c04a2ed429dbcbe2895b66a0905d7ba3", "committedDate": "2020-04-23T16:06:51Z", "message": "* Fix Docs typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f59f140626dc2d74ad73f3302ad8730f701716", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/d7f59f140626dc2d74ad73f3302ad8730f701716", "committedDate": "2020-04-23T18:08:00Z", "message": "Add `ReactiveMessageSourceProducer`\n\nThe `ReactiveMessageSourceProducer` wraps a provided `MessageSource`\ninto a `Flux` for subscription in the `subscribeToPublisher(Publisher<? extends Message<?>>)`\nto make a source polling feature fully based on a reactive, on demand solution\n\n* Introduce a `IntegrationReactiveUtils` replacing existing `MessageChannelReactiveUtils`\nwith more functionality\n* Replace a deprecated `MessageChannelReactiveUtils` with a new `IntegrationReactiveUtils`\n* Test and document the feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff717c2bd45c0433970ced27a0f12d2fffd65cd7", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/ff717c2bd45c0433970ced27a0f12d2fffd65cd7", "committedDate": "2020-04-23T18:08:00Z", "message": "* Fix Docs typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4d62cf6502c28a6b7e2affb7f4c54258cbae85", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/fd4d62cf6502c28a6b7e2affb7f4c54258cbae85", "committedDate": "2020-04-23T18:08:00Z", "message": "* Remove unused imports from `MessageChannelReactiveUtils`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "committedDate": "2020-04-23T18:25:26Z", "message": "* Fix JavaDoc copy/paste artifact"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4644a63f7780627c72a1731e176f9ba1ae462e6", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/c4644a63f7780627c72a1731e176f9ba1ae462e6", "committedDate": "2020-04-23T16:18:34Z", "message": "* Remove unused imports from `MessageChannelReactiveUtils`"}, "afterCommit": {"oid": "9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "committedDate": "2020-04-23T18:25:26Z", "message": "* Fix JavaDoc copy/paste artifact"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDA5NTEw", "url": "https://github.com/spring-projects/spring-integration/pull/3254#pullrequestreview-399409510", "createdAt": "2020-04-23T19:27:49Z", "commit": {"oid": "9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 223, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}