{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjgwNjkz", "number": 3137, "title": "Infrastructure for ReactiveMessageHandler", "bodyText": "We have now a ReactiveMongoDbStoringMessageHandler which implements\na ReactiveMessageHandler, but not a MessageHandler for possible\ndeferred subscriptions to the returned Reactor type\nWe don't have a proper application context processing for this\nnew type of message handlers\n\nChange a  ConsumerEndpointFactoryBean to apply an MH and RMH\nas possible types for handler\nIntroduce a ReactiveMessageHandlerAdapter to wrap an RMH\ninto a MH for synchronous calls in the regular consumer endpoints\nWrap an RMH into a ReactiveMessageHandlerAdapter for regular\nendpoints and unwrap for ReactiveStreamsConsumer\nAdd RMH-based ctor into ReactiveStreamsConsumer for target\nreactive streams composition (flatMap() on the RMH)\nRemove a DelegatingSubscriber from the ReactiveStreamsConsumer\nin favor of direct calls from the doOnSubscribe(), doOnComplete()\n& doOnNext()\nAdd an onErrorContinue() to handle per-message errors, but don't\ncancel the whole source Publisher\nUse Disposable from the subscribe() to cancel in the stop()\n\n\nrecommended way in Reactor\n\n\nUse onErrorContinue() in the FluxMessageChannel instead of\ntry..catch in the doOnNext() - for possible onErrorStop()\nin the provided upstream Publisher\nHandle RMH in the ServiceActivatorFactoryBean as a direct handler\nas well with wrapping into ReactiveMessageHandlerAdapter for return.\nThe ConsumerEndpointFactoryBean extracts an RMH from the adapter\nfor the ReactiveStreamsConsumer anyway\nAdd XML parsing test for ReactiveMongoDbStoringMessageHandler\nAdd log4j-slf4j-impl for all the test runtime since slf4j-api\ncomes as a transitive dependency from many places", "createdAt": "2020-01-08T22:17:55Z", "url": "https://github.com/spring-projects/spring-integration/pull/3137", "merged": true, "mergeCommit": {"oid": "d13752b40bb9ef9e1aeeb2b3f026950eb1088ccb"}, "closed": true, "closedAt": "2020-01-13T13:41:42Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4dDuMABqjI5MzI5NDYxOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5F84PABqjI5NDAwMDcxNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7edaf6ec641dc3e162c829267f77771d2a180963", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/7edaf6ec641dc3e162c829267f77771d2a180963", "committedDate": "2020-01-08T22:17:36Z", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places"}, "afterCommit": {"oid": "ff2d900ecb625fb682581a5b8eece11a7e449920", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/ff2d900ecb625fb682581a5b8eece11a7e449920", "committedDate": "2020-01-08T22:25:45Z", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff2d900ecb625fb682581a5b8eece11a7e449920", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/ff2d900ecb625fb682581a5b8eece11a7e449920", "committedDate": "2020-01-08T22:25:45Z", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places"}, "afterCommit": {"oid": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "committedDate": "2020-01-09T16:36:24Z", "message": "* Fix conflicts after rebasing to master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjYzODUz", "url": "https://github.com/spring-projects/spring-integration/pull/3137#pullrequestreview-340663853", "createdAt": "2020-01-09T16:46:07Z", "commit": {"oid": "ff2d900ecb625fb682581a5b8eece11a7e449920"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNjo0Njo0OFrOFb8iQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNjo0NzoyOFrOFb8jhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NzY4Mw==", "bodyText": "Why ISE instead of IAE? This is a setter. Assert.isTrue() ?", "url": "https://github.com/spring-projects/spring-integration/pull/3137#discussion_r364847683", "createdAt": "2020-01-09T16:46:48Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "diffHunk": "@@ -112,11 +114,17 @@\n \n \tprivate volatile boolean initialized;\n \n-\tpublic void setHandler(MessageHandler handler) {\n-\t\tAssert.notNull(handler, \"handler must not be null\");\n+\tpublic void setHandler(Object handler) {\n+\t\tAssert.state(handler instanceof MessageHandler || handler instanceof ReactiveMessageHandler,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0ODAwNg==", "bodyText": "s/for/to a/", "url": "https://github.com/spring-projects/spring-integration/pull/3137#discussion_r364848006", "createdAt": "2020-01-09T16:47:28Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "diffHunk": "@@ -210,7 +218,12 @@ public void afterPropertiesSet() {\n \t\t\t}\n \t\t}\n \n-\t\tadviceChain();\n+\t\tif (!(this.handler instanceof ReactiveMessageHandlerAdapter)) {\n+\t\t\tadviceChain();\n+\t\t}\n+\t\telse {\n+\t\t\tLOGGER.warn(\"the advice chain cannot be applied for 'ReactiveMessageHandler'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec27bab4e9f89f529368a1260d4268c3b8c4f8fe", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/ec27bab4e9f89f529368a1260d4268c3b8c4f8fe", "committedDate": "2020-01-10T19:31:30Z", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb975e0cca52726f48bd80e2f385637da1b7edcc", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/fb975e0cca52726f48bd80e2f385637da1b7edcc", "committedDate": "2020-01-10T19:31:30Z", "message": "* Fix conflicts after rebasing to master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677fe5732774603f95409d70c6d054e1cf6531ca", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/677fe5732774603f95409d70c6d054e1cf6531ca", "committedDate": "2020-01-10T19:31:30Z", "message": "* Fix typo in warn message\n* Change `Assert.state()` to `Assert.isTrue()`\nfor `ConsumerEndpointFactoryBean.setHandler()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dada67a5339d880002783191b3e9bd4fd1f963d9", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/dada67a5339d880002783191b3e9bd4fd1f963d9", "committedDate": "2020-01-10T19:31:31Z", "message": "* Fix `ConsumerEndpointFactoryBean` when reactive and no advice-chain\n* Fix race condition in the\n`ReactiveMongoDbStoringMessageHandlerTests.testReactiveMongoMessageHandlerFromApplicationContext()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "committedDate": "2020-01-10T22:04:17Z", "message": "* Handle `ReactiveMessageHandler` in Java DSL.\nEssentially request a wrapping into `ReactiveMessageHandlerAdapter`.\nDescribe such a requirements in the `ReactiveMessageHandlerAdapter` JavaDocs\n* Some Java DSL test polishing\n* Add Java DSL for `ReactiveMongoDbStoringMessageHandler`\n* Propagate missed `ApplicationContext` population into an internally\ncreated `ReactiveMongoTemplate` in the `ReactiveMongoDbStoringMessageHandler`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69d6a916a79314fd738f0d21faf94256e7fbc1d5", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/69d6a916a79314fd738f0d21faf94256e7fbc1d5", "committedDate": "2020-01-09T18:44:25Z", "message": "* Fix `ConsumerEndpointFactoryBean` when reactive and no advice-chain\n* Fix race condition in the\n`ReactiveMongoDbStoringMessageHandlerTests.testReactiveMongoMessageHandlerFromApplicationContext()`"}, "afterCommit": {"oid": "4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "committedDate": "2020-01-10T22:04:17Z", "message": "* Handle `ReactiveMessageHandler` in Java DSL.\nEssentially request a wrapping into `ReactiveMessageHandlerAdapter`.\nDescribe such a requirements in the `ReactiveMessageHandlerAdapter` JavaDocs\n* Some Java DSL test polishing\n* Add Java DSL for `ReactiveMongoDbStoringMessageHandler`\n* Propagate missed `ApplicationContext` population into an internally\ncreated `ReactiveMongoTemplate` in the `ReactiveMongoDbStoringMessageHandler`"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 151, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}