{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODA2MjA3", "number": 3423, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyMjo0MFrOE2IPlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyOTozOVrOE2IawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTkzNjIzOnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyMjo0MFrOHuyXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo0MzowN1rOHuzK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMTY1Nw==", "bodyText": "Javadocs for these methods needs polishing. Subclasses MUST call super (which is a bit brittle I think).", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518821657", "createdAt": "2020-11-06T15:22:40Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -196,6 +207,7 @@ protected void doStart() {\n \t */\n \t@Override\n \tprotected void doStop() {\n+\t\tsetActive(false);\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyODAzMg==", "bodyText": "Well, I guess I can move this active directly into start() and stop() impls.", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518828032", "createdAt": "2020-11-06T15:32:22Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -196,6 +207,7 @@ protected void doStart() {\n \t */\n \t@Override\n \tprotected void doStop() {\n+\t\tsetActive(false);\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMTY1Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzNDkwOQ==", "bodyText": "Well, I probably may hack and set running to true in that subscribeToPublisher(), so we will have less confusion with extra flag \ud83d\ude04", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518834909", "createdAt": "2020-11-06T15:43:07Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -196,6 +207,7 @@ protected void doStart() {\n \t */\n \t@Override\n \tprotected void doStop() {\n+\t\tsetActive(false);\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMTY1Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTk2NDgxOnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyOTozOVrOHuypGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1Mjo0NVrOHuzi1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw==", "bodyText": "It's not clear why this is different; both flags are set to true in start().", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518826267", "createdAt": "2020-11-06T15:29:39Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNzYxNQ==", "bodyText": "Right, but running set after doStart() call. My idea (and I see in existing components) to have some flag which is true before we call doStart(). See that MessageProducerSupport.start() impl.", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518827615", "createdAt": "2020-11-06T15:31:44Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMyMQ==", "bodyText": "Right, but why does it matter that it is set after exiting doStart(). The requirement is not clear at all.", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518830321", "createdAt": "2020-11-06T15:36:04Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMzkyOA==", "bodyText": "OK. See this subscribeToPublisher() details. There is that subscribe() word a couple times.\nSo, essentially we subscribe to the Flux in the doStart(), but since isRunning() returns false for us, we stop consuming the Flux immediately according that takeWhile() contract.\nI won't mind any other ideas.\nThanks", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518833928", "createdAt": "2020-11-06T15:41:39Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzNjc0Nw==", "bodyText": "Ah; OK; got it now - but why not just set active=true in start() before calling doStart()? I think that would be cleaner.", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518836747", "createdAt": "2020-11-06T15:45:55Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MTA0Ng==", "bodyText": "Right. That's an idea, too. Although we would need to move active flag from the MessageProducerSupport down to the AbstractEndpoint...\nOn the other hand I saw similar active in the gateway impls, so probably we are on the right track.\nThanks for confirmation!\nStay tuned...", "url": "https://github.com/spring-projects/spring-integration/pull/3423#discussion_r518841046", "createdAt": "2020-11-06T15:52:45Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/MessageProducerSupport.java", "diffHunk": "@@ -222,7 +234,7 @@ protected void subscribeToPublisher(Publisher<? extends Message<?>> publisher) {\n \t\t\t\t\t\t.map(this::trackMessageIfAny)\n \t\t\t\t\t\t.doOnComplete(this::stop)\n \t\t\t\t\t\t.doOnCancel(this::stop)\n-\t\t\t\t\t\t.takeWhile((message) -> isRunning());\n+\t\t\t\t\t\t.takeWhile((message) -> isActive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjI2Nw=="}, "originalCommit": {"oid": "ae8a6fced9d8363e2bcc1146cdc99cc0c3031d40"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}