{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjExMjUx", "number": 3201, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0MDowMlrODkurXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0NDoyOVrODkuyxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQwMDkyOnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/transaction/TransactionHandleMessageAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0MDowMlrOFxNpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0OToyOFrOFxOBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0ODA3Mw==", "bodyText": "Need final overrides of these to call from a CTOR - even though Spring is in violation of that rule in the super class.", "url": "https://github.com/spring-projects/spring-integration/pull/3201#discussion_r387148073", "createdAt": "2020-03-03T16:40:02Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/transaction/TransactionHandleMessageAdvice.java", "diffHunk": "@@ -46,12 +46,16 @@\n \tpublic TransactionHandleMessageAdvice() {\n \t}\n \n-\tpublic TransactionHandleMessageAdvice(PlatformTransactionManager ptm, Properties attributes) {\n-\t\tsuper(ptm, attributes);\n+\tpublic TransactionHandleMessageAdvice(TransactionManager transactionManager, Properties transactionAttributes) {\n+\t\tsetTransactionManager(transactionManager);\n+\t\tsetTransactionAttributes(transactionAttributes);\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd996cdc5f2570d073de8be07e4c24fc0e1c4b3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NDM0MA==", "bodyText": "Well, I think we can live with this for a while.\nSee here: spring-projects/spring-framework#24612\nWhen that is fixed, we can revert this change to rely on super ctors.", "url": "https://github.com/spring-projects/spring-integration/pull/3201#discussion_r387154340", "createdAt": "2020-03-03T16:49:28Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/transaction/TransactionHandleMessageAdvice.java", "diffHunk": "@@ -46,12 +46,16 @@\n \tpublic TransactionHandleMessageAdvice() {\n \t}\n \n-\tpublic TransactionHandleMessageAdvice(PlatformTransactionManager ptm, Properties attributes) {\n-\t\tsuper(ptm, attributes);\n+\tpublic TransactionHandleMessageAdvice(TransactionManager transactionManager, Properties transactionAttributes) {\n+\t\tsetTransactionManager(transactionManager);\n+\t\tsetTransactionAttributes(transactionAttributes);\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0ODA3Mw=="}, "originalCommit": {"oid": "acd996cdc5f2570d073de8be07e4c24fc0e1c4b3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQxMDU2OnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0MjoxOFrOFxNvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0MjoxOFrOFxNvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0OTYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tReactiveMessageHandler reactiveMessageHandler =\n          \n          \n            \n            \t\t\t\t\t((ReactiveMessageHandlerAdapter) this.handler).getDelegate();\n          \n          \n            \n            \t\t\treactiveMessageHandler = adviceChain(reactiveMessageHandler);\n          \n          \n            \n            \t\t\tthis.handler = new ReactiveMessageHandlerAdapter(reactiveMessageHandler);\n          \n          \n            \n                    this.handler = new ReactiveMessageHandlerAdapter(adviceChain(((ReactiveMessageHandlerAdapter) this.handler).getDelegate())));", "url": "https://github.com/spring-projects/spring-integration/pull/3201#discussion_r387149620", "createdAt": "2020-03-03T16:42:18Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "diffHunk": "@@ -200,10 +200,13 @@ public void afterPropertiesSet() {\n \t\t}\n \n \t\tif (!(this.handler instanceof ReactiveMessageHandlerAdapter)) {\n-\t\t\tadviceChain();\n+\t\t\tthis.handler = adviceChain(this.handler);\n \t\t}\n \t\telse if (!CollectionUtils.isEmpty(this.adviceChain)) {\n-\t\t\tLOGGER.warn(\"the advice chain cannot be applied to a 'ReactiveMessageHandler'\");\n+\t\t\tReactiveMessageHandler reactiveMessageHandler =\n+\t\t\t\t\t((ReactiveMessageHandlerAdapter) this.handler).getDelegate();\n+\t\t\treactiveMessageHandler = adviceChain(reactiveMessageHandler);\n+\t\t\tthis.handler = new ReactiveMessageHandlerAdapter(reactiveMessageHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd996cdc5f2570d073de8be07e4c24fc0e1c4b3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQxOTkxOnYy", "diffSide": "RIGHT", "path": "src/reference/asciidoc/whats-new.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0NDoyOVrOFxN04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0NDoyOVrOFxN04w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1MTA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The transactional support in Spring Integration now also includes options to configure a `ReactiveTransactionManager` if a `MessageSource` or `MessageHandler` implementation produces a reactive type for payload to send.\n          \n          \n            \n            Transactional support in Spring Integration now also includes options to configure a `ReactiveTransactionManager` if a `MessageSource` or `MessageHandler` implementation produces a reactive type for payload to send.", "url": "https://github.com/spring-projects/spring-integration/pull/3201#discussion_r387151075", "createdAt": "2020-03-03T16:44:29Z", "author": {"login": "garyrussell"}, "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -57,6 +57,10 @@ A new `publishSubscribeChannel()` operator, based on the `BroadcastCapableChanne\n This fluent API has its advantage when we configure sub-flows as pub-sub subscribers for broker-backed channels like `SubscribableJmsChannel`, `SubscribableRedisChannel` etc.\n See <<./dsl.adoc#java-dsl-subflows,Sub-flows support>> for more information.\n \n+The transactional support in Spring Integration now also includes options to configure a `ReactiveTransactionManager` if a `MessageSource` or `MessageHandler` implementation produces a reactive type for payload to send.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd996cdc5f2570d073de8be07e4c24fc0e1c4b3"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1992, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}