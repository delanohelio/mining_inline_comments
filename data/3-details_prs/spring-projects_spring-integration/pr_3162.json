{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTY3MTM3", "number": 3162, "title": "GH-3154: Support `UriBuilderFactory.EncodingMode`", "bodyText": "Fixes #3154\nSpring Framework now provides a DefaultUriBuilderFactory.EncodingMode\nfor encoding URIs in the RestTemplate before and after uri template\nenrichment with uri variables.\nTherefore encodeUri and manual uri variables substitution is not necessary\nin Spring Integration HTTP components\n\nDeprecate AbstractHttpRequestExecutingMessageHandler.encodeUri in favor of\nDefaultUriBuilderFactory.EncodingMode and respective configuration\non the RestTemplate in HTTP module and WebClient in WebFlux module", "createdAt": "2020-01-30T16:24:59Z", "url": "https://github.com/spring-projects/spring-integration/pull/3162", "merged": true, "mergeCommit": {"oid": "89d86e1904d7f3ef450c352afa520531615b2de8"}, "closed": true, "closedAt": "2020-01-30T20:12:40Z", "author": {"login": "artembilan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_dE2RAH2gAyMzY5MTY3MTM3OjQ3M2JiYjQ4NzlhZDkxNDhiYWU3MTRjNjYzMDQ1YjQ3NjU2ZTc1ZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_gVLRgFqTM1MTExMDU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/473bbb4879ad9148bae714c663045b47656e75fb", "committedDate": "2020-01-30T16:24:42Z", "message": "GH-3154: Support `UriBuilderFactory.EncodingMode`\n\nFixes https://github.com/spring-projects/spring-integration/issues/3154\n\nSpring Framework now provides a `DefaultUriBuilderFactory.EncodingMode`\nfor encoding URIs in the `RestTemplate` before and after uri template\nenrichment with uri variables.\nTherefore `encodeUri` and manual uri variables substitution is not necessary\nin Spring Integration HTTP components\n\n* Deprecate `AbstractHttpRequestExecutingMessageHandler.encodeUri` in favor of\n`DefaultUriBuilderFactory.EncodingMode` and respective configuration\non the `RestTemplate` in HTTP module and `WebClient` in WebFlux module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTgwODY2", "url": "https://github.com/spring-projects/spring-integration/pull/3162#pullrequestreview-350980866", "createdAt": "2020-01-30T16:52:11Z", "commit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1MjoxMlrOFjyTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1NDo0MVrOFjyYlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2ODU3OA==", "bodyText": "Why is this needed? This is the default.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373068578", "createdAt": "2020-01-30T16:52:12Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -118,6 +115,7 @@\n \tpublic AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t\tAssert.notNull(uriExpression, \"URI Expression is required\");\n \t\tthis.uriExpression = uriExpression;\n+\t\tthis.uriFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw==", "bodyText": "Why package visibility?\nWhy not UriBuilderFactory?", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069277", "createdAt": "2020-01-30T16:53:28Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -85,6 +82,8 @@\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n+\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ==", "bodyText": "Why not setUriBuilderFactory ?", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069975", "createdAt": "2020-01-30T16:54:41Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -127,9 +125,25 @@ public AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t * <code>true</code>.\n \t * @param encodeUri true if the URI should be encoded.\n \t * @see UriComponentsBuilder\n+\t * @deprecated since 5.3 in favor of {@link #setEncodingMode}\n \t */\n+\t@Deprecated\n \tpublic void setEncodeUri(boolean encodeUri) {\n-\t\tthis.encodeUri = encodeUri;\n+\t\tsetEncodingMode(\n+\t\t\t\tencodeUri\n+\t\t\t\t\t\t? DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES\n+\t\t\t\t\t\t: DefaultUriBuilderFactory.EncodingMode.NONE);\n+\t}\n+\n+\t/**\n+\t * Set the encoding mode to use.\n+\t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * @param encodingMode the mode to use for uri encoding\n+\t * @since 5.3\n+\t */\n+\tpublic void setEncodingMode(DefaultUriBuilderFactory.EncodingMode encodingMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473bbb4879ad9148bae714c663045b47656e75fb"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/4002501289ec0bb7877b85e6b40f92d5011a618f", "committedDate": "2020-01-30T17:36:01Z", "message": "* Really populate `uriFactory` into an internal `RestTemplate`\n* Ensure in tests that `encoding-mode` is populated properly into an internal `RestTemplate`\n* Clean up affected HTTP tests for AssertJ and JUnit 5"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDEzMTkw", "url": "https://github.com/spring-projects/spring-integration/pull/3162#pullrequestreview-351013190", "createdAt": "2020-01-30T17:38:05Z", "commit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODowNlrOFjzzWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODozM1rOFjz0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzIwOQ==", "bodyText": "Unusual formatting.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093209", "createdAt": "2020-01-30T17:38:06Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -192,13 +200,15 @@ public void withUrlAndTemplate() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlAndTemplate, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzMxOQ==", "bodyText": "Here too.", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093319", "createdAt": "2020-01-30T17:38:18Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -224,13 +234,15 @@ public void withUrlExpression() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpression, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isNotSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzQzOA==", "bodyText": "And here", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093438", "createdAt": "2020-01-30T17:38:33Z", "author": {"login": "garyrussell"}, "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -257,13 +269,15 @@ public void withUrlExpressionAndTemplate() {\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpressionAndTemplate, \"handler.restTemplate\",\n \t\t\t\t\t\tRestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "committedDate": "2020-01-30T17:45:47Z", "message": "* Clean up formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a30f1cde80316a323d7fcea165d1f927972d951", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/6a30f1cde80316a323d7fcea165d1f927972d951", "committedDate": "2020-01-30T19:10:35Z", "message": "* Apply fix for WebFlux module\n* Add docs for new `encoding-mode` option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a884203f4f0274a81ac9ba47a29535447aa7b23f", "author": {"user": {"login": "artembilan", "name": "Artem Bilan"}}, "url": "https://github.com/spring-projects/spring-integration/commit/a884203f4f0274a81ac9ba47a29535447aa7b23f", "committedDate": "2020-01-30T19:22:11Z", "message": "* Remove unused import in the test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTEwNTY4", "url": "https://github.com/spring-projects/spring-integration/pull/3162#pullrequestreview-351110568", "createdAt": "2020-01-30T20:12:15Z", "commit": {"oid": "a884203f4f0274a81ac9ba47a29535447aa7b23f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 162, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}