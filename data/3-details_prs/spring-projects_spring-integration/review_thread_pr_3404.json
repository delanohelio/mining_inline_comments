{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MzA3OTYx", "number": 3404, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1ODowNlrOEuIamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1ODowNlrOEuIamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA3ODMzOnYy", "diffSide": "RIGHT", "path": "spring-integration-core/src/main/java/org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1ODowNlrOHiV2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowOToyMVrOHiWNdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTU2NA==", "bodyText": "Shouldn't we get the first if there are more than one? (provider.stream().findFirst()) This would then be consistent with the existing code.", "url": "https://github.com/spring-projects/spring-integration/pull/3404#discussion_r505771564", "createdAt": "2020-10-15T18:58:06Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor.java", "diffHunk": "@@ -49,31 +50,44 @@\n \n \tpublic static final String MICROMETER_CAPTOR_NAME = \"integrationMicrometerMetricsCaptor\";\n \n-\tprotected final MeterRegistry meterRegistry; // NOSONAR\n+\tprivate MeterRegistry meterRegistry;\n+\n+\tprivate ObjectProvider<MeterRegistry> meterRegistryProvider;\n \n \tpublic MicrometerMetricsCaptor(MeterRegistry meterRegistry) {\n \t\tAssert.notNull(meterRegistry, \"meterRegistry cannot be null\");\n \t\tthis.meterRegistry = meterRegistry;\n \t}\n \n+\tMicrometerMetricsCaptor(ObjectProvider<MeterRegistry> meterRegistryProvider) {\n+\t\tthis.meterRegistryProvider = meterRegistryProvider;\n+\t}\n+\n+\tpublic MeterRegistry getMeterRegistry() {\n+\t\tif (this.meterRegistry == null) {\n+\t\t\tthis.meterRegistry = this.meterRegistryProvider.getIfUnique();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e30c6fa6cdcf75d9e0aa6b0bcdd5cd9263f6e7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NTU1Ng==", "bodyText": "Well, it is better to use a getIfUnique() since this one returns for a @Primary one - exactly what we want to have in case of Spring Boot.\nApparently the current solution is still bug, since we inject really only one MeterRegistry (Prometheus), but not the composite built by Boot including all the rest available registries, e.g. WaveFront one.", "url": "https://github.com/spring-projects/spring-integration/pull/3404#discussion_r505775556", "createdAt": "2020-10-15T19:05:31Z", "author": {"login": "artembilan"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor.java", "diffHunk": "@@ -49,31 +50,44 @@\n \n \tpublic static final String MICROMETER_CAPTOR_NAME = \"integrationMicrometerMetricsCaptor\";\n \n-\tprotected final MeterRegistry meterRegistry; // NOSONAR\n+\tprivate MeterRegistry meterRegistry;\n+\n+\tprivate ObjectProvider<MeterRegistry> meterRegistryProvider;\n \n \tpublic MicrometerMetricsCaptor(MeterRegistry meterRegistry) {\n \t\tAssert.notNull(meterRegistry, \"meterRegistry cannot be null\");\n \t\tthis.meterRegistry = meterRegistry;\n \t}\n \n+\tMicrometerMetricsCaptor(ObjectProvider<MeterRegistry> meterRegistryProvider) {\n+\t\tthis.meterRegistryProvider = meterRegistryProvider;\n+\t}\n+\n+\tpublic MeterRegistry getMeterRegistry() {\n+\t\tif (this.meterRegistry == null) {\n+\t\t\tthis.meterRegistry = this.meterRegistryProvider.getIfUnique();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTU2NA=="}, "originalCommit": {"oid": "03e30c6fa6cdcf75d9e0aa6b0bcdd5cd9263f6e7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NzUyNA==", "bodyText": "OK; just waiting for travis, then.", "url": "https://github.com/spring-projects/spring-integration/pull/3404#discussion_r505777524", "createdAt": "2020-10-15T19:09:21Z", "author": {"login": "garyrussell"}, "path": "spring-integration-core/src/main/java/org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor.java", "diffHunk": "@@ -49,31 +50,44 @@\n \n \tpublic static final String MICROMETER_CAPTOR_NAME = \"integrationMicrometerMetricsCaptor\";\n \n-\tprotected final MeterRegistry meterRegistry; // NOSONAR\n+\tprivate MeterRegistry meterRegistry;\n+\n+\tprivate ObjectProvider<MeterRegistry> meterRegistryProvider;\n \n \tpublic MicrometerMetricsCaptor(MeterRegistry meterRegistry) {\n \t\tAssert.notNull(meterRegistry, \"meterRegistry cannot be null\");\n \t\tthis.meterRegistry = meterRegistry;\n \t}\n \n+\tMicrometerMetricsCaptor(ObjectProvider<MeterRegistry> meterRegistryProvider) {\n+\t\tthis.meterRegistryProvider = meterRegistryProvider;\n+\t}\n+\n+\tpublic MeterRegistry getMeterRegistry() {\n+\t\tif (this.meterRegistry == null) {\n+\t\t\tthis.meterRegistry = this.meterRegistryProvider.getIfUnique();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTU2NA=="}, "originalCommit": {"oid": "03e30c6fa6cdcf75d9e0aa6b0bcdd5cd9263f6e7"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1926, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}