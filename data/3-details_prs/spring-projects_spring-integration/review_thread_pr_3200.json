{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTY2NzIy", "number": 3200, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoyMDoxNlrODj8PSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoyMDoxNlrODj8PSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDEzNzA3OnYy", "diffSide": "RIGHT", "path": "src/reference/asciidoc/ip.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoyMDoxNlrOFwBudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoyMDoxNlrOFwBudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNDI0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Set `closeOnRefresh` to close thee \"old\" connection after a refresh actually creates a new connection.\n          \n          \n            \n            Set `closeOnRefresh` to close the \"old\" connection after a refresh actually creates a new connection.", "url": "https://github.com/spring-projects/spring-integration/pull/3200#discussion_r385904247", "createdAt": "2020-02-28T20:20:16Z", "author": {"login": "artembilan"}, "path": "src/reference/asciidoc/ip.adoc", "diffHunk": "@@ -536,6 +536,23 @@ The following example shows how to configure a failover client connection factor\n \n NOTE: When using the failover connection factory, the `singleUse` property must be consistent between the factory itself and the list of factories it is configured to use.\n \n+The connnection factory has two properties when used with a shared connection (`singleUse=false`):\n+\n+* `refreshSharedInterval`\n+* `closeOnRefresh`\n+\n+These are `0` and `false` to retain the same behavior that existed before the properties were added.\n+\n+Consider the following scenario based on the above configuration:\n+Let's say `clientFactory1` cannot establish a connection but `clientFactory2` can.\n+Each time the `failCF` `getConnection()` method is called, we will again attempt to connect using `clientFactory1`; if successful, the \"old\" connection will remain open and may be reused in future if the first factory fails once more.\n+\n+Set `refreshSharedInterval` to only attempt to reconnect with the first factory after that time has expired; set it to `Long.MAX_VALUE` if you only want to fail back to the first factory when the current connection fails.\n+\n+Set `closeOnRefresh` to close thee \"old\" connection after a refresh actually creates a new connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31e2869bc9475c4ba2f34d1692606b3c9434e6b2"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1987, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}