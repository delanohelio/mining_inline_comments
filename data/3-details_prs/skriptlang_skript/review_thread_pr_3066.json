{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTczNDI0", "number": 3066, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyODoxNVrOEHYSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODozNDoyMVrOEHYTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTczMzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyODoxNVrOGmtf0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyODoxNVrOGmtf0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDQ5Nw==", "bodyText": "Use brackets for codestyle", "url": "https://github.com/SkriptLang/Skript/pull/3066#discussion_r443244497", "createdAt": "2020-06-21T18:28:15Z", "author": {"login": "JRoy"}, "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "diffHunk": "@@ -939,6 +984,9 @@ public String run(final Matcher m) {\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t\t\r\n+\t\t\t\tif (callPostStructureEvent)\r\n+\t\t\t\t\tBukkit.getPluginManager().callEvent(new PostStructureCreateEvent(config));\r\n+\t\t\t\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef9d70f97dae0b74420b7d103984a5e3763cc43"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTczMzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyODozMVrOGmtf4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyODozMVrOGmtf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDUxMg==", "bodyText": "brackets", "url": "https://github.com/SkriptLang/Skript/pull/3066#discussion_r443244512", "createdAt": "2020-06-21T18:28:31Z", "author": {"login": "JRoy"}, "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "diffHunk": "@@ -158,6 +159,50 @@ public static boolean getCallPreloadEvent() {\n \tpublic static Set<SkriptAddon> getPreloadListeners() {\r\n \t\treturn Collections.unmodifiableSet(preloadListeners);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If true, a {@link PostStructureCreateEvent} will be called\r\n+\t * right after the structure of a script is generated,\r\n+\t * but before the script is parsed.\r\n+\t */\r\n+\tprivate static boolean callPostStructureEvent;\r\n+\r\n+\t/**\r\n+\t * A set of all the SkriptAddons that have called\r\n+\t * {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\tprivate static Set<SkriptAddon> postStructureListeners = new HashSet<>();\r\n+\r\n+\t/**\r\n+\t * Sets {@link ScriptLoader#callPostStructureEvent} to the provided boolean,\r\n+\t * and adds/removes the provided SkriptAddon from {@link ScriptLoader#postStructureListeners}\r\n+\t * depending on the provided boolean (true adds, false removes).\r\n+\t * @param state The new value for {@link ScriptLoader#postStructureListeners}\r\n+\t * @param addon A non-null SkriptAddon\r\n+\t */\r\n+\tpublic static void setCallPostStructureEvent(boolean state, SkriptAddon addon) {\r\n+\t\tValidate.notNull(addon);\r\n+\t\tcallPostStructureEvent = state;\r\n+\t\tif (state)\r\n+\t\t\tpostStructureListeners.add(addon);\r\n+\t\telse\r\n+\t\t\tpostStructureListeners.remove(addon);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef9d70f97dae0b74420b7d103984a5e3763cc43"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTczNzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODozNDoyMVrOGmthxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQyMDo1OToxNVrOGmuOHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDk5Nw==", "bodyText": "I don't understand the use case for this here, why not always call the event. If nobody is listening to it, there's very little overhead anyway (especially on Paper). The Set of addons seems kind of pointless since they're really not useful.", "url": "https://github.com/SkriptLang/Skript/pull/3066#discussion_r443244997", "createdAt": "2020-06-21T18:34:21Z", "author": {"login": "JRoy"}, "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "diffHunk": "@@ -158,6 +159,50 @@ public static boolean getCallPreloadEvent() {\n \tpublic static Set<SkriptAddon> getPreloadListeners() {\r\n \t\treturn Collections.unmodifiableSet(preloadListeners);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If true, a {@link PostStructureCreateEvent} will be called\r\n+\t * right after the structure of a script is generated,\r\n+\t * but before the script is parsed.\r\n+\t */\r\n+\tprivate static boolean callPostStructureEvent;\r\n+\r\n+\t/**\r\n+\t * A set of all the SkriptAddons that have called\r\n+\t * {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\tprivate static Set<SkriptAddon> postStructureListeners = new HashSet<>();\r\n+\r\n+\t/**\r\n+\t * Sets {@link ScriptLoader#callPostStructureEvent} to the provided boolean,\r\n+\t * and adds/removes the provided SkriptAddon from {@link ScriptLoader#postStructureListeners}\r\n+\t * depending on the provided boolean (true adds, false removes).\r\n+\t * @param state The new value for {@link ScriptLoader#postStructureListeners}\r\n+\t * @param addon A non-null SkriptAddon\r\n+\t */\r\n+\tpublic static void setCallPostStructureEvent(boolean state, SkriptAddon addon) {\r\n+\t\tValidate.notNull(addon);\r\n+\t\tcallPostStructureEvent = state;\r\n+\t\tif (state)\r\n+\t\t\tpostStructureListeners.add(addon);\r\n+\t\telse\r\n+\t\t\tpostStructureListeners.remove(addon);\r\n+\t}\r\n+\r\n+\tpublic static boolean getCallPostStructureEvent() {\r\n+\t\treturn callPostStructureEvent;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Returns an unmodifiable list of all the addons\r\n+\t * that have called {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\t@SuppressWarnings(\"null\")\r\n+\tpublic static Set<SkriptAddon> getPostStructureListeners() {\r\n+\t\treturn Collections.unmodifiableSet(postStructureListeners);\r\n+\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef9d70f97dae0b74420b7d103984a5e3763cc43"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQwNg==", "bodyText": "I agree with this. I was looking at this last night (we talked about it in discord a little), and this seemed kind of pointless. It also seems like an addon could disable the event being called, which could break other addons that depend on it.", "url": "https://github.com/SkriptLang/Skript/pull/3066#discussion_r443246406", "createdAt": "2020-06-21T18:51:05Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "diffHunk": "@@ -158,6 +159,50 @@ public static boolean getCallPreloadEvent() {\n \tpublic static Set<SkriptAddon> getPreloadListeners() {\r\n \t\treturn Collections.unmodifiableSet(preloadListeners);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If true, a {@link PostStructureCreateEvent} will be called\r\n+\t * right after the structure of a script is generated,\r\n+\t * but before the script is parsed.\r\n+\t */\r\n+\tprivate static boolean callPostStructureEvent;\r\n+\r\n+\t/**\r\n+\t * A set of all the SkriptAddons that have called\r\n+\t * {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\tprivate static Set<SkriptAddon> postStructureListeners = new HashSet<>();\r\n+\r\n+\t/**\r\n+\t * Sets {@link ScriptLoader#callPostStructureEvent} to the provided boolean,\r\n+\t * and adds/removes the provided SkriptAddon from {@link ScriptLoader#postStructureListeners}\r\n+\t * depending on the provided boolean (true adds, false removes).\r\n+\t * @param state The new value for {@link ScriptLoader#postStructureListeners}\r\n+\t * @param addon A non-null SkriptAddon\r\n+\t */\r\n+\tpublic static void setCallPostStructureEvent(boolean state, SkriptAddon addon) {\r\n+\t\tValidate.notNull(addon);\r\n+\t\tcallPostStructureEvent = state;\r\n+\t\tif (state)\r\n+\t\t\tpostStructureListeners.add(addon);\r\n+\t\telse\r\n+\t\t\tpostStructureListeners.remove(addon);\r\n+\t}\r\n+\r\n+\tpublic static boolean getCallPostStructureEvent() {\r\n+\t\treturn callPostStructureEvent;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Returns an unmodifiable list of all the addons\r\n+\t * that have called {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\t@SuppressWarnings(\"null\")\r\n+\tpublic static Set<SkriptAddon> getPostStructureListeners() {\r\n+\t\treturn Collections.unmodifiableSet(postStructureListeners);\r\n+\t}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDk5Nw=="}, "originalCommit": {"oid": "0ef9d70f97dae0b74420b7d103984a5e3763cc43"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI1NjM0OA==", "bodyText": "it's to be consistent with how i implemented the preload event and i implemented the preload event that way because there is a similar toggle to not call function events. looking back though i wouldn't have done this now", "url": "https://github.com/SkriptLang/Skript/pull/3066#discussion_r443256348", "createdAt": "2020-06-21T20:59:15Z", "author": {"login": "Pikachu920"}, "path": "src/main/java/ch/njol/skript/ScriptLoader.java", "diffHunk": "@@ -158,6 +159,50 @@ public static boolean getCallPreloadEvent() {\n \tpublic static Set<SkriptAddon> getPreloadListeners() {\r\n \t\treturn Collections.unmodifiableSet(preloadListeners);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If true, a {@link PostStructureCreateEvent} will be called\r\n+\t * right after the structure of a script is generated,\r\n+\t * but before the script is parsed.\r\n+\t */\r\n+\tprivate static boolean callPostStructureEvent;\r\n+\r\n+\t/**\r\n+\t * A set of all the SkriptAddons that have called\r\n+\t * {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\tprivate static Set<SkriptAddon> postStructureListeners = new HashSet<>();\r\n+\r\n+\t/**\r\n+\t * Sets {@link ScriptLoader#callPostStructureEvent} to the provided boolean,\r\n+\t * and adds/removes the provided SkriptAddon from {@link ScriptLoader#postStructureListeners}\r\n+\t * depending on the provided boolean (true adds, false removes).\r\n+\t * @param state The new value for {@link ScriptLoader#postStructureListeners}\r\n+\t * @param addon A non-null SkriptAddon\r\n+\t */\r\n+\tpublic static void setCallPostStructureEvent(boolean state, SkriptAddon addon) {\r\n+\t\tValidate.notNull(addon);\r\n+\t\tcallPostStructureEvent = state;\r\n+\t\tif (state)\r\n+\t\t\tpostStructureListeners.add(addon);\r\n+\t\telse\r\n+\t\t\tpostStructureListeners.remove(addon);\r\n+\t}\r\n+\r\n+\tpublic static boolean getCallPostStructureEvent() {\r\n+\t\treturn callPostStructureEvent;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Returns an unmodifiable list of all the addons\r\n+\t * that have called {@link ScriptLoader#setCallPostStructureEvent(boolean, SkriptAddon)}\r\n+\t * with true.\r\n+\t */\r\n+\t@SuppressWarnings(\"null\")\r\n+\tpublic static Set<SkriptAddon> getPostStructureListeners() {\r\n+\t\treturn Collections.unmodifiableSet(postStructureListeners);\r\n+\t}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDk5Nw=="}, "originalCommit": {"oid": "0ef9d70f97dae0b74420b7d103984a5e3763cc43"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}