{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDkxOTQ4", "number": 3314, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMToxMTo1MVrOEY1w7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDowNTowOFrOEZTXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDgyMTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMToxMTo1MVrOHBVSaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxMDowNFrOHCCnfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE1OTQwMA==", "bodyText": "The parameter names should always match super, matchedPattern was changed.", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471159400", "createdAt": "2020-08-16T21:11:51Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMjA3Nw==", "bodyText": "Ahh... this I did not know. Will be fixed in next commit", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471902077", "createdAt": "2020-08-18T04:10:04Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE1OTQwMA=="}, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY3MDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDowNDowOFrOHCCiUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxMDozMVrOHCCn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMDc1Mw==", "bodyText": "I believe the second world variable isn't needed", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471900753", "createdAt": "2020-08-18T04:04:08Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tlocations = pattern == 0 ? Direction.combine((Expression<? extends Direction>) exprs[0], (Expression<? extends Location>) exprs[1]) : null;\n+\t\tx = pattern == 1 ? (Expression<Number>) exprs[0] : null;\n+\t\tz = pattern == 1 ? (Expression<Number>) exprs[1] : null;\n+\t\tworld = pattern == 1 ? (Expression<World>) exprs[2] : null;\n+\t\tworlds = pattern == 2 ? (Expression<World>) exprs[0] : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMjE2Mg==", "bodyText": "What was I thinking? haha. My brain must have been elsewhere. Will be removed in next commit.", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471902162", "createdAt": "2020-08-18T04:10:31Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tlocations = pattern == 0 ? Direction.combine((Expression<? extends Direction>) exprs[0], (Expression<? extends Location>) exprs[1]) : null;\n+\t\tx = pattern == 1 ? (Expression<Number>) exprs[0] : null;\n+\t\tz = pattern == 1 ? (Expression<Number>) exprs[1] : null;\n+\t\tworld = pattern == 1 ? (Expression<World>) exprs[2] : null;\n+\t\tworlds = pattern == 2 ? (Expression<World>) exprs[0] : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMDc1Mw=="}, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY3MjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDowNTowOFrOHCCjPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxNzowMVrOHCCtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMDk5MQ==", "bodyText": "x and z are never null at this point of the code, x#getSingle and z#getSingle can be though", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471900991", "createdAt": "2020-08-18T04:05:08Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tlocations = pattern == 0 ? Direction.combine((Expression<? extends Direction>) exprs[0], (Expression<? extends Location>) exprs[1]) : null;\n+\t\tx = pattern == 1 ? (Expression<Number>) exprs[0] : null;\n+\t\tz = pattern == 1 ? (Expression<Number>) exprs[1] : null;\n+\t\tworld = pattern == 1 ? (Expression<World>) exprs[2] : null;\n+\t\tworlds = pattern == 2 ? (Expression<World>) exprs[0] : null;\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\tthis.pattern = pattern;\n+\t\treturn true;\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n \t@Override\n-\tpublic boolean check(Object o) {\n-\t\tif (o instanceof Chunk)\n-\t\t\treturn ((Chunk) o).isLoaded();\n-\t\telse if (o instanceof World)\n-\t\t\treturn Bukkit.getWorld(((World) o).getName()) != null;\n+\tpublic boolean check(Event e) {\n+\t\tswitch (pattern) {\n+\t\t\tcase 0:\n+\t\t\t\treturn locations.check(e, location -> {\n+\t\t\t\t\tWorld world = location.getWorld();\n+\t\t\t\t\tif (world != null)\n+\t\t\t\t\t\treturn world.isChunkLoaded(location.getBlockX() >> 4, location.getBlockZ() >> 4);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}, isNegated());\n+\t\t\tcase 1:\n+\t\t\t\treturn world.check(e, world -> {\n+\t\t\t\t\tif (x == null || z == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMzIzOQ==", "bodyText": "I probably got confused with the amount of \"this could be null\" messages haha.\nWill change it up for next commit.", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471903239", "createdAt": "2020-08-18T04:15:01Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tlocations = pattern == 0 ? Direction.combine((Expression<? extends Direction>) exprs[0], (Expression<? extends Location>) exprs[1]) : null;\n+\t\tx = pattern == 1 ? (Expression<Number>) exprs[0] : null;\n+\t\tz = pattern == 1 ? (Expression<Number>) exprs[1] : null;\n+\t\tworld = pattern == 1 ? (Expression<World>) exprs[2] : null;\n+\t\tworlds = pattern == 2 ? (Expression<World>) exprs[0] : null;\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\tthis.pattern = pattern;\n+\t\treturn true;\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n \t@Override\n-\tpublic boolean check(Object o) {\n-\t\tif (o instanceof Chunk)\n-\t\t\treturn ((Chunk) o).isLoaded();\n-\t\telse if (o instanceof World)\n-\t\t\treturn Bukkit.getWorld(((World) o).getName()) != null;\n+\tpublic boolean check(Event e) {\n+\t\tswitch (pattern) {\n+\t\t\tcase 0:\n+\t\t\t\treturn locations.check(e, location -> {\n+\t\t\t\t\tWorld world = location.getWorld();\n+\t\t\t\t\tif (world != null)\n+\t\t\t\t\t\treturn world.isChunkLoaded(location.getBlockX() >> 4, location.getBlockZ() >> 4);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}, isNegated());\n+\t\t\tcase 1:\n+\t\t\t\treturn world.check(e, world -> {\n+\t\t\t\t\tif (x == null || z == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMDk5MQ=="}, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMzY4OQ==", "bodyText": "Ok, all changes have been made \ud83d\udc4d", "url": "https://github.com/SkriptLang/Skript/pull/3314#discussion_r471903689", "createdAt": "2020-08-18T04:17:01Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/conditions/CondIsLoaded.java", "diffHunk": "@@ -19,38 +19,93 @@\n  */\n package ch.njol.skript.conditions;\n \n-import ch.njol.skript.conditions.base.PropertyCondition;\n+import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Direction;\n+import ch.njol.util.Kleenean;\n \n import org.bukkit.Bukkit;\n-import org.bukkit.Chunk;\n+import org.bukkit.Location;\n import org.bukkit.World;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n \n @Name(\"Is Loaded\")\n-@Description(\"Checks whether or not a chunk/world is loaded\")\n-@Examples(\"if chunk at {home::%player's uuid%} is loaded:\")\n-@Since(\"2.3\")\n-public class CondIsLoaded extends PropertyCondition<Object> {\n+@Description(\"Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.\")\n+@Examples({\"if chunk at {home::%player's uuid%} is loaded:\",\n+\t\t\"if chunk 1, 10 in world \\\"world\\\" is loaded:\",\n+\t\t\"if world(\\\"lobby\\\") is loaded:\"})\n+@Since(\"2.3, INSERT VERSION (revamp with chunk at location/coords)\")\n+public class CondIsLoaded extends Condition {\n \t\n \tstatic {\n-\t\tregister(CondIsLoaded.class, \"loaded\", \"worlds/chunks\");\n+\t\tSkript.registerCondition(CondIsLoaded.class,\n+\t\t\t\"chunk[s] %directions% [%locations%] (is|are)[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"chunk [at] %number%, %number% (in|of) [world] %world% is[(1\u00a6(n't| not))] loaded\",\n+\t\t\t\"[world[s]] %worlds% (is|are)[(1\u00a6(n't| not))] loaded\");\n \t}\n \t\n+\t@Nullable\n+\tprivate Expression<Location> locations;\n+\t@Nullable\n+\tprivate Expression<Number> x,z;\n+\t@Nullable\n+\tprivate Expression<World> world;\n+\t@Nullable\n+\tprivate Expression<World> worlds;\n+\tprivate int pattern;\n+\t\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int pattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tlocations = pattern == 0 ? Direction.combine((Expression<? extends Direction>) exprs[0], (Expression<? extends Location>) exprs[1]) : null;\n+\t\tx = pattern == 1 ? (Expression<Number>) exprs[0] : null;\n+\t\tz = pattern == 1 ? (Expression<Number>) exprs[1] : null;\n+\t\tworld = pattern == 1 ? (Expression<World>) exprs[2] : null;\n+\t\tworlds = pattern == 2 ? (Expression<World>) exprs[0] : null;\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\tthis.pattern = pattern;\n+\t\treturn true;\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n \t@Override\n-\tpublic boolean check(Object o) {\n-\t\tif (o instanceof Chunk)\n-\t\t\treturn ((Chunk) o).isLoaded();\n-\t\telse if (o instanceof World)\n-\t\t\treturn Bukkit.getWorld(((World) o).getName()) != null;\n+\tpublic boolean check(Event e) {\n+\t\tswitch (pattern) {\n+\t\t\tcase 0:\n+\t\t\t\treturn locations.check(e, location -> {\n+\t\t\t\t\tWorld world = location.getWorld();\n+\t\t\t\t\tif (world != null)\n+\t\t\t\t\t\treturn world.isChunkLoaded(location.getBlockX() >> 4, location.getBlockZ() >> 4);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}, isNegated());\n+\t\t\tcase 1:\n+\t\t\t\treturn world.check(e, world -> {\n+\t\t\t\t\tif (x == null || z == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMDk5MQ=="}, "originalCommit": {"oid": "43f9b021059160e0b03748343f7332144aad483a"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1001, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}