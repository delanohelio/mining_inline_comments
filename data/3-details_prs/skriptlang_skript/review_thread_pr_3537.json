{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MjEwMTEw", "number": 3537, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNjoxMlrOE5PT5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNjoxMlrOE5PT5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDU1MTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprSubstring.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNjoxMlrOHzld6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNDozNlrOHzyN5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1MzI5MQ==", "bodyText": "instead of storing the pattern int, can you store a boolean like boolean usedCharAtPattern = matchedPattern == 0;? after that, just change all your pattern equality checks to use the boolean instead and then this PR is golden <3", "url": "https://github.com/SkriptLang/Skript/pull/3537#discussion_r523853291", "createdAt": "2020-11-16T01:36:12Z", "author": {"login": "Pikachu920"}, "path": "src/main/java/ch/njol/skript/expressions/ExprSubstring.java", "diffHunk": "@@ -37,72 +40,92 @@\n  * @author Peter G\u00fcttinger\n  */\n @Name(\"Subtext\")\n-@Description(\"Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, or the characters between indices &lt;x&gt; and &lt;y&gt;.\"\n+@Description(\"Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, the characters at certain indexes &lt;x&gt;, or the characters between indices &lt;x&gt; and &lt;y&gt;.\"\n \t\t+ \" The indices &lt;x&gt; and &lt;y&gt; should be between 1 and the <a href='#ExprLength'>length</a> of the text (other values will be fit into this range).\")\n-@Examples({\"set {_s} to the first 5 characters of the text argument\"\n-\t\t, \"message \\\"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\\\" # removes the first and last character from {_s} and sends it to the player or console\"})\n-@Since(\"2.1\")\n+@Examples({\"set {_s} to the first 5 characters of the text argument\",\n+\t\t\"message \\\"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\\\" # removes the first and last character from {_s} and sends it to the player or console\",\n+\t\t\"set {_characters::*} to characters at 1, 2 and 7 in player's display name\",\n+\t\t\"send the last character of all players' names\"})\n+@Since(\"2.1, INSERT VERSION (character at, multiple strings support)\")\n public class ExprSubstring extends SimpleExpression<String> {\n \tstatic {\n \t\tSkript.registerExpression(ExprSubstring.class, String.class, ExpressionType.COMBINED,\n \t\t\t\t\"[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%\",\n-\t\t\t\t\"[the] (1\u00a6first|2\u00a6last) [%-number%] character[s] of %strings%\", \"[the] %number% (1\u00a6first|2\u00a6last) characters of %strings%\");\n+\t\t\t\t\"[the] (1\u00a6first|2\u00a6last) [%-number%] character[s] of %strings%\", \"[the] %number% (1\u00a6first|2\u00a6last) characters of %strings%\",\n+\t\t\t\t\"[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %strings%\");\n \t}\n \t\n \t@SuppressWarnings(\"null\")\n \tprivate Expression<String> string;\n \t@Nullable\n \tprivate Expression<Number> start, end;\n+\tprivate int pattern;\n \t\n \t@SuppressWarnings({\"unchecked\", \"null\"})\n \t@Override\n \tpublic boolean init(final Expression<?>[] exprs, final int matchedPattern, final Kleenean isDelayed, final ParseResult parseResult) {\n-\t\tstring = (Expression<String>) exprs[parseResult.mark == 0 ? 0 : 1];\n-\t\tstart = parseResult.mark == 1 ? null : exprs[parseResult.mark == 0 ? 1 : 0] == null ? new SimpleLiteral<>(1, false) : (Expression<Number>) exprs[parseResult.mark == 0 ? 1 : 0];\n-\t\tend = parseResult.mark == 2 ? null : exprs[parseResult.mark == 0 ? 2 : 0] == null ? new SimpleLiteral<>(1, false) : (Expression<Number>) exprs[parseResult.mark == 0 ? 2 : 0];\n+\t\tpattern = matchedPattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d5903ad35bb583191e44ba4ba6702ab60c511c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MjE4Mw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/SkriptLang/Skript/pull/3537#discussion_r524062183", "createdAt": "2020-11-16T10:04:36Z", "author": {"login": "Mr-Darth"}, "path": "src/main/java/ch/njol/skript/expressions/ExprSubstring.java", "diffHunk": "@@ -37,72 +40,92 @@\n  * @author Peter G\u00fcttinger\n  */\n @Name(\"Subtext\")\n-@Description(\"Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, or the characters between indices &lt;x&gt; and &lt;y&gt;.\"\n+@Description(\"Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, the characters at certain indexes &lt;x&gt;, or the characters between indices &lt;x&gt; and &lt;y&gt;.\"\n \t\t+ \" The indices &lt;x&gt; and &lt;y&gt; should be between 1 and the <a href='#ExprLength'>length</a> of the text (other values will be fit into this range).\")\n-@Examples({\"set {_s} to the first 5 characters of the text argument\"\n-\t\t, \"message \\\"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\\\" # removes the first and last character from {_s} and sends it to the player or console\"})\n-@Since(\"2.1\")\n+@Examples({\"set {_s} to the first 5 characters of the text argument\",\n+\t\t\"message \\\"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\\\" # removes the first and last character from {_s} and sends it to the player or console\",\n+\t\t\"set {_characters::*} to characters at 1, 2 and 7 in player's display name\",\n+\t\t\"send the last character of all players' names\"})\n+@Since(\"2.1, INSERT VERSION (character at, multiple strings support)\")\n public class ExprSubstring extends SimpleExpression<String> {\n \tstatic {\n \t\tSkript.registerExpression(ExprSubstring.class, String.class, ExpressionType.COMBINED,\n \t\t\t\t\"[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%\",\n-\t\t\t\t\"[the] (1\u00a6first|2\u00a6last) [%-number%] character[s] of %strings%\", \"[the] %number% (1\u00a6first|2\u00a6last) characters of %strings%\");\n+\t\t\t\t\"[the] (1\u00a6first|2\u00a6last) [%-number%] character[s] of %strings%\", \"[the] %number% (1\u00a6first|2\u00a6last) characters of %strings%\",\n+\t\t\t\t\"[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %strings%\");\n \t}\n \t\n \t@SuppressWarnings(\"null\")\n \tprivate Expression<String> string;\n \t@Nullable\n \tprivate Expression<Number> start, end;\n+\tprivate int pattern;\n \t\n \t@SuppressWarnings({\"unchecked\", \"null\"})\n \t@Override\n \tpublic boolean init(final Expression<?>[] exprs, final int matchedPattern, final Kleenean isDelayed, final ParseResult parseResult) {\n-\t\tstring = (Expression<String>) exprs[parseResult.mark == 0 ? 0 : 1];\n-\t\tstart = parseResult.mark == 1 ? null : exprs[parseResult.mark == 0 ? 1 : 0] == null ? new SimpleLiteral<>(1, false) : (Expression<Number>) exprs[parseResult.mark == 0 ? 1 : 0];\n-\t\tend = parseResult.mark == 2 ? null : exprs[parseResult.mark == 0 ? 2 : 0] == null ? new SimpleLiteral<>(1, false) : (Expression<Number>) exprs[parseResult.mark == 0 ? 2 : 0];\n+\t\tpattern = matchedPattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1MzI5MQ=="}, "originalCommit": {"oid": "e9d5903ad35bb583191e44ba4ba6702ab60c511c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 956, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}