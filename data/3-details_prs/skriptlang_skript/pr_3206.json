{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDQ4Mzk3", "number": 3206, "title": "Expr pierce level", "bodyText": "Description\n\n\nTarget Minecraft Versions: 1.14+ \nRequirements: none \nRelated Issues: none", "createdAt": "2020-07-24T19:18:41Z", "url": "https://github.com/SkriptLang/Skript/pull/3206", "merged": true, "mergeCommit": {"oid": "525371c84bd8c59408998924e5841b94fc1bbd07"}, "closed": true, "closedAt": "2020-09-29T22:03:23Z", "author": {"login": "DeltaRays"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4I96_gH2gAyNDU2NDQ4Mzk3OjliMzI5Nzc5M2ZmNDc3YzcyZDFmNjk3ZmI5ODEwYTBmMGViMzhlMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNvjItAFqTQ5ODkyNTYxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b3297793ff477c72d1f697fb9810a0f0eb38e26", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/9b3297793ff477c72d1f697fb9810a0f0eb38e26", "committedDate": "2020-07-24T19:12:43Z", "message": "Added `arrow pierce level` (it doesn't work with tridents)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b5ab586e2512cb069afe4ca31e5adc713a9faca", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/6b5ab586e2512cb069afe4ca31e5adc713a9faca", "committedDate": "2020-07-24T19:15:16Z", "message": "Added a condition to check if the arrowPierceLevel method exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/71dcde3c018a6366ef1555bee7f1910d4364c593", "committedDate": "2020-07-24T19:17:46Z", "message": "replaced projectile with arrow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjE4ODQx", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-455218841", "createdAt": "2020-07-24T22:35:35Z", "commit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozNTozNVrOG2_eVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozNTozNVrOG2_eVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjI0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n          \n          \n            \n            \t\tif (Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n          \n          \n            \n            \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316244", "createdAt": "2020-07-24T22:35:35Z", "author": {"login": "Matocolotoe"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjE4OTg5", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-455218989", "createdAt": "2020-07-24T22:36:07Z", "commit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozNjowN1rOG2_e2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozNjowN1rOG2_e2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjM3OQ==", "bodyText": "Debug line there", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316379", "createdAt": "2020-07-24T22:36:07Z", "author": {"login": "Matocolotoe"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjIyMDQ1", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-455222045", "createdAt": "2020-07-24T22:47:08Z", "commit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "state": "DISMISSED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjo0NzowOFrOG2_pxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjo1Mzo0OFrOG2_wUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTE3Mg==", "bodyText": "Use getArray", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319172", "createdAt": "2020-07-24T22:47:08Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTI4MQ==", "bodyText": "The statement after the if should be on its own line", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319281", "createdAt": "2020-07-24T22:47:33Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTYzMA==", "bodyText": "If the previous if statement has braces, this one should as well", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319630", "createdAt": "2020-07-24T22:49:02Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t} else if (entity instanceof Arrow)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDAyNg==", "bodyText": "Use getArray", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320026", "createdAt": "2020-07-24T22:50:38Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDEzOA==", "bodyText": "Should also support add and remove changers considering you are able to use those this way:\nincrease shot arrow's pierce level by 1\n\nForgot to mention this on your other PR for knockback strength", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320138", "createdAt": "2020-07-24T22:51:06Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDQzNQ==", "bodyText": "This should be a constant as well, declared before the static block since you also have the same check being used there", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320435", "createdAt": "2020-07-24T22:52:17Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg0OA==", "bodyText": "Should specify that it applies to anything considered arrows since we don't know if Mojang is going to add more arrow-like projectiles.", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320848", "createdAt": "2020-07-24T22:53:48Z", "author": {"login": "FranKusmiruk"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b91796a2dbe8d978c1edf37709a4509e6ce371", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/19b91796a2dbe8d978c1edf37709a4509e6ce371", "committedDate": "2020-07-25T07:22:03Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "committedDate": "2020-07-25T17:48:48Z", "message": "Added the REMOVE and the ADD modes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/0aa195d593628e0ad712b26a043a2391c5cd76a3", "committedDate": "2020-07-26T09:49:28Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzM2MzY4", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-458736368", "createdAt": "2020-07-30T20:34:42Z", "commit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNDo0MlrOG5y3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNTozMFrOG5y41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTMzOA==", "bodyText": "This should be changed to a switch statement", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255338", "createdAt": "2020-07-30T20:34:42Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTYwMQ==", "bodyText": "Curly brackets on the IF statements \ud83d\ude0e", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255601", "createdAt": "2020-07-30T20:35:12Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTc2NA==", "bodyText": "IF statement should be on it's own line", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255764", "createdAt": "2020-07-30T20:35:30Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzM5MjEw", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-458739210", "createdAt": "2020-07-30T20:39:09Z", "commit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOTowOVrOG5y_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOTowOVrOG5y_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NzUzNQ==", "bodyText": "this should be private", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463257535", "createdAt": "2020-07-30T20:39:09Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23516c2f54adfa10afda03cafe516ba406afaad", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/c23516c2f54adfa10afda03cafe516ba406afaad", "committedDate": "2020-07-31T11:13:07Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "committedDate": "2020-07-31T11:13:26Z", "message": "Updated everything (thanks apickledwalrus)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65f48de1ff8c61548c15daeb11e4737df0ce89c9", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/65f48de1ff8c61548c15daeb11e4737df0ce89c9", "committedDate": "2020-07-31T11:13:53Z", "message": "Merge remote-tracking branch 'origin/ExprPierceLevel' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e7981eef43ad642885adaba9e76b0546b2c30e7", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/9e7981eef43ad642885adaba9e76b0546b2c30e7", "committedDate": "2020-08-02T16:24:00Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91539864f224ac8ae4ad4b0e189160d745e09bc7", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/91539864f224ac8ae4ad4b0e189160d745e09bc7", "committedDate": "2020-09-08T18:40:08Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "committedDate": "2020-09-26T09:54:58Z", "message": "Merge branch 'master' into ExprPierceLevel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDIzNDAz", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-497023403", "createdAt": "2020-09-26T18:39:55Z", "commit": {"oid": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozOTo1NVrOHYh64A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozOTo1NVrOHYh64A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzYxNg==", "bodyText": "You should add a default case that asserts false", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r495483616", "createdAt": "2020-09-26T18:39:55Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72675726749f9cb5d103c040df33073b42e8b442", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/72675726749f9cb5d103c040df33073b42e8b442", "committedDate": "2020-09-26T19:03:52Z", "message": "Added a default case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDM1OTAx", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-497035901", "createdAt": "2020-09-26T22:48:15Z", "commit": {"oid": "72675726749f9cb5d103c040df33073b42e8b442"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTk5NTYx", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-497999561", "createdAt": "2020-09-29T01:22:37Z", "commit": {"oid": "72675726749f9cb5d103c040df33073b42e8b442"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyMjozN1rOHZVCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyMjozN1rOHZVCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMTIwNw==", "bodyText": "I think you can just test Skript.methodExists(Arrow.class, \"getPierceLevel\") for here.\nAlso, if this method is not guaranteed to exist in all versions supported by Skript, can you add a @RequiredPlugins MC version?", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r496321207", "createdAt": "2020-09-29T01:22:37Z", "author": {"login": "Wealthyturtle"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72675726749f9cb5d103c040df33073b42e8b442"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "author": {"user": {"login": "DeltaRays", "name": "DeltaRays"}}, "url": "https://github.com/SkriptLang/Skript/commit/aa17d7a45b30b92b759d72bacfd8899030117a9c", "committedDate": "2020-09-29T06:32:46Z", "message": "Updated ExprArrowPierceLevel.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "author": {"user": {"login": "ShaneBeee", "name": "Shane Bee"}}, "url": "https://github.com/SkriptLang/Skript/commit/19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "committedDate": "2020-09-29T21:56:35Z", "message": "Merge branch 'dev-2.5' into ExprPierceLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e29f2f58ad5611f77693cf44354b9f65c400148", "author": {"user": {"login": "ShaneBeee", "name": "Shane Bee"}}, "url": "https://github.com/SkriptLang/Skript/commit/6e29f2f58ad5611f77693cf44354b9f65c400148", "committedDate": "2020-09-29T21:57:16Z", "message": "update license header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTI1NjE2", "url": "https://github.com/SkriptLang/Skript/pull/3206#pullrequestreview-498925616", "createdAt": "2020-09-29T22:02:10Z", "commit": {"oid": "6e29f2f58ad5611f77693cf44354b9f65c400148"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3075, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}