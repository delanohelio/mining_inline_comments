{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDY0MzE1", "number": 2892, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0Nzo1MFrOD6SPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0ODoyOVrOD6SQYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDQyODAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0Nzo1MFrOGSCQYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NDo1MFrOGSP46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NDUxMw==", "bodyText": "Don't do Material checks, put the corresponding alias in a constant through Aliases#javaItemtype instead.", "url": "https://github.com/SkriptLang/Skript/pull/2892#discussion_r421564513", "createdAt": "2020-05-07T14:47:50Z", "author": {"login": "SnowPyon"}, "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "diffHunk": "@@ -46,34 +47,33 @@\n \t\tEntityData.register(ThrownPotionData.class, \"thrown potion\", ThrownPotion.class, \"thrown potion\");\r\n \t}\r\n \t\r\n-\tprivate final static Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final boolean RUNNING_LEGACY = !Skript.isRunningMinecraft(1, 13);\r\n \t\r\n \t@Nullable\r\n \tprivate ItemType[] types;\r\n \t\r\n \t@Override\r\n \tprotected boolean init(final Literal<?>[] exprs, final int matchedPattern, final ParseResult parseResult) {\r\n \t\tif (exprs.length > 0 && exprs[0] != null) {\r\n-\t\t\tif ((Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, new Converter<ItemType, ItemType>() {\r\n-\t\t\t\t@Override\r\n-\t\t\t\t@Nullable\r\n-\t\t\t\tpublic ItemType convert(final ItemType t) {\r\n-\t\t\t\t\tItemType r = null;\r\n-\t\t\t\t\tfor (final ItemData d : t.getTypes()) {\r\n-\t\t\t\t\t\tif (d.getType() == Material.POTION) {\r\n-\t\t\t\t\t\t\tif (r == null)\r\n-\t\t\t\t\t\t\t\tr = new ItemType(d);\r\n-\t\t\t\t\t\t\telse\r\n-\t\t\t\t\t\t\t\tr.add(d);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\treturn r;\r\n+\t\t\treturn (types = Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, t -> {\r\n+\t\t\t\tMaterial type = t.getMaterial();\r\n+\t\t\t\t// If the itemtype is a potion, lets make it a splash potion (required by Bukkit)\r\n+\t\t\t\t// Due to an issue with 1.12.2 and below, we have to force a lingering potion to be a splash potion\r\n+\t\t\t\tif (type == Material.POTION || (type == Material.LINGERING_POTION && RUNNING_LEGACY)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a35e0c56fe8a190aee1459de1eae9cc8b23b3b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NTk5Ng==", "bodyText": "Ah yes you're right, totally forgot about that thanks. Ill switch them up.", "url": "https://github.com/SkriptLang/Skript/pull/2892#discussion_r421755996", "createdAt": "2020-05-07T19:54:20Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "diffHunk": "@@ -46,34 +47,33 @@\n \t\tEntityData.register(ThrownPotionData.class, \"thrown potion\", ThrownPotion.class, \"thrown potion\");\r\n \t}\r\n \t\r\n-\tprivate final static Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final boolean RUNNING_LEGACY = !Skript.isRunningMinecraft(1, 13);\r\n \t\r\n \t@Nullable\r\n \tprivate ItemType[] types;\r\n \t\r\n \t@Override\r\n \tprotected boolean init(final Literal<?>[] exprs, final int matchedPattern, final ParseResult parseResult) {\r\n \t\tif (exprs.length > 0 && exprs[0] != null) {\r\n-\t\t\tif ((Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, new Converter<ItemType, ItemType>() {\r\n-\t\t\t\t@Override\r\n-\t\t\t\t@Nullable\r\n-\t\t\t\tpublic ItemType convert(final ItemType t) {\r\n-\t\t\t\t\tItemType r = null;\r\n-\t\t\t\t\tfor (final ItemData d : t.getTypes()) {\r\n-\t\t\t\t\t\tif (d.getType() == Material.POTION) {\r\n-\t\t\t\t\t\t\tif (r == null)\r\n-\t\t\t\t\t\t\t\tr = new ItemType(d);\r\n-\t\t\t\t\t\t\telse\r\n-\t\t\t\t\t\t\t\tr.add(d);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\treturn r;\r\n+\t\t\treturn (types = Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, t -> {\r\n+\t\t\t\tMaterial type = t.getMaterial();\r\n+\t\t\t\t// If the itemtype is a potion, lets make it a splash potion (required by Bukkit)\r\n+\t\t\t\t// Due to an issue with 1.12.2 and below, we have to force a lingering potion to be a splash potion\r\n+\t\t\t\tif (type == Material.POTION || (type == Material.LINGERING_POTION && RUNNING_LEGACY)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NDUxMw=="}, "originalCommit": {"oid": "6a35e0c56fe8a190aee1459de1eae9cc8b23b3b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4Nzg4Mw==", "bodyText": "Ok these have now been changed!", "url": "https://github.com/SkriptLang/Skript/pull/2892#discussion_r421787883", "createdAt": "2020-05-07T20:54:50Z", "author": {"login": "ShaneBeee"}, "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "diffHunk": "@@ -46,34 +47,33 @@\n \t\tEntityData.register(ThrownPotionData.class, \"thrown potion\", ThrownPotion.class, \"thrown potion\");\r\n \t}\r\n \t\r\n-\tprivate final static Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final boolean RUNNING_LEGACY = !Skript.isRunningMinecraft(1, 13);\r\n \t\r\n \t@Nullable\r\n \tprivate ItemType[] types;\r\n \t\r\n \t@Override\r\n \tprotected boolean init(final Literal<?>[] exprs, final int matchedPattern, final ParseResult parseResult) {\r\n \t\tif (exprs.length > 0 && exprs[0] != null) {\r\n-\t\t\tif ((Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, new Converter<ItemType, ItemType>() {\r\n-\t\t\t\t@Override\r\n-\t\t\t\t@Nullable\r\n-\t\t\t\tpublic ItemType convert(final ItemType t) {\r\n-\t\t\t\t\tItemType r = null;\r\n-\t\t\t\t\tfor (final ItemData d : t.getTypes()) {\r\n-\t\t\t\t\t\tif (d.getType() == Material.POTION) {\r\n-\t\t\t\t\t\t\tif (r == null)\r\n-\t\t\t\t\t\t\t\tr = new ItemType(d);\r\n-\t\t\t\t\t\t\telse\r\n-\t\t\t\t\t\t\t\tr.add(d);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\treturn r;\r\n+\t\t\treturn (types = Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, t -> {\r\n+\t\t\t\tMaterial type = t.getMaterial();\r\n+\t\t\t\t// If the itemtype is a potion, lets make it a splash potion (required by Bukkit)\r\n+\t\t\t\t// Due to an issue with 1.12.2 and below, we have to force a lingering potion to be a splash potion\r\n+\t\t\t\tif (type == Material.POTION || (type == Material.LINGERING_POTION && RUNNING_LEGACY)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NDUxMw=="}, "originalCommit": {"oid": "6a35e0c56fe8a190aee1459de1eae9cc8b23b3b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDQzMTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0ODoyOVrOGSCSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0ODoyOVrOGSCSWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NTAxOQ==", "bodyText": "Same goes here, get the ItemType through Aliases#javaItemtype", "url": "https://github.com/SkriptLang/Skript/pull/2892#discussion_r421565019", "createdAt": "2020-05-07T14:48:29Z", "author": {"login": "SnowPyon"}, "path": "src/main/java/ch/njol/skript/entity/ThrownPotionData.java", "diffHunk": "@@ -46,34 +47,33 @@\n \t\tEntityData.register(ThrownPotionData.class, \"thrown potion\", ThrownPotion.class, \"thrown potion\");\r\n \t}\r\n \t\r\n-\tprivate final static Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final Adjective m_adjective = new Adjective(\"entities.thrown potion.adjective\");\r\n+\tprivate static final boolean RUNNING_LEGACY = !Skript.isRunningMinecraft(1, 13);\r\n \t\r\n \t@Nullable\r\n \tprivate ItemType[] types;\r\n \t\r\n \t@Override\r\n \tprotected boolean init(final Literal<?>[] exprs, final int matchedPattern, final ParseResult parseResult) {\r\n \t\tif (exprs.length > 0 && exprs[0] != null) {\r\n-\t\t\tif ((Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, new Converter<ItemType, ItemType>() {\r\n-\t\t\t\t@Override\r\n-\t\t\t\t@Nullable\r\n-\t\t\t\tpublic ItemType convert(final ItemType t) {\r\n-\t\t\t\t\tItemType r = null;\r\n-\t\t\t\t\tfor (final ItemData d : t.getTypes()) {\r\n-\t\t\t\t\t\tif (d.getType() == Material.POTION) {\r\n-\t\t\t\t\t\t\tif (r == null)\r\n-\t\t\t\t\t\t\t\tr = new ItemType(d);\r\n-\t\t\t\t\t\t\telse\r\n-\t\t\t\t\t\t\t\tr.add(d);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\treturn r;\r\n+\t\t\treturn (types = Converters.convert((ItemType[]) exprs[0].getAll(), ItemType.class, t -> {\r\n+\t\t\t\tMaterial type = t.getMaterial();\r\n+\t\t\t\t// If the itemtype is a potion, lets make it a splash potion (required by Bukkit)\r\n+\t\t\t\t// Due to an issue with 1.12.2 and below, we have to force a lingering potion to be a splash potion\r\n+\t\t\t\tif (type == Material.POTION || (type == Material.LINGERING_POTION && RUNNING_LEGACY)) {\r\n+\t\t\t\t\tItemMeta meta = t.getItemMeta();\r\n+\t\t\t\t\tItemType itemType = new ItemType(Material.SPLASH_POTION);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a35e0c56fe8a190aee1459de1eae9cc8b23b3b6"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1134, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}