{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mzg0ODY1", "number": 3204, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1Mzo1OVrOER5XzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOTowNjo0N1rOEn3QFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAxMjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1Mzo1OVrOG22w4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxNzowNVrOG23eCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MzUzNw==", "bodyText": "You accidentally put 'mode state'", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460173537", "createdAt": "2020-07-24T16:53:59Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4NTA5Nw==", "bodyText": "Oop", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460185097", "createdAt": "2020-07-24T17:17:05Z", "author": {"login": "DeltaRays"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MzUzNw=="}, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAyMzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1NzoyMVrOG223nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxOToxNlrOG23iXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTI2MA==", "bodyText": "Instead of having two loops, you might be able to it with just one (e.g)\nboolean state = delta != null ? (Boolean) delta[0] : false;", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460175260", "createdAt": "2020-07-24T16:57:21Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")\n+public class ExprArrowCriticalState extends SimplePropertyExpression<Entity, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprArrowCriticalState.class, Boolean.class, \"[the] critical arrow (state|ability|mode)\", \"entities\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Entity arrow) {\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null || delta.length < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4NTcxOA==", "bodyText": "Yeah, the issue is that the code doesn't work because 'last shot arrow' only works when you 'artificially' shoot the arrow (with the shoot effect)", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460185718", "createdAt": "2020-07-24T17:18:10Z", "author": {"login": "DeltaRays"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")\n+public class ExprArrowCriticalState extends SimplePropertyExpression<Entity, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprArrowCriticalState.class, Boolean.class, \"[the] critical arrow (state|ability|mode)\", \"entities\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Entity arrow) {\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null || delta.length < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTI2MA=="}, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4NjIwNg==", "bodyText": "So I don't know whether I should make it so it uses projectiles or make it so when a projectile is shot the last shot projectile is set to that", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460186206", "createdAt": "2020-07-24T17:19:16Z", "author": {"login": "DeltaRays"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")\n+public class ExprArrowCriticalState extends SimplePropertyExpression<Entity, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprArrowCriticalState.class, Boolean.class, \"[the] critical arrow (state|ability|mode)\", \"entities\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Entity arrow) {\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null || delta.length < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTI2MA=="}, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjAyNzg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1ODozOFrOG226RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1ODozOFrOG226RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NTk0MA==", "bodyText": "Move if check onto a separate line \ud83d\ude42", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r460175940", "createdAt": "2020-07-24T16:58:38Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprArrowCriticalState.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Critical State\")\n+@Description(\"An arrow's critical state.\")\n+@Examples(\"set critical mode state of last shot arrow to true\")\n+public class ExprArrowCriticalState extends SimplePropertyExpression<Entity, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprArrowCriticalState.class, Boolean.class, \"[the] critical arrow (state|ability|mode)\", \"entities\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Entity arrow) {\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null || delta.length < 1) {\n+\t\t\tfor (Entity entity : getExpr().getAll(e)) {\n+\t\t\t\tif (entity instanceof Arrow) ((Arrow) entity).setCritical(false);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tfor (Entity entity : getExpr().getAll(e)) {\n+\t\t\t\tif (entity instanceof Arrow) ((Arrow) entity).setCritical((Boolean) delta[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02d53db9543650c5b53258b88e4bcdeb5e9cf128"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjM0NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNzowOVrOG5y8Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNzowOVrOG5y8Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NjU4Ng==", "bodyText": "Accident empty line ;)", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r463256586", "createdAt": "2020-07-30T20:37:09Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a1f8e82e41aef7cfd4566826ec8ea2a561adfc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjM0NjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNzoxOFrOG5y8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozNzoxOFrOG5y8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NjY0Mw==", "bodyText": "should be a constant", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r463256643", "createdAt": "2020-07-30T20:37:18Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a1f8e82e41aef7cfd4566826ec8ea2a561adfc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTM0MzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODo0OTowNFrOHYh9tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxOTowNjozNlrOHYiD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NDM0MQ==", "bodyText": "You should have curly braces on this else if statement IMO", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r495484341", "createdAt": "2020-09-26T18:49:04Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tprivate static final boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).isCritical() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tboolean state = delta != null ? (Boolean) delta[0] : false;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t((AbstractArrow) entity).setCritical(state);\n+\t\t\t} else if (entity instanceof Arrow)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c982d16ac9b5f6b29e69cf5e82c411daf6e3e7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NTkxMA==", "bodyText": "Ngl I was expecting 'add a default case'", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r495485910", "createdAt": "2020-09-26T19:06:36Z", "author": {"login": "DeltaRays"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tprivate static final boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).isCritical() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tboolean state = delta != null ? (Boolean) delta[0] : false;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t((AbstractArrow) entity).setCritical(state);\n+\t\t\t} else if (entity instanceof Arrow)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NDM0MQ=="}, "originalCommit": {"oid": "e4c982d16ac9b5f6b29e69cf5e82c411daf6e3e7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTUwMjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjo1MToxMVrOHYjHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjo1MToxMVrOHYjHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwMzI4Nw==", "bodyText": "You shouldn't do anything if delta is null. I missed that in my original review.", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r495503287", "createdAt": "2020-09-26T22:51:11Z", "author": {"login": "APickledWalrus"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tprivate static final boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).isCritical() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tboolean state = delta != null ? (Boolean) delta[0] : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ea16ca5e2b9d28a48fa2f3a0ca027550668971"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjM1MTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOTowNjo0OFrOHYpTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoyMDowMlrOHY3bAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNDQ5NA==", "bodyText": "can't this all be one line? if (abstractArrowExists && entity instanceof AbstractArrow)", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r495604494", "createdAt": "2020-09-27T19:06:48Z", "author": {"login": "Pikachu920"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tprivate static final boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).isCritical() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null) return;\n+\t\tboolean state = (Boolean) delta[0];\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f6f553c0ed27411da1f2999bc01e4016bdb5de"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNTkwNQ==", "bodyText": "Yeah sorry I was used to languages in which it checks for all the conditions so it would cause issues if AbstractArror wasn't set", "url": "https://github.com/SkriptLang/Skript/pull/3204#discussion_r495835905", "createdAt": "2020-09-28T10:20:02Z", "author": {"login": "DeltaRays"}, "path": "src/main/java/ch/njol/skript/expressions/ExprProjectileCriticalState.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Projectile Critical State\")\n+@Description(\"A projectile's critical state. The only currently accepted projectiles are arrows and tridents.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset projectile critical mode of event-projectile to true\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprProjectileCriticalState extends SimplePropertyExpression<Projectile, Boolean> {\n+\t\n+\tprivate static final boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tregister(ExprProjectileCriticalState.class, Boolean.class, \"[the] (projectile|arrow) critical (state|ability|mode)\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Boolean convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).isCritical() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).isCritical() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET) ? CollectionUtils.array(Boolean.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null) return;\n+\t\tboolean state = (Boolean) delta[0];\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNDQ5NA=="}, "originalCommit": {"oid": "42f6f553c0ed27411da1f2999bc01e4016bdb5de"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1072, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}