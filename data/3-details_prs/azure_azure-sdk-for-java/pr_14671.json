{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzI1NTMx", "number": 14671, "title": "Add implementation of DT Apis", "bodyText": "", "createdAt": "2020-09-01T00:24:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671", "merged": true, "mergeCommit": {"oid": "49d7bb557cd0fbd0e31660cdb91558bdd0a11c83"}, "closed": true, "closedAt": "2020-09-01T21:03:38Z", "author": {"login": "bikamani"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEcKjWAH2gAyNDc2NzI1NTMxOjQxMWIxYTViNWEyOTg5MDIyZWE1MTkxODgwZTQwYTJmZGE0ZjI4OGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEtqvugH2gAyNDc2NzI1NTMxOjUxMzU4MWZlZWQzZmRkMTc2NzU3MGIxMGRhMTFlMTc3YmRiNWMyM2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/411b1a5b5a2989022ea5191880e40a2fda4f288f", "committedDate": "2020-09-01T00:21:48Z", "message": "add crud api cl for DT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MTU3NzU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-479157757", "createdAt": "2020-09-01T00:24:49Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNDo0OVrOHKPCvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNDo0OVrOHKPCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NDI2OA==", "bodyText": "No need to review these changes, I'll be removing it later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r480494268", "createdAt": "2020-09-01T00:24:49Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -400,44 +400,21 @@ public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId,\n  *\n  * @param digitalTwinId The Id of the digital twin.\n  * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n- * @return The updated application/json digital twin.\n  */\n @ServiceMethod(returns = ReturnType.SINGLE)\n-public Mono<String> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n-\n- /**\n- * Updates a digital twin.\n- *\n- * @param digitalTwinId The Id of the digital twin.\n- * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n- * @param classType The model class to convert the response to.\n- * @return The updated application/json digital twin.\n- */\n-@ServiceMethod(returns = ReturnType.SINGLE)\n-public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAwNDcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480000472", "createdAt": "2020-09-01T18:16:01Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjowMVrOHLCo0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjowMVrOHLCo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTYwMQ==", "bodyText": "How about \"The deserialized application/json object representing the digital twin\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339601", "createdAt": "2020-09-01T18:16:01Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAwNzA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480000709", "createdAt": "2020-09-01T18:16:22Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjoyMlrOHLCpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjoyMlrOHLCpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTc3OQ==", "bodyText": "\"The generic type to serialize and deserialize the digital twin with\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339779", "createdAt": "2020-09-01T18:16:22Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAwODgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480000881", "createdAt": "2020-09-01T18:16:38Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjozOVrOHLCqCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNjozOVrOHLCqCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTkxNA==", "bodyText": "\"The model class to serialize and deserialize the digital twin with\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481339914", "createdAt": "2020-09-01T18:16:39Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAxNzY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480001768", "createdAt": "2020-09-01T18:17:49Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNzo0OVrOHLCs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxNzo0OVrOHLCs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDYyNQ==", "bodyText": "An", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340625", "createdAt": "2020-09-01T18:17:49Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAxOTQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480001944", "createdAt": "2020-09-01T18:18:04Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODowNVrOHLCtYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODowNVrOHLCtYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDc2OA==", "bodyText": "Capital An?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340768", "createdAt": "2020-09-01T18:18:05Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAyMTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480002196", "createdAt": "2020-09-01T18:18:25Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODoyNlrOHLCuIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODoyNlrOHLCuIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDk2Mg==", "bodyText": "Aren't these return values supposed to be void with a lowercase 'v'?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481340962", "createdAt": "2020-09-01T18:18:26Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDAyNjQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480002648", "createdAt": "2020-09-01T18:19:08Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOTowOFrOHLCvpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOTowOFrOHLCvpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTM0OA==", "bodyText": "Sometimes you have \"an http response\" and sometimes \"the http response\". Let's be consistent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481341348", "createdAt": "2020-09-01T18:19:08Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)\n+            .map(response -> {\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), response.getValue(), twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+    {\n+        return deleteDigitalTwinWithResponse(digitalTwinId, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param options The optional settings for this request\n+     * @return The Http response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA1OTAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480005903", "createdAt": "2020-09-01T18:23:48Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMzo0OFrOHLC5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMzo0OFrOHLC5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mzg4OA==", "bodyText": "the log statement says \"relationship\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481343888", "createdAt": "2020-09-01T18:23:48Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA4NTQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480008548", "createdAt": "2020-09-01T18:27:34Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzozNFrOHLDBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzozNFrOHLDBgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTkyMw==", "bodyText": "Shouldn't Object digitalTwin be T digitalTwin in the parameter list?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481345923", "createdAt": "2020-09-01T18:27:34Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -112,8 +131,31 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is Object and output is Response<T>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA4Nzcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480008770", "createdAt": "2020-09-01T18:27:52Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo1MlrOHLDCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo1MlrOHLDCIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjA4MQ==", "bodyText": "FYI: using a map here would have given us:\n.map(voidDigitalTwinsResponse -> null)\nEven though Mono<Void> is the same as an empty Mono -> Mono that doesn't return anything, I feel Mono.empty() is a better representation of the transformation we are doing here.\nHowever, I want to point out that the end result from both would still be the same.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481346081", "createdAt": "2020-09-01T18:27:52Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA5NTY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480009569", "createdAt": "2020-09-01T18:29:03Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyOTowM1rOHLDElg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyOTowM1rOHLDElg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjcxMA==", "bodyText": "copy paste error here. This API isn't retrieving a relationship. Make this more descriptive, too. Something like \"Failed to serialize retrieved digital twin to a string\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481346710", "createdAt": "2020-09-01T18:29:03Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDExMzE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480011314", "createdAt": "2020-09-01T18:31:31Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMTozMVrOHLDKEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMTozMVrOHLDKEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODExNQ==", "bodyText": "Don't use the RequestOptions type directly. Each set of client side APIs should have their own request options implementation like \"UpdateDigitalTwinRequestOptions\" instead. That way we can add options to this API later without worrying about adding the same options to other APIs that share the same options type", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481348115", "createdAt": "2020-09-01T18:31:31Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDE0NTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480014563", "createdAt": "2020-09-01T18:36:20Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozNjoyMFrOHLDUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozNjoyMFrOHLDUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MDc2OA==", "bodyText": "I don't like referring to the Response as just an \"Http response\". How about \"A {@link DigitalTwinsResponse} containing the application/json digital twin created.\"?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481350768", "createdAt": "2020-09-01T18:36:20Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return A Http response containing application/json digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDE2MDUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480016050", "createdAt": "2020-09-01T18:38:28Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozODoyOFrOHLDY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozODoyOFrOHLDY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTkzNQ==", "bodyText": "We are now creating subclasses for request options for these update APIs. That way you can add a new request option tomorrow for the update digital twin API, without having to wonder if and how that would affect the update relationship API.\nWe will also avoid adding more optional param combinations to our API surface.\nYou can refer to #14666 for an example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481351935", "createdAt": "2020-09-01T18:38:28Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a relationship: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param <T> The generic type to convert the response to.\n+     * @return A Http response containing the application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return an empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDE3MzU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480017354", "createdAt": "2020-09-01T18:40:26Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MDoyNlrOHLDcsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MDoyNlrOHLDcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Mjg4Mw==", "bodyText": "This needs the <T> param description in javadoc comments", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481352883", "createdAt": "2020-09-01T18:40:26Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDE4MjQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480018249", "createdAt": "2020-09-01T18:41:47Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MTo0N1rOHLDfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MTo0N1rOHLDfYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzU3MQ==", "bodyText": "You don't need to call .getValue() here, since the method neither does anything with the value, nor does it return it.\nYou can invoke the API and leave it at that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481353571", "createdAt": "2020-09-01T18:41:47Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDE4NzQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480018748", "createdAt": "2020-09-01T18:42:33Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MjozM1rOHLDgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MjozM1rOHLDgtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzkwOA==", "bodyText": "same here as well, no need to call .getValue() here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481353908", "createdAt": "2020-09-01T18:42:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -59,6 +59,165 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return this.digitalTwinsAsyncClient.getServiceVersion();\n     }\n \n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String createDigitalTwin(String digitalTwinId, String digitalTwin)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context).block();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The model class to convert the response to.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> clazz)\n+    {\n+        return createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public String getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, context).block();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @return The application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> T getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to convert the response to.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response containing application/json digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Response<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)\n+    {\n+        return digitalTwinsAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz, context).block();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new RequestOptions(), Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public DigitalTwinsResponse<Void> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Context context)\n+    {\n+        return digitalTwinsAsyncClient.updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context).block();\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void deleteDigitalTwin(String digitalTwinId)\n+    {\n+        deleteDigitalTwinWithResponse(digitalTwinId, new RequestOptions(), Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDQ4Njkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480048693", "createdAt": "2020-09-01T19:23:19Z", "commit": {"oid": "411b1a5b5a2989022ea5191880e40a2fda4f288f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/403f4aeb27fb60a678bee9c15b3a111029b1d73a", "committedDate": "2020-09-01T20:17:08Z", "message": "adding req options and addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg1MTM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480085134", "createdAt": "2020-09-01T20:19:22Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxOToyMlrOHLGwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxOToyMlrOHLGwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNzAxOA==", "bodyText": "typo: \"The\" is used twice", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481407018", "createdAt": "2020-09-01T20:19:22Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -89,8 +89,27 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n-    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n-    // Input is String and output is Response<String>.\n+    /**\n+     * Creates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwin The application/json digital twin to create.\n+     * @return The the application/json string representing the digital twin created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg2Mzgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480086380", "createdAt": "2020-09-01T20:21:18Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToxOFrOHLG0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToxOFrOHLG0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODA1Mw==", "bodyText": "How about we specify that the json processing exception occurred while serializing the response to string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408053", "createdAt": "2020-09-01T20:21:18Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg2NzI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480086729", "createdAt": "2020-09-01T20:21:50Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMTo1MFrOHLG1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMTo1MFrOHLG1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODM3MA==", "bodyText": "Copy/paste error in this comment. this is not used by the deleteDigitalTwin API", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408370", "createdAt": "2020-09-01T20:21:50Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateDigitalTwin(String, List)} and its overloads.\n+ */\n+public class UpdateDigitalTwinRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteDigitalTwin APIs get a new optional parameter in later service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg3NDAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480087400", "createdAt": "2020-09-01T20:22:53Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMjo1M1rOHLG3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMjo1M1rOHLG3fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODg5NQ==", "bodyText": "do add a null check for options before invoking the getter for ifMatch.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481408895", "createdAt": "2020-09-01T20:22:53Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return The deserialized application/json object representing the digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new UpdateDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A {@link DigitalTwinsResponse}\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg3NjI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480087627", "createdAt": "2020-09-01T20:23:15Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxNVrOHLG4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxNVrOHLG4HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTA1Mw==", "bodyText": "same here as well, null check for options", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481409053", "createdAt": "2020-09-01T20:23:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -130,6 +172,156 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return The application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getDigitalTwin(String digitalTwinId)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return A {@link DigitalTwinsResponse} containing the application/json string representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getDigitalTwinWithResponse(String digitalTwinId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while retrieving a digital twin: \", e);\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return The deserialized application/json object representing the digital twin\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param clazz The model class to deserialize the response with.\n+     * @param <T> The generic type to deserialize the digital twin with.\n+     * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the digital twin.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)\n+    {\n+        return withContext(context -> getDigitalTwinWithResponse(digitalTwinId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getByIdWithResponseAsync(digitalTwinId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, new UpdateDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+     * @param options The optional settings for this request\n+     * @return A {@link DigitalTwinsResponse}\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, UpdateDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .updateWithResponseAsync(digitalTwinId, digitalTwinUpdateOperations, options.getIfMatch(), context)\n+            .map(response -> {\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), response.getValue(), twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @return An empty Mono\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+    {\n+        return deleteDigitalTwinWithResponse(digitalTwinId, new DeleteDigitalTwinRequestOptions())\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+     *\n+     * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+     * @param options The optional settings for this request\n+     * @return The Http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinRequestOptions options)\n+    {\n+        return withContext(context -> deleteDigitalTwinWithResponse(digitalTwinId, options, context));\n+    }\n+\n+    Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinRequestOptions options, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .deleteWithResponseAsync(digitalTwinId, options.getIfMatch(), context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg4NDA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480088405", "createdAt": "2020-09-01T20:24:22Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNDoyMlrOHLG6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNDoyMlrOHLG6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTY1OQ==", "bodyText": "this comment references the delete API, it needs to be updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#discussion_r481409659", "createdAt": "2020-09-01T20:24:22Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/UpdateDigitalTwinRequestOptions.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import java.util.List;\n+\n+/**\n+ * Optional settings that are specific to calls to {@link DigitalTwinsClient#updateDigitalTwin(String, List)} and its overloads.\n+ */\n+public class UpdateDigitalTwinRequestOptions extends RequestOptions {\n+    // This class exists to be added to later if the deleteDigitalTwin APIs get a new optional parameter in later service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDg4NTU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14671#pullrequestreview-480088554", "createdAt": "2020-09-01T20:24:36Z", "commit": {"oid": "403f4aeb27fb60a678bee9c15b3a111029b1d73a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04de3ef8b110c5c593a25c78196c7a89e5cc9816", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/04de3ef8b110c5c593a25c78196c7a89e5cc9816", "committedDate": "2020-09-01T20:42:58Z", "message": "addressing more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "513581feed3fdd1767570b10da11e177bdb5c23c", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/513581feed3fdd1767570b10da11e177bdb5c23c", "committedDate": "2020-09-01T20:45:21Z", "message": "document for T"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}