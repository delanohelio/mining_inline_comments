{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzI3MDQ2", "number": 16034, "title": "Porting SessionTokenMismatchRetryPolicy from .Net-SDK", "bodyText": "In the .Net-SDK a retry policy had been added to ensure local retries in case of 404/1002 in the ConsistencyReader/Writer stack. The StoreReader itself is iterating through replicas already - so this retry policy is only applicable when initially no local replica satisfies the session token provided - in .Net the main driver for adding this retry policy has been that we saw errors for uncommitted writes resulting in request-level regional fail-over where the SessionTokenMismatchRetryPolicy (with pretty aggressive retry intervals) results overall in better experience for multi-regional accounts - and is a significant improvement of course for single-region accounts.", "createdAt": "2020-10-07T15:15:00Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034", "merged": true, "mergeCommit": {"oid": "5ea92b4c85a7e5bd3c8c7950493677cf6e4d86ee"}, "closed": true, "closedAt": "2020-10-07T20:35:04Z", "author": {"login": "FabianMeiswinkel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQIGTegH2gAyNDk5MzI3MDQ2OjA1OWNkM2ZmYzY3ZjJkY2YwM2FlNjZhZmMyMzdmODg4YWY2ZWIzMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQQvrfgH2gAyNDk5MzI3MDQ2OmVmNDYxNTE4NDFjZmI0MWE5MjJhOGMwOGRkMGEwMDg1NzFiYmU5ZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "059cd3ffc67f2dcf03ae66afc237f888af6eb301", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/059cd3ffc67f2dcf03ae66afc237f888af6eb301", "committedDate": "2020-10-07T07:46:09Z", "message": "Adding SessionTokenMismatchPolicy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44296b4d6bfa4aae4a2b17095a9e083468769a1", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c44296b4d6bfa4aae4a2b17095a9e083468769a1", "committedDate": "2020-10-07T07:46:35Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/ConsistencyReaderMissingReadSessionFix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce18f96b55de5a4634e5f5718a98fb14e49add93", "committedDate": "2020-10-07T15:09:43Z", "message": "Adding unit test coverage for SessionTokenMismatchRetryPolicy in ConsistencyReader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzOTkyOTc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#pullrequestreview-503992978", "createdAt": "2020-10-07T15:16:49Z", "commit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNjo1MFrOHd4hXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNjo1MFrOHd4hXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5Njc5OQ==", "bodyText": "In .Net we allow overriding these defaults via Environment variables - this is the reason why I added it here as well. But to be honest I don't expect this to be an often used extensibility - most likely the configuration was allowed in .Net for Compute/Mongo/Cassandra - so I would be ok with removing and hard-coding the settings instead as well. Let me know what you think...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501096799", "createdAt": "2020-10-07T15:16:50Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDAyODAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#pullrequestreview-504002801", "createdAt": "2020-10-07T15:26:21Z", "commit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyNjoyMVrOHd4-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyNjoyMVrOHd4-ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDMyMw==", "bodyText": "info vs warn?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501104323", "createdAt": "2020-10-07T15:26:21Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDA0MzM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#pullrequestreview-504004336", "createdAt": "2020-10-07T15:27:50Z", "commit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDYwNzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#pullrequestreview-504060718", "createdAt": "2020-10-07T16:28:27Z", "commit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyODoyN1rOHd7tQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNzoxM1rOHd8D0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODk5Mw==", "bodyText": "the new config names not consistent with the existing ones.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";\n          \n          \n            \n                    \"COSMOS.SESSION_TOKEN_MISMATCH_POLICY_DEFAULT_MAX_BACKOF_IN_MILLISECONDS\"\n          \n      \n    \n    \n  \n\nsame for the other configs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501148993", "createdAt": "2020-10-07T16:28:27Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-wait-time-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS = 5000;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-initial-backoff-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS = 5;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_MAXIMUM_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTYxNA==", "bodyText": "code style: in java \"{\" should be on the same line as if.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501151614", "createdAt": "2020-10-07T16:32:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(\n+                \"SessionTokenMismatchRetryPolicy not retrying because it has exceeded \" +\n+                    \"the time limit. Retry count = {}\",\n+                this.retryCount);\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        Duration effectiveBackoff = Duration.ZERO;\n+\n+        // Don't penalize first retry with delay\n+        if (this.retryCount.getAndIncrement() > 0)\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1Mjg4MA==", "bodyText": "great test. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501152880", "createdAt": "2020-10-07T16:34:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReaderTest.java", "diffHunk": "@@ -424,6 +423,122 @@ public void sessionNotAvailableFromSomeReplicasThrowingNotFound_FindReplicaSatis\n \n         StoreResponseValidator validator = StoreResponseValidator.create().isSameAs(storeResponse).isSameAs(storeResponse).build();\n         validateSuccess(storeResponseSingle, validator);\n+        transportClientWrapper.verifyNumberOfInvocations(4);\n+    }\n+\n+    /**\n+     * reading in session consistency, if the requested session token cannot be supported by some replicas\n+     * tries others till we find a replica which can support the given session token\n+     */\n+    @Test(groups = \"unit\")\n+    public void sessionNotAvailableFromAllReplicasThrowingNotFound_FindReplicaSatisfyingRequestedSessionOnRetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ==", "bodyText": "we should consider doing a quick perf test for session consistency to see the perf impact of having retry logic hooked up here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501154771", "createdAt": "2020-10-07T16:37:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "diffHunk": "@@ -235,7 +231,9 @@ public ConsistencyReader(\n \n             case Any:\n                 if (targetConsistencyLevel.v == ConsistencyLevel.SESSION) {\n-                    return this.readSessionAsync(entity, desiredReadMode);\n+                    return BackoffRetryUtility.executeRetry(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7312d971ddbce0291c1157537a861c042aa528", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c7312d971ddbce0291c1157537a861c042aa528", "committedDate": "2020-10-07T17:46:10Z", "message": "Reacting to code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef46151841cfb41a922a8c08dd0a008571bbe9d6", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef46151841cfb41a922a8c08dd0a008571bbe9d6", "committedDate": "2020-10-07T17:50:35Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/ConsistencyReaderMissingReadSessionFix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2173, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}