{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTI1MTIy", "number": 15431, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1NzoxN1rOEl0WJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMzo0OVrOEl1pxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDkwNDA1OnYy", "diffSide": "LEFT", "path": "sdk/digitaltwins/azure-digitaltwins-core/autorest.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1NzoxN1rOHVgROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1NzoxN1rOHVgROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMDg0MA==", "bodyText": "We used to declare these as custom types so that they would live in public namespaces, but now that we have a wrapper for each, we don't need to declare that anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492310840", "createdAt": "2020-09-21T19:57:17Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/autorest.md", "diffHunk": "@@ -39,5 +39,5 @@ java:\n     models-subpackage: implementation.models\n     context-client-method-parameter: true\n     custom-types-subpackage: models\n-    custom-types: IncomingRelationship,EventRoute,EventRoutesListOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDkwNzMyOnYy", "diffSide": "LEFT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1ODoxM1rOHVgTHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo1ODoxM1rOHVgTHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMTMyNg==", "bodyText": "This one was odd to me. I'm assuming we didn't mean to assume that there was no continuation token", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492311326", "createdAt": "2020-09-21T19:58:13Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -665,7 +700,7 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n                         objectPagedResponse.getStatusCode(),\n                         objectPagedResponse.getHeaders(),\n                         convertedList,\n-                        null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDkxMzkyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDowMDowNlrOHVgXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxODoxMlrOHVg79A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw==", "bodyText": "While users shouldn't be setting this, we need it to do conversions from generated type to public type", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492312353", "createdAt": "2020-09-21T20:00:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -79,13 +77,13 @@ public EventRoute setFilter(String filter) {\n     }\n \n     /**\n-     * Validates the instance.\n+     * Sets the event route's Id.\n      *\n-     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     * @param id The event route's Id to set.\n+     * @return the EventRoute object itself.\n      */\n-    public void validate() {\n-        if (getEndpointName() == null) {\n-            throw new IllegalArgumentException(\"Missing required property endpointName in model EventRoute\");\n-        }\n+    public EventRoute setId(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjQ4NQ==", "bodyText": "The converters live in a different package, so I can't just make this package private", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492312485", "createdAt": "2020-09-21T20:00:24Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -79,13 +77,13 @@ public EventRoute setFilter(String filter) {\n     }\n \n     /**\n-     * Validates the instance.\n+     * Sets the event route's Id.\n      *\n-     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     * @param id The event route's Id to set.\n+     * @return the EventRoute object itself.\n      */\n-    public void validate() {\n-        if (getEndpointName() == null) {\n-            throw new IllegalArgumentException(\"Missing required property endpointName in model EventRoute\");\n-        }\n+    public EventRoute setId(String id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw=="}, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTc4MA==", "bodyText": "How about a doc comment to that effect then? If I'm an end-user and see this setter, I'm wondering what happens if I set it, or why I'd want to.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321780", "createdAt": "2020-09-21T20:18:12Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -79,13 +77,13 @@ public EventRoute setFilter(String filter) {\n     }\n \n     /**\n-     * Validates the instance.\n+     * Sets the event route's Id.\n      *\n-     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     * @param id The event route's Id to set.\n+     * @return the EventRoute object itself.\n      */\n-    public void validate() {\n-        if (getEndpointName() == null) {\n-            throw new IllegalArgumentException(\"Missing required property endpointName in model EventRoute\");\n-        }\n+    public EventRoute setId(String id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw=="}, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDkyNDg3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDowMzozM1rOHVgeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDowODoyOFrOHVgoEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNDE3OQ==", "bodyText": "I'm surprised the host is the 2rd parameter, but it is hard to articulate why. Is there parameter order guidance from team Azure SDK team?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492314179", "createdAt": "2020-09-21T20:03:33Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -52,8 +57,9 @@\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n+    private JsonSerializer serializer = null;\n \n-    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host) {\n+    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host, JsonSerializer jsonSerializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY5MQ==", "bodyText": "I double checked the configuration client, and they have it as \"host, pipeline, serviceVersion\", so I can switch us to match", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492316691", "createdAt": "2020-09-21T20:08:28Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -52,8 +57,9 @@\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n+    private JsonSerializer serializer = null;\n \n-    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host) {\n+    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host, JsonSerializer jsonSerializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNDE3OQ=="}, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDk0MDU5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDowODoyOFrOHVgoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo1Nzo0MVrOHViKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw==", "bodyText": "nit: can we add a link to DeserializationHelpers here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492316687", "createdAt": "2020-09-21T20:08:28Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -62,6 +68,10 @@\n \n         this.serviceVersion = serviceVersion;\n \n+        // Is null by default. If not null, then the user provided a custom json serializer for the convenience layer to use.\n+        // If null, then mapper will be used instead. See DeserializationHelpers for more details", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMzMwMw==", "bodyText": "Links only work in javadocs, not comments", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492323303", "createdAt": "2020-09-21T20:21:19Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -62,6 +68,10 @@\n \n         this.serviceVersion = serviceVersion;\n \n+        // Is null by default. If not null, then the user provided a custom json serializer for the convenience layer to use.\n+        // If null, then mapper will be used instead. See DeserializationHelpers for more details", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw=="}, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MTgzOQ==", "bodyText": "\ud83e\udd26, my bad!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492341839", "createdAt": "2020-09-21T20:57:41Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -62,6 +68,10 @@\n \n         this.serviceVersion = serviceVersion;\n \n+        // Is null by default. If not null, then the user provided a custom json serializer for the convenience layer to use.\n+        // If null, then mapper will be used instead. See DeserializationHelpers for more details", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw=="}, "originalCommit": {"oid": "88a6a294f37986c48ad003270287898cd6580200"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDk2NzI4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNjoxOFrOHVg4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNjoxOFrOHVg4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMDgyMA==", "bodyText": "space before curly brace", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492320820", "createdAt": "2020-09-21T20:16:18Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,38 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n-        if (clazz.isAssignableFrom(String.class)){\n-            return (T)mapper.writeValueAsString(payload);\n+    public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n+        if (customJsonSerializer == null) {\n+            if (clazz.isAssignableFrom(String.class)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98211b71a76ea864be78a70b1d8e28581ad2ce52"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDk2OTM4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNjo1N1rOHVg5aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNjo1N1rOHVg5aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTEzMQ==", "bodyText": "technically, you could remove this else as the assignable check returns", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321131", "createdAt": "2020-09-21T20:16:57Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,38 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n-        if (clazz.isAssignableFrom(String.class)){\n-            return (T)mapper.writeValueAsString(payload);\n+    public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n+        if (customJsonSerializer == null) {\n+            if (clazz.isAssignableFrom(String.class)){\n+                return (T)mapper.writeValueAsString(payload);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98211b71a76ea864be78a70b1d8e28581ad2ce52"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDk2OTk3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNzoxMFrOHVg52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNzoxMFrOHVg52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTI0MQ==", "bodyText": "space before curly brace", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321241", "createdAt": "2020-09-21T20:17:10Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,24 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n-        try {\n-            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {\n+        if (serializer == null) {\n+            try {\n+                return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+            }\n+            catch (Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98211b71a76ea864be78a70b1d8e28581ad2ce52"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDk3MDY1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNzoyM1rOHVg6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNzoyM1rOHVg6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTM0Ng==", "bodyText": "space before curly brace", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321346", "createdAt": "2020-09-21T20:17:23Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,24 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n-        try {\n-            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {\n+        if (serializer == null) {\n+            try {\n+                return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+            }\n+            catch (Exception e){\n+                throw new IllegalArgumentException(\"Invalid continuation token\", e);\n+            }\n         }\n-        catch (Exception e){\n-            throw new IllegalArgumentException(\"Invalid continuation token\");\n+        else {\n+            try {\n+                ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+                serializer.serialize(sourceStream, continuationToken);\n+                return sourceStream.toString();\n+            }\n+            catch (Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98211b71a76ea864be78a70b1d8e28581ad2ce52"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTEwNDc5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/models/EventRoute.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo1OTozNFrOHViOKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo1OTozNFrOHViOKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MjgyNA==", "bodyText": "nice!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492342824", "createdAt": "2020-09-21T20:59:34Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/models/EventRoute.java", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.digitaltwins.core.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The EventRoute model. */\n+@Fluent\n+public final class EventRoute {\n+    /*\n+     * The id of the event route.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The name of the endpoint this event route is bound to.\n+     */\n+    @JsonProperty(value = \"endpointName\", required = true)\n+    private String endpointName;\n+\n+    /*\n+     * An expression which describes the events which are routed to the\n+     * endpoint.\n+     */\n+    @JsonProperty(value = \"filter\")\n+    private String filter;\n+\n+    /** Creates an instance of EventRoute class. */\n+    @JsonCreator\n+    public EventRoute(@JsonProperty(value = \"endpointName\", required = true) String endpointName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTEwOTA0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMDo0NFrOHViQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTo0NToyMVrOHVjglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzQ0Mw==", "bodyText": "shouldn't we say what would be used instead, if customJsonSerializer is null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492343443", "createdAt": "2020-09-21T21:00:44Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,37 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzkyNw==", "bodyText": "Let me re-word this a bit to avoid confusion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492363927", "createdAt": "2020-09-21T21:45:21Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,37 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzQ0Mw=="}, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTExMzk0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMjoyOVrOHViTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTo0MjowNlrOHVjbHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDIzNA==", "bodyText": "why does the continuation token serializer require a custom serializer? Isn't the custom serializer only for serializing user types?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492344234", "createdAt": "2020-09-21T21:02:29Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,22 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MjUyNw==", "bodyText": "Good point, we shouldn't use the custom serializer here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492362527", "createdAt": "2020-09-21T21:42:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,22 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDIzNA=="}, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTExODEyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMzo0OVrOHViWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTo0MToxNVrOHVjZoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDg4MQ==", "bodyText": "Srikanta had mentioned during the API review that there was some kind of a flag that we could set at autorest generation to get rid of this validation, did that not work?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492344881", "createdAt": "2020-09-21T21:03:49Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -1,15 +1,20 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.digitaltwins.core.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n-/** The EventRoute model. */\n+/**\n+ * The EventRoute model. Event routes are used for defining where published telemetry gets sent to. As an example, an\n+ * event route can point towards an Azure EventHub as a consumer of published telemetry.\n+ */\n+// This class exists so that the public APIs don't directly consume a generated type and so that we can avoid exposing a validate() method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MjE0NA==", "bodyText": "Even with the required args being set at constructor time (see autorest.md for this change), we still have the client side validation flag set to true. Because of that, we still get these validate() functions. I didn't want to get rid of the client side validation flag, so the only option I had was to use wrapper classes to cover up these validate() functions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492362144", "createdAt": "2020-09-21T21:41:15Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -1,15 +1,20 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.digitaltwins.core.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n-/** The EventRoute model. */\n+/**\n+ * The EventRoute model. Event routes are used for defining where published telemetry gets sent to. As an example, an\n+ * event route can point towards an Azure EventHub as a consumer of published telemetry.\n+ */\n+// This class exists so that the public APIs don't directly consume a generated type and so that we can avoid exposing a validate() method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDg4MQ=="}, "originalCommit": {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 997, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}