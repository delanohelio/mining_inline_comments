{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjI0MTU3", "number": 14465, "reviewThreads": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNToyMlrOEcbObw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozNjozMFrOEdeJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQxNjQ3OnYy", "diffSide": "RIGHT", "path": "eng/versioning/external_dependencies.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNToyMlrOHG9Fjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNToyMlrOHG9Fjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NDM1MA==", "bodyText": "We'd better use springboot22_ as the prefix.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477054350", "createdAt": "2020-08-26T06:05:22Z", "author": {"login": "saragluna"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -318,5 +318,14 @@ storage_com.microsoft.azure:azure-storage;8.4.0\n # sdk\\spring\\azure-spring-boot\\pom.xml\n spring_com.microsoft.azure:azure;1.34.0\n \n+# sdk\\spring\\azure-spring-boot-starter-2-2-cosmosdb\\pom.xml\n+cosmos22_com.microsoft.azure:spring-data-cosmosdb;2.2.2.M2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyMjE5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODowMVrOHG9JLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODowMVrOHG9JLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTI3OQ==", "bodyText": "Should this line only support Spring Boot 2.3.x?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477055279", "createdAt": "2020-08-26T06:08:01Z", "author": {"login": "saragluna"}, "path": "sdk/spring/README.md", "diffHunk": "@@ -25,7 +25,8 @@ Starter Name | Version for Spring Boot 2.3.x | Version for Spring Boot 2.2.x | V\n [azure-storage-spring-boot-starter](azure-spring-boot-starter-storage/README.md) | N/A | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-storage-spring-boot-starter%22) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-storage-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-storage-spring-boot-starter%20AND%20v:2.0.*)\n [azure-keyvault-secrets-spring-boot-starter](azure-spring-boot-starter-keyvault-secrets/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-keyvault-secrets-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.0.*)\n [azure-active-directory-b2c-spring-boot-starter](azure-spring-boot-starter-active-directory-b2c/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-active-directory-b2c-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-active-directory-b2c-spring-boot-starter%20AND%20v:2.2.*) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-active-directory-b2c-spring-boot-starter%20AND%20v:2.1.*) | N/A\n-[azure-cosmosdb-spring-boot-starter](azure-spring-boot-starter-cosmosdb/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-cosmosdb-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.0.*)\n+[azure-cosmosdb-spring-boot-2-2-starter](azure-spring-boot-2-2-starter-cosmosdb/README.md) | N/A | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.2.*) | N/A | N/A\n+[azure-cosmosdb-spring-boot-2-3-starter](azure-spring-boot-2-3-starter-cosmosdb/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-cosmosdb-spring-boot-2-3-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.0.*)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyMzc1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_artifact.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODo0MVrOHG9KHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODo0MVrOHG9KHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTUxNg==", "bodyText": "Rename replace_artifact.py to replact_util.py, because now it also update version, not only update artifact.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477055516", "createdAt": "2020-08-26T06:08:41Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_artifact.py", "diffHunk": "@@ -18,6 +18,20 @@\n         'pom_list': [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyNTQyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowOToyM1rOHG9LIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowOToyM1rOHG9LIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTc3OA==", "bodyText": "We should remove this line since it hasn't been released yet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477055778", "createdAt": "2020-08-26T06:09:23Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,8 @@\n+# Release History\n+\n+## 2.4.0-beta.1 (Unreleased)\n+\n+\n+## Current (2020-08-13)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyNzA2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDowNFrOHG9MHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDowNFrOHG9MHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjAzMQ==", "bodyText": "The artifactid does not match here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477056031", "createdAt": "2020-08-26T06:10:04Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,251 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyNzM0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDoxMlrOHG9MTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDoxMlrOHG9MTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjA3OA==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477056078", "createdAt": "2020-08-26T06:10:12Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,251 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyNzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_artifact.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDoxNVrOHG9MZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDoxNVrOHG9MZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjEwMA==", "bodyText": "How about renaming to version_dict?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477056100", "createdAt": "2020-08-26T06:10:15Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_artifact.py", "diffHunk": "@@ -18,6 +18,20 @@\n         'pom_list': [\n             'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml'\n         ]\n+    },\n+    'spring': {\n+        'artifact_dict': {\n+            'azure-cosmosdb-spring-boot-2-3-starter': 'azure-cosmosdb-spring-boot-2-2-starter'\n+        },\n+        'pom_list': [\n+            'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml'\n+        ],\n+        # update version of dependency, key = [group id]:[artfactid], value = (old_version, new_version)\n+        'ga_ver_dict': {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQzMDI5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_artifact.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMTozNlrOHG9OHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMTozNlrOHG9OHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjU0MA==", "bodyText": "value = (old_version, new_version) , 2 items in comment, but 3 item in the following items.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477056540", "createdAt": "2020-08-26T06:11:36Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_artifact.py", "diffHunk": "@@ -18,6 +18,20 @@\n         'pom_list': [\n             'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml'\n         ]\n+    },\n+    'spring': {\n+        'artifact_dict': {\n+            'azure-cosmosdb-spring-boot-2-3-starter': 'azure-cosmosdb-spring-boot-2-2-starter'\n+        },\n+        'pom_list': [\n+            'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml'\n+        ],\n+        # update version of dependency, key = [group id]:[artfactid], value = (old_version, new_version)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQzMzI0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_artifact.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMjo0NlrOHG9P6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMjo0NlrOHG9P6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NzAwMA==", "bodyText": "log.info('Replacing version in file: {}'.format(pom))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477057000", "createdAt": "2020-08-26T06:12:46Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_artifact.py", "diffHunk": "@@ -104,5 +119,45 @@ def replace_artifact(module):\n                 file.write(line)\n \n \n+def replace_version_by_artifact(module):\n+    \"\"\"\n+    Replace version and x-include-update info\n+    :param module:\n+    :return:\n+    \"\"\"\n+\n+    ga_ver_dict = config[module]['ga_ver_dict']\n+    pom_list = config[module]['pom_list']\n+    for pom in pom_list:\n+        log.info('Processing file: {}'.format(pom))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ0MTk3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNjoyNFrOHG9VEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNjoyNFrOHG9VEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODMyMg==", "bodyText": "How about we link users to the Key concepts section of azure-spring-boot-2-3-starter-cosmosdb/README.md, in which case we don't need to maintain two copies of the same content.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477058322", "createdAt": "2020-08-26T06:16:24Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,251 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+- Spring Data ReactiveCrudRepository basic CRUD functionality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ0MjczOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNjo0MlrOHG9VhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNjo0MlrOHG9VhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODQzNw==", "bodyText": "Same for this Examples section.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477058437", "createdAt": "2020-08-26T06:16:42Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,251 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+- Spring Data ReactiveCrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` of Azure Cosmos DB document.\n+  - annotate a field in domain class with @Id, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Cosmos DB.\n+    [Note] if both way applied,    \n+- Custom collection Name.\n+   By default, collection name will be class name of user domain class. To customize it, add annotation `@Document(collection=\"myCustomCollectionName\")` to your domain class, that's all.\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of your domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, please specify your partition value. For more sample on partition CRUD, please refer to [test here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation.\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+\n+## Examples\n+### Add the property setting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ0NDgwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNzoyNlrOHG9WsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNzoyNlrOHG9WsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODczNw==", "bodyText": "Same for this Troubleshooting section.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477058737", "createdAt": "2020-08-26T06:17:26Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,251 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+- Spring Data ReactiveCrudRepository basic CRUD functionality\n+    - save\n+    - findAll\n+    - findOne by Id\n+    - deleteAll\n+    - delete by Id\n+    - delete entity\n+- Spring Data [@Id](https://github.com/spring-projects/spring-data-commons/blob/db62390de90c93a78743c97cc2cc9ccd964994a5/src/main/java/org/springframework/data/annotation/Id.java) annotation.\n+  There're 2 ways to map a field in domain class to `id` of Azure Cosmos DB document.\n+  - annotate a field in domain class with @Id, this field will be mapped to document `id` in Cosmos DB. \n+  - set name of this field to `id`, this field will be mapped to document `id` in Cosmos DB.\n+    [Note] if both way applied,    \n+- Custom collection Name.\n+   By default, collection name will be class name of user domain class. To customize it, add annotation `@Document(collection=\"myCustomCollectionName\")` to your domain class, that's all.\n+- Supports [Azure Cosmos DB partition](https://docs.microsoft.com/azure/cosmos-db/partition-data). To specify a field of your domain class to be partition key field, just annotate it with `@PartitionKey`. When you do CRUD operation, please specify your partition value. For more sample on partition CRUD, please refer to [test here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-spring-data-cosmos-test/src/test/java/com/azure/spring/data/cosmos/repository/integration/AddressRepositoryIT.java)\n+- Supports [Spring Data custom query](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details) find operation.\n+- Supports [spring-boot-starter-data-rest](https://projects.spring.io/spring-data-rest/).\n+- Supports List and nested type in domain class.\n+\n+## Examples\n+### Add the property setting\n+\n+Open `application.properties` file and add below properties with your Cosmos DB credentials.\n+\n+```properties\n+azure.cosmosdb.uri=your-cosmosdb-uri\n+azure.cosmosdb.key=your-cosmosdb-key\n+azure.cosmosdb.database=your-cosmosdb-databasename\n+```\n+\n+Property `azure.cosmosdb.consistency-level` is also supported.\n+\n+Property `azure.cosmosdb.cosmosKeyCredential` is also supported. CosmosKeyCredential feature provides capability to \n+rotate keys on the fly. You can switch keys using switchToSecondaryKey(). For more information on this, see the Sample \n+Application code.\n+\n+#### (Optional) Add Spring Boot Actuator\n+If you choose to add Spring Boot Actuator for CosmosDB, add `management.health.azure-cosmos.enabled=true` to application.properties.\n+```properties\n+management.health.azure-cosmos.enabled=true\n+```\n+Include actuator dependencies.\n+```xml\n+<dependency>\n+    <groupId>org.springframework.boot</groupId>\n+    <artifactId>spring-boot-starter-actuator</artifactId>\n+</dependency>\n+\n+<dependency>\n+    <groupId>org.springframework.boot</groupId>\n+    <artifactId>spring-boot-starter-web</artifactId>\n+</dependency>\n+```\n+\n+Call `http://{hostname}:{port}/actuator/health/cosmos` to get the CosmosDB health info. **Please note**: it will calculate [RUs](https://docs.microsoft.com/en-us/azure/cosmos-db/request-units).\n+\n+### Define an entity\n+Define a simple entity as Document in Cosmos DB.\n+<!-- embedme ../azure-spring-boot/src/samples/java/com/azure/spring/cosmosdb/User.java#L10-L65 -->\n+```java\n+@Document(collection = \"mycollection\")\n+public class User {\n+    @Id\n+    private String id;\n+    private String firstName;\n+    @PartitionKey\n+    private String lastName;\n+    private String address;\n+\n+    public User() {\n+    }\n+\n+    public User(String id, String firstName, String lastName, String address) {\n+        this.id = id;\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+        this.address = address;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s %s, %s\", firstName, lastName, address);\n+    }\n+}\n+```\n+`id` field will be used as document `id` in Azure Cosmos DB. Or you can annotate any field with `@Id` to map it to document `id`.\n+\n+Annotation `@Document(collection=\"mycollection\")` is used to specify the collection name of your document in Azure Cosmos DB.\n+\n+### Create repositories\n+Extends ReactiveCosmosRepository interface, which provides Spring Data repository support.\n+<!-- embedme ../azure-spring-boot/src/samples/java/com/azure/spring/cosmosdb/UserRepository.java#L10-L14 -->\n+```java\n+@Repository\n+public interface UserRepository extends ReactiveCosmosRepository<User, String> {\n+\n+    Flux<User> findByFirstName(String firstName);\n+}\n+```\n+\n+So far ReactiveCosmosRepository provides basic save, delete and find operations. More operations will be supported later.\n+\n+### Create an Application class\n+Here create an application class with all the components\n+<!-- embedme ../azure-spring-boot/src/samples/java/com/azure/spring/cosmosdb/CosmosSampleApplication.java#L18-L65 -->\n+```java\n+@SpringBootApplication\n+public class CosmosSampleApplication implements CommandLineRunner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CosmosSampleApplication.class);\n+\n+    @Autowired\n+    private UserRepository repository;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(CosmosSampleApplication.class, args);\n+    }\n+\n+    public void run(String... var1) {\n+        final User testUser = new User(\"testId\", \"testFirstName\", \"testLastName\", \"test address line one\");\n+\n+        // Save the User class to Azure CosmosDB database.\n+        final Mono<User> saveUserMono = repository.save(testUser);\n+\n+        final Flux<User> firstNameUserFlux = repository.findByFirstName(\"testFirstName\");\n+\n+        //  Nothing happens until we subscribe to these Monos.\n+        //  findById will not return the user as user is not present.\n+        final Mono<User> findByIdMono = repository.findById(testUser.getId());\n+        final User findByIdUser = findByIdMono.block();\n+        Assert.isNull(findByIdUser, \"User must be null\");\n+\n+        final User savedUser = saveUserMono.block();\n+        Assert.state(savedUser != null, \"Saved user must not be null\");\n+        Assert.state(savedUser.getFirstName().equals(testUser.getFirstName()), \"Saved user first name doesn't match\");\n+\n+        firstNameUserFlux.collectList().block();\n+\n+        final Optional<User> optionalUserResult = repository.findById(testUser.getId()).blockOptional();\n+        Assert.isTrue(optionalUserResult.isPresent(), \"Cannot find user.\");\n+\n+        final User result = optionalUserResult.get();\n+        Assert.state(result.getFirstName().equals(testUser.getFirstName()), \"query result firstName doesn't match!\");\n+        Assert.state(result.getLastName().equals(testUser.getLastName()), \"query result lastName doesn't match!\");\n+\n+        LOGGER.info(\"findOne in User collection get result: {}\", result.toString());\n+    }\n+\n+    @PostConstruct\n+    public void setup() {\n+        // For this example, remove all of the existing records.\n+        this.repository.deleteAll().block();\n+    }\n+}\n+```\n+Autowired UserRepository interface, then can do save, delete and find operations.\n+\n+## Troubleshooting\n+### Enable client logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ0Njc4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_artifact.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxODoyMFrOHG9X6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxODoyMFrOHG9X6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTA0OQ==", "bodyText": "I guess ga mean groupId and artifactId, but I'm not sure I can remember it in the future. Could you please rename ga_key to key?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477059049", "createdAt": "2020-08-26T06:18:20Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_artifact.py", "diffHunk": "@@ -104,5 +119,45 @@ def replace_artifact(module):\n                 file.write(line)\n \n \n+def replace_version_by_artifact(module):\n+    \"\"\"\n+    Replace version and x-include-update info\n+    :param module:\n+    :return:\n+    \"\"\"\n+\n+    ga_ver_dict = config[module]['ga_ver_dict']\n+    pom_list = config[module]['pom_list']\n+    for pom in pom_list:\n+        log.info('Processing file: {}'.format(pom))\n+        with in_place.InPlace(pom) as file:\n+            line_num = 0\n+            for line in file:\n+                line_num = line_num + 1\n+                for ga_key, version_tuple in ga_ver_dict.items():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ3MzE1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-3-starter-cosmosdb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyODozMFrOHG9nZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyODozMFrOHG9nZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MzAxMw==", "bodyText": "Let's change this Document DB to Cosmos DB first.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477063013", "createdAt": "2020-08-26T06:28:30Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-3-starter-cosmosdb/pom.xml", "diffHunk": "@@ -12,11 +12,11 @@\n   </parent>\n \n   <groupId>com.microsoft.azure</groupId>\n-  <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-  <version>2.4.0-beta.1</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;current} -->\n+  <artifactId>azure-cosmosdb-spring-boot-2-3-starter</artifactId>\n+  <version>2.4.0-beta.1</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-2-3-starter;current} -->\n \n-  <name>Azure Cosmos DB Spring Boot Starter</name>\n-  <description>Spring Boot Starter for Azure Document DB service</description>\n+  <name>Azure Cosmos DB Spring Boot 2.3 Starter</name>\n+  <description>Spring Boot 2.3 Starter for Azure Document DB service</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ3NzE3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-cloud-foundry-service-sample/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOTozOFrOHG9psA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOTozOFrOHG9psA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MzYwMA==", "bodyText": "Let's revert this change, our samples should reference the latest released version of our starter / dependencies.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477063600", "createdAt": "2020-08-26T06:29:38Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-cloud-foundry-service-sample/pom.xml", "diffHunk": "@@ -21,8 +21,8 @@\n   <dependencies>\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n-      <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;dependency} -->\n+      <artifactId>azure-cosmosdb-spring-boot-2-3-starter</artifactId>\n+      <version>2.4.0-beta.1</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-2-3-starter;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ3NzkwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-cosmosdb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOTo1MVrOHG9qHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOTo1MVrOHG9qHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MzcxMA==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477063710", "createdAt": "2020-08-26T06:29:51Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-cosmosdb/pom.xml", "diffHunk": "@@ -21,8 +21,8 @@\n   <dependencies>\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n-      <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;dependency} -->\n+      <artifactId>azure-cosmosdb-spring-boot-2-3-starter</artifactId>\n+      <version>2.4.0-beta.1</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-2-3-starter;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ4MDk5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-appconfiguration-conversion-sample-complete/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMDo1N1rOHG9r4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMDo1N1rOHG9r4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2NDE2Mw==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477064163", "createdAt": "2020-08-26T06:30:57Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-appconfiguration-conversion-sample-complete/pom.xml", "diffHunk": "@@ -30,8 +30,8 @@\n   <dependencies>\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n-      <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;dependency} -->\n+      <artifactId>azure-cosmosdb-spring-boot-2-3-starter</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ4MTQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-appconfiguration-conversion-sample-initial/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMTowOVrOHG9sIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMTowOVrOHG9sIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2NDIyNg==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477064226", "createdAt": "2020-08-26T06:31:09Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-appconfiguration-conversion-sample-initial/pom.xml", "diffHunk": "@@ -31,8 +31,8 @@\n   <dependencies>\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n-      <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;dependency} -->\n+      <artifactId>azure-cosmosdb-spring-boot-2-3-starter</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ4Mjk5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMTo0N1rOHG9tFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozMTo0N1rOHG9tFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2NDQ2OQ==", "bodyText": "The 2-3 should only support Spring Boot 2.3.x", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477064469", "createdAt": "2020-08-26T06:31:47Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter/README.md", "diffHunk": "@@ -35,7 +35,8 @@ Starter Name | Version for Spring Boot 2.3.x | Version for Spring Boot 2.2.x | V\n [azure-storage-spring-boot-starter](../azure-spring-boot-starter-storage/README.md) | N/A | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-storage-spring-boot-starter%22) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-storage-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-storage-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-storage-spring-boot-starter%20AND%20v:2.0.*)\n [azure-keyvault-secrets-spring-boot-starter](../azure-spring-boot-starter-keyvault-secrets/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-keyvault-secrets-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-keyvault-secrets-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-keyvault-secrets-spring-boot-starter%20AND%20v:2.0.*)\n [azure-active-directory-b2c-spring-boot-starter](../azure-spring-boot-starter-active-directory-b2c/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-active-directory-b2c-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-active-directory-b2c-spring-boot-starter%20AND%20v:2.2.*) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-active-directory-b2c-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-active-directory-b2c-spring-boot-starter%20AND%20v:2.1.*) | N/A\n-[azure-cosmosdb-spring-boot-starter](../azure-spring-boot-starter-cosmosdb/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-cosmosdb-spring-boot-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.0.*)\n+[azure-cosmosdb-spring-boot-2-2-starter](../azure-spring-boot-2-2-starter-cosmosdb/README.md) | N/A | N/A | N/A | N/A\n+[azure-cosmosdb-spring-boot-2-3-starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.microsoft.azure%22%20AND%20a%3A%22azure-cosmosdb-spring-boot-2-3-starter%22) | [![Maven Central](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.2.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.2.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.1.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.1.*) | [![](https://img.shields.io/maven-central/v/com.microsoft.azure/azure-cosmosdb-spring-boot-starter/2.0.svg)](https://search.maven.org/search?q=g:com.microsoft.azure%20AND%20a:azure-cosmosdb-spring-boot-starter%20AND%20v:2.0.*)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df38ef6eb3d4c51f6e947f490091ea8836caf552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzM5MTg1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNTo0M1rOHHuKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMToyN1rOHIB13Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg1ODQ5Nw==", "bodyText": "Remove the doc if there is no detail information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477858497", "createdAt": "2020-08-27T01:15:43Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3ODY1Nw==", "bodyText": "return void?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478178657", "createdAt": "2020-08-27T06:28:33Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg1ODQ5Nw=="}, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MDgyOQ==", "bodyText": "I mean, we should delete this line, or add something after return.\nOtherwise code reader may confused: does code writer forgot to write doc for the return value?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478180829", "createdAt": "2020-08-27T06:31:27Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg1ODQ5Nw=="}, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzM5NDYxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNjowNVrOHHuMnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNjowNVrOHHuMnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg1ODk3NQ==", "bodyText": "This line is used to debug?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477858975", "createdAt": "2020-08-27T01:16:05Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzM5OTA3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNjo0MVrOHHuPuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNjo0MVrOHHuPuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg1OTc2OA==", "bodyText": "Keep same code style: remote this empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477859768", "createdAt": "2020-08-27T01:16:41Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQwMTYwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNzowMVrOHHuRZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNzowMVrOHHuRZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2MDE5Nw==", "bodyText": ":param module: module name", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477860197", "createdAt": "2020-08-27T01:17:01Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQwNTUzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNzozMVrOHHuUBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToxNzozMVrOHHuUBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2MDg3MA==", "bodyText": "Use log.debug", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477860870", "createdAt": "2020-08-27T01:17:31Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQ1MTQyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNToxN1rOHHuzfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNToxN1rOHHuzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2ODkyNw==", "bodyText": "Strictly speaking, artifact_id_tuple should be artifact_id_tuple_tuple, and artifact_id_mapping_tuple should be artifact_id_tuple.\nHow about rename like this:\nartifact_id_mapping_tuple -> artifact_id_pair\nartifact_id_tuple -> artifact_id_pairs.\nAnother solution is define a new class named ArtifactIdPair, it has 2 fields: old_artifact_id and new_artifact_id. Just like: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/scripts/pom.py\nDefine ArtifactIdPair will make code easier to read.\nIt's OK if you don't want to do more work, current logic is OK.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477868927", "createdAt": "2020-08-27T01:25:17Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQ3MTE5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyODo0MVrOHHvBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyODo0MVrOHHvBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MjM5MQ==", "bodyText": "Same here, we can define VersionUpdateItem, which have 2 fields: id and new_version", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477872391", "createdAt": "2020-08-27T01:28:41Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzUwMzcwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNDoyM1rOHHvXtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0NzoxMVrOHHwa3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3ODE5Ng==", "bodyText": "How about do like this:\nDefine global variable:\nX_VERSION_UPDATE = 'x-version-update'\nX_INCLUDE_UPDATE = 'x-include-update'.\nThen the condition check will be like this:\nif (X_VERSION_UPDATE in line or X_INCLUDE_UPDATE in line) and version_update_item.id in line:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477878196", "createdAt": "2020-08-27T01:34:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:\n+                dependency_update_flag = '<!-- {x-version-update;' + version_mapping_tuple[0] + ';'\n+                plugin_update_flag = '<!-- {x-include-update;' + version_mapping_tuple[0] + ';'\n+                # update version in dependency part\n+                if dependency_update_flag in line:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg5NTM4OQ==", "bodyText": "If we add check logic above, we do not need check X_VERSION_UPDATE and X_INCLUDE_UPDATE  here any more.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477895389", "createdAt": "2020-08-27T01:47:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:\n+                dependency_update_flag = '<!-- {x-version-update;' + version_mapping_tuple[0] + ';'\n+                plugin_update_flag = '<!-- {x-include-update;' + version_mapping_tuple[0] + ';'\n+                # update version in dependency part\n+                if dependency_update_flag in line:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3ODE5Ng=="}, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzUxNTU2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNjoxOFrOHHvfrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNjoxOFrOHHvfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4MDIzOQ==", "bodyText": "log.debug('Updated version in line {}'.format(line_num))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477880239", "createdAt": "2020-08-27T01:36:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:\n+                dependency_update_flag = '<!-- {x-version-update;' + version_mapping_tuple[0] + ';'\n+                plugin_update_flag = '<!-- {x-include-update;' + version_mapping_tuple[0] + ';'\n+                # update version in dependency part\n+                if dependency_update_flag in line:\n+                    old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                    log.debug('Updated version line {}'.format(line_num))\n+                    new_line = line.replace(old_version, version_mapping_tuple[1])\n+                    if line != new_line:\n+                        log.debug('Updated dependency line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzUxNzQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNjozMVrOHHvg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNjozMVrOHHvg4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4MDU0NQ==", "bodyText": "Delete this line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477880545", "createdAt": "2020-08-27T01:36:31Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:\n+                dependency_update_flag = '<!-- {x-version-update;' + version_mapping_tuple[0] + ';'\n+                plugin_update_flag = '<!-- {x-include-update;' + version_mapping_tuple[0] + ';'\n+                # update version in dependency part\n+                if dependency_update_flag in line:\n+                    old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                    log.debug('Updated version line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzUyNzA4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNzo0NVrOHHvnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozNzo0NVrOHHvnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4MjI1OQ==", "bodyText": "Same here, delete empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477882259", "createdAt": "2020-08-27T01:37:45Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzU0NTE0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozOTo1NVrOHHvz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTozOTo1NVrOHHvz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4NTQyOQ==", "bodyText": "If we define ArtifactIdPair, this line will be\nnew_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n\nthe code will much easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477885429", "createdAt": "2020-08-27T01:39:55Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzU2NjAxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0Mjo0MVrOHHwCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0Mjo0MVrOHHwCSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4OTA5OA==", "bodyText": "log.debug('Updated artifact id in line {}'.format(line_num))\n\n\nAdd \"in\" in log info.\nIt's better to print log after file.write(line), so it is real Updated, not Updating.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477889098", "createdAt": "2020-08-27T01:42:41Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzU3MDk2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0MzoxOFrOHHwFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0MzoxOFrOHHwFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4OTk5Mw==", "bodyText": "Same here, print log after file.write(line).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477889993", "createdAt": "2020-08-27T01:43:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_mapping_tuple in version_tuple:\n+                dependency_update_flag = '<!-- {x-version-update;' + version_mapping_tuple[0] + ';'\n+                plugin_update_flag = '<!-- {x-include-update;' + version_mapping_tuple[0] + ';'\n+                # update version in dependency part\n+                if dependency_update_flag in line:\n+                    old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                    log.debug('Updated version line {}'.format(line_num))\n+                    new_line = line.replace(old_version, version_mapping_tuple[1])\n+                    if line != new_line:\n+                        log.debug('Updated dependency line {}'.format(line_num))\n+                        log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                        log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                        line = new_line\n+                # update version in plugin part\n+                elif plugin_update_flag in line:\n+                    old_version = line[(line.index('[')+1):line.index(']')]\n+                    log.debug('Updated version line {}'.format(line_num))\n+                    new_line = line.replace(old_version, version_mapping_tuple[1])\n+                    if line != new_line:\n+                        log.debug('Updated plugin line {}'.format(line_num))\n+                        log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                        log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                        line = new_line\n+            file.write(line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzU5MjIwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0NTo1OFrOHHwUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0NTo1OFrOHHwUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg5MzcyOQ==", "bodyText": "We can add following code to remote unnecessary check:\nif X_VERSION_UPDATE in line or X_INCLUDE_UPDATE in line:\n    // check version_update_items, update this line if necessary.\nelse\n    // not update this line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r477893729", "createdAt": "2020-08-27T01:45:58Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_tuple': (\n+                ('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_tuple': (\n+                ('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                ('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module:\n+    :return:\n+    \"\"\"\n+    module = 'spring'\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_tuple = config[module][pom]['artifact_id_tuple']\n+    log.info('Module: {}, artifact ids: {}'.format(module, artifact_id_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_mapping_tuple in artifact_id_tuple:\n+                new_line = line.replace(artifact_id_mapping_tuple[0], artifact_id_mapping_tuple[1])\n+                if line != new_line:\n+                    log.debug('Updated artifact id line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+\n+    log.info('Replacing version in file: {}'.format(pom))\n+    version_tuple = config[module][pom]['version_tuple']\n+    log.info('Module: {}, versions: {}'.format(module, version_tuple))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe97742404678b385e0c8366b72aef3897dc0e1"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTE3NDIxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-cloud-foundry-service-sample/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoxMzo1MFrOHIBCuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoxMzo1MFrOHIBCuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2NzczNw==", "bodyText": "In sample projects, please use current .\nRelated PR: #14507", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478167737", "createdAt": "2020-08-27T06:13:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-cloud-foundry-service-sample/pom.xml", "diffHunk": "@@ -22,7 +22,7 @@\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n       <artifactId>azure-cosmosdb-spring-boot-starter</artifactId>\n-      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;dependency} -->\n+      <version>2.3.3</version> <!-- {x-version-update;com.microsoft.azure:azure-cosmosdb-spring-boot-starter;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI1MzI2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMTozN1rOHIB2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMTozN1rOHIB2Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MDk1NQ==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478180955", "createdAt": "2020-08-27T06:31:37Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI1ODQ0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMjo1MFrOHIB59g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMjo1MFrOHIB59g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MTg3OA==", "bodyText": "Use \"Updating\" instead of \"Updated\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478181878", "createdAt": "2020-08-27T06:32:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI1OTc2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMzowOFrOHIB62g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMzowOFrOHIB62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MjEwNg==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478182106", "createdAt": "2020-08-27T06:33:08Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI2NTg5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNDozNlrOHIB_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozODoyN1rOHICKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MzIyOQ==", "bodyText": "Delete this line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478183229", "createdAt": "2020-08-27T06:34:36Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    version_update_items = config[module][pom]['version_update_items']\n+    log.debug('Module: {}, versions: {}'.format(module, version_update_items))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updated line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4NjA5OQ==", "bodyText": "BTW, did you test in your localhost?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478186099", "createdAt": "2020-08-27T06:38:27Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    version_update_items = config[module][pom]['version_update_items']\n+    log.debug('Module: {}, versions: {}'.format(module, version_update_items))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updated line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MzIyOQ=="}, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI3MDgyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNTozOFrOHICCXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNTozOFrOHICCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4NDAyOQ==", "bodyText": "Updating", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478184029", "createdAt": "2020-08-27T06:35:38Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    version_update_items = config[module][pom]['version_update_items']\n+    log.debug('Module: {}, versions: {}'.format(module, version_update_items))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updated line {}'.format(line_num))\n+                    # update version in dependency part\n+                    if X_VERSION_UPDATE in line:\n+                        old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                        new_line = line.replace(old_version, version_update_item.new_version)\n+                        if line != new_line:\n+                            line = new_line\n+                            log.debug('Updated version of dependency in line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTI3MTU5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNTo1MFrOHICC3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozNTo1MFrOHICC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4NDE1OQ==", "bodyText": "Updating", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478184159", "createdAt": "2020-08-27T06:35:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,178 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            'artifact_id_pairs': (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            'version_update_items': (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    :return:\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n+    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    line = new_line\n+                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version, contains dependency and plugin parts.\n+    :param module: module name\n+    :param pom: pom file path\n+    :return:\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    version_update_items = config[module][pom]['version_update_items']\n+    log.debug('Module: {}, versions: {}'.format(module, version_update_items))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updated line {}'.format(line_num))\n+                    # update version in dependency part\n+                    if X_VERSION_UPDATE in line:\n+                        old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                        new_line = line.replace(old_version, version_update_item.new_version)\n+                        if line != new_line:\n+                            line = new_line\n+                            log.debug('Updated version of dependency in line {}'.format(line_num))\n+                            log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                            log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    # update version in plugin part\n+                    elif X_INCLUDE_UPDATE in line:\n+                        old_version = line[(line.index('[')+1):line.index(']')]\n+                        new_line = line.replace(old_version, version_update_item.new_version)\n+                        if line != new_line:\n+                            line = new_line\n+                            log.debug('Updated version of plugin in line {}'.format(line_num))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6235c1ca2680089e80541aa61c5e49c3945926b"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTYzMDkxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyMDoxMFrOHIFkHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyMDoxMFrOHIFkHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0MTgyMw==", "bodyText": "Please use in instead of __contains__.\nRefs: https://stackoverflow.com/questions/5312778/how-to-test-if-a-dictionary-contains-a-specific-key", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478241823", "createdAt": "2020-08-27T08:20:10Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -105,72 +107,91 @@ def replace(module):\n     \"\"\"\n     Replace action\n     :param module: module name\n-    :return:\n     \"\"\"\n     for pom in config[module].keys():\n         replace_artifact_id(module, pom)\n         replace_version(module, pom)\n \n \n+def get_str(tuple_obj):\n+    \"\"\"\n+    Return str list for tuple obj for logger.\n+    :param tuple_obj: tuple obj\n+    :return: string list\n+    \"\"\"\n+    str_list = list()\n+    for item in tuple_obj:\n+        str_list.append(str(item))\n+    return str_list\n+\n+\n def replace_artifact_id(module, pom):\n     \"\"\"\n-    Replace artifactId in dependency\n+    Replace artifactId in dependency and plugin part.\n     :param module: module name\n     :param pom: pom file path\n-    :return:\n     \"\"\"\n     log.debug('Replacing artifact id in file: {}'.format(pom, module))\n-    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n-    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(ARTIFACT_ID_PAIRS_KEY_NAME):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d75452cb421787679dd4d09f1ed59b53150e33"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTYzNDQxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyMTowNlrOHIFmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyMTowNlrOHIFmSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0MjM3OQ==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478242379", "createdAt": "2020-08-27T08:21:06Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -105,72 +107,91 @@ def replace(module):\n     \"\"\"\n     Replace action\n     :param module: module name\n-    :return:\n     \"\"\"\n     for pom in config[module].keys():\n         replace_artifact_id(module, pom)\n         replace_version(module, pom)\n \n \n+def get_str(tuple_obj):\n+    \"\"\"\n+    Return str list for tuple obj for logger.\n+    :param tuple_obj: tuple obj\n+    :return: string list\n+    \"\"\"\n+    str_list = list()\n+    for item in tuple_obj:\n+        str_list.append(str(item))\n+    return str_list\n+\n+\n def replace_artifact_id(module, pom):\n     \"\"\"\n-    Replace artifactId in dependency\n+    Replace artifactId in dependency and plugin part.\n     :param module: module name\n     :param pom: pom file path\n-    :return:\n     \"\"\"\n     log.debug('Replacing artifact id in file: {}'.format(pom, module))\n-    artifact_id_pairs = config[module][pom]['artifact_id_pairs']\n-    log.debug('Module: {}, artifact ids: {}'.format(module, artifact_id_pairs))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(ARTIFACT_ID_PAIRS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(ARTIFACT_ID_PAIRS_KEY_NAME))\n+        return\n+\n+    artifact_id_pairs = pom_dict[ARTIFACT_ID_PAIRS_KEY_NAME]\n+    log.debug('Module: {}, artifact ids: {}'.format(module, get_str(artifact_id_pairs)))\n     with in_place.InPlace(pom) as file:\n         line_num = 0\n         for line in file:\n             line_num = line_num + 1\n             for artifact_id_pair in artifact_id_pairs:\n                 new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n                 if line != new_line:\n-                    line = new_line\n-                    log.debug('Updated artifact id in line {}'.format(line_num))\n+                    log.debug('Updating artifact id in line {}'.format(line_num))\n                     log.debug('    old_line = {}.'.format(line.strip('\\n')))\n                     log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n             file.write(line)\n \n \n def replace_version(module, pom):\n     \"\"\"\n-    Replace version, contains dependency and plugin parts.\n+    Replace version in dependency and plugin part.\n     :param module: module name\n     :param pom: pom file path\n-    :return:\n     \"\"\"\n     log.debug('Replacing version in file: {}'.format(pom))\n-    version_update_items = config[module][pom]['version_update_items']\n-    log.debug('Module: {}, versions: {}'.format(module, version_update_items))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(VERSION_UPDATE_ITEMS_KEY_NAME):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d75452cb421787679dd4d09f1ed59b53150e33"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTY0NTQzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyNDoxMVrOHIFteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyNDoxMVrOHIFteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0NDIxOA==", "bodyText": "Use ARTIFACT_ID_PAIRS instead of ARTIFACT_ID_PAIRS_KEY_NAME, just like X_VERSION_UPDATE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478244218", "createdAt": "2020-08-27T08:24:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,199 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+ARTIFACT_ID_PAIRS_KEY_NAME = 'artifact_id_pairs'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185a67823faf5d1ed9d6e81e55777ad2e2df0e37"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTY0NjAyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyNDoxOVrOHIFtyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoyNDoxOVrOHIFtyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0NDI5OA==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478244298", "createdAt": "2020-08-27T08:24:19Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,199 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+ARTIFACT_ID_PAIRS_KEY_NAME = 'artifact_id_pairs'\n+VERSION_UPDATE_ITEMS_KEY_NAME = 'version_update_items'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185a67823faf5d1ed9d6e81e55777ad2e2df0e37"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTY3ODc2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMzoxNlrOHIGCmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODozMzoxNlrOHIGCmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0OTYyNw==", "bodyText": "for artifact_id_pair in artifact_id_pairs:\n                if artifact_id_pair.old_artifact_id in line:  # Change here\n                    new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n                    log.debug('Updating artifact id in line {}'.format(line_num))\n                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n                    line = new_line\n                    continue # Added here\n            file.write(line)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478249627", "createdAt": "2020-08-27T08:33:16Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,199 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+ARTIFACT_ID_PAIRS_KEY_NAME = 'artifact_id_pairs'\n+VERSION_UPDATE_ITEMS_KEY_NAME = 'version_update_items'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            VERSION_UPDATE_ITEMS_KEY_NAME: (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def get_str(tuple_obj):\n+    \"\"\"\n+    Return str list for tuple obj for logger.\n+    :param tuple_obj: tuple obj\n+    :return: string list\n+    \"\"\"\n+    str_list = list()\n+    for item in tuple_obj:\n+        str_list.append(str(item))\n+    return str_list\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency and plugin part.\n+    :param module: module name\n+    :param pom: pom file path\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(ARTIFACT_ID_PAIRS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(ARTIFACT_ID_PAIRS_KEY_NAME))\n+        return\n+\n+    artifact_id_pairs = pom_dict[ARTIFACT_ID_PAIRS_KEY_NAME]\n+    log.debug('Module: {}, artifact ids: {}'.format(module, get_str(artifact_id_pairs)))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    log.debug('Updating artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185a67823faf5d1ed9d6e81e55777ad2e2df0e37"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTcwOTE0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MToxNVrOHIGVdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MToxNVrOHIGVdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDQ1Mw==", "bodyText": "We can use\nif new_version != old_version\n\ninstead of\nif line != new_line:\n\nFurther more, if we configure property, old_version should not equal to new_version.\nSo if check can be deleted.\nThe code will be like this:\n\t                if X_VERSION_UPDATE in line:\n                            old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n\t                    new_line = line.replace(old_version, version_update_item.new_version)\n                            log.debug('Updating version of dependency in line {}'.format(line_num))\n                            log.debug('    old_line = {}.'.format(line.strip('\\n')))\n                            log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n                            line = new_line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478254453", "createdAt": "2020-08-27T08:41:15Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,199 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+ARTIFACT_ID_PAIRS_KEY_NAME = 'artifact_id_pairs'\n+VERSION_UPDATE_ITEMS_KEY_NAME = 'version_update_items'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            VERSION_UPDATE_ITEMS_KEY_NAME: (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def get_str(tuple_obj):\n+    \"\"\"\n+    Return str list for tuple obj for logger.\n+    :param tuple_obj: tuple obj\n+    :return: string list\n+    \"\"\"\n+    str_list = list()\n+    for item in tuple_obj:\n+        str_list.append(str(item))\n+    return str_list\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency and plugin part.\n+    :param module: module name\n+    :param pom: pom file path\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(ARTIFACT_ID_PAIRS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(ARTIFACT_ID_PAIRS_KEY_NAME))\n+        return\n+\n+    artifact_id_pairs = pom_dict[ARTIFACT_ID_PAIRS_KEY_NAME]\n+    log.debug('Module: {}, artifact ids: {}'.format(module, get_str(artifact_id_pairs)))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    log.debug('Updating artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version in dependency and plugin part.\n+    :param module: module name\n+    :param pom: pom file path\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(VERSION_UPDATE_ITEMS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(VERSION_UPDATE_ITEMS_KEY_NAME))\n+        return\n+\n+    version_update_items = pom_dict[VERSION_UPDATE_ITEMS_KEY_NAME]\n+    log.debug('Module: {}, versions: {}'.format(module, get_str(version_update_items)))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updating line {}'.format(line_num))\n+                    # update version in dependency part\n+                    if X_VERSION_UPDATE in line:\n+                        old_version = line[(line.index('<version>') + 9):line.index('</version>')]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185a67823faf5d1ed9d6e81e55777ad2e2df0e37"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTcxMDQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/scripts/replace_util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MTozNlrOHIGWQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo0MTozNlrOHIGWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDY1Ng==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478254656", "createdAt": "2020-08-27T08:41:36Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/scripts/replace_util.py", "diffHunk": "@@ -0,0 +1,199 @@\n+# Copyright (c) Microsoft Corporation. All rights reserved.\n+# Licensed under the MIT License.\n+\n+\n+import argparse\n+import os\n+import time\n+\n+import in_place\n+\n+from log import log, Log\n+from artifact_id_pair import ArtifactIdPair\n+from version_update_item import VersionUpdateItem\n+\n+X_VERSION_UPDATE = 'x-version-update'\n+X_INCLUDE_UPDATE = 'x-include-update'\n+ARTIFACT_ID_PAIRS_KEY_NAME = 'artifact_id_pairs'\n+VERSION_UPDATE_ITEMS_KEY_NAME = 'version_update_items'\n+\n+config = {\n+    'cosmos': {\n+        'sdk/cosmos/azure-spring-data-cosmos-test/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-spring-data-2-3-cosmos', 'azure-spring-data-2-2-cosmos'),\n+            )\n+        }\n+    },\n+    'spring': {\n+        'sdk/spring/azure-spring-boot-test-cosmosdb/pom.xml': {\n+            ARTIFACT_ID_PAIRS_KEY_NAME: (\n+                ArtifactIdPair('azure-cosmosdb-spring-boot-2-3-starter', 'azure-cosmosdb-spring-boot-2-2-starter'),\n+            ),\n+            VERSION_UPDATE_ITEMS_KEY_NAME: (\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-web', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-actuator', '2.2.9.RELEASE'),\n+                VersionUpdateItem('org.springframework.boot:spring-boot-starter-test', '2.2.9.RELEASE')\n+            )\n+        }\n+    }\n+}\n+\n+\n+def main():\n+    start_time = time.time()\n+    change_to_root_dir()\n+    log.debug('Current working directory = {}.'.format(os.getcwd()))\n+    args = get_args()\n+    init_log(args)\n+    replace(args.module)\n+    elapsed_time = time.time() - start_time\n+    log.info('elapsed_time = {}'.format(elapsed_time))\n+\n+\n+def change_to_root_dir():\n+    os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+    os.chdir('../../..')\n+\n+\n+def get_args():\n+    parser = argparse.ArgumentParser(\n+        description = 'Replace artifact id in pom file.'\n+    )\n+    parser.add_argument(\n+        '--module',\n+        type = str,\n+        choices = ['spring', 'cosmos'],\n+        required = False,\n+        default = 'cosmos',\n+        help = 'Specify the target module.'\n+    )\n+    parser.add_argument(\n+        '--log',\n+        type = str,\n+        choices = ['debug', 'info', 'warn', 'error', 'none'],\n+        required = False,\n+        default = 'info',\n+        help = 'Set log level.'\n+    )\n+    parser.add_argument(\n+        '--color',\n+        type = str,\n+        choices = ['true', 'false'],\n+        required = False,\n+        default = 'true',\n+        help = 'Whether need colorful log.'\n+    )\n+    return parser.parse_args()\n+\n+\n+def init_log(args):\n+    log_dict = {\n+        'debug': Log.DEBUG,\n+        'info': Log.INFO,\n+        'warn': Log.WARN,\n+        'error': Log.ERROR,\n+        'none': Log.NONE\n+    }\n+    log.set_log_level(log_dict[args.log])\n+    color_dict = {\n+        'true': True,\n+        'false': False\n+    }\n+    log.set_color(color_dict[args.color])\n+\n+\n+def replace(module):\n+    \"\"\"\n+    Replace action\n+    :param module: module name\n+    \"\"\"\n+    for pom in config[module].keys():\n+        replace_artifact_id(module, pom)\n+        replace_version(module, pom)\n+\n+\n+def get_str(tuple_obj):\n+    \"\"\"\n+    Return str list for tuple obj for logger.\n+    :param tuple_obj: tuple obj\n+    :return: string list\n+    \"\"\"\n+    str_list = list()\n+    for item in tuple_obj:\n+        str_list.append(str(item))\n+    return str_list\n+\n+\n+def replace_artifact_id(module, pom):\n+    \"\"\"\n+    Replace artifactId in dependency and plugin part.\n+    :param module: module name\n+    :param pom: pom file path\n+    \"\"\"\n+    log.debug('Replacing artifact id in file: {}'.format(pom, module))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(ARTIFACT_ID_PAIRS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(ARTIFACT_ID_PAIRS_KEY_NAME))\n+        return\n+\n+    artifact_id_pairs = pom_dict[ARTIFACT_ID_PAIRS_KEY_NAME]\n+    log.debug('Module: {}, artifact ids: {}'.format(module, get_str(artifact_id_pairs)))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for artifact_id_pair in artifact_id_pairs:\n+                new_line = line.replace(artifact_id_pair.old_artifact_id, artifact_id_pair.new_artifact_id)\n+                if line != new_line:\n+                    log.debug('Updating artifact id in line {}'.format(line_num))\n+                    log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                    log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                    line = new_line\n+            file.write(line)\n+\n+\n+def replace_version(module, pom):\n+    \"\"\"\n+    Replace version in dependency and plugin part.\n+    :param module: module name\n+    :param pom: pom file path\n+    \"\"\"\n+    log.debug('Replacing version in file: {}'.format(pom))\n+    pom_dict = config[module][pom]\n+    if not pom_dict.__contains__(VERSION_UPDATE_ITEMS_KEY_NAME):\n+        log.warn('No config key {} in pom parameters.'.format(VERSION_UPDATE_ITEMS_KEY_NAME))\n+        return\n+\n+    version_update_items = pom_dict[VERSION_UPDATE_ITEMS_KEY_NAME]\n+    log.debug('Module: {}, versions: {}'.format(module, get_str(version_update_items)))\n+    with in_place.InPlace(pom) as file:\n+        line_num = 0\n+        for line in file:\n+            line_num = line_num + 1\n+            for version_update_item in version_update_items:\n+                if version_update_item.id in line:\n+                    log.debug('Updating line {}'.format(line_num))\n+                    # update version in dependency part\n+                    if X_VERSION_UPDATE in line:\n+                        old_version = line[(line.index('<version>') + 9):line.index('</version>')]\n+                        new_line = line.replace(old_version, version_update_item.new_version)\n+                        if line != new_line:\n+                            log.debug('Updating version of dependency in line {}'.format(line_num))\n+                            log.debug('    old_line = {}.'.format(line.strip('\\n')))\n+                            log.debug('    new_line = {}.'.format(new_line.strip('\\n')))\n+                            line = new_line\n+                    # update version in plugin part\n+                    elif X_INCLUDE_UPDATE in line:\n+                        old_version = line[(line.index('[')+1):line.index(']')]\n+                        new_line = line.replace(old_version, version_update_item.new_version)\n+                        if line != new_line:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185a67823faf5d1ed9d6e81e55777ad2e2df0e37"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM3MjMzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMTowNlrOHIpIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMTowNlrOHIpIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNDUyOQ==", "bodyText": "Let's not use relative links here. https://github.com/Azure/azure-sdk/blob/master/docs/policies/README-TEMPLATE.md#link-guidelines\nAnd we should link to the Key concepts part of the azure-spring-boot-2-3-starter-cosmosdb/README.md.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478824529", "createdAt": "2020-08-28T04:31:06Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM3MjQ1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMToxM1rOHIpIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMToxM1rOHIpIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNDU0NQ==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478824545", "createdAt": "2020-08-28T04:31:13Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.\n+\n+## Examples\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for examples.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM3MjY3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMToyMFrOHIpIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMToyMFrOHIpIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNDU3NA==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478824574", "createdAt": "2020-08-28T04:31:20Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.\n+\n+## Examples\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for examples.\n+\n+## Troubleshooting\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for troubleshooting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM3MzMyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMTo0NlrOHIpI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMTo0NlrOHIpI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNDY2Nw==", "bodyText": "same here, do not use relative link.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478824667", "createdAt": "2020-08-28T04:31:46Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.\n+\n+## Examples\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for examples.\n+\n+## Troubleshooting\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for troubleshooting.\n+\n+## Next steps\n+\n+Besides using this Azure CosmosDb Spring Boot Starter, you can directly use Spring Data for Azure CosmosDb package for more complex scenarios. Please refer to [Spring Data for Azure CosmosDB](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos-core) for more details.\n+\n+The following section provide a sample project illustrating how to use the starter.\n+### More sample code\n+- [Cosmos DB SQL API](../azure-spring-boot-samples/azure-spring-boot-sample-cosmosdb)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM3NDkwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMjo1N1rOHIpJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozMjo1N1rOHIpJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNDg5OQ==", "bodyText": "same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478824899", "createdAt": "2020-08-28T04:32:57Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.\n+\n+## Examples\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for examples.\n+\n+## Troubleshooting\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for troubleshooting.\n+\n+## Next steps\n+\n+Besides using this Azure CosmosDb Spring Boot Starter, you can directly use Spring Data for Azure CosmosDb package for more complex scenarios. Please refer to [Spring Data for Azure CosmosDB](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos-core) for more details.\n+\n+The following section provide a sample project illustrating how to use the starter.\n+### More sample code\n+- [Cosmos DB SQL API](../azure-spring-boot-samples/azure-spring-boot-sample-cosmosdb)\n+\n+## Contributing\n+This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n+\n+Please follow [instructions here](../CONTRIBUTING.md) to build from source or contribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzM4MDg0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozNjozMFrOHIpM-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNDozNjozMFrOHIpM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNTcyMw==", "bodyText": "We could make the above links reference links here. e.g.\n[instructions here](../CONTRIBUTING.md) -> [instructions here][contributing]\n\n[contributing][https://absolute-url-to-contributing]", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14465#discussion_r478825723", "createdAt": "2020-08-28T04:36:30Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-2-2-starter-cosmosdb/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Cosmos DB Spring Boot 2.2 Starter client library for Java\n+\n+[Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/) is a globally-distributed database service that allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Graph, and Azure Table storage. \n+\n+[Package (Maven)][package] | [API reference documentation][refdocs] | [Product documentation][docs] | [Samples][sample]\n+\n+## Getting started\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- [Maven](http://maven.apache.org/) 3.0 and above\n+\n+### Include the package\n+[//]: # ({x-version-update-start;com.microsoft.azure:azure-cosmosdb-spring-boot-2-2-starter;current})\n+```xml\n+<dependency>\n+    <groupId>com.microsoft.azure</groupId>\n+    <artifactId>azure-cosmosdb-spring-boot-2-2-starter</artifactId>\n+    <version>2.4.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+## Key concepts\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for key concepts.\n+\n+## Examples\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for examples.\n+\n+## Troubleshooting\n+Please refer to [Azure Cosmos DB Spring Boot 2.3 Starter](../azure-spring-boot-2-3-starter-cosmosdb/README.md) for troubleshooting.\n+\n+## Next steps\n+\n+Besides using this Azure CosmosDb Spring Boot Starter, you can directly use Spring Data for Azure CosmosDb package for more complex scenarios. Please refer to [Spring Data for Azure CosmosDB](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos-core) for more details.\n+\n+The following section provide a sample project illustrating how to use the starter.\n+### More sample code\n+- [Cosmos DB SQL API](../azure-spring-boot-samples/azure-spring-boot-sample-cosmosdb)\n+\n+## Contributing\n+This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n+\n+Please follow [instructions here](../CONTRIBUTING.md) to build from source or contribute.\n+\n+<!-- LINKS -->\n+[docs]: https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-cosmos-db", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f538ff85e446e9e531f3d78ec00dfc1d8f16aa"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1534, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}