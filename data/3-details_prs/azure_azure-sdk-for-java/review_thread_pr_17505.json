{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTk5MDQx", "number": 17505, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo1NDoyMlrOE4TWWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzozOTozM1rOE4ZzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDcyNzMxOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormLineHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo1NDoyMlrOHyJGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToyNzowMFrOHyKcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ==", "bodyText": "what does a non-public property is? I guess I am confused on why the need of this class instead of adding Appearance to the FormLine constructor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522339911", "createdAt": "2020-11-12T18:54:22Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormLineHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.ai.formrecognizer.models.Appearance;\n+import com.azure.ai.formrecognizer.models.FormLine;\n+\n+/**\n+ * The helper class to set the non-public properties of an {@link FormLine} instance.\n+ */\n+public final class FormLineHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MDEzNA==", "bodyText": "Same comment for table.boundingbox", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522340134", "createdAt": "2020-11-12T18:54:41Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormLineHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.ai.formrecognizer.models.Appearance;\n+import com.azure.ai.formrecognizer.models.FormLine;\n+\n+/**\n+ * The helper class to set the non-public properties of an {@link FormLine} instance.\n+ */\n+public final class FormLineHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2MTk0NA==", "bodyText": "Yeah, we don't want to introduce public constructors for output only models. Since that could be confusing to the users. So this a new pattern we have introduced wherein we have private setters on the model class and interface implementations to set those properties internally which are never exposed to users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522361944", "createdAt": "2020-11-12T19:27:00Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormLineHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.ai.formrecognizer.models.Appearance;\n+import com.azure.ai.formrecognizer.models.FormLine;\n+\n+/**\n+ * The helper class to set the non-public properties of an {@link FormLine} instance.\n+ */\n+public final class FormLineHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDc0ODE3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo1OTo0N1rOHyJTCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToyOTo1MVrOHyKroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MzE3Nw==", "bodyText": "Looks like this might be missing in the FormRecognizerClientTest?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522343177", "createdAt": "2020-11-12T18:59:47Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -432,6 +435,89 @@ public void recognizeContentWithSelectionMarks(HttpClient httpClient,\n         }, SELECTION_MARK_PDF);\n     }\n \n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Collections.singletonList(\"1\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(1, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPages(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1\", \"2\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(2, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPageRange(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1-2\", \"3\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(3, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    /**\n+     * Verifies layout data for a document using source as input stream data.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NTg1Ng==", "bodyText": "Yeah, since it would be updated anyway once we have a concrete design in place. Just kept it in async test.  But wanted to add for checking appearance in some form. (sanity-check)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522365856", "createdAt": "2020-11-12T19:29:51Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -432,6 +435,89 @@ public void recognizeContentWithSelectionMarks(HttpClient httpClient,\n         }, SELECTION_MARK_PDF);\n     }\n \n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Collections.singletonList(\"1\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(1, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPages(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1\", \"2\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(2, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPageRange(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1-2\", \"3\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(3, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    /**\n+     * Verifies layout data for a document using source as input stream data.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MzE3Nw=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDc1Mjk5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowMToxM1rOHyJWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowMToxM1rOHyJWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0Mzk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Code generated by Microsoft (R) AutoRest Code Generator.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522343985", "createdAt": "2020-11-12T19:01:13Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDc4ODc1OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowOTo0MlrOHyJsFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo1MjoyM1rOHyPwhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ==", "bodyText": "U probably forget this is a explored model. Need another visited of this model class", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522349591", "createdAt": "2020-11-12T19:09:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzkwNQ==", "bodyText": "Also there are more explored models but still have public setter. I guess u are still working on it. I will take another look at this PR later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522353905", "createdAt": "2020-11-12T19:15:41Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1OTA1MA==", "bodyText": "It is a generated model, keeping it as is for this preview.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522359050", "createdAt": "2020-11-12T19:24:52Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NTE1NQ==", "bodyText": "Since it is explored to user. We can make it not settable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522365155", "createdAt": "2020-11-12T19:29:23Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0OTAyOA==", "bodyText": "Good point, updated. I was under the impression since this is mostly generated code as is shouldn't need to worry but I guess it will help to avoid breaking changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522449028", "createdAt": "2020-11-12T21:52:23Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, "originalCommit": {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTc4NTYxOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/TextStyle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzozOTozM1rOHyTUWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo0MDozN1rOHyTV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg==", "bodyText": "do we need values()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507352", "createdAt": "2020-11-12T23:39:33Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/TextStyle.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Collection;\n+\n+/** Defines values for TextStyle. */\n+public final class TextStyle extends ExpandableStringEnum<TextStyle> {\n+    /** Static value other for TextStyle. */\n+    public static final TextStyle OTHER = fromString(\"other\");\n+\n+    /** Static value handwriting for TextStyle. */\n+    public static final TextStyle HANDWRITING = fromString(\"handwriting\");\n+\n+    /**\n+     * Creates or finds a TextStyle from its string representation.\n+     *\n+     * @param name a name to look for.\n+     * @return the corresponding TextStyle.\n+     */\n+    @JsonCreator\n+    public static TextStyle fromString(String name) {\n+        return fromString(name, TextStyle.class);\n+    }\n+\n+    /** @return known TextStyle values. */\n+    public static Collection<TextStyle> values() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b569b7ce6789623be100a22b4fdd080cbe407020"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzQ2OQ==", "bodyText": "It can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507469", "createdAt": "2020-11-12T23:39:50Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/TextStyle.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Collection;\n+\n+/** Defines values for TextStyle. */\n+public final class TextStyle extends ExpandableStringEnum<TextStyle> {\n+    /** Static value other for TextStyle. */\n+    public static final TextStyle OTHER = fromString(\"other\");\n+\n+    /** Static value handwriting for TextStyle. */\n+    public static final TextStyle HANDWRITING = fromString(\"handwriting\");\n+\n+    /**\n+     * Creates or finds a TextStyle from its string representation.\n+     *\n+     * @param name a name to look for.\n+     * @return the corresponding TextStyle.\n+     */\n+    @JsonCreator\n+    public static TextStyle fromString(String name) {\n+        return fromString(name, TextStyle.class);\n+    }\n+\n+    /** @return known TextStyle values. */\n+    public static Collection<TextStyle> values() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg=="}, "originalCommit": {"oid": "b569b7ce6789623be100a22b4fdd080cbe407020"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzczMA==", "bodyText": "Generated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507730", "createdAt": "2020-11-12T23:40:37Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/TextStyle.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Collection;\n+\n+/** Defines values for TextStyle. */\n+public final class TextStyle extends ExpandableStringEnum<TextStyle> {\n+    /** Static value other for TextStyle. */\n+    public static final TextStyle OTHER = fromString(\"other\");\n+\n+    /** Static value handwriting for TextStyle. */\n+    public static final TextStyle HANDWRITING = fromString(\"handwriting\");\n+\n+    /**\n+     * Creates or finds a TextStyle from its string representation.\n+     *\n+     * @param name a name to look for.\n+     * @return the corresponding TextStyle.\n+     */\n+    @JsonCreator\n+    public static TextStyle fromString(String name) {\n+        return fromString(name, TextStyle.class);\n+    }\n+\n+    /** @return known TextStyle values. */\n+    public static Collection<TextStyle> values() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg=="}, "originalCommit": {"oid": "b569b7ce6789623be100a22b4fdd080cbe407020"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2930, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}