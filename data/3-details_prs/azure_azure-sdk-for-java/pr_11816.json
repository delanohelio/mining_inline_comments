{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4Mjc3NDc0", "number": 11816, "title": "Remove serializer from search rest client", "bodyText": "The PR is to address one of the blocker to upgrade to autorest V4.\nWill add more tests for date serializer.", "createdAt": "2020-06-05T07:38:57Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816", "merged": true, "mergeCommit": {"oid": "8094d64512955a7eb561450139bbeb512f5702a4"}, "closed": true, "closedAt": "2020-06-16T18:19:31Z", "author": {"login": "sima-zhu"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqnZ3VgBqjM0Mzk1NTgxODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr5PNxAFqTQzMTc2MjgwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bafc1fa6b4ddb9183107cc7993913ba2b4d6a673", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bafc1fa6b4ddb9183107cc7993913ba2b4d6a673", "committedDate": "2020-06-05T21:31:14Z", "message": "Fixed linting"}, "afterCommit": {"oid": "d69c320da67db3d06a232ff7acba107e2853a49e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d69c320da67db3d06a232ff7acba107e2853a49e", "committedDate": "2020-06-12T18:44:55Z", "message": "Remove serializer from rest client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39bb2b47aed3338393110b43a02dd2cacfa49b8c", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/39bb2b47aed3338393110b43a02dd2cacfa49b8c", "committedDate": "2020-06-12T19:41:25Z", "message": "Fixed the date format issue"}, "afterCommit": {"oid": "bf36868d56e4a4f7d64e8571de7156ae8dc163d5", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf36868d56e4a4f7d64e8571de7156ae8dc163d5", "committedDate": "2020-06-12T21:36:31Z", "message": "Remove serializer from rest client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bc06e71377d9e675d9b185e81fccedbe3bceec1", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bc06e71377d9e675d9b185e81fccedbe3bceec1", "committedDate": "2020-06-12T23:43:37Z", "message": "Fixed json"}, "afterCommit": {"oid": "df3071892d7985d32e9029f051b3129546889907", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df3071892d7985d32e9029f051b3129546889907", "committedDate": "2020-06-13T00:10:35Z", "message": "Remove serializer from rest client."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2184ac094cd724d63a3c824cb601491dcc04a8a3", "committedDate": "2020-06-15T15:48:53Z", "message": "Remove serializer from rest client."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df3071892d7985d32e9029f051b3129546889907", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df3071892d7985d32e9029f051b3129546889907", "committedDate": "2020-06-13T00:10:35Z", "message": "Remove serializer from rest client."}, "afterCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2184ac094cd724d63a3c824cb601491dcc04a8a3", "committedDate": "2020-06-15T15:48:53Z", "message": "Remove serializer from rest client."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzk0MTY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#pullrequestreview-430794169", "createdAt": "2020-06-15T16:13:51Z", "commit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoxMzo1MlrOGj5MHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowMDoxM1rOGj639Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5MDMzMg==", "bodyText": "Let's make ObjectMapper a class level constant. Jackson documentation mentions constructing an ObjectMapper has non-trivial overhead and is able to create lightweight, thread-safe reader and writers from itself.\nprivate static final ObjectMapper MAPPER;\n\nstatic {\n  MAPPER = new ObjectMapper();\n  SerializationUtil.configureMapper(MAPPER);\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440290332", "createdAt": "2020-06-15T16:13:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -471,8 +463,10 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument doc = new SearchDocument(res.getValue());\n-                    return new SimpleResponse<>(res, doc);\n+                    ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5MTUwOA==", "bodyText": "What is res.getValue() here? convertValue isn't an efficient operation as it will convert the passed object back into JSON and deserialize it again targeting the new Class type.\nWe should validate what type is being returned here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440291508", "createdAt": "2020-06-15T16:15:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -471,8 +463,10 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument doc = new SearchDocument(res.getValue());\n-                    return new SimpleResponse<>(res, doc);\n+                    ObjectMapper mapper = new ObjectMapper();\n+                    SerializationUtil.configureMapper(mapper);\n+                    SearchDocument document = mapper.convertValue(res.getValue(), SearchDocument.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5MjcyMw==", "bodyText": "I'm okay with this as it follows what the service will be doing. It is a little concerning though as we are implicitly mutating passed customer value, so we need to make sure this is documented strongly somewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440292723", "createdAt": "2020-06-15T16:17:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateSerializer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+/**\n+ * Custom serializer to serialize {@link java.util.Date} to Iso8601 standard date format \"yyyy-MM-dd'T'hh:mm:ss.SSS'Z'\".\n+ */\n+final class Iso8601DateSerializer extends JsonSerializer<Date> {\n+\n+    /**\n+     * Gets a module wrapping this serializer as an adapter for the Jackson\n+     * ObjectMapper.\n+     *\n+     * @return a simple module to be plugged onto Jackson ObjectMapper.\n+     */\n+    public static SimpleModule getModule() {\n+        SimpleModule module = new SimpleModule();\n+        module.addSerializer(Date.class, new Iso8601DateSerializer());\n+        return module;\n+    }\n+\n+    @Override\n+    public void serialize(Date dateValue, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjg4OA==", "bodyText": "Can we make format a static property on the class, it is the same during every call. Check if it is thread safe before making the change though.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440306888", "createdAt": "2020-06-15T16:41:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateSerializer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+/**\n+ * Custom serializer to serialize {@link java.util.Date} to Iso8601 standard date format \"yyyy-MM-dd'T'hh:mm:ss.SSS'Z'\".\n+ */\n+final class Iso8601DateSerializer extends JsonSerializer<Date> {\n+\n+    /**\n+     * Gets a module wrapping this serializer as an adapter for the Jackson\n+     * ObjectMapper.\n+     *\n+     * @return a simple module to be plugged onto Jackson ObjectMapper.\n+     */\n+    public static SimpleModule getModule() {\n+        SimpleModule module = new SimpleModule();\n+        module.addSerializer(Date.class, new Iso8601DateSerializer());\n+        return module;\n+    }\n+\n+    @Override\n+    public void serialize(Date dateValue, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwODUyOQ==", "bodyText": "Why was the logic here changed to eagerly call the deserializer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440308529", "createdAt": "2020-06-15T16:44:13Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateDeserializer.java", "diffHunk": "@@ -9,58 +9,42 @@\n import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;\n \n import java.io.IOException;\n-import java.time.OffsetDateTime;\n-import java.time.format.DateTimeFormatter;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-/**\n- * Custom deserializer to deserialize strings as instances of {@link OffsetDateTime}\n- */\n-final class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n+public class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n     private static final long serialVersionUID = 1L;\n     private final UntypedObjectDeserializer defaultDeserializer;\n \n-    /**\n-     * Constructor\n-     *\n-     * @param defaultDeserializer the deserializer to use when an OffsetDateTime match is not found\n-     */\n-    Iso8601DateDeserializer(UntypedObjectDeserializer defaultDeserializer) {\n+    protected Iso8601DateDeserializer(final UntypedObjectDeserializer defaultDeserializer) {\n         super(null, null);\n         this.defaultDeserializer = defaultDeserializer;\n     }\n \n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        if (jp.getCurrentTokenId() == JsonTokenId.ID_STRING) {\n-            String value = jp.getText();\n-            return parseOffsetDateTime(value);\n-        } else if (jp.getCurrentTokenId() == JsonTokenId.ID_START_ARRAY) {\n-            List<?> list = (List) defaultDeserializer.deserialize(jp, ctxt);\n+        Object obj = defaultDeserializer.deserialize(jp, ctxt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwOTQ5Nw==", "bodyText": "Why was this logic flipped?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440309497", "createdAt": "2020-06-15T16:45:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/SerializationUtil.java", "diffHunk": "@@ -21,18 +18,15 @@\n      * @param mapper the mapper to be configured\n      */\n     public static void configureMapper(ObjectMapper mapper) {\n-        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n-        df.setTimeZone(TimeZone.getDefault());\n-        mapper.setDateFormat(df);\n-\n-        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        mapper.registerModule(new JavaTimeModule());\n         mapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\n \n         UntypedObjectDeserializer defaultDeserializer = new UntypedObjectDeserializer(null, null);\n-        Iso8601DateDeserializer dateDeserializer = new Iso8601DateDeserializer(defaultDeserializer);\n-        GeoPointDeserializer geoPointDeserializer = new GeoPointDeserializer(dateDeserializer);\n+        GeoPointDeserializer geoPointDeserializer = new GeoPointDeserializer(defaultDeserializer);\n+        Iso8601DateDeserializer iso8601DateDeserializer = new Iso8601DateDeserializer(geoPointDeserializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMDkyMQ==", "bodyText": "Are we good for using the generic Map.class or do we need to use a JavaType which explicitly determines to use Map<String, Object>.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440310921", "createdAt": "2020-06-15T16:48:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -54,18 +54,21 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        T document = obj.getDocument();\n+\n \n         ObjectMapper mapper = new JacksonAdapter().serializer();\n         SerializationUtil.configureMapper(mapper);\n-        Map<String, Object> additionalProperties = mapper.convertValue(document, Map.class);\n-\n-        indexAction.setAdditionalProperties(additionalProperties);\n \n+        Map<String, Object> additionalProperties;\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-            PrivateFieldAccessHelper.set(indexAction, \"additionalProperties\", properties);\n+            additionalProperties = mapper.convertValue(properties, Map.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTA5OQ==", "bodyText": "I'm a little confused on the decimal to String conversion, is there any reason we can't use %+02f anymore in the String.format call? Are we looking to get additional units of precision in the decimal part?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440315099", "createdAt": "2020-06-15T16:55:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java", "diffHunk": "@@ -108,10 +116,14 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         if (isValid()) {\n+            String longitude = (\"\" + coordinates.get(0)).contains(\".\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTQ5Ng==", "bodyText": "Don't need to call toString here as the formatting function should implicitly do that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440315496", "createdAt": "2020-06-15T16:56:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java", "diffHunk": "@@ -108,10 +116,14 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         if (isValid()) {\n+            String longitude = (\"\" + coordinates.get(0)).contains(\".\")\n+                ? \"\" + coordinates.get(0) : \"\" + coordinates.get(0) + \".0\";\n+            String latitude = (\"\" + coordinates.get(1)).contains(\".\")\n+                ? \"\" + coordinates.get(1) : \"\" + coordinates.get(1) + \".0\";\n             return String.format(\n                 Locale.US,\n-                \"%+02f%+02f%s/\",\n-                coordinates.get(1), coordinates.get(0), coordinateSystem.toString());\n+                \"{type=Point, coordinates=[%s, %s], crs={%s}}\", \"\" + longitude, latitude,\n+                coordinateSystem.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNzk0MQ==", "bodyText": "I don't think these tests are testing different concepts as Date has no concept of time zone.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440317941", "createdAt": "2020-06-15T17:00:13Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/implementation/Iso8601SerializerTests.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.text.SimpleDateFormat;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class Iso8601SerializerTests {\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @BeforeAll\n+    public static void setupClass() {\n+        MAPPER.registerModule(Iso8601DateSerializer.getModule());\n+    }\n+\n+    @Test\n+    public void dateWithTimeZone() throws JsonProcessingException {\n+        SimpleDateFormat format = new SimpleDateFormat(\"\\\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\\\"\");\n+        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        Date currentDate = new Date();\n+        String expectedDate = format.format(currentDate);\n+        String actualDate = MAPPER.writeValueAsString(currentDate);\n+        assertEquals(expectedDate, actualDate);\n+    }\n+\n+    @Test\n+    public void dateWithoutTimeZone() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODg3NTAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#pullrequestreview-430887502", "createdAt": "2020-06-15T18:23:02Z", "commit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyNTo0NVrOGj9s-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1MzoyOFrOGj-nUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDI4Mg==", "bodyText": "This date format is used in multiple places. Consider making this a string constant.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440364282", "createdAt": "2020-06-15T18:25:45Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateDeserializer.java", "diffHunk": "@@ -9,58 +9,42 @@\n import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;\n \n import java.io.IOException;\n-import java.time.OffsetDateTime;\n-import java.time.format.DateTimeFormatter;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-/**\n- * Custom deserializer to deserialize strings as instances of {@link OffsetDateTime}\n- */\n-final class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n+public class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n     private static final long serialVersionUID = 1L;\n     private final UntypedObjectDeserializer defaultDeserializer;\n \n-    /**\n-     * Constructor\n-     *\n-     * @param defaultDeserializer the deserializer to use when an OffsetDateTime match is not found\n-     */\n-    Iso8601DateDeserializer(UntypedObjectDeserializer defaultDeserializer) {\n+    protected Iso8601DateDeserializer(final UntypedObjectDeserializer defaultDeserializer) {\n         super(null, null);\n         this.defaultDeserializer = defaultDeserializer;\n     }\n \n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        if (jp.getCurrentTokenId() == JsonTokenId.ID_STRING) {\n-            String value = jp.getText();\n-            return parseOffsetDateTime(value);\n-        } else if (jp.getCurrentTokenId() == JsonTokenId.ID_START_ARRAY) {\n-            List<?> list = (List) defaultDeserializer.deserialize(jp, ctxt);\n+        Object obj = defaultDeserializer.deserialize(jp, ctxt);\n+        if (jp.currentTokenId() == JsonTokenId.ID_START_OBJECT) {\n+            return parseDateType(obj);\n+        } else if (jp.currentTokenId() == JsonTokenId.ID_START_ARRAY) {\n+            List<?> list = (List) obj;\n             return list.stream()\n-                .map(this::parseOffsetDateTime)\n+                .map(this::parseDateType)\n                 .collect(Collectors.toList());\n         } else {\n-            return defaultDeserializer.deserialize(jp, ctxt);\n+            return obj;\n         }\n+\n     }\n \n-    /**\n-     * Converts an object to an OffsetDateTime if it matches the ISO8601 format.\n-     *\n-     * @param obj the object to parse\n-     * @return an instance of {@link OffsetDateTime} if valid ISO8601, otherwise obj.\n-     */\n-    private Object parseOffsetDateTime(Object obj) {\n-        if (obj != null && obj.getClass() == String.class) {\n-            try {\n-                return OffsetDateTime.parse((String) obj, DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n-            } catch (Exception e) {\n-                return obj;\n-            }\n-        } else {\n-            return obj;\n+    private Object parseDateType(Object obj) {\n+        try {\n+            return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\").parse((String) obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDg4NA==", "bodyText": "Return the obj here instead of having empty catch block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440364884", "createdAt": "2020-06-15T18:26:44Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateDeserializer.java", "diffHunk": "@@ -9,58 +9,42 @@\n import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;\n \n import java.io.IOException;\n-import java.time.OffsetDateTime;\n-import java.time.format.DateTimeFormatter;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-/**\n- * Custom deserializer to deserialize strings as instances of {@link OffsetDateTime}\n- */\n-final class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n+public class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n     private static final long serialVersionUID = 1L;\n     private final UntypedObjectDeserializer defaultDeserializer;\n \n-    /**\n-     * Constructor\n-     *\n-     * @param defaultDeserializer the deserializer to use when an OffsetDateTime match is not found\n-     */\n-    Iso8601DateDeserializer(UntypedObjectDeserializer defaultDeserializer) {\n+    protected Iso8601DateDeserializer(final UntypedObjectDeserializer defaultDeserializer) {\n         super(null, null);\n         this.defaultDeserializer = defaultDeserializer;\n     }\n \n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        if (jp.getCurrentTokenId() == JsonTokenId.ID_STRING) {\n-            String value = jp.getText();\n-            return parseOffsetDateTime(value);\n-        } else if (jp.getCurrentTokenId() == JsonTokenId.ID_START_ARRAY) {\n-            List<?> list = (List) defaultDeserializer.deserialize(jp, ctxt);\n+        Object obj = defaultDeserializer.deserialize(jp, ctxt);\n+        if (jp.currentTokenId() == JsonTokenId.ID_START_OBJECT) {\n+            return parseDateType(obj);\n+        } else if (jp.currentTokenId() == JsonTokenId.ID_START_ARRAY) {\n+            List<?> list = (List) obj;\n             return list.stream()\n-                .map(this::parseOffsetDateTime)\n+                .map(this::parseDateType)\n                 .collect(Collectors.toList());\n         } else {\n-            return defaultDeserializer.deserialize(jp, ctxt);\n+            return obj;\n         }\n+\n     }\n \n-    /**\n-     * Converts an object to an OffsetDateTime if it matches the ISO8601 format.\n-     *\n-     * @param obj the object to parse\n-     * @return an instance of {@link OffsetDateTime} if valid ISO8601, otherwise obj.\n-     */\n-    private Object parseOffsetDateTime(Object obj) {\n-        if (obj != null && obj.getClass() == String.class) {\n-            try {\n-                return OffsetDateTime.parse((String) obj, DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n-            } catch (Exception e) {\n-                return obj;\n-            }\n-        } else {\n-            return obj;\n+    private Object parseDateType(Object obj) {\n+        try {\n+            return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\").parse((String) obj);\n+        } catch (ParseException e) {\n+            // Do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NzgwOQ==", "bodyText": "Since Date is in UTC, the mutation is not resulting in data-loss. So, it's okay to set the timezone to UTC and format the string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440367809", "createdAt": "2020-06-15T18:32:09Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateSerializer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+/**\n+ * Custom serializer to serialize {@link java.util.Date} to Iso8601 standard date format \"yyyy-MM-dd'T'hh:mm:ss.SSS'Z'\".\n+ */\n+final class Iso8601DateSerializer extends JsonSerializer<Date> {\n+\n+    /**\n+     * Gets a module wrapping this serializer as an adapter for the Jackson\n+     * ObjectMapper.\n+     *\n+     * @return a simple module to be plugged onto Jackson ObjectMapper.\n+     */\n+    public static SimpleModule getModule() {\n+        SimpleModule module = new SimpleModule();\n+        module.addSerializer(Date.class, new Iso8601DateSerializer());\n+        return module;\n+    }\n+\n+    @Override\n+    public void serialize(Date dateValue, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5MjcyMw=="}, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTUwOA==", "bodyText": "Is this required? module, which has the date deserializer, is registered to the mapper in the next line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440371508", "createdAt": "2020-06-15T18:38:56Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/SerializationUtil.java", "diffHunk": "@@ -21,18 +18,15 @@\n      * @param mapper the mapper to be configured\n      */\n     public static void configureMapper(ObjectMapper mapper) {\n-        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n-        df.setTimeZone(TimeZone.getDefault());\n-        mapper.setDateFormat(df);\n-\n-        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        mapper.registerModule(new JavaTimeModule());\n         mapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\n \n         UntypedObjectDeserializer defaultDeserializer = new UntypedObjectDeserializer(null, null);\n-        Iso8601DateDeserializer dateDeserializer = new Iso8601DateDeserializer(defaultDeserializer);\n-        GeoPointDeserializer geoPointDeserializer = new GeoPointDeserializer(dateDeserializer);\n+        GeoPointDeserializer geoPointDeserializer = new GeoPointDeserializer(defaultDeserializer);\n+        Iso8601DateDeserializer iso8601DateDeserializer = new Iso8601DateDeserializer(geoPointDeserializer);\n         SimpleModule module = new SimpleModule();\n-        module.addDeserializer(Object.class, geoPointDeserializer);\n+        module.addDeserializer(Object.class, iso8601DateDeserializer);\n+        mapper.registerModule(Iso8601DateSerializer.getModule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjMwNQ==", "bodyText": "Set the locale to Locale.ROOT.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440372305", "createdAt": "2020-06-15T18:40:26Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java", "diffHunk": "@@ -108,10 +116,14 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         if (isValid()) {\n+            String longitude = (\"\" + coordinates.get(0)).contains(\".\")\n+                ? \"\" + coordinates.get(0) : \"\" + coordinates.get(0) + \".0\";\n+            String latitude = (\"\" + coordinates.get(1)).contains(\".\")\n+                ? \"\" + coordinates.get(1) : \"\" + coordinates.get(1) + \".0\";\n             return String.format(\n                 Locale.US,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NTU2NQ==", "bodyText": "isValid should also check that coordinates.get(0) and coordinates.get(1) are not null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440375565", "createdAt": "2020-06-15T18:46:29Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java", "diffHunk": "@@ -63,6 +70,7 @@ public static GeoPoint create(double latitude, double longitude, CoordinateSyste\n      *\n      * @return true if valid, false if invalid\n      */\n+    @JsonIgnore\n     public boolean isValid() {\n         return coordinates != null && coordinates.size() == 2\n             && coordinates.get(0) >= -180.0 && coordinates.get(0) <= 180.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3OTIxOA==", "bodyText": "Double.toString(value) will append .0. Don't have to do this explicitly.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String latitude = (\"\" + coordinates.get(1)).contains(\".\")\n          \n          \n            \n                            ? \"\" + coordinates.get(1) : \"\" + coordinates.get(1) + \".0\";\n          \n          \n            \n                        String latitude = Double.toString(coordinates.get(1));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440379218", "createdAt": "2020-06-15T18:53:28Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java", "diffHunk": "@@ -108,10 +116,14 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         if (isValid()) {\n+            String longitude = (\"\" + coordinates.get(0)).contains(\".\")\n+                ? \"\" + coordinates.get(0) : \"\" + coordinates.get(0) + \".0\";\n+            String latitude = (\"\" + coordinates.get(1)).contains(\".\")\n+                ? \"\" + coordinates.get(1) : \"\" + coordinates.get(1) + \".0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2184ac094cd724d63a3c824cb601491dcc04a8a3"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18194cb03d1f8bbf33ce0e5f4246e9266b4f6684", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/18194cb03d1f8bbf33ce0e5f4246e9266b4f6684", "committedDate": "2020-06-15T18:59:47Z", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/GeoPoint.java\n\nCo-authored-by: Srikanta <51379715+srnagar@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19e741e7fc1f7d38ec09ff6d29666dde437da4b", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d19e741e7fc1f7d38ec09ff6d29666dde437da4b", "committedDate": "2020-06-15T20:22:26Z", "message": "Allow to use more generic format."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTg1Mjk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#pullrequestreview-430985294", "createdAt": "2020-06-15T20:53:27Z", "commit": {"oid": "18194cb03d1f8bbf33ce0e5f4246e9266b4f6684"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1MzoyOFrOGkCWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1MzoyOFrOGkCWpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MDQ4Ng==", "bodyText": "Should this be a common class in azure-core? Iso8601 seems like a common format to deserialize?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r440440486", "createdAt": "2020-06-15T20:53:28Z", "author": {"login": "conniey"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateDeserializer.java", "diffHunk": "@@ -9,58 +9,42 @@\n import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;\n \n import java.io.IOException;\n-import java.time.OffsetDateTime;\n-import java.time.format.DateTimeFormatter;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-/**\n- * Custom deserializer to deserialize strings as instances of {@link OffsetDateTime}\n- */\n-final class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n+public class Iso8601DateDeserializer extends UntypedObjectDeserializer {\n     private static final long serialVersionUID = 1L;\n     private final UntypedObjectDeserializer defaultDeserializer;\n \n-    /**\n-     * Constructor\n-     *\n-     * @param defaultDeserializer the deserializer to use when an OffsetDateTime match is not found\n-     */\n-    Iso8601DateDeserializer(UntypedObjectDeserializer defaultDeserializer) {\n+    protected Iso8601DateDeserializer(final UntypedObjectDeserializer defaultDeserializer) {\n         super(null, null);\n         this.defaultDeserializer = defaultDeserializer;\n     }\n \n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-        if (jp.getCurrentTokenId() == JsonTokenId.ID_STRING) {\n-            String value = jp.getText();\n-            return parseOffsetDateTime(value);\n-        } else if (jp.getCurrentTokenId() == JsonTokenId.ID_START_ARRAY) {\n-            List<?> list = (List) defaultDeserializer.deserialize(jp, ctxt);\n+        Object obj = defaultDeserializer.deserialize(jp, ctxt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18194cb03d1f8bbf33ce0e5f4246e9266b4f6684"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecaeebadcefc3d2a40937eefc49696140dfc3ae", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ecaeebadcefc3d2a40937eefc49696140dfc3ae", "committedDate": "2020-06-15T21:19:02Z", "message": "Addressed most of comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2254012d4f4423e89ddb8881bb705f38023bd800", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2254012d4f4423e89ddb8881bb705f38023bd800", "committedDate": "2020-06-15T21:52:55Z", "message": "Use Offset date format to avoid am pm inaccurancy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e71915718776baa437ed1d716aa6ccc8a60c8af", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e71915718776baa437ed1d716aa6ccc8a60c8af", "committedDate": "2020-06-15T21:28:50Z", "message": "revert the way from date to string"}, "afterCommit": {"oid": "2254012d4f4423e89ddb8881bb705f38023bd800", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2254012d4f4423e89ddb8881bb705f38023bd800", "committedDate": "2020-06-15T21:52:55Z", "message": "Use Offset date format to avoid am pm inaccurancy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e892855c2d0f39acecd514abc78cc9c2f3029e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4e892855c2d0f39acecd514abc78cc9c2f3029e", "committedDate": "2020-06-15T22:15:06Z", "message": "Fixed live tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f37c7a134517e6a443cc2b854bfd42d049cdcbe", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0f37c7a134517e6a443cc2b854bfd42d049cdcbe", "committedDate": "2020-06-15T22:38:42Z", "message": "Update SerializationUtil.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzM0NzAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#pullrequestreview-431734700", "createdAt": "2020-06-16T17:28:59Z", "commit": {"oid": "0f37c7a134517e6a443cc2b854bfd42d049cdcbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzYyODA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#pullrequestreview-431762806", "createdAt": "2020-06-16T18:05:51Z", "commit": {"oid": "0f37c7a134517e6a443cc2b854bfd42d049cdcbe"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowNTo1MVrOGknJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowNTo1MVrOGknJag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MzMwNg==", "bodyText": "As discussed, these serializers are Jackson specific and may have to go into a separate pluggable module in a follow-up PR. This will allow us to support Gson serializers too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11816#discussion_r441043306", "createdAt": "2020-06-16T18:05:51Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/Iso8601DateSerializer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Date;\n+\n+/**\n+ * Custom serializer to serialize {@link java.util.Date} to Iso8601 standard date format \"yyyy-MM-dd'T'hh:mm:ss.SSS'Z'\".\n+ */\n+final class Iso8601DateSerializer extends JsonSerializer<Date> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f37c7a134517e6a443cc2b854bfd42d049cdcbe"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3844, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}