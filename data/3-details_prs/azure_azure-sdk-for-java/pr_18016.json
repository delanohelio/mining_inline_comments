{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MTc3NzE4", "number": 18016, "title": "mgmt support locks in azure-resourcemanager-resources", "bodyText": "update api-spec for locks\ngenerate code for locks\nadd interfaces and implementations, update managers\nadd tests and session records\nadd samples and session records\nupdate samples.json\nupdate changelog", "createdAt": "2020-12-08T06:59:37Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016", "merged": true, "mergeCommit": {"oid": "e86d954a189fa2fb3511362054467ed3ed70d484"}, "closed": true, "closedAt": "2020-12-09T05:15:44Z", "author": {"login": "xseeseesee"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkBHIOAH2gAyNTM0MTc3NzE4OmE2ZjgwZDdmYWNhODNhYjliNmQ0YWJiNTliNWI2YjRkYmIwZjYyM2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkV7Y3gFqTU0NzgwMzM3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6f80d7faca83ab9b6d4abb59b5b6b4dbb0f623a", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6f80d7faca83ab9b6d4abb59b5b6b4dbb0f623a", "committedDate": "2020-12-08T02:56:12Z", "message": "update api spec for locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d4ba2b2882340ad9992fd502281745db97a0882", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d4ba2b2882340ad9992fd502281745db97a0882", "committedDate": "2020-12-08T03:02:56Z", "message": "generate locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c939f8d8a897369efc5801d1521d683c3209951", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c939f8d8a897369efc5801d1521d683c3209951", "committedDate": "2020-12-08T06:56:44Z", "message": "add interfaces and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b291dac3e9ee42b3575e75028b75e63a12249cd", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b291dac3e9ee42b3575e75028b75e63a12249cd", "committedDate": "2020-12-08T07:14:17Z", "message": "fix PZLA_PREFER_ZERO_LENGTH_ARRAYS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/394ca4cd86ed443f9b32c116a41802fd75acc94b", "committedDate": "2020-12-08T07:33:08Z", "message": "fix spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODUzNjM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#pullrequestreview-546853635", "createdAt": "2020-12-08T08:29:02Z", "commit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyOTowMlrOIBNG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyOTowMlrOIBNG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzNDIyNA==", "bodyText": "It could be CoreUtils.isNullorEmpty()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538134224", "createdAt": "2020-12-08T08:29:02Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/implementation/ManagementLocksImpl.java", "diffHunk": "@@ -39,7 +39,7 @@ public ManagementLocksImpl(final ResourceManager manager) {\n      */\n     public static String resourceIdFromLockId(String lockId) {\n         String[] lockIdParts = lockIdParts(lockId);\n-        if (lockIdParts == null) {\n+        if (lockIdParts.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODQ4Nzc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#pullrequestreview-546848774", "createdAt": "2020-12-08T08:23:40Z", "commit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyMzo0MFrOIBM2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozMzo1OVrOIBNTQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzMDA4NQ==", "bodyText": "Does it need to be public? Or package private would do?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538130085", "createdAt": "2020-12-08T08:23:40Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/implementation/ManagementLocksImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.resourcemanager.resources.ResourceManager;\n+import com.azure.resourcemanager.resources.fluent.models.ManagementLockObjectInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.resourcemanager.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ManagementLocks;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+/**\n+ *  Implementation for ManagementLocks.\n+ */\n+public final class ManagementLocksImpl\n+    extends CreatableResourcesImpl<ManagementLock, ManagementLockImpl, ManagementLockObjectInner>\n+    implements ManagementLocks {\n+\n+    private final ResourceManager manager;\n+\n+    public ManagementLocksImpl(final ResourceManager manager) {\n+        this.manager = manager;\n+    }\n+\n+    /**\n+     * Returns the part of the specified management lock resource ID\n+     * representing the resource the lock is associated with.\n+     * @param lockId a lock resource ID\n+     * @return a resource ID\n+     */\n+    public static String resourceIdFromLockId(String lockId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzMzM3Mg==", "bodyText": "Seems listByScope is easier?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538133372", "createdAt": "2020-12-08T08:27:39Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/implementation/ManagementLocksImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.resourcemanager.resources.ResourceManager;\n+import com.azure.resourcemanager.resources.fluent.models.ManagementLockObjectInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.resourcemanager.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ManagementLocks;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+/**\n+ *  Implementation for ManagementLocks.\n+ */\n+public final class ManagementLocksImpl\n+    extends CreatableResourcesImpl<ManagementLock, ManagementLockImpl, ManagementLockObjectInner>\n+    implements ManagementLocks {\n+\n+    private final ResourceManager manager;\n+\n+    public ManagementLocksImpl(final ResourceManager manager) {\n+        this.manager = manager;\n+    }\n+\n+    /**\n+     * Returns the part of the specified management lock resource ID\n+     * representing the resource the lock is associated with.\n+     * @param lockId a lock resource ID\n+     * @return a resource ID\n+     */\n+    public static String resourceIdFromLockId(String lockId) {\n+        String[] lockIdParts = lockIdParts(lockId);\n+        if (lockIdParts.length == 0) {\n+            return null;\n+        }\n+\n+        StringBuilder resourceId = new StringBuilder();\n+        for (int i = 0; i < lockIdParts.length - 4; i++) {\n+            if (!lockIdParts[i].isEmpty()) {\n+                resourceId.append(\"/\").append(lockIdParts[i]);\n+            }\n+        }\n+\n+        return resourceId.toString();\n+    }\n+\n+    private static String[] lockIdParts(String lockId) {\n+        if (lockId == null) {\n+            return new String[0];\n+        }\n+\n+        String[] parts = lockId.split(\"/\");\n+        if (parts.length < 4) {\n+            // ID too short to be possibly a lock ID\n+            return new String[0];\n+        }\n+\n+        if (!parts[parts.length - 2].equalsIgnoreCase(\"locks\")\n+                || !parts[parts.length - 3].equalsIgnoreCase(\"Microsoft.Authorization\")\n+                || !parts[parts.length - 4].equalsIgnoreCase(\"providers\")) {\n+            // Not a lock ID\n+            return new String[0];\n+        }\n+\n+        return parts;\n+    }\n+\n+    @Override\n+    public ManagementLockImpl define(String name) {\n+        return wrapModel(name);\n+    }\n+\n+    @Override\n+    protected ManagementLockImpl wrapModel(String name) {\n+        ManagementLockObjectInner inner = new ManagementLockObjectInner();\n+\n+        return new ManagementLockImpl(name, inner, this.manager());\n+    }\n+\n+    @Override\n+    protected ManagementLockImpl wrapModel(ManagementLockObjectInner inner) {\n+        if (inner == null) {\n+            return null;\n+        }\n+        return new ManagementLockImpl(inner.id(), inner, this.manager());\n+    }\n+\n+    @Override\n+    public PagedIterable<ManagementLock> list() {\n+        return wrapList(this.manager().managementLockClient().getManagementLocks().list());\n+    }\n+\n+    @Override\n+    public PagedFlux<ManagementLock> listAsync() {\n+        return wrapPageAsync(this.manager().managementLockClient().getManagementLocks().listAsync());\n+    }\n+\n+    @Override\n+    public Mono<Void> deleteByIdAsync(String id) {\n+        String scope = resourceIdFromLockId(id);\n+        String lockName = ResourceUtils.nameFromResourceId(id);\n+        if (scope != null && lockName != null) {\n+            return this.manager().managementLockClient().getManagementLocks().deleteByScopeAsync(scope, lockName);\n+        } else {\n+            return Mono.empty();\n+        }\n+    }\n+\n+    @Override\n+    public PagedIterable<ManagementLock> listByResourceGroup(String resourceGroupName) {\n+        return wrapList(this.manager().managementLockClient().getManagementLocks()\n+            .listByResourceGroup(resourceGroupName));\n+    }\n+\n+    @Override\n+    public PagedFlux<ManagementLock> listByResourceGroupAsync(String resourceGroupName) {\n+        return wrapPageAsync(this.manager().managementLockClient().getManagementLocks()\n+            .listByResourceGroupAsync(resourceGroupName));\n+    }\n+\n+    @Override\n+    public ManagementLock getByResourceGroup(String resourceGroupName, String name) {\n+        return this.getByResourceGroupAsync(resourceGroupName, name).block();\n+    }\n+\n+    @Override\n+    public Mono<ManagementLock> getByResourceGroupAsync(String resourceGroupName, String name) {\n+        return this.manager().managementLockClient().getManagementLocks()\n+            .getByResourceGroupAsync(resourceGroupName, name)\n+            .map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public ManagementLock getById(String id) {\n+        return this.getByIdAsync(id).block();\n+    }\n+\n+    @Override\n+    public Mono<ManagementLock> getByIdAsync(String id) {\n+        String resourceId = resourceIdFromLockId(id);\n+        String lockName = ResourceUtils.nameFromResourceId(id);\n+        return this.manager().managementLockClient().getManagementLocks().getByScopeAsync(resourceId, lockName)\n+            .map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public void deleteByResourceGroup(String resourceGroupName, String name) {\n+        this.deleteByResourceGroupAsync(resourceGroupName, name).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> deleteByResourceGroupAsync(String resourceGroupName, String name) {\n+        return this.manager().managementLockClient().getManagementLocks()\n+            .deleteAtResourceGroupLevelAsync(resourceGroupName, name);\n+    }\n+\n+    @Override\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {\n+        if (ids == null || ids.isEmpty()) {\n+            return Flux.empty();\n+        }\n+\n+        return Flux.fromIterable(ids)\n+            .flatMapDelayError(id -> {\n+                String lockName = ResourceUtils.nameFromResourceId(id);\n+                String scopeName = ManagementLocksImpl.resourceIdFromLockId(id);\n+                return this.manager().managementLockClient().getManagementLocks()\n+                    .deleteByScopeAsync(scopeName, lockName)\n+                    .then(Mono.just(id));\n+            }, 32, 32);\n+    }\n+\n+    @Override\n+    public Flux<String> deleteByIdsAsync(String... ids) {\n+        return this.deleteByIdsAsync(new ArrayList<>(Arrays.asList(ids)));\n+    }\n+\n+    @Override\n+    public void deleteByIds(Collection<String> ids) {\n+        this.deleteByIdsAsync(ids).blockLast();\n+    }\n+\n+    @Override\n+    public void deleteByIds(String... ids) {\n+        this.deleteByIdsAsync(ids).blockLast();\n+    }\n+\n+    @Override\n+    public ResourceManager manager() {\n+        return this.manager;\n+    }\n+\n+    @Override\n+    public PagedIterable<ManagementLock> listForResource(String resourceId) {\n+        return wrapList(this.manager().managementLockClient().getManagementLocks().listAtResourceLevel(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzMzcyMg==", "bodyText": "Should it expose owners as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538133722", "createdAt": "2020-12-08T08:28:13Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/models/ManagementLock.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.resourcemanager.resources.ResourceManager;\n+import com.azure.resourcemanager.resources.fluent.models.ManagementLockObjectInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.HasId;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.HasManager;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.Resource;\n+import com.azure.resourcemanager.resources.fluentcore.model.Appliable;\n+import com.azure.resourcemanager.resources.fluentcore.model.Creatable;\n+import com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.resourcemanager.resources.fluentcore.model.Refreshable;\n+import com.azure.resourcemanager.resources.fluentcore.model.Updatable;\n+\n+/**\n+ * Management lock.\n+ */\n+@Fluent\n+public interface ManagementLock extends\n+    Indexable,\n+    Refreshable<ManagementLock>,\n+    Updatable<ManagementLock.Update>,\n+    HasInnerModel<ManagementLockObjectInner>,\n+    HasManager<ResourceManager>,\n+    HasId {\n+\n+    /**\n+     * @return the lock level\n+     */\n+    LockLevel level();\n+\n+    /**\n+     * @return the resource ID of the locked resource\n+     */\n+    String lockedResourceId();\n+\n+    /**\n+     * @return any notes associated with the lock\n+     */\n+    String notes();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzNDQxOQ==", "bodyText": "Similar IllegalArgumentException for null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538134419", "createdAt": "2020-12-08T08:29:19Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/implementation/ManagementLockImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.implementation;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resources.ResourceManager;\n+import com.azure.resourcemanager.resources.fluent.models.ManagementLockObjectInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.Resource;\n+import com.azure.resourcemanager.resources.fluentcore.model.implementation.CreatableUpdatableImpl;\n+import com.azure.resourcemanager.resources.models.LockLevel;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ResourceGroup;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ *  Implementation for ManagementLock and its create and update interfaces.\n+ */\n+final class ManagementLockImpl\n+    extends CreatableUpdatableImpl<ManagementLock, ManagementLockObjectInner, ManagementLockImpl>\n+    implements\n+        ManagementLock,\n+        ManagementLock.Definition,\n+        ManagementLock.Update {\n+\n+    private final ResourceManager manager;\n+    private String lockedResourceId = null;\n+    private final ClientLogger logger = new ClientLogger(ManagementLockImpl.class);\n+\n+    ManagementLockImpl(\n+            String name,\n+            ManagementLockObjectInner innerModel,\n+            final ResourceManager manager) {\n+        super(name, innerModel);\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    protected Mono<ManagementLockObjectInner> getInnerAsync() {\n+        return this.manager().managementLockClient().getManagementLocks()\n+            .getByScopeAsync(this.lockedResourceId, this.name());\n+    }\n+\n+    @Override\n+    public ManagementLockImpl withNotes(String notes) {\n+        this.innerModel().withNotes(notes);\n+        return this;\n+    }\n+\n+    @Override\n+    public ManagementLockImpl withLevel(LockLevel level) {\n+        this.innerModel().withLevel(level);\n+        return this;\n+    }\n+\n+    @Override\n+    public ManagementLockImpl withLockedResource(String resourceId) {\n+        this.lockedResourceId = resourceId;\n+        return this;\n+    }\n+\n+    @Override\n+    public ManagementLockImpl withLockedResource(Resource resource) {\n+        if (resource != null) {\n+            this.lockedResourceId = resource.id();\n+        } else {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Missing resource ID.\"));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public ManagementLockImpl withLockedResourceGroup(String resourceGroupName) {\n+        return withLockedResource(\n+            \"/subscriptions/\" + this.manager().subscriptionId() + \"/resourceGroups/\" + resourceGroupName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzNzQwOA==", "bodyText": "Could you add an update? I seems not finding code to get resourceId from lockId in LockImpl, which should be needed for update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538137408", "createdAt": "2020-12-08T08:33:59Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/test/java/com/azure/resourcemanager/resources/LocksTests.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources;\n+\n+import com.azure.core.management.Region;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.resourcemanager.resources.models.LockLevel;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ResourceGroup;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class LocksTests extends ResourceManagementTest {\n+\n+    @Test\n+    public void canCreateLock() {\n+        String rgName = generateRandomResourceName(\"rgloc\", 15);\n+        String lockName = generateRandomResourceName(\"lock\", 15);\n+\n+        ResourceGroup resourceGroup = resourceClient.resourceGroups().define(rgName)\n+            .withRegion(Region.US_WEST)\n+            .create();\n+\n+        ManagementLock lock = resourceClient.managementLocks().define(lockName)\n+            .withLockedResourceGroup(resourceGroup)\n+            .withLevel(LockLevel.CAN_NOT_DELETE)\n+            .create();\n+\n+        Assertions.assertNotNull(lock);\n+        Assertions.assertEquals(resourceGroup.id(), lock.lockedResourceId());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODc5OTYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#pullrequestreview-546879962", "createdAt": "2020-12-08T08:53:16Z", "commit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo1MzoxNlrOIBODsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo1MzoxNlrOIBODsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0OTgxMQ==", "bodyText": "Need assertion fail when this ManagementException does not happen.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538149811", "createdAt": "2020-12-08T08:53:16Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/test/java/com/azure/resourcemanager/resources/LocksTests.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources;\n+\n+import com.azure.core.management.Region;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.resourcemanager.resources.models.LockLevel;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ResourceGroup;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class LocksTests extends ResourceManagementTest {\n+\n+    @Test\n+    public void canCreateLock() {\n+        String rgName = generateRandomResourceName(\"rgloc\", 15);\n+        String lockName = generateRandomResourceName(\"lock\", 15);\n+\n+        ResourceGroup resourceGroup = resourceClient.resourceGroups().define(rgName)\n+            .withRegion(Region.US_WEST)\n+            .create();\n+\n+        ManagementLock lock = resourceClient.managementLocks().define(lockName)\n+            .withLockedResourceGroup(resourceGroup)\n+            .withLevel(LockLevel.CAN_NOT_DELETE)\n+            .create();\n+\n+        Assertions.assertNotNull(lock);\n+        Assertions.assertEquals(resourceGroup.id(), lock.lockedResourceId());\n+\n+        try {\n+            resourceClient.resourceGroups().deleteByName(rgName);\n+        } catch (ManagementException ex) {\n+            Assertions.assertEquals(\"ScopeLocked\", ex.getValue().getCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394ca4cd86ed443f9b32c116a41802fd75acc94b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2926d3c0e278d878102b30187b3ac9383787e8b", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2926d3c0e278d878102b30187b3ac9383787e8b", "committedDate": "2020-12-08T09:46:02Z", "message": "update by review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289c200b02769511e8defb4d55006e2803da258d", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/289c200b02769511e8defb4d55006e2803da258d", "committedDate": "2020-12-08T09:53:44Z", "message": "use listByScope as listAtResourceLevel not work for resource group id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7bad8d55711586ffb859c671750f082c4a23f0d", "author": {"user": {"login": "xseeseesee", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7bad8d55711586ffb859c671750f082c4a23f0d", "committedDate": "2020-12-08T10:11:01Z", "message": "update session records"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3ODAzMzc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#pullrequestreview-547803375", "createdAt": "2020-12-09T03:11:19Z", "commit": {"oid": "f7bad8d55711586ffb859c671750f082c4a23f0d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxMToxOVrOICAQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxMToxOVrOICAQOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjIxNg==", "bodyText": "Not exactly sure whether we should throw exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18016#discussion_r538972216", "createdAt": "2020-12-09T03:11:19Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/implementation/ManagementLocksImpl.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.resourcemanager.resources.ResourceManager;\n+import com.azure.resourcemanager.resources.fluent.models.ManagementLockObjectInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.resourcemanager.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl;\n+import com.azure.resourcemanager.resources.models.ManagementLock;\n+import com.azure.resourcemanager.resources.models.ManagementLocks;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+/**\n+ *  Implementation for ManagementLocks.\n+ */\n+public final class ManagementLocksImpl\n+    extends CreatableResourcesImpl<ManagementLock, ManagementLockImpl, ManagementLockObjectInner>\n+    implements ManagementLocks {\n+\n+    private final ResourceManager manager;\n+\n+    public ManagementLocksImpl(final ResourceManager manager) {\n+        this.manager = manager;\n+    }\n+\n+    /**\n+     * Returns the part of the specified management lock resource ID\n+     * representing the resource the lock is associated with.\n+     * @param lockId a lock resource ID\n+     * @return a resource ID\n+     */\n+    static String resourceIdFromLockId(String lockId) {\n+        String[] lockIdParts = lockIdParts(lockId);\n+        if (CoreUtils.isNullOrEmpty(lockIdParts)) {\n+            return null;\n+        }\n+\n+        StringBuilder resourceId = new StringBuilder();\n+        for (int i = 0; i < lockIdParts.length - 4; i++) {\n+            if (!lockIdParts[i].isEmpty()) {\n+                resourceId.append(\"/\").append(lockIdParts[i]);\n+            }\n+        }\n+\n+        return resourceId.toString();\n+    }\n+\n+    private static String[] lockIdParts(String lockId) {\n+        if (CoreUtils.isNullOrEmpty(lockId)) {\n+            return new String[0];\n+        }\n+\n+        String[] parts = lockId.split(\"/\");\n+        if (parts.length < 4) {\n+            // ID too short to be possibly a lock ID\n+            return new String[0];\n+        }\n+\n+        if (!parts[parts.length - 2].equalsIgnoreCase(\"locks\")\n+                || !parts[parts.length - 3].equalsIgnoreCase(\"Microsoft.Authorization\")\n+                || !parts[parts.length - 4].equalsIgnoreCase(\"providers\")) {\n+            // Not a lock ID\n+            return new String[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bad8d55711586ffb859c671750f082c4a23f0d"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1394, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}