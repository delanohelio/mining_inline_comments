{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzkyMjQ4", "number": 15762, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDo1Mzo0OVrOEn5DLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoxNToyMlrOEoKVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjY0NjIwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDo1Mzo0OVrOHYrmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxMDoxNVrOHYsdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjI0NA==", "bodyText": "why change in method name ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495642244", "createdAt": "2020-09-28T00:53:49Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,41 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }\n+\n+        logger.info(\"Request Operation Type is : {}\", request.operationType());\n+\n         return this.httpClient\n             .observe((connection, state) -> {\n                 Instant time = Instant.now();\n                 if(state.equals(HttpClientState.CONNECTED) || state.equals(HttpClientState.ACQUIRED)){\n-                    request.getReactorNettyRequestRecord().setTimeConnected(time);\n+                    request.reactorNettyRequestRecord().setTimeConnected(time);\n                 } else if(state.equals(HttpClientState.CONFIGURED)){\n-                    request.getReactorNettyRequestRecord().setTimeConfigured(time);\n+                    request.reactorNettyRequestRecord().setTimeConfigured(time);\n                 } else if(state.equals(HttpClientState.REQUEST_SENT)){\n-                    request.getReactorNettyRequestRecord().setTimeSent(time);\n+                    request.reactorNettyRequestRecord().setTimeSent(time);\n                 } else if(state.equals(HttpClientState.RESPONSE_RECEIVED)){\n-                    request.getReactorNettyRequestRecord().setTimeReceived(time);\n+                    request.reactorNettyRequestRecord().setTimeReceived(time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NjI2NQ==", "bodyText": "@simplynaveen20  - this is to correct the naming of this API to be in consistent with rest of the APIs in HttpRequest class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495656265", "createdAt": "2020-09-28T02:10:15Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,41 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }\n+\n+        logger.info(\"Request Operation Type is : {}\", request.operationType());\n+\n         return this.httpClient\n             .observe((connection, state) -> {\n                 Instant time = Instant.now();\n                 if(state.equals(HttpClientState.CONNECTED) || state.equals(HttpClientState.ACQUIRED)){\n-                    request.getReactorNettyRequestRecord().setTimeConnected(time);\n+                    request.reactorNettyRequestRecord().setTimeConnected(time);\n                 } else if(state.equals(HttpClientState.CONFIGURED)){\n-                    request.getReactorNettyRequestRecord().setTimeConfigured(time);\n+                    request.reactorNettyRequestRecord().setTimeConfigured(time);\n                 } else if(state.equals(HttpClientState.REQUEST_SENT)){\n-                    request.getReactorNettyRequestRecord().setTimeSent(time);\n+                    request.reactorNettyRequestRecord().setTimeSent(time);\n                 } else if(state.equals(HttpClientState.RESPONSE_RECEIVED)){\n-                    request.getReactorNettyRequestRecord().setTimeReceived(time);\n+                    request.reactorNettyRequestRecord().setTimeReceived(time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjI0NA=="}, "originalCommit": {"oid": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjY0NzkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDo1NToyMFrOHYrnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoxMDozNVrOHYsdjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjQ3MA==", "bodyText": "this is for IllegalReferenceCountException ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495642470", "createdAt": "2020-09-28T00:55:20Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -133,8 +147,16 @@ private void configureChannelPipelineHandlers() {\n             .doOnCancel(() -> {\n                 ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n                 if (reactorNettyHttpResponse != null) {\n-                    reactorNettyHttpResponse.releaseAfterCancel(request.httpMethod());\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.CANCELLED);\n+                }\n+            })\n+            .onErrorMap(throwable -> {\n+                logger.error(\"Error occurred while sending request : \", throwable);\n+                ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n+                if (reactorNettyHttpResponse != null) {\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NjMzNA==", "bodyText": "Yes, this is a safety block for IllegalReferenceCountException :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495656334", "createdAt": "2020-09-28T02:10:35Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -133,8 +147,16 @@ private void configureChannelPipelineHandlers() {\n             .doOnCancel(() -> {\n                 ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n                 if (reactorNettyHttpResponse != null) {\n-                    reactorNettyHttpResponse.releaseAfterCancel(request.httpMethod());\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.CANCELLED);\n+                }\n+            })\n+            .onErrorMap(throwable -> {\n+                logger.error(\"Error occurred while sending request : \", throwable);\n+                ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n+                if (reactorNettyHttpResponse != null) {\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjQ3MA=="}, "originalCommit": {"oid": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI2MzEzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxMTozN1rOHYxCcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxODowNFrOHZ_mrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg==", "bodyText": "NIT: I would prefer a name like \"NonIOBoundOperationRetryCount\" - that way we can reuse the constant.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495731312", "createdAt": "2020-09-28T07:11:37Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -29,6 +30,7 @@\n     final static int RetryIntervalInMS = 1000; //Once we detect failover wait for 1 second before retrying request.\n     final static int MaxRetryCount = 120;\n     private final static int MaxServiceUnavailableRetryCount = 1;\n+    private final static int MAX_QUERYPLAN_ADDRESS_RETRY_COUNT = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2MTk0NA==", "bodyText": "Is 'NonIO' meant for non-user-data?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495761944", "createdAt": "2020-09-28T08:11:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -29,6 +30,7 @@\n     final static int RetryIntervalInMS = 1000; //Once we detect failover wait for 1 second before retrying request.\n     final static int MaxRetryCount = 120;\n     private final static int MaxServiceUnavailableRetryCount = 1;\n+    private final static int MAX_QUERYPLAN_ADDRESS_RETRY_COUNT = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODU0MA==", "bodyText": "I think keeping it as MAX_QUERY_PLAN_AND_ADDRESS_REFRESH_COUNT makes more sense since it directly relates to just query plan and address refresh.\nIf we need to add more constants, we can merge it afterwards, for now, let's keep it separate to have better readability of the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497018540", "createdAt": "2020-09-29T20:18:04Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -29,6 +30,7 @@\n     final static int RetryIntervalInMS = 1000; //Once we detect failover wait for 1 second before retrying request.\n     final static int MaxRetryCount = 120;\n     private final static int MaxServiceUnavailableRetryCount = 1;\n+    private final static int MAX_QUERYPLAN_ADDRESS_RETRY_COUNT = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI3MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxNDoxM1rOHYxHVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMjoyNFrOHaAFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA==", "bodyText": "NIT: similar as above - have a helper function IsNonIOBoundOperation or similar that returns true for now if addres refresh or query plan retrieval but can be extended easily", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495732564", "createdAt": "2020-09-28T07:14:13Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -106,9 +110,15 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n                 } else {\n                     return this.shouldNotRetryOnEndpointFailureAsync(this.isReadRequest, false);\n                 }\n+            } else if (clientException != null && clientException.getCause() instanceof ReadTimeoutException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NjUwMQ==", "bodyText": "We already have a utility class/methods for similar functionality.\nThis should go to the same class as WebExceptionUtility.isNetworkFailure().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496056501", "createdAt": "2020-09-28T15:51:17Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -106,9 +110,15 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n                 } else {\n                     return this.shouldNotRetryOnEndpointFailureAsync(this.isReadRequest, false);\n                 }\n+            } else if (clientException != null && clientException.getCause() instanceof ReadTimeoutException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjM3Nw==", "bodyText": "This done, we added the retry utility.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497026377", "createdAt": "2020-09-29T20:32:24Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -106,9 +110,15 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n                 } else {\n                     return this.shouldNotRetryOnEndpointFailureAsync(this.isReadRequest, false);\n                 }\n+            } else if (clientException != null && clientException.getCause() instanceof ReadTimeoutException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI4MjY4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxNzo1N1rOHYxOFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDowOTo0NFrOHZ_VKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ==", "bodyText": "Question: Why the DIRECT prefix ? This is not just applicable when using Direct Transport with Https Transport (vs. TCP) but for all https calls (independent of Gateway or Direct with Https, correct?) If so I would remove the Direct - could otherwise be too confusing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495734295", "createdAt": "2020-09-28T07:17:57Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -176,6 +182,18 @@ public int getReactorNettyMaxConnectionPoolSize() {\n         return REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE;\n     }\n \n+    public int getDirectHttpsResponseTimeoutInSeconds() {\n+        return getJVMConfigAsInt(DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NjIxNg==", "bodyText": "The reason I added DIRECT prefix is because all the other Reactor Netty Client Configurations have the same DIRECT_HTTPS prefixes, however, the other configurations were exposed early enough in the days Direct Https mode, which is not intended to be used anymore, so these new configurations can be renamed to something better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496096216", "createdAt": "2020-09-28T16:54:08Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -176,6 +182,18 @@ public int getReactorNettyMaxConnectionPoolSize() {\n         return REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE;\n     }\n \n+    public int getDirectHttpsResponseTimeoutInSeconds() {\n+        return getJVMConfigAsInt(DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDA1OA==", "bodyText": "This is done, resolving the comment now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014058", "createdAt": "2020-09-29T20:09:44Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -176,6 +182,18 @@ public int getReactorNettyMaxConnectionPoolSize() {\n         return REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE;\n     }\n \n+    public int getDirectHttpsResponseTimeoutInSeconds() {\n+        return getJVMConfigAsInt(DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzI5NjU1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyMjoyMVrOHYxWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoyMzowNlrOHZ_xWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA==", "bodyText": "NIT - do we also want to expose maxRetryCount in VMOptions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495736424", "createdAt": "2020-09-28T07:22:21Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -65,6 +68,9 @@\n     private static final Duration CONNECTION_ACQUIRE_TIMEOUT = Duration.ofSeconds(45);\n     private static final int REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE = 1000;\n     private static final String REACTOR_NETTY_CONNECTION_POOL_NAME = \"reactor-netty-connection-pool\";\n+    private static final int DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n+    private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n+    private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDQzNQ==", "bodyText": "We decided to not expose it, as we have other properties in that file too which we are not exposing. So let's keep it as it is for now, if customers want it, we can expose it.\n@FabianMeiswinkel @simplynaveen20 @moderakh  thoughts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014435", "createdAt": "2020-09-29T20:10:29Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -65,6 +68,9 @@\n     private static final Duration CONNECTION_ACQUIRE_TIMEOUT = Duration.ofSeconds(45);\n     private static final int REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE = 1000;\n     private static final String REACTOR_NETTY_CONNECTION_POOL_NAME = \"reactor-netty-connection-pool\";\n+    private static final int DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n+    private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n+    private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTI3NA==", "bodyText": "Yes lets not expose it now , retry is internal logic ,and we have not expose it for others either. Time out is expose system property , if any issue comes we can fine tune with that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497021274", "createdAt": "2020-09-29T20:23:06Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -65,6 +68,9 @@\n     private static final Duration CONNECTION_ACQUIRE_TIMEOUT = Duration.ofSeconds(45);\n     private static final int REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE = 1000;\n     private static final String REACTOR_NETTY_CONNECTION_POOL_NAME = \"reactor-netty-connection-pool\";\n+    private static final int DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n+    private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n+    private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzM2MzUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo0Mjo0OVrOHYx-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMDo0MlrOHZ_XFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ==", "bodyText": "When searching for Unpooled.wrappedBuffer there are several other places where we don't retain it as well.  SHouldn't this be consistent across the board?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495746615", "createdAt": "2020-09-28T07:42:49Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0ODIwNA==", "bodyText": "I assume you saw this one? netty/netty#1482", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495748204", "createdAt": "2020-09-28T07:45:49Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0OTEwNg==", "bodyText": "I assume calling retain here assuming the factory methods to create the ByteBuf are only called when write etc. is planned later is acceptable - but teh pattern should be consistent - or if there are reaosns to not be consistent everywhere we need to add comments or refactor the code so that the intentions become clear", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495749106", "createdAt": "2020-09-28T07:47:37Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5ODY3MA==", "bodyText": "As discussed, we changed it everywhere where ReactorNettyClient is used, because Http Client handles the reference counts internally (we have no control over it), whereas in Rntbd Client, we manage the reference counts ourselves, and that's why we didn't change the retain() APIs in Rntbd Client usages as it is already handled across the Rntbd layer.\nAgreed, we will add the comments around this code section to make it more clear.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496098670", "createdAt": "2020-09-28T16:58:15Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDU0OQ==", "bodyText": "This is done, resolving this conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014549", "createdAt": "2020-09-29T20:10:42Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, "originalCommit": {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ4Nzg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxODo1M1rOHYzI8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzowM1rOHaAGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTc0NQ==", "bodyText": "The logic is not query/address dependent, can it be named generic to convey the intent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495765745", "createdAt": "2020-09-28T08:18:53Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -121,6 +131,23 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n         return this.throttlingRetry.shouldRetry(e);\n     }\n \n+    private Mono<ShouldRetryResult> shouldRetryQueryPlanAndAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcyNg==", "bodyText": "This is very dependent on query/address retry logic, we can revisit it when we will do other meta data calls. This is good for readability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497026726", "createdAt": "2020-09-29T20:33:03Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -121,6 +131,23 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n         return this.throttlingRetry.shouldRetry(e);\n     }\n \n+    private Mono<ShouldRetryResult> shouldRetryQueryPlanAndAddress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTc0NQ=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUxMzEyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNTo0MFrOHYzYJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMDo1OFrOHZ_XjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg==", "bodyText": "HtpReqeustMessage CTOR always forces the operationType, why is it missing?\nIdeally its better to make it operationType immutable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495769636", "createdAt": "2020-09-28T08:25:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "diffHunk": "@@ -361,6 +361,9 @@ private HttpRequest prepareHttpMessage(\n                 throw new IllegalStateException();\n         }\n \n+        // add operation type\n+        httpRequestMessage.withOperationType(request.getOperationType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzY0Mw==", "bodyText": "@kirankumarkolli - HttpRequestMessage constructor does not enforce operationType always, there are few constructors where we don't enforce it, however, we can make it immutable by some small code changes.\n@moderakh  also pointed out another approach, where we don't even need the operationType on the HttpRequestMessage, I think that will be more cleaner, will implement that approach.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496103643", "createdAt": "2020-09-28T17:04:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "diffHunk": "@@ -361,6 +361,9 @@ private HttpRequest prepareHttpMessage(\n                 throw new IllegalStateException();\n         }\n \n+        // add operation type\n+        httpRequestMessage.withOperationType(request.getOperationType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDY2OQ==", "bodyText": "This is done, resolving the conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014669", "createdAt": "2020-09-29T20:10:58Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "diffHunk": "@@ -361,6 +361,9 @@ private HttpRequest prepareHttpMessage(\n                 throw new IllegalStateException();\n         }\n \n+        // add operation type\n+        httpRequestMessage.withOperationType(request.getOperationType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUyMjg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyODowOFrOHYzd3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMToxOVrOHZ_YPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTEwMw==", "bodyText": "Will it impact the full region fail-over?\nIf so does it needs to be finer scoped like, ReadTimeout & non-data-plane operations etc...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495771103", "createdAt": "2020-09-28T08:28:08Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -559,7 +563,10 @@ public void dispose() {\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDg0Ng==", "bodyText": "Since it doesn't impacts the Region failover, resolving this conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014846", "createdAt": "2020-09-29T20:11:19Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -559,7 +563,10 @@ public void dispose() {\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTEwMw=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1MzIxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NTo1MlrOHZEqLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoyOTo1M1rOHZ__0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjc4MQ==", "bodyText": "the safer approach is to do a recursive cause check similar to WebExceptionUtility.isNetworkFailure().\nCan this be factored out as a utility method to WebExceptionUtility similar to WebExceptionUtility.isNetworkFailure().?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496052781", "createdAt": "2020-09-28T15:45:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -299,7 +301,10 @@ private String ensureSlashPrefixed(String path) {\n                        }\n \n                        if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                           BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                           if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNDk3OA==", "bodyText": "This is done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497024978", "createdAt": "2020-09-29T20:29:53Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -299,7 +301,10 @@ private String ensureSlashPrefixed(String path) {\n                        }\n \n                        if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                           BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                           if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjc4MQ=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1NDUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NjoxMFrOHZEq-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMToxMlrOHaAC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjk4NQ==", "bodyText": "ditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496052985", "createdAt": "2020-09-28T15:46:10Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -342,7 +343,10 @@ public GatewayAddressCache(\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNTc0OQ==", "bodyText": "This is done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497025749", "createdAt": "2020-09-29T20:31:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -342,7 +343,10 @@ public GatewayAddressCache(\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjk4NQ=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQ1MDM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowODo1OVrOHZFmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMTo1M1rOHZ_ZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ==", "bodyText": "seems you are trying to fix a netty ref counting issue.\nI don't have all the context. However at the first look this doesn't seem to me to be the right place for increasing the ref count.\nUnpooled.wrappedBuffer() already sets ref count to a non zero value. If we have ref counting issue. I suspect we should fix that elsewhere. not here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496068229", "createdAt": "2020-09-28T16:08:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -953,7 +953,7 @@ public void clearRoutingHints() {\n             return Flux.empty();\n         }\n \n-        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray));\n+        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray).retain());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NzQ5Ng==", "bodyText": "@moderakh , I checked the code and Unpooled.wrappedBuffer() does not increments the reference count. That's why we need to do it here and at other places where we create this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496097496", "createdAt": "2020-09-28T16:56:20Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -953,7 +953,7 @@ public void clearRoutingHints() {\n             return Flux.empty();\n         }\n \n-        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray));\n+        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray).retain());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNTExNw==", "bodyText": "This is done, resolving the conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497015117", "createdAt": "2020-09-29T20:11:53Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -953,7 +953,7 @@ public void clearRoutingHints() {\n             return Flux.empty();\n         }\n \n-        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray));\n+        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray).retain());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQ3NzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoxNToyMlrOHZF2tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoxMjowNVrOHZ_Zsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw==", "bodyText": "These is business logic. HttpClient should only be doing http network layer handling not business logic.\nIf we need to set a different response timeout per business logic operation then the caller of HttpClient.Send should pass the timeout as an override.\nadding an overloaded method HttpClient.send(httpRequest, responseTimeout) and keeping the business logic out of the HttpClient to me seems a better approach.\nThat way you don't have to add operationType to the HttpRequest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496072373", "createdAt": "2020-09-28T16:15:22Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,39 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjY0MQ==", "bodyText": "@moderakh  - that is good point, we can update it. In fact, we don't even need overloaded API, we can just update the same API since responseTimeout is a must to have value now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496102641", "createdAt": "2020-09-28T17:02:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,39 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNTIxOQ==", "bodyText": "This is done too, resolving the conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497015219", "createdAt": "2020-09-29T20:12:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,39 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw=="}, "originalCommit": {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 800, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}