{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NzUyOTQz", "number": 17200, "title": "RntbdMockServer", "bodyText": "this PR will bring in the mock tcp server, which we can start locally and running unit tests against it. It will help us to add more test scenarios around rntbd layer.\nCurrently, it only contains the functionality about RntbdContext request/response flow, and channel close/reset flow.\n\nThe mock server work starts from David's Rntbd-transport-client-demo project, big thanks to that.\n\nAdd ConnectionStateListenerTest which uses the mock tcp server to verify address cache only called for server.FIN.\n\nMost of the decoding/encoding code mock tcp server use has already exsisted under /rntbd folder, but generally it would be good to isolate all code relate to mock tcp server under the same folder, so I copied over under TcpServerMock/Rntbd.\nNote: For files copied from the existing /rntbd folder, it will include following comments: Methods included in this class are copied from...", "createdAt": "2020-11-05T02:34:16Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200", "merged": true, "mergeCommit": {"oid": "a5d04190cb3bbc3fd0bf4ed06373cdb37e44914d"}, "closed": true, "closedAt": "2020-11-06T18:25:37Z", "author": {"login": "xinlian12"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZYtcZAH2gAyNTE1NzUyOTQzOjgwYWRhZjQ5NDY1Nzg3M2UwNDE4YjAxMDA2ZTY2MWE4NWZiNWM4OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ7RCYgFqTUyNTM5NTIwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80adaf494657873e0418b01006e661a85fb5c892", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/80adaf494657873e0418b01006e661a85fb5c892", "committedDate": "2020-11-05T02:12:42Z", "message": "Add connectionStateListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daf9a1499eb755098cf31bb5c3a25bdd82a992b6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/daf9a1499eb755098cf31bb5c3a25bdd82a992b6", "committedDate": "2020-11-05T02:16:00Z", "message": "Merge branch 'master' into RntbdMockServer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4644e66aa052fdfbda116aafd0307ba216b7f9db", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4644e66aa052fdfbda116aafd0307ba216b7f9db", "committedDate": "2020-11-05T02:19:07Z", "message": "revert and fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2450fbc415ec84f3a7449f81f07fe1a8132a26b8", "committedDate": "2020-11-05T02:33:53Z", "message": "change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzczODA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#pullrequestreview-524773808", "createdAt": "2020-11-06T00:25:08Z", "commit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDoyNTowOFrOHubwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDo1ODoxNlrOHucWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MTIzOQ==", "bodyText": "please try to use logger here and everywhere else instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518451239", "createdAt": "2020-11-06T00:25:08Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(boolean isTcpConnectionEndpointRediscoveryEnabled, RequestResponseType responseType, int times) {\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTA4MA==", "bodyText": "please add groups =  { \"unit\" } similar to other tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518461080", "createdAt": "2020-11-06T00:58:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"connectionStateListenerConfigProvider\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2MTEzMg==", "bodyText": "this is a great test thank you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518461132", "createdAt": "2020-11-06T00:58:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2450fbc415ec84f3a7449f81f07fe1a8132a26b8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3066d21f700e1d4dfa349786ed5ceca7433ecb5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3066d21f700e1d4dfa349786ed5ceca7433ecb5", "committedDate": "2020-11-06T16:42:44Z", "message": "resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629fcd2e8ef969e9916f60842cb3efdbc9698651", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/629fcd2e8ef969e9916f60842cb3efdbc9698651", "committedDate": "2020-11-06T17:24:50Z", "message": "make the test more robust"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7a21dc5715ab23c2e4ad817e2338fb80a526498", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d7a21dc5715ab23c2e4ad817e2338fb80a526498", "committedDate": "2020-11-06T17:39:42Z", "message": "solve compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mzk1MjAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#pullrequestreview-525395203", "createdAt": "2020-11-06T18:28:21Z", "commit": {"oid": "d7a21dc5715ab23c2e4ad817e2338fb80a526498"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyODoyMVrOHu48YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyODoyMVrOHu48YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyOTUwNA==", "bodyText": "also can we replace this with ObjectNode?\nSome of the existing tests use Document but for new tests it is better to move to the new model.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17200#discussion_r518929504", "createdAt": "2020-11-06T18:28:21Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConnectionStateListenerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity;\n+\n+import com.azure.cosmos.DirectConnectionConfig;\n+import com.azure.cosmos.implementation.Configs;\n+import com.azure.cosmos.implementation.ConnectionPolicy;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.OperationType;\n+import com.azure.cosmos.implementation.ResourceType;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.UserAgentContainer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServerFactory;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.TcpServer;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.RequestResponseType;\n+import com.azure.cosmos.implementation.directconnectivity.TcpServerMock.SslContextUtils;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import io.netty.handler.ssl.SslContext;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.azure.cosmos.implementation.TestUtils.mockDiagnosticsClientContext;\n+\n+public class ConnectionStateListenerTest {\n+\n+    private static int port = 8082;\n+    private static String serverUriString = \"rntbd://localhost:\" + port;\n+    private static final Logger logger = LoggerFactory.getLogger(ConnectionStateListenerTest.class);\n+\n+    @DataProvider(name = \"connectionStateListenerConfigProvider\")\n+    public Object[][] connectionStateListenerConfigProvider() {\n+        return new Object[][]{\n+            // isTcpConnectionEndpointRediscoveryEnabled, serverResponseType, GlobalAddressResolver.updateAddresses() called times\n+            {true, RequestResponseType.CHANNEL_FIN, 1},\n+            {false, RequestResponseType.CHANNEL_FIN, 0},\n+            {true, RequestResponseType.CHANNEL_RST, 0},\n+            {false, RequestResponseType.CHANNEL_RST, 0},\n+        };\n+    }\n+\n+    @Test(groups = { \"unit\" }, dataProvider = \"connectionStateListenerConfigProvider\")\n+    public void connectionStateListener_OnConnectionEvent(\n+        boolean isTcpConnectionEndpointRediscoveryEnabled,\n+        RequestResponseType responseType,\n+        int times) throws ExecutionException, InterruptedException {\n+\n+        TcpServer server = TcpServerFactory.startNewRntbdServer(port);\n+        // Inject fake response\n+        server.injectServerResponse(responseType);\n+\n+        ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());\n+        connectionPolicy.setTcpConnectionEndpointRediscoveryEnabled(isTcpConnectionEndpointRediscoveryEnabled);\n+\n+        GlobalAddressResolver addressResolver = Mockito.mock(GlobalAddressResolver.class);\n+\n+        SslContext sslContext = SslContextUtils.CreateSslContext(\"client.jks\", false);\n+\n+        Configs config = Mockito.mock(Configs.class);\n+        Mockito.doReturn(sslContext).when(config).getSslContext();\n+\n+        RntbdTransportClient client = new RntbdTransportClient(\n+            config,\n+            connectionPolicy,\n+            new UserAgentContainer(),\n+            addressResolver);\n+\n+        RxDocumentServiceRequest req =\n+            RxDocumentServiceRequest.create(mockDiagnosticsClientContext(), OperationType.Create, ResourceType.Document,\n+                \"dbs/fakedb/colls/fakeColls\",\n+                getDocumentDefinition(), new HashMap<>());\n+        req.setPartitionKeyRangeIdentity(new PartitionKeyRangeIdentity(\"fakeCollectionId\",\"fakePartitionKeyRangeId\"));\n+\n+        Uri targetUri = new Uri(serverUriString);\n+        try {\n+            client.invokeStoreAsync(targetUri, req).block();\n+        } catch (Exception e) {\n+            logger.info(\"expected failed request with reason {}\", e);\n+        }\n+        finally {\n+            Mockito.verify(addressResolver, Mockito.times(times)).updateAddresses(Mockito.any(), Mockito.any());\n+        }\n+\n+        TcpServerFactory.shutdownRntbdServer(server);\n+    }\n+\n+    private Document getDocumentDefinition() {\n+        String uuid = UUID.randomUUID().toString();\n+        Document doc = new Document(String.format(\"{ \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a21dc5715ab23c2e4ad817e2338fb80a526498"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 246, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}