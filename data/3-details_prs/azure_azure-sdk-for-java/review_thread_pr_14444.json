{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTU5NjMz", "number": 14444, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyMjo0N1rOEd52dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyNDowNFrOEd53ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzkxOTg5OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyMjo0N1rOHJV7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyMjo0N1rOHJV7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1ODQ3OQ==", "bodyText": "Use string constants.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14444#discussion_r479558479", "createdAt": "2020-08-28T22:22:47Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -640,38 +639,20 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      * @return a Publisher that emits an AccessToken\n      */\n     public Mono<MsalToken> authenticateWithBrowserInteraction(TokenRequestContext request, int port) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        return AuthorizationCodeListener.create(port)\n-            .flatMap(server -> {\n-                URI redirectUri;\n-                String browserUri;\n-                try {\n-                    redirectUri = new URI(String.format(\"http://localhost:%s\", port));\n-                    browserUri =\n-                        String.format(\"%s/oauth2/v2.0/authorize?response_type=code&response_mode=query&prompt\"\n-                                + \"=select_account&client_id=%s&redirect_uri=%s&state=%s&scope=%s\",\n-                            authorityUrl,\n-                            clientId,\n-                            redirectUri.toString(),\n-                            UUID.randomUUID(),\n-                            String.join(\" \", request.getScopes()));\n-                } catch (URISyntaxException e) {\n-                    return server.dispose().then(Mono.error(e));\n-                }\n+        URI redirectUri;\n+        try {\n+            redirectUri = new URI(String.format(\"http://localhost:%s\", port));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b742b5def48de8ed54370019295995429d2783d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzkyMjI4OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyNDowNFrOHJV8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMzo1NDozMVrOHJmopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1ODgzNg==", "bodyText": "Do you need to use fromFuture? Can it just be:\n.flatMap(pc -> pc.acquireToken(parameters));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14444#discussion_r479558836", "createdAt": "2020-08-28T22:24:04Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -640,38 +639,20 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      * @return a Publisher that emits an AccessToken\n      */\n     public Mono<MsalToken> authenticateWithBrowserInteraction(TokenRequestContext request, int port) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        return AuthorizationCodeListener.create(port)\n-            .flatMap(server -> {\n-                URI redirectUri;\n-                String browserUri;\n-                try {\n-                    redirectUri = new URI(String.format(\"http://localhost:%s\", port));\n-                    browserUri =\n-                        String.format(\"%s/oauth2/v2.0/authorize?response_type=code&response_mode=query&prompt\"\n-                                + \"=select_account&client_id=%s&redirect_uri=%s&state=%s&scope=%s\",\n-                            authorityUrl,\n-                            clientId,\n-                            redirectUri.toString(),\n-                            UUID.randomUUID(),\n-                            String.join(\" \", request.getScopes()));\n-                } catch (URISyntaxException e) {\n-                    return server.dispose().then(Mono.error(e));\n-                }\n+        URI redirectUri;\n+        try {\n+            redirectUri = new URI(String.format(\"http://localhost:%s\", port));\n+        } catch (URISyntaxException e) {\n+            return Mono.error(logger.logExceptionAsError(new RuntimeException(e)));\n+        }\n+        InteractiveRequestParameters parameters = InteractiveRequestParameters.builder(redirectUri)\n+                                                     .scopes(new HashSet<>(request.getScopes()))\n+                                                     .build();\n+        Mono<IAuthenticationResult> acquireToken = publicClientApplicationAccessor.getValue()\n+                               .flatMap(pc -> Mono.fromFuture(() -> pc.acquireToken(parameters)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b742b5def48de8ed54370019295995429d2783d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMjIzMA==", "bodyText": "its needed, because we get back a CompletableFuture.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14444#discussion_r479832230", "createdAt": "2020-08-30T23:54:31Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -640,38 +639,20 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      * @return a Publisher that emits an AccessToken\n      */\n     public Mono<MsalToken> authenticateWithBrowserInteraction(TokenRequestContext request, int port) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        return AuthorizationCodeListener.create(port)\n-            .flatMap(server -> {\n-                URI redirectUri;\n-                String browserUri;\n-                try {\n-                    redirectUri = new URI(String.format(\"http://localhost:%s\", port));\n-                    browserUri =\n-                        String.format(\"%s/oauth2/v2.0/authorize?response_type=code&response_mode=query&prompt\"\n-                                + \"=select_account&client_id=%s&redirect_uri=%s&state=%s&scope=%s\",\n-                            authorityUrl,\n-                            clientId,\n-                            redirectUri.toString(),\n-                            UUID.randomUUID(),\n-                            String.join(\" \", request.getScopes()));\n-                } catch (URISyntaxException e) {\n-                    return server.dispose().then(Mono.error(e));\n-                }\n+        URI redirectUri;\n+        try {\n+            redirectUri = new URI(String.format(\"http://localhost:%s\", port));\n+        } catch (URISyntaxException e) {\n+            return Mono.error(logger.logExceptionAsError(new RuntimeException(e)));\n+        }\n+        InteractiveRequestParameters parameters = InteractiveRequestParameters.builder(redirectUri)\n+                                                     .scopes(new HashSet<>(request.getScopes()))\n+                                                     .build();\n+        Mono<IAuthenticationResult> acquireToken = publicClientApplicationAccessor.getValue()\n+                               .flatMap(pc -> Mono.fromFuture(() -> pc.acquireToken(parameters)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1ODgzNg=="}, "originalCommit": {"oid": "4b742b5def48de8ed54370019295995429d2783d"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1529, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}