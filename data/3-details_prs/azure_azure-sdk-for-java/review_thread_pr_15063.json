{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0Mzk1MzIz", "number": 15063, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDowMzozNFrOEiVTYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoxNjoxNVrOEiVdMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDM2MDY0OnYy", "diffSide": "LEFT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/componentLifcycleTest.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDowMzozNFrOHQJsdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDowOTo1MlrOHQJzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5ODEwMw==", "bodyText": "Is this intentional?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486698103", "createdAt": "2020-09-11T00:03:34Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/componentLifcycleTest.json", "diffHunk": "@@ -1,172 +0,0 @@\n-{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5OTgwNQ==", "bodyText": "Yeah, the title of this file is incorrect, and it doesn't correspond to a test that we have. We still have the \"componentLifecycleTest.json\" file", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486699805", "createdAt": "2020-09-11T00:09:52Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/resources/session-records/componentLifcycleTest.json", "diffHunk": "@@ -1,172 +0,0 @@\n-{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5ODEwMw=="}, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDM4NTc5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoxNjoxNVrOHQJ6zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDo0MDoyMFrOHQKTVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTc3Mg==", "bodyText": "how do you feel about using assertj's fluent assertions here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486701772", "createdAt": "2020-09-11T00:16:15Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async event route test classes need to implement. It also\n+ * houses some event route test specific helper functions.\n+ */\n+public abstract class EventRoutesTestBase extends DigitalTwinsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(EventRoutesTestBase.class);\n+\n+    static final String EVENT_ROUTE_ENDPOINT_NAME = \"someEventHubEndpoint\";\n+    static final String FILTER = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n+\n+    @Test\n+    public abstract void eventRouteLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getEventRouteThrowsIfEventRouteDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createEventRouteThrowsIfFilterIsMalformed(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    // Azure Digital Twins instances have a low cap on the number of event routes allowed, so we need to delete the existing\n+    // event routes before each test to make sure that we can add an event route in each test.\n+    @BeforeEach\n+    public void removeAllEventRoutes() {\n+        // Using sync client for simplicity. This function isn't testing the clients, so no need to use both sync and async clients for cleanup\n+        DigitalTwinsClient client = getDigitalTwinsClientBuilder(null, DigitalTwinsServiceVersion.getLatest()).buildClient();\n+        PagedIterable<EventRoute> listedEventRoutes = client.listEventRoutes();\n+        List<String> currentEventRouteIds = new ArrayList<>();\n+        for (EventRoute listedEventRoute : listedEventRoutes) {\n+            currentEventRouteIds.add(listedEventRoute.getId());\n+        }\n+\n+        for (String eventRouteId : currentEventRouteIds) {\n+            logger.info(\"Deleting event route \" + eventRouteId + \" before running the next test\");\n+            client.deleteEventRoute(eventRouteId);\n+        }\n+    }\n+\n+    // Note that only service returned eventRoute instances have their Id field set. When a user builds an instance locally,\n+    // there is no way to assign an Id to it.\n+    protected static void assertEventRoutesEqual(EventRoute expected, String expectedId, EventRoute actual) {\n+        assertEquals(expectedId, actual.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMjQ2OA==", "bodyText": "I'm not sure that would simplify anything in this case. Am I missing something though?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486702468", "createdAt": "2020-09-11T00:19:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async event route test classes need to implement. It also\n+ * houses some event route test specific helper functions.\n+ */\n+public abstract class EventRoutesTestBase extends DigitalTwinsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(EventRoutesTestBase.class);\n+\n+    static final String EVENT_ROUTE_ENDPOINT_NAME = \"someEventHubEndpoint\";\n+    static final String FILTER = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n+\n+    @Test\n+    public abstract void eventRouteLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getEventRouteThrowsIfEventRouteDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createEventRouteThrowsIfFilterIsMalformed(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    // Azure Digital Twins instances have a low cap on the number of event routes allowed, so we need to delete the existing\n+    // event routes before each test to make sure that we can add an event route in each test.\n+    @BeforeEach\n+    public void removeAllEventRoutes() {\n+        // Using sync client for simplicity. This function isn't testing the clients, so no need to use both sync and async clients for cleanup\n+        DigitalTwinsClient client = getDigitalTwinsClientBuilder(null, DigitalTwinsServiceVersion.getLatest()).buildClient();\n+        PagedIterable<EventRoute> listedEventRoutes = client.listEventRoutes();\n+        List<String> currentEventRouteIds = new ArrayList<>();\n+        for (EventRoute listedEventRoute : listedEventRoutes) {\n+            currentEventRouteIds.add(listedEventRoute.getId());\n+        }\n+\n+        for (String eventRouteId : currentEventRouteIds) {\n+            logger.info(\"Deleting event route \" + eventRouteId + \" before running the next test\");\n+            client.deleteEventRoute(eventRouteId);\n+        }\n+    }\n+\n+    // Note that only service returned eventRoute instances have their Id field set. When a user builds an instance locally,\n+    // there is no way to assign an Id to it.\n+    protected static void assertEventRoutesEqual(EventRoute expected, String expectedId, EventRoute actual) {\n+        assertEquals(expectedId, actual.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTc3Mg=="}, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNDIzMQ==", "bodyText": "I feel it is more readable, and adds better context to the assertion being done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486704231", "createdAt": "2020-09-11T00:25:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async event route test classes need to implement. It also\n+ * houses some event route test specific helper functions.\n+ */\n+public abstract class EventRoutesTestBase extends DigitalTwinsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(EventRoutesTestBase.class);\n+\n+    static final String EVENT_ROUTE_ENDPOINT_NAME = \"someEventHubEndpoint\";\n+    static final String FILTER = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n+\n+    @Test\n+    public abstract void eventRouteLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getEventRouteThrowsIfEventRouteDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createEventRouteThrowsIfFilterIsMalformed(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    // Azure Digital Twins instances have a low cap on the number of event routes allowed, so we need to delete the existing\n+    // event routes before each test to make sure that we can add an event route in each test.\n+    @BeforeEach\n+    public void removeAllEventRoutes() {\n+        // Using sync client for simplicity. This function isn't testing the clients, so no need to use both sync and async clients for cleanup\n+        DigitalTwinsClient client = getDigitalTwinsClientBuilder(null, DigitalTwinsServiceVersion.getLatest()).buildClient();\n+        PagedIterable<EventRoute> listedEventRoutes = client.listEventRoutes();\n+        List<String> currentEventRouteIds = new ArrayList<>();\n+        for (EventRoute listedEventRoute : listedEventRoutes) {\n+            currentEventRouteIds.add(listedEventRoute.getId());\n+        }\n+\n+        for (String eventRouteId : currentEventRouteIds) {\n+            logger.info(\"Deleting event route \" + eventRouteId + \" before running the next test\");\n+            client.deleteEventRoute(eventRouteId);\n+        }\n+    }\n+\n+    // Note that only service returned eventRoute instances have their Id field set. When a user builds an instance locally,\n+    // there is no way to assign an Id to it.\n+    protected static void assertEventRoutesEqual(EventRoute expected, String expectedId, EventRoute actual) {\n+        assertEquals(expectedId, actual.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTc3Mg=="}, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNDU5MA==", "bodyText": "You could also do something like:\nassertThat(actual).extracting(\"id\", \"endpointName\", \"filter\")\n                 .doesNotContainNull()\n                 .containsExactly(expectedId, expected.getEndpointName(), expected.getFilter());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486704590", "createdAt": "2020-09-11T00:27:04Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async event route test classes need to implement. It also\n+ * houses some event route test specific helper functions.\n+ */\n+public abstract class EventRoutesTestBase extends DigitalTwinsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(EventRoutesTestBase.class);\n+\n+    static final String EVENT_ROUTE_ENDPOINT_NAME = \"someEventHubEndpoint\";\n+    static final String FILTER = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n+\n+    @Test\n+    public abstract void eventRouteLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getEventRouteThrowsIfEventRouteDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createEventRouteThrowsIfFilterIsMalformed(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    // Azure Digital Twins instances have a low cap on the number of event routes allowed, so we need to delete the existing\n+    // event routes before each test to make sure that we can add an event route in each test.\n+    @BeforeEach\n+    public void removeAllEventRoutes() {\n+        // Using sync client for simplicity. This function isn't testing the clients, so no need to use both sync and async clients for cleanup\n+        DigitalTwinsClient client = getDigitalTwinsClientBuilder(null, DigitalTwinsServiceVersion.getLatest()).buildClient();\n+        PagedIterable<EventRoute> listedEventRoutes = client.listEventRoutes();\n+        List<String> currentEventRouteIds = new ArrayList<>();\n+        for (EventRoute listedEventRoute : listedEventRoutes) {\n+            currentEventRouteIds.add(listedEventRoute.getId());\n+        }\n+\n+        for (String eventRouteId : currentEventRouteIds) {\n+            logger.info(\"Deleting event route \" + eventRouteId + \" before running the next test\");\n+            client.deleteEventRoute(eventRouteId);\n+        }\n+    }\n+\n+    // Note that only service returned eventRoute instances have their Id field set. When a user builds an instance locally,\n+    // there is no way to assign an Id to it.\n+    protected static void assertEventRoutesEqual(EventRoute expected, String expectedId, EventRoute actual) {\n+        assertEquals(expectedId, actual.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTc3Mg=="}, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwODA1NA==", "bodyText": "FYI - https://stackoverflow.com/questions/47969970/assertj-for-a-pojo-how-to-check-each-nested-property-field-in-one-chained-sente?answertab=votes#tab-top", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15063#discussion_r486708054", "createdAt": "2020-09-11T00:40:20Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/EventRoutesTestBase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.EventRoute;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async event route test classes need to implement. It also\n+ * houses some event route test specific helper functions.\n+ */\n+public abstract class EventRoutesTestBase extends DigitalTwinsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(EventRoutesTestBase.class);\n+\n+    static final String EVENT_ROUTE_ENDPOINT_NAME = \"someEventHubEndpoint\";\n+    static final String FILTER = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n+\n+    @Test\n+    public abstract void eventRouteLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getEventRouteThrowsIfEventRouteDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createEventRouteThrowsIfFilterIsMalformed(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    // Azure Digital Twins instances have a low cap on the number of event routes allowed, so we need to delete the existing\n+    // event routes before each test to make sure that we can add an event route in each test.\n+    @BeforeEach\n+    public void removeAllEventRoutes() {\n+        // Using sync client for simplicity. This function isn't testing the clients, so no need to use both sync and async clients for cleanup\n+        DigitalTwinsClient client = getDigitalTwinsClientBuilder(null, DigitalTwinsServiceVersion.getLatest()).buildClient();\n+        PagedIterable<EventRoute> listedEventRoutes = client.listEventRoutes();\n+        List<String> currentEventRouteIds = new ArrayList<>();\n+        for (EventRoute listedEventRoute : listedEventRoutes) {\n+            currentEventRouteIds.add(listedEventRoute.getId());\n+        }\n+\n+        for (String eventRouteId : currentEventRouteIds) {\n+            logger.info(\"Deleting event route \" + eventRouteId + \" before running the next test\");\n+            client.deleteEventRoute(eventRouteId);\n+        }\n+    }\n+\n+    // Note that only service returned eventRoute instances have their Id field set. When a user builds an instance locally,\n+    // there is no way to assign an Id to it.\n+    protected static void assertEventRoutesEqual(EventRoute expected, String expectedId, EventRoute actual) {\n+        assertEquals(expectedId, actual.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTc3Mg=="}, "originalCommit": {"oid": "5210d59c690e88ff0d1755c31a142c830de726db"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1185, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}