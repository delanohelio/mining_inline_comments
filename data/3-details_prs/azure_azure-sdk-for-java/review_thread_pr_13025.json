{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTIxOTgx", "number": 13025, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MjowNVrOENWDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTozNTowNlrOEO1FKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI4MzE5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MjowNVrOGv-c1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1MTo0N1rOGwHsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA==", "bodyText": "Why not update the fetching operation here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r452959444", "createdAt": "2020-07-10T16:52:05Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxMDAyMA==", "bodyText": "It returns Mono<List<FormPage>> other fetching returns Mono<List<RecognizedForm>>\nand FormPage and RecognizedForm has no common parent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453010020", "createdAt": "2020-07-10T18:38:24Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA=="}, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MjAxNg==", "bodyText": "So you just grouped the receipt and form custom form API ?\nbut not the content API?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453052016", "createdAt": "2020-07-10T20:01:00Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA=="}, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MDQxOQ==", "bodyText": "There are two places are using fetchExtractContentResult() method: beginRecognizeContentFromUrl and beginRecognizeContent. I leave it unchange in both place since there is no benefit of doing so.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453090419", "createdAt": "2020-07-10T21:43:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA=="}, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3MA==", "bodyText": "Updated to use the updated fetchingOperation(). Bring the complexity to upper level but it makes code more clean even we added more line of code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453110870", "createdAt": "2020-07-10T22:51:47Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -305,17 +328,23 @@\n      * been cancelled. The completed operation returns a List of {@link FormPage}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code form} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length,\n         RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                contentStreamActivationOperation(form, length, recognizeOptions.getContentType()),\n-                extractContentPollOperation(),\n+                streamActivationOperation(\n+                    contentType -> service.analyzeLayoutAsyncWithResponseAsync(contentType, form, length)\n+                        .map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation()))),\n+                    form, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeLayoutResultWithResponseAsync),\n                 (activationResponse, context) ->\n                     monoError(logger, new RuntimeException(\"Cancellation is not supported\")),\n                 fetchExtractContentResult());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTQ0NA=="}, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg3MDMwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNDowMlrOGwELWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNDowMlrOGwELWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MzI3Mw==", "bodyText": "To make this method common to all the API's we could have it return the modelSimpleResponse and let the respective API's do their conversion toRecognizedForm() or toFormPage?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453053273", "createdAt": "2020-07-10T20:04:02Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,12 +514,17 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n+    /*\n+     * Poller's FETCHING operation that fetch a list of RecognizedForm.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction,\n+        boolean includeFieldElements) {\n+\n         return (pollingContext) -> {\n             try {\n                 final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n+                return fetchingFunction.apply(resultUid)\n                     .map(modelSimpleResponse -> {\n                         throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n                         return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b2ce57dc65b12440bd43b0e303c8f7ab46fc4a"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUxMTY1OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMDoxMlrOGw0sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMDoxMlrOGw0sKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0ODEwNA==", "bodyText": "nit: activationOperation::apply", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453848104", "createdAt": "2020-07-13T18:30:12Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,192 +540,55 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n+                return fetchingFunction.apply(resultUid);\n             } catch (RuntimeException ex) {\n                 return monoError(logger, ex);\n             }\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentStreamActivationOperation(\n-        Flux<ByteBuffer> form, long length, FormContentType contentType) {\n+    /*\n+     * Poller's ACTIVATION operation that takes stream as input.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> streamActivationOperation(\n+        Function<ContentType, Mono<OperationResult>> activationOperation, Flux<ByteBuffer> form,\n+        FormContentType contentType) {\n         return pollingContext -> {\n+            Mono<OperationResult> operationResultMono;\n             try {\n-                Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n                 if (contentType != null) {\n-                    return service.analyzeLayoutAsyncWithResponseAsync(\n-                        ContentType.fromString(contentType.toString()), form, length)\n-                        .map(response -> new OperationResult(parseModelId(\n-                            response.getDeserializedHeaders().getOperationLocation())))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    final ContentType givenContentType = ContentType.fromString(contentType.toString());\n+                    operationResultMono = activationOperation.apply(givenContentType);\n                 } else {\n-                    return detectContentType(form)\n-                        .flatMap(detectedContentType ->\n-                            service.analyzeLayoutAsyncWithResponseAsync(detectedContentType, form, length)\n-                                .map(response -> new OperationResult(\n-                                    parseModelId(response.getDeserializedHeaders().getOperationLocation()))))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    operationResultMono = detectContentType(form)\n+                        .flatMap(detectedContentType -> activationOperation.apply(detectedContentType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d"}, "originalPosition": 426}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUyMzQ2OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMzowNVrOGw0zOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMzowNVrOGw0zOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTkxMw==", "bodyText": "Not sure, if we are using this publisher's value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r453849913", "createdAt": "2020-07-13T18:33:05Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,192 +540,55 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n+                return fetchingFunction.apply(resultUid);\n             } catch (RuntimeException ex) {\n                 return monoError(logger, ex);\n             }\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentStreamActivationOperation(\n-        Flux<ByteBuffer> form, long length, FormContentType contentType) {\n+    /*\n+     * Poller's ACTIVATION operation that takes stream as input.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<OperationResult>> streamActivationOperation(\n+        Function<ContentType, Mono<OperationResult>> activationOperation, Flux<ByteBuffer> form,\n+        FormContentType contentType) {\n         return pollingContext -> {\n+            Mono<OperationResult> operationResultMono;\n             try {\n-                Objects.requireNonNull(form, \"'form' is required and cannot be null.\");\n                 if (contentType != null) {\n-                    return service.analyzeLayoutAsyncWithResponseAsync(\n-                        ContentType.fromString(contentType.toString()), form, length)\n-                        .map(response -> new OperationResult(parseModelId(\n-                            response.getDeserializedHeaders().getOperationLocation())))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    final ContentType givenContentType = ContentType.fromString(contentType.toString());\n+                    operationResultMono = activationOperation.apply(givenContentType);\n                 } else {\n-                    return detectContentType(form)\n-                        .flatMap(detectedContentType ->\n-                            service.analyzeLayoutAsyncWithResponseAsync(detectedContentType, form, length)\n-                                .map(response -> new OperationResult(\n-                                    parseModelId(response.getDeserializedHeaders().getOperationLocation()))))\n-                        .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                    operationResultMono = detectContentType(form)\n+                        .flatMap(detectedContentType -> activationOperation.apply(detectedContentType));\n                 }\n+                operationResultMono.onErrorMap(Utility::mapToHttpResponseExceptionIfExist);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9adaf530fdc27f5804aff955ff57651bcdfd15d"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTgxMzkyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOToyNDoxMFrOGyMkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOToyNDoxMFrOGyMkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4ODAxMQ==", "bodyText": "nit: rename resultUid to resultUuid", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455288011", "createdAt": "2020-07-15T19:24:10Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -512,56 +540,37 @@\n         };\n     }\n \n-    private Function<PollingContext<OperationResult>, Mono<List<RecognizedForm>>>\n-        fetchExtractReceiptResult(boolean includeFieldElements) {\n-        return (pollingContext) -> {\n-            try {\n-                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());\n-                return service.getAnalyzeReceiptResultWithResponseAsync(resultUid)\n-                    .map(modelSimpleResponse -> {\n-                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());\n-                        return toRecognizedForm(modelSimpleResponse.getValue().getAnalyzeResult(),\n-                            includeFieldElements);\n-                    })\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n-            } catch (RuntimeException ex) {\n-                return monoError(logger, ex);\n-            }\n-        };\n-    }\n+    /*\n+     * Poller's FETCHING operation.\n+     */\n+    private Function<PollingContext<OperationResult>, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingOperation(\n+        Function<UUID, Mono<SimpleResponse<AnalyzeOperationResult>>> fetchingFunction) {\n \n-    private Function<PollingContext<OperationResult>, Mono<OperationResult>> contentAnalyzeActivationOperation(\n-        String formUrl) {\n         return (pollingContext) -> {\n             try {\n-                Objects.requireNonNull(formUrl, \"'formUrl' is required and cannot be null.\");\n-                return service.analyzeLayoutAsyncWithResponseAsync(new SourcePath().setSource(formUrl))\n-                    .map(response ->\n-                        new OperationResult(parseModelId(response.getDeserializedHeaders().getOperationLocation())))\n-                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+                final UUID resultUid = UUID.fromString(pollingContext.getLatestResponse().getValue().getResultId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 390}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTgzNzMyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTozMDo0OFrOGyMzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNjo0OFrOGyQF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5MTc5NA==", "bodyText": "Throwing an exception inside a map operator is odd. In this case, use handle() operator to either sink.error() or sink.next() depending on whether the response is an error or success.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455291794", "createdAt": "2020-07-15T19:30:48Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -434,75 +490,47 @@\n      * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code receipt} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<RecognizedForm>>\n         beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(receipt, \"'receipt' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n+            final boolean isIncludeFieldElements = recognizeOptions.isIncludeFieldElements();\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                receiptStreamActivationOperation(receipt, length,\n-                    recognizeOptions.getContentType(), recognizeOptions.isIncludeFieldElements()),\n-                extractReceiptPollOperation(),\n+                streamActivationOperation(\n+                    (contentType -> service.analyzeReceiptAsyncWithResponseAsync(\n+                        contentType, receipt, length, isIncludeFieldElements).map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation())))),\n+                    receipt, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeReceiptResultWithResponseAsync),\n                 (activationResponse, context) -> monoError(logger,\n                     new RuntimeException(\"Cancellation is not supported\")),\n-                fetchExtractReceiptResult(recognizeOptions.isIncludeFieldElements()));\n+                fetchingOperation(service::getAnalyzeReceiptResultWithResponseAsync)\n+                    .andThen(after -> after.map(modelSimpleResponse -> {\n+                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMTA0NA==", "bodyText": "throwing an exception will be removed. The issue related to the handling failed status is here: #12200", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455321044", "createdAt": "2020-07-15T20:26:00Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -434,75 +490,47 @@\n      * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code receipt} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<RecognizedForm>>\n         beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(receipt, \"'receipt' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n+            final boolean isIncludeFieldElements = recognizeOptions.isIncludeFieldElements();\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                receiptStreamActivationOperation(receipt, length,\n-                    recognizeOptions.getContentType(), recognizeOptions.isIncludeFieldElements()),\n-                extractReceiptPollOperation(),\n+                streamActivationOperation(\n+                    (contentType -> service.analyzeReceiptAsyncWithResponseAsync(\n+                        contentType, receipt, length, isIncludeFieldElements).map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation())))),\n+                    receipt, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeReceiptResultWithResponseAsync),\n                 (activationResponse, context) -> monoError(logger,\n                     new RuntimeException(\"Cancellation is not supported\")),\n-                fetchExtractReceiptResult(recognizeOptions.isIncludeFieldElements()));\n+                fetchingOperation(service::getAnalyzeReceiptResultWithResponseAsync)\n+                    .andThen(after -> after.map(modelSimpleResponse -> {\n+                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5MTc5NA=="}, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTYzNw==", "bodyText": "@mssfang Currently, treat it as the exception will be thrown. Can update this later when we actually onboard the LRO failure handling changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455345637", "createdAt": "2020-07-15T21:06:48Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -434,75 +490,47 @@\n      * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n-     * @throws NullPointerException If {@code recognizeOptions} is {@code null}.\n+     * @throws NullPointerException If {@code receipt} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PollerFlux<OperationResult, List<RecognizedForm>>\n         beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions) {\n         try {\n+            Objects.requireNonNull(receipt, \"'receipt' is required and cannot be null.\");\n+\n             recognizeOptions = getRecognizeOptionsProperties(recognizeOptions);\n+            final boolean isIncludeFieldElements = recognizeOptions.isIncludeFieldElements();\n             return new PollerFlux<>(\n                 recognizeOptions.getPollInterval(),\n-                receiptStreamActivationOperation(receipt, length,\n-                    recognizeOptions.getContentType(), recognizeOptions.isIncludeFieldElements()),\n-                extractReceiptPollOperation(),\n+                streamActivationOperation(\n+                    (contentType -> service.analyzeReceiptAsyncWithResponseAsync(\n+                        contentType, receipt, length, isIncludeFieldElements).map(response -> new OperationResult(\n+                            parseModelId(response.getDeserializedHeaders().getOperationLocation())))),\n+                    receipt, recognizeOptions.getContentType()),\n+                pollingOperation(service::getAnalyzeReceiptResultWithResponseAsync),\n                 (activationResponse, context) -> monoError(logger,\n                     new RuntimeException(\"Cancellation is not supported\")),\n-                fetchExtractReceiptResult(recognizeOptions.isIncludeFieldElements()));\n+                fetchingOperation(service::getAnalyzeReceiptResultWithResponseAsync)\n+                    .andThen(after -> after.map(modelSimpleResponse -> {\n+                        throwIfAnalyzeStatusInvalid(modelSimpleResponse.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5MTc5NA=="}, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTg1MTkzOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTozNTowNlrOGyM8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozMDo1NFrOG1ChwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NDA1Mg==", "bodyText": "What happens if the errorInformationList is null or empty? The status has failed but this method won't throw any exception which might result in the map operation above to continue with the transformation instead of throwing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455294052", "createdAt": "2020-07-15T19:35:06Z", "author": {"login": "srnagar"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -734,4 +623,20 @@ private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProv\n             return new RecognizeOptions();\n         }\n     }\n+\n+    /**\n+     * Helper method that throws a {@link FormRecognizerException} if {@link AnalyzeOperationResult#getStatus()} is\n+     * {@link OperationStatus#FAILED}.\n+     *\n+     * @param analyzeResponse The response returned from the service.\n+     */\n+    private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse) {\n+        if (OperationStatus.FAILED == analyzeResponse.getStatus()) {\n+            List<ErrorInformation> errorInformationList = analyzeResponse.getAnalyzeResult().getErrors();\n+            if (!CoreUtils.isNullOrEmpty(errorInformationList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 581}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMDE3NQ==", "bodyText": "Good point. We are trying to remove the method throwIfAnalyzeStatusInvalid() here and directly throw error when status is failed: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java#L720", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455320175", "createdAt": "2020-07-15T20:24:27Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -734,4 +623,20 @@ private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProv\n             return new RecognizeOptions();\n         }\n     }\n+\n+    /**\n+     * Helper method that throws a {@link FormRecognizerException} if {@link AnalyzeOperationResult#getStatus()} is\n+     * {@link OperationStatus#FAILED}.\n+     *\n+     * @param analyzeResponse The response returned from the service.\n+     */\n+    private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse) {\n+        if (OperationStatus.FAILED == analyzeResponse.getStatus()) {\n+            List<ErrorInformation> errorInformationList = analyzeResponse.getAnalyzeResult().getErrors();\n+            if (!CoreUtils.isNullOrEmpty(errorInformationList)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NDA1Mg=="}, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 581}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0Nzk5Mg==", "bodyText": "What happens if the errorInformationList is null or empty? The status has failed but this method won't throw any exception which might result in the map operation above to continue with the transformation instead of throwing.\n\n@srnagar\nI will cover this in - #12200 (comment).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r455347992", "createdAt": "2020-07-15T21:09:23Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -734,4 +623,20 @@ private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProv\n             return new RecognizeOptions();\n         }\n     }\n+\n+    /**\n+     * Helper method that throws a {@link FormRecognizerException} if {@link AnalyzeOperationResult#getStatus()} is\n+     * {@link OperationStatus#FAILED}.\n+     *\n+     * @param analyzeResponse The response returned from the service.\n+     */\n+    private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse) {\n+        if (OperationStatus.FAILED == analyzeResponse.getStatus()) {\n+            List<ErrorInformation> errorInformationList = analyzeResponse.getAnalyzeResult().getErrors();\n+            if (!CoreUtils.isNullOrEmpty(errorInformationList)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NDA1Mg=="}, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 581}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2OTEyMA==", "bodyText": "Removed this in - https://github.com/Azure/azure-sdk-for-java/pull/13247/files#diff-f3e13c2bd95cecb8a90329a3c1e1f6dbL632", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13025#discussion_r458269120", "createdAt": "2020-07-21T17:30:54Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -734,4 +623,20 @@ private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProv\n             return new RecognizeOptions();\n         }\n     }\n+\n+    /**\n+     * Helper method that throws a {@link FormRecognizerException} if {@link AnalyzeOperationResult#getStatus()} is\n+     * {@link OperationStatus#FAILED}.\n+     *\n+     * @param analyzeResponse The response returned from the service.\n+     */\n+    private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse) {\n+        if (OperationStatus.FAILED == analyzeResponse.getStatus()) {\n+            List<ErrorInformation> errorInformationList = analyzeResponse.getAnalyzeResult().getErrors();\n+            if (!CoreUtils.isNullOrEmpty(errorInformationList)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NDA1Mg=="}, "originalCommit": {"oid": "a0ea7f8d7ae4a7959c76c00b2e4fdf31337e4dc4"}, "originalPosition": 581}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3622, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}