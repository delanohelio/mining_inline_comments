{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjgyMjU2", "number": 15991, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1NjozNlrOEq225g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1MDoyNVrOEuMpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc0NDM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1NjozNlrOHdTe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzozM1rOHdV9zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4OTk0Mg==", "bodyText": "We should mention this default value in the getter and setter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500489942", "createdAt": "2020-10-06T17:56:36Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -32,6 +33,7 @@\n      * Constructor\n      */\n     public DirectConnectionConfig() {\n+        this.connectionEndpointRediscoveryEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b62d6ef3d36ed3b3e0a56d5366ef3ac7fe0a4a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDYzNg==", "bodyText": "added DEFAULT_CONNECTION_ENDPOINT_REDISCOVERY_ENABLED, and mentioned in the getter and setter method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500530636", "createdAt": "2020-10-06T19:03:33Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -32,6 +33,7 @@\n      * Constructor\n      */\n     public DirectConnectionConfig() {\n+        this.connectionEndpointRediscoveryEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4OTk0Mg=="}, "originalCommit": {"oid": "49b62d6ef3d36ed3b3e0a56d5366ef3ac7fe0a4a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzkyMjgzOnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozOTo1N1rOHdVJAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMzoyOVrOHgJObg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNzEyMQ==", "bodyText": "Why are we removing this ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500517121", "createdAt": "2020-10-06T18:39:57Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -157,13 +157,11 @@ public String toString() {\n         @JsonIgnore\n         private final Duration duration;\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n-        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38d31c4ec7c5251cfabb9fb5f281c58b99baad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyOTQzMw==", "bodyText": "\"It is reported, just not stored as a value\" (copied from the original PR).\nThis will not change the rntbd timeline diagnostics. After this change:\n\"serializationDiagnosticsContext\":{\"serializationDiagnosticsList\":[{\"serializationType\":\"ITEM_SERIALIZATION\",\"startTimeUTC\":\"22 Sep 2020 17:40:59.239\",\"endTimeUTC\":\"22 Sep 2020 17:40:59.239\",\"durationInMicroSec\":0},{\"serializationType\":\"PARTITION_KEY_FETCH_SERIALIZATION\",\"startTimeUTC\":\"22 Sep 2020 17:40:59.317\",\"endTimeUTC\":\"22 Sep 2020 17:40:59.323\",\"durationInMicroSec\":5998}]},\"gatewayStatistics\":null,\"systemInformation\":{\"usedMemory\":\"60586 KB\",\"availableMemory\":\"8309590 KB\",\"systemCpuLoad\":\"(2020-09-22T17:40:58.729927700Z 20.1%)\"}}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500529433", "createdAt": "2020-10-06T19:01:17Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -157,13 +157,11 @@ public String toString() {\n         @JsonIgnore\n         private final Duration duration;\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n-        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNzEyMQ=="}, "originalCommit": {"oid": "c38d31c4ec7c5251cfabb9fb5f281c58b99baad8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzYzMA==", "bodyText": "This change has moved to PR #16197 to keep this PR clean.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503467630", "createdAt": "2020-10-12T18:33:29Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -157,13 +157,11 @@ public String toString() {\n         @JsonIgnore\n         private final Duration duration;\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n-        private final long durationInMicroSec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNzEyMQ=="}, "originalCommit": {"oid": "c38d31c4ec7c5251cfabb9fb5f281c58b99baad8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk0MDY5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NDo0NlrOHdVT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjo0M1rOHdV8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxOTkxOQ==", "bodyText": "This header looks different from our other headers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500519919", "createdAt": "2020-10-06T18:44:46Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionEvent.java", "diffHunk": "@@ -0,0 +1,10 @@\n+//------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38d31c4ec7c5251cfabb9fb5f281c58b99baad8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDE5Nw==", "bodyText": "Thanks, changed to be same as other files.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r500530197", "createdAt": "2020-10-06T19:02:43Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionEvent.java", "diffHunk": "@@ -0,0 +1,10 @@\n+//------------------------------------------------------------", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxOTkxOQ=="}, "originalCommit": {"oid": "c38d31c4ec7c5251cfabb9fb5f281c58b99baad8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzU5OTE5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyODo0MFrOHexDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNTo1NlrOHgJBzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzA1MA==", "bodyText": "rolling upgrade, replica, etc, are internal implementation details of the service.\nI wouldn't include the details in the public javadoc.\nhow about this:\nThe connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502023050", "createdAt": "2020-10-08T21:28:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,47 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDM5OQ==", "bodyText": "Thanks Mo, updated for both getter and setter method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503464399", "createdAt": "2020-10-12T18:25:56Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,47 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzA1MA=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzU5OTkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyODo1NVrOHexD_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNjowOFrOHgJCIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzE2Nw==", "bodyText": "ditto as above on the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502023167", "createdAt": "2020-10-08T21:28:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,47 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)\n+     * </ul>\n+     *\n+     * By default, connection endpoint rediscovery is enabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {\n+        return this.connectionEndpointRediscoveryEnabled;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether Direct TCP connection endpoint rediscovery should be enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ4Mg==", "bodyText": "Updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503464482", "createdAt": "2020-10-12T18:26:08Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,47 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)\n+     * </ul>\n+     *\n+     * By default, connection endpoint rediscovery is enabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {\n+        return this.connectionEndpointRediscoveryEnabled;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether Direct TCP connection endpoint rediscovery should be enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that are likely\n+     * to occur:\n+     * <ul>\n+     * <li>During rolling upgrades of a Cosmos instance or\n+     * <li>When a backend node is being decommissioned or restarted (e.g., to restart or remove an unhealthy replica.)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzE2Nw=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzY0MTcyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/AddressResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo0MzoyNlrOHexdIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNzowNVrOHgJDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyOTYwMQ==", "bodyText": "can we ever hit this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502029601", "createdAt": "2020-10-08T21:43:26Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/AddressResolver.java", "diffHunk": "@@ -62,6 +64,11 @@ public void initializeCaches(\n         this.collectionRoutingMapCache = collectionRoutingMapCache;\n     }\n \n+    @Override\n+    public void remove(RxDocumentServiceRequest request, Set<PartitionKeyRangeIdentity> partitionKeyRangeIdentitySet) {\n+        throw new NotImplementedException(\"remove() is not supported in AddressResolver\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDkwMw==", "bodyText": "Rntbd use GlobalAddressResolver, so by theory, we should never hit it.\nBut since I add the remove() at the interface, so has to implement it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503464903", "createdAt": "2020-10-12T18:27:05Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/AddressResolver.java", "diffHunk": "@@ -62,6 +64,11 @@ public void initializeCaches(\n         this.collectionRoutingMapCache = collectionRoutingMapCache;\n     }\n \n+    @Override\n+    public void remove(RxDocumentServiceRequest request, Set<PartitionKeyRangeIdentity> partitionKeyRangeIdentitySet) {\n+        throw new NotImplementedException(\"remove() is not supported in AddressResolver\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyOTYwMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzY1NDcxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo0Nzo1NFrOHexk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0OTowMVrOHgLIeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTU4OA==", "bodyText": "please add this to diagnostics similar to this PR:\n#15738", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502031588", "createdAt": "2020-10-08T21:47:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -300,6 +369,9 @@ private void throwIfClosed() {\n         @JsonProperty()\n         private final Duration connectionAcquisitionTimeout;\n \n+        @JsonProperty()\n+        private final boolean connectionEndpointRediscoveryEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDk0OA==", "bodyText": "Added.\nreturn Strings.lenientFormat(\"(cto:%s, rto:%s, icto:%s, ieto:%s, mcpe:%s, mrpc:%s, cere:%s)\",\nrntbdOptions.connectTimeout(),\nrntbdOptions.requestTimeout(),\nrntbdOptions.idleChannelTimeout(),\nrntbdOptions.idleEndpointTimeout(),\nrntbdOptions.maxChannelsPerEndpoint(),\nrntbdOptions.maxRequestsPerChannel(),\nrntbdOptions.isConnectionEndpointRediscoveryEnabled());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503464948", "createdAt": "2020-10-12T18:27:13Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -300,6 +369,9 @@ private void throwIfClosed() {\n         @JsonProperty()\n         private final Duration connectionAcquisitionTimeout;\n \n+        @JsonProperty()\n+        private final boolean connectionEndpointRediscoveryEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTU4OA=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MzgzNA==", "bodyText": "cere -> cer to be consistent with other true/false formatting names.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503473834", "createdAt": "2020-10-12T18:48:19Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -300,6 +369,9 @@ private void throwIfClosed() {\n         @JsonProperty()\n         private final Duration connectionAcquisitionTimeout;\n \n+        @JsonProperty()\n+        private final boolean connectionEndpointRediscoveryEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTU4OA=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5ODg3Mw==", "bodyText": "updated.\n'e' is for enabled, so we should ignore it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503498873", "createdAt": "2020-10-12T19:49:01Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -300,6 +369,9 @@ private void throwIfClosed() {\n         @JsonProperty()\n         private final Duration connectionAcquisitionTimeout;\n \n+        @JsonProperty()\n+        private final boolean connectionEndpointRediscoveryEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTU4OA=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzY1Njg0OnYy", "diffSide": "LEFT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo0ODo0OFrOHexmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyOTowNFrOHgJG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTkyMQ==", "bodyText": "why is this removed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502031921", "createdAt": "2020-10-08T21:48:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -525,7 +599,6 @@ public String toString() {\n          *   \"maxRequestsPerChannel\": 30,\n          *   \"maxConcurrentRequestsPerEndpointOverride\": 500,\n          *   \"receiveHangDetectionTime\": \"PT1M5S\",\n-         *   \"requestExpiryInterval\": \"PT5S\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NTcwOQ==", "bodyText": "My understanding is that this config is not used anywhere.\nAlso moved this change to PR #16197 to keep this PR clean", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503465709", "createdAt": "2020-10-12T18:29:04Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -525,7 +599,6 @@ public String toString() {\n          *   \"maxRequestsPerChannel\": 30,\n          *   \"maxConcurrentRequestsPerEndpointOverride\": 500,\n          *   \"receiveHangDetectionTime\": \"PT1M5S\",\n-         *   \"requestExpiryInterval\": \"PT5S\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTkyMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mzg5MTUzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMzoxMjo1MlrOHezxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyOToyN1rOHgJHqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2NzYxNA==", "bodyText": "do we translate ChannelAcquisitionException to GoneException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502067614", "createdAt": "2020-10-08T23:12:52Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -123,18 +121,18 @@\n         new ClosedChannelException(), RntbdClientChannelPool.class, \"acquire\");\n \n     private static final IllegalStateException POOL_CLOSED_ON_ACQUIRE = ThrowableUtil.unknownStackTrace(\n-        new StacklessIllegalStateException(\"service endpoint was closed while acquiring a channel\"),\n+        new ChannelAcquisitionException(\"service endpoint was closed while acquiring a channel\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NTg5OQ==", "bodyText": "Yes, it will be translated into GoneException.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503465899", "createdAt": "2020-10-12T18:29:27Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -123,18 +121,18 @@\n         new ClosedChannelException(), RntbdClientChannelPool.class, \"acquire\");\n \n     private static final IllegalStateException POOL_CLOSED_ON_ACQUIRE = ThrowableUtil.unknownStackTrace(\n-        new StacklessIllegalStateException(\"service endpoint was closed while acquiring a channel\"),\n+        new ChannelAcquisitionException(\"service endpoint was closed while acquiring a channel\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2NzYxNA=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzkwMDA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMzoxNDo1NlrOHez2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDoyMjoxNFrOHgRW1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2ODkxMQ==", "bodyText": "any reason this is preferred over cause instance of ClosedChannelException ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502068911", "createdAt": "2020-10-08T23:14:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;\n+    private final AtomicBoolean updatingAddressCache = new AtomicBoolean(false);\n+\n+    // endregion\n+\n+    // region Constructors\n+\n+    public RntbdConnectionStateListener(final IAddressResolver addressResolver, final RntbdEndpoint endpoint) {\n+        this.addressResolver = checkNotNull(addressResolver, \"expected non-null addressResolver\");\n+        this.endpoint = checkNotNull(endpoint, \"expected non-null endpoint\");\n+        this.partitionAddressCache = ConcurrentHashMap.newKeySet();\n+    }\n+\n+    // endregion\n+\n+    // region Methods\n+\n+    public void onException(final RxDocumentServiceRequest request, Throwable exception) {\n+        checkNotNull(request, \"expect non-null request\");\n+        checkNotNull(exception, \"expect non-null exception\");\n+\n+        if (exception instanceof GoneException) {\n+            final Throwable cause = exception.getCause();\n+\n+            if (cause != null) {\n+\n+                // GoneException was produced by the client, not the server\n+                //\n+                // This could occur for example:\n+                //\n+                // * an operation fails due to an IOException which indicates a connection reset by the server,\n+                // * a channel closes unexpectedly because the server stopped taking requests, or\n+                // * an error was detected by the transport client (e.g., IllegalStateException)\n+                // * a request timed out in pending acquisition queue\n+                // * a request failed fast in admission control layer due to high load\n+                // * channel connect timed out\n+                //\n+                // Currently, only ClosedChannelException will raise onConnectionEvent since it is more sure of a signal the server is going down.\n+\n+                if (cause instanceof IOException) {\n+                    final Class<?> type = cause.getClass();\n+\n+                    if (type == ClosedChannelException.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMDg1NA==", "bodyText": "changed to instance of ClosedChannelException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503600854", "createdAt": "2020-10-13T00:22:14Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;\n+    private final AtomicBoolean updatingAddressCache = new AtomicBoolean(false);\n+\n+    // endregion\n+\n+    // region Constructors\n+\n+    public RntbdConnectionStateListener(final IAddressResolver addressResolver, final RntbdEndpoint endpoint) {\n+        this.addressResolver = checkNotNull(addressResolver, \"expected non-null addressResolver\");\n+        this.endpoint = checkNotNull(endpoint, \"expected non-null endpoint\");\n+        this.partitionAddressCache = ConcurrentHashMap.newKeySet();\n+    }\n+\n+    // endregion\n+\n+    // region Methods\n+\n+    public void onException(final RxDocumentServiceRequest request, Throwable exception) {\n+        checkNotNull(request, \"expect non-null request\");\n+        checkNotNull(exception, \"expect non-null exception\");\n+\n+        if (exception instanceof GoneException) {\n+            final Throwable cause = exception.getCause();\n+\n+            if (cause != null) {\n+\n+                // GoneException was produced by the client, not the server\n+                //\n+                // This could occur for example:\n+                //\n+                // * an operation fails due to an IOException which indicates a connection reset by the server,\n+                // * a channel closes unexpectedly because the server stopped taking requests, or\n+                // * an error was detected by the transport client (e.g., IllegalStateException)\n+                // * a request timed out in pending acquisition queue\n+                // * a request failed fast in admission control layer due to high load\n+                // * channel connect timed out\n+                //\n+                // Currently, only ClosedChannelException will raise onConnectionEvent since it is more sure of a signal the server is going down.\n+\n+                if (cause instanceof IOException) {\n+                    final Class<?> type = cause.getClass();\n+\n+                    if (type == ClosedChannelException.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2ODkxMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzkwNDc5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMzoxNjowMFrOHez5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMjowMlrOHgJL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2OTU2Mg==", "bodyText": "why? is this related to this PR? or an unrelated bug?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502069562", "createdAt": "2020-10-08T23:16:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequest.java", "diffHunk": "@@ -54,7 +55,7 @@ public static RntbdRequest decode(final ByteBuf in) {\n             throw new IllegalStateException(reason);\n         }\n \n-        final int start = in.readerIndex();\n+        final int start = in.writerIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Njk4NQ==", "bodyText": "As mentioned in the original PR #14697, we have to use writerIndex.\nAlso moved this change to PR #16197", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503466985", "createdAt": "2020-10-12T18:32:02Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequest.java", "diffHunk": "@@ -54,7 +55,7 @@ public static RntbdRequest decode(final ByteBuf in) {\n             throw new IllegalStateException(reason);\n         }\n \n-        final int start = in.readerIndex();\n+        final int start = in.writerIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA2OTU2Mg=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzkxMDAwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMzoxNzoxMVrOHez8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNToyNFrOHgxwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA3MDI3Mg==", "bodyText": "why flush is required here? I don't think this is in the scope of the connection listener. am I right?\nplease undo this if unrelated to this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502070272", "createdAt": "2020-10-08T23:17:11Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -506,7 +506,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTc3OA==", "bodyText": "Has removed this change to PR #16197", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r504131778", "createdAt": "2020-10-13T17:25:24Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -506,7 +506,7 @@ public void write(final ChannelHandlerContext context, final Object message, fin\n \n         if (message == RntbdHealthCheckRequest.MESSAGE) {\n \n-            context.write(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {\n+            context.writeAndFlush(RntbdHealthCheckRequest.MESSAGE, promise).addListener(completed -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA3MDI3Mg=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mzk3Nzc3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMzo0MDoyMFrOHe0kdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowNjowOFrOHgzMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4MDYzMQ==", "bodyText": "RntbdConnectionStateListener::partitionAddressCache  is a local cache and can be stale. as a result of that RntbdConnectionStateListener may remove addresses of unrelated pkranges causing unnecessary address refresh.\nConsider this scenario:\n\nPKR1, PKR2, PKR3 are hosted on the same physical node.\nrequest1 with PKR1, request2 with PKR2, and request3 with PKR3 are sent and as a result RntbdConnectionStateListener:partitionAddressCache is populated with PKR1, PKR2, and PKR3.\ndue to  partition movement PKR1 moves out of the physical node, but PKR2 and PKR3 stay on the node.\nnow the node hosting PKR2 and PKR3 shuts down.\nRntbdConnectionStateListener thinks PKR1 is still on this physical node, and hence will remove addresses of PKR1, PKR2, and PKR3. But PKR1 addresses shouldn't have been removed!!.\nthis will result in unnecessary address refresh for PKR1.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r502080631", "createdAt": "2020-10-08T23:40:20Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzQ1MQ==", "bodyText": "Yea, based on the current implementation, it could happen.\nWill think more and check how .net implement and then update here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r503467451", "createdAt": "2020-10-12T18:33:05Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4MDYzMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5NTEzNQ==", "bodyText": "let's track this as an optimization for later. (out of the scope of this PR)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r504095135", "createdAt": "2020-10-13T16:31:42Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4MDYzMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NTI1Ng==", "bodyText": "Created github working item to track this issue:\n\n#16245\n#16246", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r504155256", "createdAt": "2020-10-13T18:06:08Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConnectionStateListener.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.implementation.GoneException;\n+import com.azure.cosmos.implementation.RxDocumentServiceRequest;\n+import com.azure.cosmos.implementation.directconnectivity.IAddressResolver;\n+import com.azure.cosmos.implementation.routing.PartitionKeyRangeIdentity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.channels.ClosedChannelException;\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+public class RntbdConnectionStateListener {\n+    // region Fields\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdConnectionStateListener.class);\n+\n+    private final IAddressResolver addressResolver;\n+    private final RntbdEndpoint endpoint;\n+    private final Set<PartitionKeyRangeIdentity> partitionAddressCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4MDYzMQ=="}, "originalCommit": {"oid": "116d4c238dff9cdd6fb0456a4ad82fab5e5aa82a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc3MDQ0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1MDoxOFrOHicvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyODo1M1rOHl1KRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDQ5MA==", "bodyText": "please add Beta annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r505884490", "createdAt": "2020-10-15T21:50:18Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,37 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148f92be5ab600cf8769602495e0440cba72e9a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMDM0MQ==", "bodyText": "Added, thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r509430341", "createdAt": "2020-10-21T16:28:53Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,37 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDQ5MA=="}, "originalCommit": {"oid": "2148f92be5ab600cf8769602495e0440cba72e9a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc3MTA0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1MDoyNVrOHicvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyODo0NVrOHl1J5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDU5Ng==", "bodyText": "please add Beta annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r505884596", "createdAt": "2020-10-15T21:50:25Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,37 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {\n+        return this.connectionEndpointRediscoveryEnabled;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether Direct TCP connection endpoint rediscovery should be enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @param connectionEndpointRediscoveryEnabled {@code true} if connection endpoint rediscovery is enabled; {@code\n+     *                                             false} otherwise.\n+     *\n+     * @return the {@linkplain DirectConnectionConfig}.\n+     */\n+    public DirectConnectionConfig setConnectionEndpointRediscoveryEnabled(boolean connectionEndpointRediscoveryEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148f92be5ab600cf8769602495e0440cba72e9a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMDI0Nw==", "bodyText": "Added. Thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15991#discussion_r509430247", "createdAt": "2020-10-21T16:28:45Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/DirectConnectionConfig.java", "diffHunk": "@@ -40,6 +43,37 @@ public DirectConnectionConfig() {\n         this.requestTimeout = DEFAULT_REQUEST_TIMEOUT;\n     }\n \n+    /**\n+     * Gets a value indicating whether Direct TCP connection endpoint rediscovery is enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @return {@code true} if Direct TCP connection endpoint rediscovery is enabled; {@code false} otherwise.\n+     */\n+    public boolean isConnectionEndpointRediscoveryEnabled() {\n+        return this.connectionEndpointRediscoveryEnabled;\n+    }\n+\n+    /**\n+     * Sets a value indicating whether Direct TCP connection endpoint rediscovery should be enabled.\n+     * <p>\n+     * The connection endpoint rediscovery feature is designed to reduce and spread-out latency spikes that may occur during maintenance operations.\n+     *\n+     * By default, connection endpoint rediscovery is disabled.\n+     *\n+     * @param connectionEndpointRediscoveryEnabled {@code true} if connection endpoint rediscovery is enabled; {@code\n+     *                                             false} otherwise.\n+     *\n+     * @return the {@linkplain DirectConnectionConfig}.\n+     */\n+    public DirectConnectionConfig setConnectionEndpointRediscoveryEnabled(boolean connectionEndpointRediscoveryEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDU5Ng=="}, "originalCommit": {"oid": "2148f92be5ab600cf8769602495e0440cba72e9a"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3584, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}