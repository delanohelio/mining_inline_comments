{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjIwNTcx", "number": 7735, "title": "Added read to file support for datalake", "bodyText": "", "createdAt": "2020-01-27T17:45:57Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735", "merged": true, "mergeCommit": {"oid": "b59f999110e7a12004b51918b04b7ede444824a5"}, "closed": true, "closedAt": "2020-02-24T16:21:57Z", "author": {"login": "gapra-msft"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9oZdLgH2gAyMzY3NjIwNTcxOjI3NGI5MDQ3OGY0ODAxOTI5ODYwNmE2MjAzOWQ3ZjkwNDJmYzkyYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGp3MGgH2gAyMzY3NjIwNTcxOmFkMjljNGFkZjdkNzMzMzQ4MjEyZTc2ODFmZmNiMTQ1MDc0YTI4ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "274b90478f48019298606a62039d7f9042fc92a5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/274b90478f48019298606a62039d7f9042fc92a5", "committedDate": "2020-01-25T00:28:19Z", "message": "Added download overloads to file client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b38f365258a944c7961abb83e5ca14094d690a3", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b38f365258a944c7961abb83e5ca14094d690a3", "committedDate": "2020-01-27T17:45:07Z", "message": "Added samples and test recordings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41743b12f38cc78697c949d7f6e6ca3f78d98d32", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/41743b12f38cc78697c949d7f6e6ca3f78d98d32", "committedDate": "2020-01-27T17:47:04Z", "message": "removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a1b09616188d839ee24b88485984d0c999176d0", "committedDate": "2020-01-27T19:14:59Z", "message": "Changed fileRange name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDM4ODk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#pullrequestreview-349038895", "createdAt": "2020-01-27T23:08:26Z", "commit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzowODoyNlrOFiUl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzowODoyNlrOFiUl6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMzI4OQ==", "bodyText": "This shouldn't be true in blobs anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#discussion_r371533289", "createdAt": "2020-01-27T23:08:26Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -368,6 +376,131 @@ public String getFileName() {\n         }\n     }\n \n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFile#String}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @return A reactive response containing the file properties and metadata.\n+     */\n+    public Mono<PathProperties> downloadToFile(String filePath) {\n+        return downloadToFile(filePath, false);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>If overwrite is set to false, the file will be created and must not exist, if the file already exists a\n+     * {@link FileAlreadyExistsException} will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFile#String-boolean}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param overwrite Whether or not to overwrite the file, should the file exist.\n+     * @return A reactive response containing the file properties and metadata.\n+     */\n+    public Mono<PathProperties> downloadToFile(String filePath, boolean overwrite) {\n+        Set<OpenOption> openOptions = null;\n+        if (overwrite) {\n+            openOptions = new HashSet<>();\n+            openOptions.add(StandardOpenOption.CREATE);\n+            openOptions.add(StandardOpenOption.TRUNCATE_EXISTING); // If the file already exists and it is opened\n+            // for WRITE access, then its length is truncated to 0.\n+            openOptions.add(StandardOpenOption.READ);\n+            openOptions.add(StandardOpenOption.WRITE);\n+        }\n+        return downloadToFileWithResponse(filePath, null, null, null, null, false, openOptions)\n+            .flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p>This method makes an extra HTTP call to get the length of the file in the beginning. To avoid this extra", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQyMzIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#pullrequestreview-349042321", "createdAt": "2020-01-27T23:16:30Z", "commit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNjozMVrOFiUxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNjozMVrOFiUxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjE2NA==", "bodyText": "Can we converge on using the compare files method we have for blobs? It might actually be worthwhile to have a test common at some point...\nAnd testing a few different data sizes and different values for the ParallelTransferOptions would be good, too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#discussion_r371536164", "createdAt": "2020-01-27T23:16:31Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/test/java/com/azure/storage/file/datalake/FileAPITest.groovy", "diffHunk": "@@ -1021,6 +1026,112 @@ class FileAPITest extends APISpec {\n         thrown(NullPointerException)\n     }\n \n+    def \"Download to file exists\"() {\n+        setup:\n+        def testFile = new File(testName + \".txt\")\n+        if (!testFile.exists()) {\n+            assert testFile.createNewFile()\n+        }\n+        fc.append(new ByteArrayInputStream(defaultData.array()), 0, defaultDataSize)\n+        fc.flush(defaultDataSize)\n+\n+        when:\n+        // Default overwrite is false so this should fail\n+        fc.downloadToFile(testFile.getPath())\n+\n+        then:\n+        def ex = thrown(UncheckedIOException)\n+        ex.getCause() instanceof FileAlreadyExistsException\n+\n+        cleanup:\n+        testFile.delete()\n+    }\n+\n+    def \"Download to file exists succeeds\"() {\n+        setup:\n+        def testFile = new File(testName + \".txt\")\n+        if (!testFile.exists()) {\n+            assert testFile.createNewFile()\n+        }\n+        fc.append(new ByteArrayInputStream(defaultData.array()), 0, defaultDataSize)\n+        fc.flush(defaultDataSize)\n+\n+        when:\n+        fc.downloadToFile(testFile.getPath(), true)\n+\n+        then:\n+        new String(Files.readAllBytes(testFile.toPath()), StandardCharsets.UTF_8) == defaultText", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg3OTg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#pullrequestreview-349087985", "createdAt": "2020-01-28T01:40:30Z", "commit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MDozMFrOFiXFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MTowN1rOFiXF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDE2Ng==", "bodyText": "Given this will be the first time the API is present in Datalake is there a need to include both WithResponse APIs? Instead could we just keep this one and remove the one that doesn't take an OpenOption Set?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#discussion_r371574166", "createdAt": "2020-01-28T01:40:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -368,6 +376,131 @@ public String getFileName() {\n         }\n     }\n \n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFile#String}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @return A reactive response containing the file properties and metadata.\n+     */\n+    public Mono<PathProperties> downloadToFile(String filePath) {\n+        return downloadToFile(filePath, false);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>If overwrite is set to false, the file will be created and must not exist, if the file already exists a\n+     * {@link FileAlreadyExistsException} will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFile#String-boolean}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param overwrite Whether or not to overwrite the file, should the file exist.\n+     * @return A reactive response containing the file properties and metadata.\n+     */\n+    public Mono<PathProperties> downloadToFile(String filePath, boolean overwrite) {\n+        Set<OpenOption> openOptions = null;\n+        if (overwrite) {\n+            openOptions = new HashSet<>();\n+            openOptions.add(StandardOpenOption.CREATE);\n+            openOptions.add(StandardOpenOption.TRUNCATE_EXISTING); // If the file already exists and it is opened\n+            // for WRITE access, then its length is truncated to 0.\n+            openOptions.add(StandardOpenOption.READ);\n+            openOptions.add(StandardOpenOption.WRITE);\n+        }\n+        return downloadToFileWithResponse(filePath, null, null, null, null, false, openOptions)\n+            .flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p>This method makes an extra HTTP call to get the length of the file in the beginning. To avoid this extra\n+     * call, provide the {@link FileRange} parameter.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFileWithResponse#String-FileRange-ParallelTransferOptions-DownloadRetryOptions-DataLakeRequestConditions-boolean}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param range {@link FileRange}\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} to use to download to file. Number of parallel\n+     * transfers parameter is ignored.\n+     * @param options {@link DownloadRetryOptions}\n+     * @param requestConditions {@link DataLakeRequestConditions}\n+     * @param rangeGetContentMd5 Whether the contentMD5 for the specified file range should be returned.\n+     * @return A reactive response containing the file properties and metadata.\n+     * @throws IllegalArgumentException If {@code blockSize} is less than 0 or greater than 100MB.\n+     * @throws UncheckedIOException If an I/O error occurs.\n+     */\n+    public Mono<Response<PathProperties>> downloadToFileWithResponse(String filePath, FileRange range,\n+        ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options,\n+        DataLakeRequestConditions requestConditions, boolean rangeGetContentMd5) {\n+        return downloadToFileWithResponse(filePath, range, parallelTransferOptions, options, requestConditions,\n+            rangeGetContentMd5, null);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>By default the file will be created and must not exist, if the file already exists a\n+     * {@link FileAlreadyExistsException} will be thrown. To override this behavior, provide appropriate\n+     * {@link OpenOption OpenOptions} </p>\n+     *\n+     * <p>This method makes an extra HTTP call to get the length of the file in the beginning. To avoid this extra\n+     * call, provide the {@link FileRange} parameter.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileAsyncClient.downloadToFileWithResponse#String-FileRange-ParallelTransferOptions-DownloadRetryOptions-DataLakeRequestConditions-boolean-Set}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param range {@link FileRange}\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} to use to download to file. Number of parallel\n+     * transfers parameter is ignored.\n+     * @param options {@link DownloadRetryOptions}\n+     * @param requestConditions {@link DataLakeRequestConditions}\n+     * @param rangeGetContentMd5 Whether the contentMD5 for the specified file range should be returned.\n+     * @param openOptions {@link OpenOption OpenOptions} to use to configure how to open or create the file.\n+     * @return A reactive response containing the file properties and metadata.\n+     * @throws IllegalArgumentException If {@code blockSize} is less than 0 or greater than 100MB.\n+     * @throws UncheckedIOException If an I/O error occurs.\n+     */\n+    public Mono<Response<PathProperties>> downloadToFileWithResponse(String filePath, FileRange range,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDI2Mg==", "bodyText": "Same comment as the async client with removing the other WithResponse API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#discussion_r371574262", "createdAt": "2020-01-28T01:41:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileClient.java", "diffHunk": "@@ -312,6 +319,140 @@ public FileReadResponse readWithResponse(OutputStream stream, FileRange range, D\n         }, logger);\n     }\n \n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileClient.downloadToFile#String}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @return The file properties and metadata.\n+     * @throws UncheckedIOException If an I/O error occurs\n+     */\n+    public PathProperties downloadToFile(String filePath) {\n+        return downloadToFile(filePath, false);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>If overwrite is set to false, the file will be created and must not exist, if the file already exists a\n+     * {@link FileAlreadyExistsException} will be thrown.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileClient.downloadToFile#String-boolean}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param overwrite Whether or not to overwrite the file, should the file exist.\n+     * @return The file properties and metadata.\n+     * @throws UncheckedIOException If an I/O error occurs\n+     */\n+    public PathProperties downloadToFile(String filePath, boolean overwrite) {\n+        Set<OpenOption> openOptions = null;\n+        if (overwrite) {\n+            openOptions = new HashSet<>();\n+            openOptions.add(StandardOpenOption.CREATE);\n+            openOptions.add(StandardOpenOption.TRUNCATE_EXISTING); // If the file already exists and it is opened\n+            // for WRITE access, then its length is truncated to 0.\n+            openOptions.add(StandardOpenOption.READ);\n+            openOptions.add(StandardOpenOption.WRITE);\n+        }\n+        return downloadToFileWithResponse(filePath, null, null, null, null, false, openOptions, null, Context.NONE)\n+            .getValue();\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>The file will be created and must not exist, if the file already exists a {@link FileAlreadyExistsException}\n+     * will be thrown.</p>\n+     *\n+     * <p>This method makes an extra HTTP call to get the length of the file in the beginning. To avoid this extra\n+     * call, provide the {@link FileRange} parameter.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileClient.downloadToFileWithResponse#String-FileRange-ParallelTransferOptions-DownloadRetryOptions-DataLakeRequestConditions-boolean-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param range {@link FileRange}\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} to use to download to file. Number of parallel\n+     * transfers parameter is ignored.\n+     * @param downloadRetryOptions {@link DownloadRetryOptions}\n+     * @param requestConditions {@link DataLakeRequestConditions}\n+     * @param rangeGetContentMd5 Whether the contentMD5 for the specified file range should be returned.\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the file properties and metadata.\n+     * @throws UncheckedIOException If an I/O error occurs.\n+     */\n+    public Response<PathProperties> downloadToFileWithResponse(String filePath, FileRange range,\n+        ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions,\n+        DataLakeRequestConditions requestConditions, boolean rangeGetContentMd5, Duration timeout, Context context) {\n+        return downloadToFileWithResponse(filePath, range, parallelTransferOptions, downloadRetryOptions,\n+            requestConditions, rangeGetContentMd5, null, timeout, context);\n+    }\n+\n+    /**\n+     * Downloads the entire file into a file specified by the path.\n+     *\n+     * <p>By default the file will be created and must not exist, if the file already exists a\n+     * {@link FileAlreadyExistsException} will be thrown. To override this behavior, provide appropriate\n+     * {@link OpenOption OpenOptions} </p>\n+     *\n+     * <p>This method makes an extra HTTP call to get the length of the file in the beginning. To avoid this extra\n+     * call, provide the {@link FileRange} parameter.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakeFileClient.downloadToFileWithResponse#String-FileRange-ParallelTransferOptions-DownloadRetryOptions-DataLakeRequestConditions-boolean-Set-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\">Azure Docs</a></p>\n+     *\n+     * @param filePath A {@link String} representing the filePath where the downloaded data will be written.\n+     * @param range {@link FileRange}\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} to use to download to file. Number of parallel\n+     * transfers parameter is ignored.\n+     * @param downloadRetryOptions {@link DownloadRetryOptions}\n+     * @param requestConditions {@link DataLakeRequestConditions}\n+     * @param rangeGetContentMd5 Whether the contentMD5 for the specified file range should be returned.\n+     * @param openOptions {@link OpenOption OpenOptions} to use to configure how to open or create the file.\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the file properties and metadata.\n+     * @throws UncheckedIOException If an I/O error occurs.\n+     */\n+    public Response<PathProperties> downloadToFileWithResponse(String filePath, FileRange range,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1b09616188d839ee24b88485984d0c999176d0"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc76933c08db100c25595f752f02fd07ffaf86dc", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc76933c08db100c25595f752f02fd07ffaf86dc", "committedDate": "2020-01-28T20:04:44Z", "message": "Modified stale javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f390901c31bdea19c16fd82fd1037da60ac1a3b6", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f390901c31bdea19c16fd82fd1037da60ac1a3b6", "committedDate": "2020-01-31T17:56:30Z", "message": "Merge branch 'master' into storage/ADLSDownload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29399fcddafd5c1552ac5a3725a087861d0ff617", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29399fcddafd5c1552ac5a3725a087861d0ff617", "committedDate": "2020-01-31T19:15:06Z", "message": "removed some overloads"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzIyNzE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#pullrequestreview-351722718", "createdAt": "2020-01-31T19:22:34Z", "commit": {"oid": "29399fcddafd5c1552ac5a3725a087861d0ff617"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzIzNzc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7735#pullrequestreview-351723777", "createdAt": "2020-01-31T19:24:24Z", "commit": {"oid": "29399fcddafd5c1552ac5a3725a087861d0ff617"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec454a9d9218840fd7e970f5c9ee4d8d53c5fb4", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fec454a9d9218840fd7e970f5c9ee4d8d53c5fb4", "committedDate": "2020-02-20T18:55:47Z", "message": "renamed download to file to read to file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc11e8db1b7010197a9d017cc2cb4827b7772f39", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc11e8db1b7010197a9d017cc2cb4827b7772f39", "committedDate": "2020-02-20T18:56:49Z", "message": "changed javadoc names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63a27e392acaa2306edf084e873b96a6865c704c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/63a27e392acaa2306edf084e873b96a6865c704c", "committedDate": "2020-02-21T23:28:14Z", "message": "Merge branch 'master' into storage/ADLSDownload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d2852604a1fa5c3e3d40ed247d08b8c7659724", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/13d2852604a1fa5c3e3d40ed247d08b8c7659724", "committedDate": "2020-02-22T00:32:41Z", "message": "added file read to file tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc39448187677ab04f6e7d1ea0388599d9b7c1f2", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc39448187677ab04f6e7d1ea0388599d9b7c1f2", "committedDate": "2020-02-22T00:42:57Z", "message": "removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cafe310a71c4efd4476d46320ae0c66c985abdd", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0cafe310a71c4efd4476d46320ae0c66c985abdd", "committedDate": "2020-02-22T01:04:40Z", "message": "changed error parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad29c4adf7d733348212e7681ffcb145074a2889", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad29c4adf7d733348212e7681ffcb145074a2889", "committedDate": "2020-02-22T01:16:01Z", "message": "removed unused import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2586, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}