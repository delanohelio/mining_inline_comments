{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDg4Mzk3", "number": 8391, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMToxMlrODlDgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozMToyNFrODlrVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTgxMjU5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMToxMlrOFxuWFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1Nzo1NVrOFx7mog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4Mzg2Mg==", "bodyText": "if the method takes the Context parameter, shouldn't it be withResponse?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387683862", "createdAt": "2020-03-04T14:01:12Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -71,6 +66,46 @@ public void useAadAsyncClient() {\n             .buildAsyncClient();\n     }\n \n+    /**\n+     * Code snippet for rotating API key of the client\n+     */\n+    public void rotatingApiKey() {\n+        TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(\"{api_key}\");\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .apiKey(credential)\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        credential.updateCredential(\"{new_api_key}\");\n+    }\n+\n+    /**\n+     * Code snippet for handling exception\n+     */\n+    public void handlingException() {\n+        List<DetectLanguageInput> inputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n+            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        try {\n+            textAnalyticsClient.detectLanguageBatch(inputs, null, Context.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTA5MA==", "bodyText": "There will be no \"withResponse\" for pagination. See the pagination example: https://azure.github.io/azure-sdk/java_design.html#pagination", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387901090", "createdAt": "2020-03-04T19:57:55Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -71,6 +66,46 @@ public void useAadAsyncClient() {\n             .buildAsyncClient();\n     }\n \n+    /**\n+     * Code snippet for rotating API key of the client\n+     */\n+    public void rotatingApiKey() {\n+        TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(\"{api_key}\");\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .apiKey(credential)\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        credential.updateCredential(\"{new_api_key}\");\n+    }\n+\n+    /**\n+     * Code snippet for handling exception\n+     */\n+    public void handlingException() {\n+        List<DetectLanguageInput> inputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n+            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        try {\n+            textAnalyticsClient.detectLanguageBatch(inputs, null, Context.NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4Mzg2Mg=="}, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTgxNzM4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMjozM1rOFxuZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTo1MjoxMFrOFyHJMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDY0MQ==", "bodyText": "should this using the unreleased_core rather than current?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387684641", "createdAt": "2020-03-04T14:02:33Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "diffHunk": "@@ -36,12 +36,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5MDE2Mw==", "bodyText": "Yup. change to\n<dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-core</artifactId>\n      <version>1.3.0-beta.2</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n</dependency>\n<dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-core-http-netty</artifactId>\n      <version>1.4.0-beta.2</version> <!-- {x-version-update;unreleased_com.azure:azure-core-http-netty;dependency} -->\n</dependency>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388090163", "createdAt": "2020-03-05T05:52:10Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "diffHunk": "@@ -36,12 +36,12 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDY0MQ=="}, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTgxOTM5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMzoxMVrOFxuacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMzoxMVrOFxuacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDk3OA==", "bodyText": "nit : containing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387684978", "createdAt": "2020-03-04T14:03:11Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTgzNzYwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowNzo1OFrOFxullw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowNzo1OFrOFxullw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzgzMQ==", "bodyText": "Need to make sure that the naming is consistent for this one. Either documents, inputs or textInputs etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387687831", "createdAt": "2020-03-04T14:07:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg0ODc4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxMDo0NlrOFxusIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowNzo1MFrOFyiQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ==", "bodyText": "Can combine analyzeSentimentBatch and anlayzeSentimentBatchWithContext to be a single method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387689505", "createdAt": "2020-03-04T14:10:46Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MTg2NA==", "bodyText": "analyzeSentimentBatchWithContext takes context and but analyzeSentimentBatch doesn't. Not found a way to make them be a single method. Do you have a suggestion on how?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388471864", "createdAt": "2020-03-05T18:13:14Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTAyNw==", "bodyText": "Can't we call analyzeSentimentBatchWithContext from analyzeSentimentBatch and pass Context as Context.NONE, rather than repeating the same code block?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388511027", "createdAt": "2020-03-05T19:23:59Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNDQ5Nw==", "bodyText": "See line 67.\nreturn new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n\nDoes passing Context.None helps here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388534497", "createdAt": "2020-03-05T20:07:50Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg3OTMwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxODozNlrOFxu-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxODozNlrOFxu-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NDI3NA==", "bodyText": "do we need this in a variable here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387694274", "createdAt": "2020-03-04T14:18:36Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return The {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatchWithContext(\n         Iterable<TextDocumentInput> textInputs, TextAnalyticsRequestOptions options, Context context) {\n+\n         Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n \n-        final MultiLanguageBatchInput batchInput = new MultiLanguageBatchInput()\n-            .setDocuments(toMultiLanguageInput(textInputs));\n-        return service.sentimentWithRestResponseAsync(\n-            batchInput,\n-            options == null ? null : options.getModelVersion(),\n-            options == null ? null : options.showStatistics(), context)\n-            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n-            .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n-            .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n-            .map(response -> new SimpleResponse<>(response, toDocumentResultCollection(response.getValue())));\n+        return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) ->\n+            service.sentimentWithRestResponseAsync(\n+                new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                options == null ? null : options.getModelVersion(),\n+                options == null ? null : options.isStatisticsShown(), context)\n+                .doOnSubscribe(ignoredValue ->\n+                    logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                .map(response -> toTextAnalyticsPagedResponse(response))\n+                .flux());\n     }\n \n     /**\n-     * Helper method to convert the service response of {@link SentimentResponse} to {@link DocumentResultCollection}.\n+     * Helper method to convert the service response of {@link SentimentResponse} to {@link TextAnalyticsPagedResponse}\n+     * of {@link AnalyzeSentimentResult}.\n      *\n-     * @param sentimentResponse the {@link SentimentResponse} returned by the service.\n+     * @param response The {@link SimpleResponse} of {@link SentimentResponse} returned by the service.\n      *\n-     * @return the {@link DocumentResultCollection} of {@link AnalyzeSentimentResult} to be returned by the SDK.\n+     * @return The {@link TextAnalyticsPagedResponse} of {@link AnalyzeSentimentResult} returned by the SDK.\n      */\n-    private DocumentResultCollection<AnalyzeSentimentResult> toDocumentResultCollection(\n-        final SentimentResponse sentimentResponse) {\n+    private TextAnalyticsPagedResponse<AnalyzeSentimentResult> toTextAnalyticsPagedResponse(\n+        final SimpleResponse<SentimentResponse> response) {\n+        SentimentResponse sentimentResponse = response.getValue();\n         List<AnalyzeSentimentResult> analyzeSentimentResults = new ArrayList<>();\n         for (DocumentSentiment documentSentiment : sentimentResponse.getDocuments()) {\n-            analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n+\n+            analyzeSentimentResults.add(\n+                convertToAnalyzeSentimentResult(documentSentiment));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n             final com.azure.ai.textanalytics.models.TextAnalyticsError error =\n                 toTextAnalyticsError(documentError.getError());\n-            analyzeSentimentResults.add(new AnalyzeSentimentResult(documentError.getId(), null,\n+\n+            final String documentId = documentError.getId();\n+            analyzeSentimentResults.add(new AnalyzeSentimentResult(documentId, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU0NzE0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNDozOVrOFycEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowNDozOVrOFycEww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzA5MQ==", "bodyText": "After yesterday's discussion, please remove the categorized in this method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388433091", "createdAt": "2020-03-05T17:04:39Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -217,68 +217,62 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L137-L142 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L102-L106 -->\n ```java\n String text = \"The hotel was dark and unclean. I like microsoft.\";\n DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(text);\n System.out.printf(\"Analyzed document sentiment: %s.%n\", documentSentiment.getSentiment());\n-for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n-    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment());\n-}\n+documentSentiment.getSentences().forEach(sentenceSentiment ->\n+    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment()));\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L78-L81 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L113-L116 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %.2f.%n\",\n     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n-### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L88-L92 -->\n+### Recognize categorized entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU2ODQ5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzowOToxM1rOFycSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1NzoxOFrOFyltaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNjQ4Mw==", "bodyText": "do other Java libraries have this dependency?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388436483", "createdAt": "2020-03-05T17:09:13Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "diffHunk": "@@ -36,12 +36,22 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.4.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->\n+    </dependency>\n+\n+    <!-- Added this dependency to include necessary annotations used by reactor core.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MzE1OA==", "bodyText": "Storage has it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388543158", "createdAt": "2020-03-05T20:23:29Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "diffHunk": "@@ -36,12 +36,22 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.4.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->\n+    </dependency>\n+\n+    <!-- Added this dependency to include necessary annotations used by reactor core.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNjQ4Mw=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDk1Mw==", "bodyText": "interesting. Ok. I thought we wanted to avoid having extra dependencies in our packages. Make sure to run it by a Java architect though", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388590953", "createdAt": "2020-03-05T21:57:18Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/pom.xml", "diffHunk": "@@ -36,12 +36,22 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.3.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n-      <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <version>1.4.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core-http-netty;current} -->\n+    </dependency>\n+\n+    <!-- Added this dependency to include necessary annotations used by reactor core.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNjQ4Mw=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU3NTU1OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMToxNFrOFycWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMToxNFrOFycWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzYyOA==", "bodyText": "should we include a link to TextAnalyticsRequestOptions  instead of listing the properties?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388437628", "createdAt": "2020-03-05T17:11:14Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYwMzI4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxODo0MFrOFycncA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1ODoxMFrOFylu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA==", "bodyText": "Is the idea that when the user activates logging, it will see all of this?\nDo we really need to print all the input?\nAlso, text sentiment input sounds weird. The text doesn't include the sentiment, the service is going to analyze the text to get a sentiment. So maybe, Batch of documents to analyze", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388441968", "createdAt": "2020-03-05T17:18:40Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0ODQxNw==", "bodyText": "It is a code style for using the reactor. When subscribe happens, we want to know the inputs.\nwill change to A batch of documents to analyze", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388548417", "createdAt": "2020-03-05T20:33:21Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTMzMw==", "bodyText": "I see.\nThanks for explaining all the Java-isms to me :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388591333", "createdAt": "2020-03-05T21:58:10Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYxODAzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjo0MlrOFycwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjo0MlrOFycwQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NDIyNw==", "bodyText": "maybe Analyzed sentiment for a batch of documents?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388444227", "createdAt": "2020-03-05T17:22:42Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYxOTE3OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjo1N1rOFycw5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyMjo1N1rOFycw5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NDM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n          \n          \n            \n                                .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388444388", "createdAt": "2020-03-05T17:22:57Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYyOTMxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNTo1MlrOFyc3Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNTo1MlrOFyc3Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n          \n          \n            \n                 * that is a paged flux contains {@link AnalyzeSentimentResult}.\n          \n          \n            \n                 * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n          \n          \n            \n                 * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n          \n      \n    \n    \n  \n\nor something like that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388446038", "createdAt": "2020-03-05T17:25:52Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYzMTMxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNjoyNFrOFyc4iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNjoyNFrOFyc4iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjM0NA==", "bodyText": "same comment here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388446344", "createdAt": "2020-03-05T17:26:24Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY0MTYyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyOToyNFrOFyc-7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1ODo0NVrOFylv8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA==", "bodyText": "Consider changing to IncludeStatistics.\nisStatisticsShown sounds like the service already returns them and we just want to show them, when in reality we are asking the service for those values so we can show them", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388447980", "createdAt": "2020-03-05T17:29:24Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -11,7 +11,7 @@\n @Fluent\n public final class TextAnalyticsRequestOptions {\n     private String modelVersion;\n-    private boolean showStatistics;\n+    private boolean isStatisticsShown;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzUyNw==", "bodyText": "I can change the private variable to includeStatistics but method name need to include is* as prefix. How is that sounds to you? So the method name is isIncludeStatistics.\nhttps://azure.github.io/azure-sdk/java_design.html#model-classes\n\u2705 DO use the JavaBean naming convention of get*, set*, and is*.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388527527", "createdAt": "2020-03-05T19:54:06Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -11,7 +11,7 @@\n @Fluent\n public final class TextAnalyticsRequestOptions {\n     private String modelVersion;\n-    private boolean showStatistics;\n+    private boolean isStatisticsShown;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTYwMQ==", "bodyText": "Cool! Java-ism :)\nThanks for the explanation Shawn", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388591601", "createdAt": "2020-03-05T21:58:45Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -11,7 +11,7 @@\n @Fluent\n public final class TextAnalyticsRequestOptions {\n     private String modelVersion;\n-    private boolean showStatistics;\n+    private boolean isStatisticsShown;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY0OTY2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMTozNVrOFydDuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMTozNVrOFydDuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0OTIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n          \n          \n            \n                        new DetectLanguageInput(\"1\", \"Este es un documento escrito en Espa\u00f1ol.\", \"es\")", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388449208", "createdAt": "2020-03-05T17:31:35Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -71,6 +66,46 @@ public void useAadAsyncClient() {\n             .buildAsyncClient();\n     }\n \n+    /**\n+     * Code snippet for rotating API key of the client\n+     */\n+    public void rotatingApiKey() {\n+        TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(\"{api_key}\");\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .apiKey(credential)\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        credential.updateCredential(\"{new_api_key}\");\n+    }\n+\n+    /**\n+     * Code snippet for handling exception\n+     */\n+    public void handlingException() {\n+        List<DetectLanguageInput> inputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n+            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY2Mjc1OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozNTozMVrOFydMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozNTozMVrOFydMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTMzOQ==", "bodyText": "looks like this string is copied in multiple places. Make sure to replace document to documento everywhere", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388451339", "createdAt": "2020-03-05T17:35:31Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -123,50 +145,52 @@ public void detectLanguageStringListWithOptions() {\n             \"This is written in English\",\n             \"Este es un document escrito en Espa\u00f1ol.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAyNDI2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMDo1NVrOFyguYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0NDoyNVrOFyhgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTI4MQ==", "bodyText": "@maririos Are we updating the method names too, to remove categorized ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388509281", "createdAt": "2020-03-05T19:20:55Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -217,68 +217,62 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L137-L142 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L102-L106 -->\n ```java\n String text = \"The hotel was dark and unclean. I like microsoft.\";\n DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(text);\n System.out.printf(\"Analyzed document sentiment: %s.%n\", documentSentiment.getSentiment());\n-for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n-    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment());\n-}\n+documentSentiment.getSentences().forEach(sentenceSentiment ->\n+    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment()));\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L78-L81 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L113-L116 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %.2f.%n\",\n     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n-### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L88-L92 -->\n+### Recognize categorized entity\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L123-L126 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+textAnalyticsClient.recognizeCategorizedEntities(text).forEach(entity ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjA1Ng==", "bodyText": "this is updated.  All languages stay without categorized in the method name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388522056", "createdAt": "2020-03-05T19:44:25Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -217,68 +217,62 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L137-L142 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L102-L106 -->\n ```java\n String text = \"The hotel was dark and unclean. I like microsoft.\";\n DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(text);\n System.out.printf(\"Analyzed document sentiment: %s.%n\", documentSentiment.getSentiment());\n-for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n-    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment());\n-}\n+documentSentiment.getSentences().forEach(sentenceSentiment ->\n+    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment()));\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L78-L81 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L113-L116 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %.2f.%n\",\n     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n-### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L88-L92 -->\n+### Recognize categorized entity\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L123-L126 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+textAnalyticsClient.recognizeCategorizedEntities(text).forEach(entity ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTI4MQ=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0NjY2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNzowOFrOFyg8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MzozN1rOFyheZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjgwMA==", "bodyText": "Shouldn't this still be text?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388512800", "createdAt": "2020-03-05T19:27:08Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -123,18 +118,18 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * the country hint.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * <p>Detects language in a text. Subscribes to the call asynchronously and prints out the detected language\n+     * <p>Detects language in a document. Subscribes to the call asynchronously and prints out the detected language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMTU3Mg==", "bodyText": "We are all using document instead of text.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388521572", "createdAt": "2020-03-05T19:43:37Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -123,18 +118,18 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * the country hint.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * <p>Detects language in a text. Subscribes to the call asynchronously and prints out the detected language\n+     * <p>Detects language in a document. Subscribes to the call asynchronously and prints out the detected language", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjgwMA=="}, "originalCommit": {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA2MzgxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozMjoxOVrOFyhG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMToxNFrOFyl0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTU2NA==", "bodyText": "Seemed to be missing a few values mentioned here - https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388515564", "createdAt": "2020-03-05T19:32:19Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Gets the entity category inferred by the text analytics service's named entity recognition model.\n+ * The list of available categories is described at\n+ * See <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types\"></a>.\n+ */\n+@Immutable\n+public final class EntityCategory extends ExpandableStringEnum<EntityCategory> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5Mjc2OQ==", "bodyText": "Thanks for pointing this out! I need to update .NET with the new values too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388592769", "createdAt": "2020-03-05T22:01:14Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Gets the entity category inferred by the text analytics service's named entity recognition model.\n+ * The list of available categories is described at\n+ * See <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types\"></a>.\n+ */\n+@Immutable\n+public final class EntityCategory extends ExpandableStringEnum<EntityCategory> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTU2NA=="}, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA3MjMyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNToxMFrOFyhMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNToxMFrOFyhMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjkyNg==", "bodyText": "Don't need the . in the end of line here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388516926", "createdAt": "2020-03-05T19:35:10Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java", "diffHunk": "@@ -22,23 +22,23 @@\n     private final String text;\n \n     /*\n-     * Start position (in Unicode characters) for the entity match text.\n+     * Grapheme start position for the entity match text.\n      */\n     private final int offset;\n \n     /*\n-     * Length (in Unicode characters) for the entity match text.\n+     * Grapheme length for the entity match text.\n      */\n     private final int length;\n \n     /**\n-     * Creates a {@code LinkedEntityMatch} model that describes linked entity match.\n+     * Creates a {@link LinkedEntityMatch} model that describes linked entity match.\n      *\n-     * @param text entity text as appears in the request\n-     * @param score if a well-known item is recognized, a decimal number denoting the\n-     * confidence level between 0 and 1 will be returned\n-     * @param offset start position (in Unicode characters) for the entity match text\n-     * @param length length (in Unicode characters) for the entity match text\n+     * @param text The entity text as appears in the request.\n+     * @param score If a well-known item is recognized, a decimal number denoting the.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU4MjIzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNzoyNVrOFyl_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNzoyNVrOFyl_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTUxOA==", "bodyText": "Looks like we are missing the option to pass None in this PR", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388595518", "createdAt": "2020-03-05T22:07:25Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java", "diffHunk": "@@ -40,9 +40,11 @@ public DetectLanguageInput(String id, String text) {\n     /**\n      * Creates an input for detect language that will takes {@code id}, {@code text} and {@code countryHint}.\n      *\n-     * @param id unique, non-empty document identifier\n-     * @param text the text property\n-     * @param countryHint the country hint\n+     * @param id Unique, non-empty document identifier.\n+     * @param text The text property.\n+     * @param countryHint Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to \"US\" if not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYwNDk1OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoxNToyM1rOFymM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoxNToyM1rOFymM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5OTAxNQ==", "bodyText": "Consider changing to documents or batch of documents,\nSame across this and other documents", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388599015", "createdAt": "2020-03-05T22:15:23Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.batch;\n+\n+import com.azure.ai.textanalytics.TextAnalyticsClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;\n+import com.azure.ai.textanalytics.models.TextAnalyticsApiKeyCredential;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Sample demonstrates how to recognize the entities of a batch input text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYyMzMyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyMjowNlrOFymXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyMjowNlrOFymXjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTc0Mw==", "bodyText": "Consider not showing the grapheme properties in the Readme or samples", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388601743", "createdAt": "2020-03-05T22:22:06Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -217,68 +217,62 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L137-L142 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L102-L106 -->\n ```java\n String text = \"The hotel was dark and unclean. I like microsoft.\";\n DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(text);\n System.out.printf(\"Analyzed document sentiment: %s.%n\", documentSentiment.getSentiment());\n-for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n-    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment());\n-}\n+documentSentiment.getSentences().forEach(sentenceSentiment ->\n+    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment()));\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L78-L81 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L113-L116 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %.2f.%n\",\n     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n-### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L88-L92 -->\n+### Recognize categorized entity\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L123-L126 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+textAnalyticsClient.recognizeEntities(text).forEach(entity ->\n     System.out.printf(\"Recognized categorized entity: %s, category: %s, subCategory: %s, score: %.2f.%n\",\n-        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n-}\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore()));\n ```\n \n ### Recognize PII (Personally Identifiable Information) entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L99-L103 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L133-L136 -->\n ```java\n String text = \"My SSN is 555-55-5555\";\n-for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text)) {\n+textAnalyticsClient.recognizePiiEntities(text).forEach(piiEntity ->\n     System.out.printf(\"Recognized Personally Identifiable Information entity: %s, category: %s, subCategory: %s, score: %.2f.%n\",\n-        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n-}\n+        piiEntity.getText(), piiEntity.getCategory(), piiEntity.getSubCategory(), piiEntity.getScore()));\n ```\n \n ### Recognize linked entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L110-L119 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L143-L151 -->\n \n ```java\n String text = \"Old Faithful is a geyser at Yellowstone Park.\";\n-for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text)) {\n+textAnalyticsClient.recognizeLinkedEntities(text).forEach(linkedEntity -> {\n     System.out.println(\"Linked Entities:\");\n     System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n         linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n-    for (LinkedEntityMatch linkedEntityMatch : linkedEntity.getLinkedEntityMatches()) {\n+    linkedEntity.getLinkedEntityMatches().forEach(linkedEntityMatch ->\n         System.out.printf(\"Text: %s, offset: %s, length: %s, score: %.2f.%n\", linkedEntityMatch.getText(),\n-            linkedEntityMatch.getOffset(), linkedEntityMatch.getLength(), linkedEntityMatch.getScore());\n-    }\n-}\n+            linkedEntityMatch.getGraphemeOffset(), linkedEntityMatch.getGraphemeLength(), linkedEntityMatch.getScore()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYzMjMyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/SentimentConfidenceScorePerLabel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyNTozMFrOFymcsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjozNDowM1rOFympgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng==", "bodyText": "I see the rename happened in the docs, but not in the class itself", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603056", "createdAt": "2020-03-05T22:25:30Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/SentimentConfidenceScorePerLabel.java", "diffHunk": "@@ -44,7 +44,7 @@ public double getPositive() {\n      * Set the positive property: The positive property.\n      *\n      * @param positive the positive value to set.\n-     * @return the SentimentConfidenceScorePerLabel object itself.\n+     * @return the SentimentConfidenceScores object itself.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzE5MA==", "bodyText": "Is this another of those Java things that I am looking wrong? :p", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603190", "createdAt": "2020-03-05T22:25:51Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/SentimentConfidenceScorePerLabel.java", "diffHunk": "@@ -44,7 +44,7 @@ public double getPositive() {\n      * Set the positive property: The positive property.\n      *\n      * @param positive the positive value to set.\n-     * @return the SentimentConfidenceScorePerLabel object itself.\n+     * @return the SentimentConfidenceScores object itself.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng=="}, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwNjMzOA==", "bodyText": "Yeah, NV. I found the right one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388606338", "createdAt": "2020-03-05T22:34:03Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/SentimentConfidenceScorePerLabel.java", "diffHunk": "@@ -44,7 +44,7 @@ public double getPositive() {\n      * Set the positive property: The positive property.\n      *\n      * @param positive the positive value to set.\n-     * @return the SentimentConfidenceScorePerLabel object itself.\n+     * @return the SentimentConfidenceScores object itself.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng=="}, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYzNTg0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyNjozNVrOFymekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyNjozNVrOFymekA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzUzNg==", "bodyText": "we should drop the 'Labelhere too, so justTextSentiment`", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603536", "createdAt": "2020-03-05T22:26:35Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Defines values for {@link TextSentimentLabel}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODMzMzY2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDoyNzoxNFrOFys12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDoyNzoxNFrOFys12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwNzgwMA==", "bodyText": "During the arch board, Assaf mentioned that we should remove the fixed points for score as the service will return them.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388707800", "createdAt": "2020-03-06T04:27:14Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -235,12 +235,12 @@ System.out.printf(\"Detected language name: %s, ISO 6391 name: %s, score: %.2f.%n\n     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n-### Recognize categorized entity\n+### Recognize entity\n <!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L123-L126 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n textAnalyticsClient.recognizeEntities(text).forEach(entity ->\n-    System.out.printf(\"Recognized categorized entity: %s, category: %s, subCategory: %s, score: %.2f.%n\",\n+    System.out.printf(\"Recognized entity: %s, category: %s, subCategory: %s, score: %.2f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODMzODYxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozMToyNFrOFys4tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozMToyNFrOFys4tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwODUzMg==", "bodyText": "hint", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388708532", "createdAt": "2020-03-06T04:31:24Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -52,8 +53,10 @@\n     /**\n      * Helper function that recognize a single of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n      * flux containing {@link LinkedEntity}.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n+     * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n      *\n-     * @param text A single input text.\n+     * @param text A single document.\n      * @param language The language hint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3100, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}