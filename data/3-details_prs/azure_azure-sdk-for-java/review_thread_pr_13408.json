{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODk3MjE5", "number": 13408, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToyNzozN1rOERq1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMzozMjo0OFrOESMf4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTYzMDM0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/IdentifierProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToyNzozN1rOG2gtxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToyNzozN1rOG2gtxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMjI5NA==", "bodyText": "This method appears only used in sample or test. So it appears not needed in core-mgmt. (worst case, disable the playback in sample, or set a date and let user change it when they run the sample).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13408#discussion_r459812294", "createdAt": "2020-07-24T01:27:37Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/IdentifierProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.core.management.provider;\n+\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * The IdentifierProvider to help generate distinct values.\n+ */\n+public interface IdentifierProvider {\n+    /**\n+     * Get a random name.\n+     *\n+     * @param prefix the prefix to be used if possible\n+     * @param maxLen the max length for the random generated name\n+     * @return the random name\n+     */\n+    String randomName(String prefix, int maxLen);\n+\n+    /**\n+     * Create a random UUID.\n+     *\n+     * @return the UUID string.\n+     */\n+    String randomUuid();\n+\n+    /**\n+     * @return the current time offset.\n+     */\n+    OffsetDateTime dateTimeNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047218132d28d340b6219a0420c2d9c88eeeb8b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTYzNDMzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/DelayProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTozMDoyNlrOG2gwCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTozMDoyNlrOG2gwCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMjg3NQ==", "bodyText": "This one might be removed. Directly we only need getDelayDuration. This could be done by a helper method elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13408#discussion_r459812875", "createdAt": "2020-07-24T01:30:26Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/DelayProvider.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.core.management.provider;\n+\n+import java.time.Duration;\n+\n+/**\n+ * The DelayProvider to help thread sleep.\n+ */\n+public interface DelayProvider {\n+\n+    /**\n+     * Thread sleep.\n+     *\n+     * @param milliseconds time for sleep\n+     */\n+    void sleep(int milliseconds);\n+\n+    /**\n+     * Get the retry timeout for long running operation.\n+     *\n+     * @return the timeout value.\n+     */\n+    Duration getLroRetryTimeout();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047218132d28d340b6219a0420c2d9c88eeeb8b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTYzNjA0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/DelayProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTozMTozMlrOG2gw9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTozMTozMlrOG2gw9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMzEwOA==", "bodyText": "Simliarly, this is only Thread.sleep(getDelayDuration(Duration.ofMillis(milliseconds)).toMillis()), and can be in a helper method elsewhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13408#discussion_r459813108", "createdAt": "2020-07-24T01:31:32Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/provider/DelayProvider.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.core.management.provider;\n+\n+import java.time.Duration;\n+\n+/**\n+ * The DelayProvider to help thread sleep.\n+ */\n+public interface DelayProvider {\n+\n+    /**\n+     * Thread sleep.\n+     *\n+     * @param milliseconds time for sleep\n+     */\n+    void sleep(int milliseconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047218132d28d340b6219a0420c2d9c88eeeb8b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTE0NTk1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/profile/AzureProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMzozMjo0OFrOG3QBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNToxMDoxN1rOG3T0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NzI3OQ==", "bodyText": "I would have expected these methods to be prefixed with 'get'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13408#discussion_r460587279", "createdAt": "2020-07-26T23:32:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.core.management.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private final String tenantId;\n+    private final String subscriptionId;\n+    private final AzureEnvironment environment;\n+\n+    /**\n+     * Creates AzureProfile instance with Azure environment. The global environment is {@link AzureEnvironment#AZURE}.\n+     * The tenant ID and subscription ID can be set via environment variables. The environment variables are expected\n+     * as below:\n+     * <ul>\n+     *     <li>{@link Configuration#PROPERTY_AZURE_TENANT_ID AZURE_TENANT_ID}</li>\n+     *     <li>{@link Configuration#PROPERTY_AZURE_SUBSCRIPTION_ID AZURE_SUBSCRIPTION_ID}</li>\n+     * </ul>\n+     *\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.environment = environment;\n+        Configuration configuration = Configuration.getGlobalConfiguration();\n+        this.tenantId = configuration.get(Configuration.PROPERTY_AZURE_TENANT_ID);\n+        this.subscriptionId = configuration.get(Configuration.PROPERTY_AZURE_SUBSCRIPTION_ID);\n+    }\n+\n+    /**\n+     * Creates AzureProfile instance with tenant ID, subscription ID and Azure environment.\n+     * The global environment is {@link AzureEnvironment#AZURE}.\n+     *\n+     * @param tenantId the tenant ID required for Graph Rbac\n+     * @param subscriptionId the subscription ID required for resource management\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(String tenantId, String subscriptionId, AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.tenantId = tenantId;\n+        this.subscriptionId = subscriptionId;\n+        this.environment = environment;\n+    }\n+\n+    /**\n+     * Gets tenant ID.\n+     *\n+     * @return the tenant ID\n+     */\n+    public String tenantId() {\n+        return this.tenantId;\n+    }\n+\n+    /**\n+     * Gets subscription ID.\n+     *\n+     * @return the subscription ID\n+     */\n+    public String subscriptionId() {\n+        return this.subscriptionId;\n+    }\n+\n+    /**\n+     * Gets Azure environment.\n+     *\n+     * @return the Azure environment\n+     */\n+    public AzureEnvironment environment() {\n+        return environment;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f4645543fc787748f464b94dca04608a4a43d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0OTcyMQ==", "bodyText": "Updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13408#discussion_r460649721", "createdAt": "2020-07-27T05:10:17Z", "author": {"login": "xseeseesee"}, "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/profile/AzureProfile.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.core.management.profile;\n+\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Azure profile for client.\n+ */\n+public class AzureProfile {\n+\n+    private final String tenantId;\n+    private final String subscriptionId;\n+    private final AzureEnvironment environment;\n+\n+    /**\n+     * Creates AzureProfile instance with Azure environment. The global environment is {@link AzureEnvironment#AZURE}.\n+     * The tenant ID and subscription ID can be set via environment variables. The environment variables are expected\n+     * as below:\n+     * <ul>\n+     *     <li>{@link Configuration#PROPERTY_AZURE_TENANT_ID AZURE_TENANT_ID}</li>\n+     *     <li>{@link Configuration#PROPERTY_AZURE_SUBSCRIPTION_ID AZURE_SUBSCRIPTION_ID}</li>\n+     * </ul>\n+     *\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.environment = environment;\n+        Configuration configuration = Configuration.getGlobalConfiguration();\n+        this.tenantId = configuration.get(Configuration.PROPERTY_AZURE_TENANT_ID);\n+        this.subscriptionId = configuration.get(Configuration.PROPERTY_AZURE_SUBSCRIPTION_ID);\n+    }\n+\n+    /**\n+     * Creates AzureProfile instance with tenant ID, subscription ID and Azure environment.\n+     * The global environment is {@link AzureEnvironment#AZURE}.\n+     *\n+     * @param tenantId the tenant ID required for Graph Rbac\n+     * @param subscriptionId the subscription ID required for resource management\n+     * @param environment the Azure environment\n+     */\n+    public AzureProfile(String tenantId, String subscriptionId, AzureEnvironment environment) {\n+        Objects.requireNonNull(environment);\n+        this.tenantId = tenantId;\n+        this.subscriptionId = subscriptionId;\n+        this.environment = environment;\n+    }\n+\n+    /**\n+     * Gets tenant ID.\n+     *\n+     * @return the tenant ID\n+     */\n+    public String tenantId() {\n+        return this.tenantId;\n+    }\n+\n+    /**\n+     * Gets subscription ID.\n+     *\n+     * @return the subscription ID\n+     */\n+    public String subscriptionId() {\n+        return this.subscriptionId;\n+    }\n+\n+    /**\n+     * Gets Azure environment.\n+     *\n+     * @return the Azure environment\n+     */\n+    public AzureEnvironment environment() {\n+        return environment;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NzI3OQ=="}, "originalCommit": {"oid": "649f4645543fc787748f464b94dca04608a4a43d"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4792, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}