{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTYyMjc2", "number": 15346, "title": "Add JsonPatchDocument to azure-core-experimental", "bodyText": "Fixes #14491\nThis PR adds JsonPatchDocument to azure-core-experimental to offer JSON Patch functionality. It adds the classes of JsonPatchDocument to maintain all operations for a JSON Patch request, JsonPatchOperation to represent a single JSON Patch operation, and JsonPatchOperaionKind to signify the kind of operation.", "createdAt": "2020-09-17T22:23:42Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346", "merged": true, "mergeCommit": {"oid": "89b1d3e73591b45151d61650c1016b8cea6f151a"}, "closed": true, "closedAt": "2020-09-18T21:44:34Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ4oEOAH2gAyNDg4OTYyMjc2OjY0ZGRhYjM5NTg4YjFmYTlmYjJlMWY3MjBmMTdmZjYzNTE4NGM5NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKMMSzAH2gAyNDg4OTYyMjc2OmYwYjE3MTg0OTQyZDRhZDAzMTM2ZDBhZDg5ZGNhOGMzMWIzNTA0Yjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "64ddab39588b1fa9fb2e1f720f17ff635184c941", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/64ddab39588b1fa9fb2e1f720f17ff635184c941", "committedDate": "2020-09-17T22:21:00Z", "message": "Add JsonPatchDocument to azure-core-experimental"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDI5Njk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#pullrequestreview-491029695", "createdAt": "2020-09-17T22:24:17Z", "commit": {"oid": "64ddab39588b1fa9fb2e1f720f17ff635184c941"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoyNDoxN1rOHT3jWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoyNDoxN1rOHT3jWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5NTE2MA==", "bodyText": "Need to look into using Jackson to generate this String as we may need JSON escaping.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r490595160", "createdAt": "2020-09-17T22:24:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     *\n+     * @param from The path to copy from.\n+     * @param path The path to copy to.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendCopy(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.COPY, path, from, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"move\" operation to this JSON Patch document.\n+     *\n+     * @param from The path to move from.\n+     * @param path The path to move to.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendMove(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.MOVE, path, from, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"remove\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to remove.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendRemove(String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REMOVE, path, null, null));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"test\" operation to this JSON Patch document.\n+     *\n+     * @param path The path to test.\n+     * @param rawJsonValue The raw JSON value to test against.\n+     * @return The updated JsonPatchDocument object.\n+     */\n+    public JsonPatchDocument appendTest(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.TEST, path, null, rawJsonValue));\n+        return this;\n+    }\n+\n+    /**\n+     * Gets a formatted JSON string representation of this JSON Patch document.\n+     *\n+     * @return The formatted JSON String representing this JSON Patch docuemnt.\n+     */\n+    @Override\n+    public String toString() {\n+        StringBuilder document = new StringBuilder().append(\"[\");\n+\n+        for (JsonPatchOperation operation : operations) {\n+            writeOperation(document, operation);\n+        }\n+\n+        return document.append(\"]\").toString();\n+    }\n+\n+    private static void writeOperation(StringBuilder document, JsonPatchOperation operation) {\n+        document.append(\"{\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ddab39588b1fa9fb2e1f720f17ff635184c941"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/31e77b9534752c9881322a55fe87b132d3b45583", "committedDate": "2020-09-17T22:50:08Z", "message": "Fix linting issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDQzODg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#pullrequestreview-491043884", "createdAt": "2020-09-17T22:58:22Z", "commit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDQ0OTgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#pullrequestreview-491044982", "createdAt": "2020-09-17T23:01:16Z", "commit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzowMToxNlrOHT4WQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzowMToxNlrOHT4WQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwODE5Mg==", "bodyText": "Can we add some tests and samples to show how this can be used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r490608192", "createdAt": "2020-09-17T23:01:16Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31e77b9534752c9881322a55fe87b132d3b45583"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2efdf38ccdd8950df778e122cc6c50b4dde01de6", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2efdf38ccdd8950df778e122cc6c50b4dde01de6", "committedDate": "2020-09-18T19:21:29Z", "message": "Added tests and code samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4ce82ecc44922ce66080950260ac9e0c3593f7a", "committedDate": "2020-09-18T19:28:14Z", "message": "Merge branch 'master' into AzExperimental_AddJsonPatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzMzNTU4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#pullrequestreview-491733558", "createdAt": "2020-09-18T19:37:23Z", "commit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozNzoyM1rOHUZn4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozOToyMFrOHUZq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzM3Nw==", "bodyText": "Missing a closing double-quote here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.\n          \n          \n            \n                 * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5\">JSON Patch copy</a> for more information.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491153377", "createdAt": "2020-09-18T19:37:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDE1NA==", "bodyText": "nit: too much happening in this 1 statement - add, new & null checks. Breaking it down probably makes it easier to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15346#discussion_r491154154", "createdAt": "2020-09-18T19:39:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/jsonpatch/JsonPatchDocument.java", "diffHunk": "@@ -0,0 +1,210 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.jsonpatch;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a JSON Patch document.\n+ */\n+public class JsonPatchDocument {\n+    private static final ObjectMapper MAPPER = ((JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter())\n+        .serializer();\n+\n+    private final ClientLogger logger = new ClientLogger(JsonPatchDocument.class);\n+\n+    private final List<JsonPatchOperation> operations;\n+\n+    /**\n+     * Creates a new JSON Patch document.\n+     */\n+    public JsonPatchDocument() {\n+        this.operations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Appends an \"add\" operation to this JSON Patch document.\n+     * <p>\n+     * If the {@code path} doesn't exist a new member is added to the object. If the {@code path} does exist the\n+     * previous value is replaced. If the {@code path} specifies an array index the value is inserted at the specified.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">JSON Patch Add</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendAdd#String-String}\n+     *\n+     * @param path The path to apply the addition.\n+     * @param rawJsonValue The raw JSON value to add to the path.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendAdd(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.ADD,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"replace\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">JSON Patch replace</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendReplace#String-String}\n+     *\n+     * @param path The path to replace.\n+     * @param rawJsonValue The raw JSON value to use as the replacement.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code path} or {@code rawJsonValue} is null.\n+     */\n+    public JsonPatchDocument appendReplace(String path, String rawJsonValue) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.REPLACE,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"), null,\n+            Objects.requireNonNull(rawJsonValue, \"'rawJsonValue' cannot be null.\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a \"copy\" operation to this JSON Patch document.\n+     * <p>\n+     * See <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5>JSON Patch copy</a> for more information.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.experimental.jsonpatch.JsonPatchDocument.appendCopy#String-String}\n+     *\n+     * @param from The path to copy from.\n+     * @param path The path to copy to.\n+     * @return The updated JsonPatchDocument object.\n+     * @throws NullPointerException If {@code from} or {@code path} is null.\n+     */\n+    public JsonPatchDocument appendCopy(String from, String path) {\n+        operations.add(new JsonPatchOperation(JsonPatchOperationKind.COPY,\n+            Objects.requireNonNull(path, \"'path' cannot be null.\"),\n+            Objects.requireNonNull(from, \"'from' cannot be null.\"), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4ce82ecc44922ce66080950260ac9e0c3593f7a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "933a0d9fd0b5013de32434ff81766183bdf71425", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/933a0d9fd0b5013de32434ff81766183bdf71425", "committedDate": "2020-09-18T19:42:07Z", "message": "Fix broken anchor tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0b17184942d4ad03136d0ad89dca8c31b3504b8", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0b17184942d4ad03136d0ad89dca8c31b3504b8", "committedDate": "2020-09-18T21:08:46Z", "message": "Move Objects.requiresNonNull calls to their own lines to make code easier to read"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3391, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}