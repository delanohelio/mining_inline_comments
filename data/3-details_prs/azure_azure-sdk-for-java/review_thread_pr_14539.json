{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDAxMDIz", "number": 14539, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNDozMFrOEda9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzozNjo1OVrOEdbGcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg1ODM3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNDozMFrOHIkgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNDozMFrOHIkgBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0ODY3OA==", "bodyText": "The list API still needs work, I'll fix this in the relationships impl PR #14527", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478748678", "createdAt": "2020-08-27T23:24:30Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -150,7 +165,20 @@ public HttpPipeline getHttpPipeline() {\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PagedFlux<String> listRelationships(String digitalTwinId, String relationshipName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg3NjUxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzozNDoxNFrOHIkrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0OTowNlrOHIk7ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MTUzMA==", "bodyText": "klazz or clazz>? :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478751530", "createdAt": "2020-08-27T23:34:14Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -86,9 +89,20 @@ public HttpPipeline getHttpPipeline() {\n     // Input is String and output is Response<String>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n+    }\n+\n+    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n+    // Input is Object and output is Response<T>.\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MTY5MQ==", "bodyText": "take your pick and let's stick with one :)))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478751691", "createdAt": "2020-08-27T23:34:44Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -86,9 +89,20 @@ public HttpPipeline getHttpPipeline() {\n     // Input is String and output is Response<String>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n+    }\n+\n+    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n+    // Input is Object and output is Response<T>.\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MTUzMA=="}, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NTcwNw==", "bodyText": "clazz, then!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478755707", "createdAt": "2020-08-27T23:49:06Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -86,9 +89,20 @@ public HttpPipeline getHttpPipeline() {\n     // Input is String and output is Response<String>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n+    }\n+\n+    // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n+    // Input is Object and output is Response<T>.\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MTUzMA=="}, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg4MTc3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzozNjo1OVrOHIkuPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzozOTowOFrOHIkwUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MjMxNw==", "bodyText": "So is this treated as empty?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478752317", "createdAt": "2020-08-27T23:36:59Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -34,11 +35,11 @@ public static void main(String[] args) throws JsonProcessingException {\n             .buildClient();\n \n         // Create relationship on a digital twin\n-        String createdRelationship = client.createRelationshipWithResponse(sourceDigitalTwinId, relationshipId, relationship).getValue();\n+        String createdRelationship = client.createRelationshipWithResponse(sourceDigitalTwinId, relationshipId, relationship, Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1Mjg0OA==", "bodyText": "yes\npublic static final Context NONE = new Context((Context)null, (Object)null, (Object)null);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14539#discussion_r478752848", "createdAt": "2020-08-27T23:39:08Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -34,11 +35,11 @@ public static void main(String[] args) throws JsonProcessingException {\n             .buildClient();\n \n         // Create relationship on a digital twin\n-        String createdRelationship = client.createRelationshipWithResponse(sourceDigitalTwinId, relationshipId, relationship).getValue();\n+        String createdRelationship = client.createRelationshipWithResponse(sourceDigitalTwinId, relationshipId, relationship, Context.NONE).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MjMxNw=="}, "originalCommit": {"oid": "52b84126e0e16fcb779cf95bfb998066e383bb24"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1443, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}