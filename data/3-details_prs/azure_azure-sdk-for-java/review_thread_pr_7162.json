{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzU4NzE2", "number": 7162, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzowMVrODWJHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDowNzo1MVrODWZ9qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0NTEyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzowMVrOFau7Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzowMVrOFau7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n          \n          \n            \n                                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576155", "createdAt": "2020-01-07T03:13:01Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0NTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzoyMVrOFau7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0Nzo1NlrOFbCYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ==", "bodyText": "System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576211", "createdAt": "2020-01-07T03:13:21Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU5MjkxNQ==", "bodyText": "we need erroneous documents as well. Otherwise, if detectLanguageResult is error, detectLanguageResult.getDetectedLanguages() will have NPE\n            // Erroneous document\n            if (detectLanguageResult.isError()) {\n                System.out.printf(\"Cannot detect language. Error: %s%n\", detectLanguageResult.getError().getMessage());\n                continue;\n            }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363592915", "createdAt": "2020-01-07T05:07:14Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4MTc3OQ==", "bodyText": "These are code snippets that would be inserted in the method java docs. I think we should keep them shorter and to the point, that shows how to use the method. We don't need to handle all the fail through scenarios here, samples should be a good place to do that. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363881779", "createdAt": "2020-01-07T18:16:49Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NDg3Mw==", "bodyText": "Ya. Let's keep this codesnippet shorter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363894873", "createdAt": "2020-01-07T18:47:56Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0NzczOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNTo0N1rOFau9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNTo0N1rOFau9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjU4MA==", "bodyText": "since it only shows detectLangues list, the message should need to update as well.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n          \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s,\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576580", "createdAt": "2020-01-07T03:15:47Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0ODAzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjowNVrOFau9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjowNVrOFau9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            batchStatistics.getTransactionCount(),\n          \n          \n            \n                            batchStatistics.getDocumentCount(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576624", "createdAt": "2020-01-07T03:16:05Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ4MjEwOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzo1MDo0M1rOFavRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODoxODoxNVrOFbBnpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA==", "bodyText": "entity.getSubtype() == null || entity.getSubtype().isEmpty() ? \"N/A\" : entity.getSubtype(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363581870", "createdAt": "2020-01-07T03:50:43Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MjA3MQ==", "bodyText": "missing  entity.getLength()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363582071", "createdAt": "2020-01-07T03:51:58Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4MjQwNQ==", "bodyText": "trying to keep the code snippets shorter. Length probably is something that can be skipped here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363882405", "createdAt": "2020-01-07T18:18:15Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ5ODM2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowNzoxN1rOFavbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowNzoxN1rOFavbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NDMwNA==", "bodyText": "inputs would be too general, textInputs could be a better one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363584304", "createdAt": "2020-01-07T04:07:17Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTUxNzgzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDoyOToxOFrOFavnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDoyOToxOFrOFavnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NzM4MQ==", "bodyText": "input text is not PII related", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363587381", "createdAt": "2020-01-07T04:29:18Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(inputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> inputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+        List<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse(textDocumentInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                    for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                        System.out.printf(\n+                            \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                            entity.getText(),\n+                            entity.getType(),\n+                            entity.getSubtype(),\n+                            entity.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Pii Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizePiiEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+        String inputText = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+        String inputText1 = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#list-string\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzU3NTI4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNzozMlrOFbDYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo1Mjo1N1rOFbEDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTM2NA==", "bodyText": "let's exclude the data. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363911364", "createdAt": "2020-01-07T19:27:32Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyMjI0OQ==", "bodyText": "It needs to be compile-able, so we will have to provide valid inputs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363922249", "createdAt": "2020-01-07T19:52:57Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTM2NA=="}, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODA2MjM4OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjo0NTo0MFrOFbIHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjo0ODozNVrOFbIK8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Code snippet for detecting Language\n          \n          \n            \n                 * Code snippet for {@link TextAnalyticsAsyncClient #detectLanguage(String)}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363988795", "createdAt": "2020-01-07T22:45:40Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODk4NQ==", "bodyText": "And same pattern for rest of the file", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363988985", "createdAt": "2020-01-07T22:46:11Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}, "originalCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4OTEyMA==", "bodyText": "This block stands for all overloads of detect language endpoint so keeping it generic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363989120", "createdAt": "2020-01-07T22:46:35Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}, "originalCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4OTc0Nw==", "bodyText": "we should keep each BEGIN and END for a separate method. So It is easier to maintain. You could refer to AzConfig or Storage", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363989747", "createdAt": "2020-01-07T22:48:35Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}, "originalCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODIwNjUxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDowNzo1MVrOFbJfhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDoxMToyMFrOFbJiww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMTM5OA==", "bodyText": "should we also remove the Model version log? Let us keep the codesnippet focus on the more valuable infor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r364011398", "createdAt": "2020-01-08T00:07:51Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +44,1014 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguage(String)}\n+     */\n+    public void detectLanguages() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguageWithResponse(String, String)}\n+     */\n+    public void detectLanguageWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguages(List)}\n+     */\n+    public void detectLanguagesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(textInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguagesWithResponse(List, String)}\n+     */\n+    public void detectLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> textInputs1 = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(textInputs1, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguages(List)} )}\n+     */\n+    public void detectLanguagesBatch() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"ES\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguagesWithResponse(List,\n+     * TextAnalyticsRequestOptions)}\n+     */\n+    public void detectBatchLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(String)}\n+     */\n+    public void recognizeEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(String, String)}\n+     */\n+    public void recognizeEntitiesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(List)}\n+     */\n+    public void recognizeEntitiesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> textInputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(textInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(List, String)}\n+     */\n+    public void recognizeEntitiesWithResponseStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> textInputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(textInputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeBatchEntities(List)}\n+     */\n+    public void recognizeBatchEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMjIyNw==", "bodyText": "removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r364012227", "createdAt": "2020-01-08T00:11:20Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +44,1014 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguage(String)}\n+     */\n+    public void detectLanguages() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguageWithResponse(String, String)}\n+     */\n+    public void detectLanguageWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguages(List)}\n+     */\n+    public void detectLanguagesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(textInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguagesWithResponse(List, String)}\n+     */\n+    public void detectLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> textInputs1 = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(textInputs1, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguages(List)} )}\n+     */\n+    public void detectLanguagesBatch() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"ES\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguagesWithResponse(List,\n+     * TextAnalyticsRequestOptions)}\n+     */\n+    public void detectBatchLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(String)}\n+     */\n+    public void recognizeEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(String, String)}\n+     */\n+    public void recognizeEntitiesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(List)}\n+     */\n+    public void recognizeEntitiesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> textInputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(textInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(List, String)}\n+     */\n+    public void recognizeEntitiesWithResponseStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> textInputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(textInputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeBatchEntities(List)}\n+     */\n+    public void recognizeBatchEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMTM5OA=="}, "originalCommit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef"}, "originalPosition": 307}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 599, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}