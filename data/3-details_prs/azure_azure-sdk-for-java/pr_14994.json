{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTczNTAx", "number": 14994, "title": "Add ADT event route APIs and implementation", "bodyText": "Also fixing up the regions within our clients for consistency", "createdAt": "2020-09-09T22:26:23Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994", "merged": true, "mergeCommit": {"oid": "96eccb488e1a4fe0b6c9ee68f9898649645920f4"}, "closed": true, "closedAt": "2020-09-10T00:14:30Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHT4s1AH2gAyNDgzMTczNTAxOjA3NTdiNjAwY2E1MzNlNjExMzUyYWJhMDZhNzI2OGVhYTJmODQwYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHU9jFAH2gAyNDgzMTczNTAxOmVmYzI4ZGM0YmI3YmE0MThkMDQ1ZDIyODE1ZTM2MjI5YjllZWUwMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0757b600ca533e611352aba06a7268eaa2f840c3", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0757b600ca533e611352aba06a7268eaa2f840c3", "committedDate": "2020-09-09T22:24:50Z", "message": "Add ADT event route APIs and implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "committedDate": "2020-09-09T22:29:58Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDUyNzk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#pullrequestreview-485452797", "createdAt": "2020-09-09T22:45:29Z", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NToyOVrOHPcyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NToyOVrOHPcyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MjQyNw==", "bodyText": "Is EventRoute under the impl package? If yes, then it will need to be moved out of it and into /models -> the pipeline will complain that impl classes shouldn't be referenced in public APIs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485962427", "createdAt": "2020-09-09T22:45:29Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDU3NzU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#pullrequestreview-485457755", "createdAt": "2020-09-09T22:58:21Z", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1ODoyMVrOHPdDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1ODoyMVrOHPdDmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Njc0NQ==", "bodyText": "nit: this can be inline in line 1324, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485966745", "createdAt": "2020-09-09T22:58:21Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return createEventRouteWithResponse(eventRouteId, eventRoute)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return withContext(context -> createEventRouteWithResponse(eventRouteId, eventRoute, context));\n+    }\n+\n+    Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().addWithResponseAsync(eventRouteId, eventRoute, context);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return The retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EventRoute> getEventRoute(String eventRouteId)\n+    {\n+        return getEventRouteWithResponse(eventRouteId)\n+            .map(Response::getValue);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return A {@link Response} containing the retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> getEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().getByIdWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteEventRoute(String eventRouteId)\n+    {\n+        return deleteEventRouteWithResponse(eventRouteId)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> deleteEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().deleteWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes()\n+    {\n+        return listEventRoutes(new EventRoutesListOptions());\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @param options The optional parameters to use when listing event routes. See {@link EventRoutesListOptions} for more details\n+     *                on what optional parameters can be set.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes(EventRoutesListOptions options)\n+    {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listEventRoutesFirstPage(options, context)),\n+            nextLink -> withContext(context -> listEventRoutesNextPage(nextLink, context)));\n+    }\n+\n+    PagedFlux<EventRoute> listEventRoutes(EventRoutesListOptions options, Context context)\n+    {\n+        return new PagedFlux<>(\n+            () -> listEventRoutesFirstPage(options, context),\n+            nextLink -> listEventRoutesNextPage(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<EventRoute>> listEventRoutesFirstPage(EventRoutesListOptions options, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "originalPosition": 194}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDU4NDMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#pullrequestreview-485458433", "createdAt": "2020-09-09T23:00:01Z", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDowMVrOHPdGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDowMVrOHPdGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzM4MQ==", "bodyText": "q - should \"twin\" be in lower case? We've referenced it as \"digital twin\" everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485967381", "createdAt": "2020-09-09T23:00:01Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -90,6 +92,8 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n+    //region Digital Twin APIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDU4OTkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#pullrequestreview-485458990", "createdAt": "2020-09-09T23:01:27Z", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDYxMDYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#pullrequestreview-485461060", "createdAt": "2020-09-09T23:07:09Z", "commit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzowOVrOHPdPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzowOVrOHPdPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTcyNw==", "bodyText": "There is some strange spacing in the comments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485969727", "createdAt": "2020-09-09T23:07:09Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return createEventRouteWithResponse(eventRouteId, eventRoute)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return withContext(context -> createEventRouteWithResponse(eventRouteId, eventRoute, context));\n+    }\n+\n+    Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().addWithResponseAsync(eventRouteId, eventRoute, context);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return The retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EventRoute> getEventRoute(String eventRouteId)\n+    {\n+        return getEventRouteWithResponse(eventRouteId)\n+            .map(Response::getValue);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return A {@link Response} containing the retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> getEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().getByIdWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteEventRoute(String eventRouteId)\n+    {\n+        return deleteEventRouteWithResponse(eventRouteId)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> deleteEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().deleteWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes()\n+    {\n+        return listEventRoutes(new EventRoutesListOptions());\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @param options The optional parameters to use when listing event routes. See {@link EventRoutesListOptions} for more details\n+     *                on what optional parameters can be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e"}, "originalPosition": 175}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad56de1412093d22883d1d7fcca37ea810adf18d", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad56de1412093d22883d1d7fcca37ea810adf18d", "committedDate": "2020-09-09T23:18:15Z", "message": "cr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b60b7d51deca5dfe051f357ca1ee97ae1e39415", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b60b7d51deca5dfe051f357ca1ee97ae1e39415", "committedDate": "2020-09-09T23:23:21Z", "message": "Make EventRoute live in custom folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc28dc4bb7ba418d045d22815e36229b9eee017", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/efc28dc4bb7ba418d045d22815e36229b9eee017", "committedDate": "2020-09-09T23:40:02Z", "message": "fix javadocs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3551, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}