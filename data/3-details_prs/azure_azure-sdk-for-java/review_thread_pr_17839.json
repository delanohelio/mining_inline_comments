{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3OTQyNDc2", "number": 17839, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowMzozMVrOE-dmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxOTo1OVrOE--txw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTMyMjM1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryOAuth2UserService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowMzozMVrOH7o98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowNDoyN1rOH7o-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5OTI0OA==", "bodyText": "\"defaultOidcUser\" appeared more than one time. Maybe we can define:\nprivate static final String DEFAULT_OIDC_USER = \"defaultOidcUser\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r532299248", "createdAt": "2020-11-30T01:03:31Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryOAuth2UserService.java", "diffHunk": "@@ -48,6 +55,13 @@ public AzureActiveDirectoryOAuth2UserService(\n     public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n         // Delegate to the default implementation for loading a user\n         OidcUser oidcUser = oidcUserService.loadUser(userRequest);\n+        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+\n+        if (authentication != null) {\n+            DefaultOidcUser defaultOidcUser = (DefaultOidcUser) session.getAttribute(\"defaultOidcUser\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cdaffffeba2539745f8d160fe1d0e648586878"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5OTM5Mw==", "bodyText": "And did you test it? Whether DefaultOidcUser serialize / deserialize well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r532299393", "createdAt": "2020-11-30T01:04:27Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryOAuth2UserService.java", "diffHunk": "@@ -48,6 +55,13 @@ public AzureActiveDirectoryOAuth2UserService(\n     public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n         // Delegate to the default implementation for loading a user\n         OidcUser oidcUser = oidcUserService.loadUser(userRequest);\n+        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+\n+        if (authentication != null) {\n+            DefaultOidcUser defaultOidcUser = (DefaultOidcUser) session.getAttribute(\"defaultOidcUser\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5OTI0OA=="}, "originalCommit": {"oid": "61cdaffffeba2539745f8d160fe1d0e648586878"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTMyNTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureAuthorizedClientRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowNjoyM1rOH7o_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowNjoyM1rOH7o_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5OTY3Mg==", "bodyText": "Can we update method isAuthzClient, add getOnDemand logic in method isAuthzClient?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r532299672", "createdAt": "2020-11-30T01:06:23Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureAuthorizedClientRepository.java", "diffHunk": "@@ -52,7 +52,7 @@ public void saveAuthorizedClient(OAuth2AuthorizedClient client,\n             return (T) result;\n         }\n \n-        if (repo.isAuthzClient(id)) {\n+        if (repo.isAuthzClient(id) && !repo.getAuthorizationProperties().get(id).getOnDemand()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cdaffffeba2539745f8d160fe1d0e648586878"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTMyODIwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowODo1NFrOH7pBHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTowODo1NFrOH7pBHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwMDA2Mw==", "bodyText": "authorizationProperties is not used in AzureClientRegistrationRepository?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r532300063", "createdAt": "2020-11-30T01:08:54Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "diffHunk": "@@ -19,11 +19,15 @@\n     private final AzureClientRegistration azureClient;\n     private final List<ClientRegistration> otherClients;\n     private final Map<String, ClientRegistration> allClients;\n+    private Map<String, AuthorizationProperties> authorizationProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cdaffffeba2539745f8d160fe1d0e648586878"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDAyNTAxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AuthorizationProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyNzowMVrOH8Ufmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyNzowMVrOH8Ufmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMjM3OQ==", "bodyText": "Can we use the following code?\n    private boolean onDemand = false;\n\n    public boolean isOnDemand() {\n        return onDemand;\n    }\n\n    public void setOnDemand(boolean onDemand) {\n        this.onDemand = onDemand;\n    }\n\n\nUse boolean instead of Boolean. 'Boxing' is not necessary.\n2, isOnDemand is easier to understand than getOnDemand", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533012379", "createdAt": "2020-12-01T01:27:01Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AuthorizationProperties.java", "diffHunk": "@@ -9,11 +9,21 @@\n \n     private List<String> scopes;\n \n+    private Boolean onDemand = false;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4919d562114517561a0d29324104ee15f420c324"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA1MTI1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTozODozOVrOH8Uuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTozODozOVrOH8Uuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjE5OQ==", "bodyText": "Can we pass properties instead of properties.getAuthorization()? Maybe we need other property item in AzureClientRegistrationRepository.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533016199", "createdAt": "2020-12-01T01:38:39Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfiguration.java", "diffHunk": "@@ -41,7 +41,8 @@\n     public AzureClientRegistrationRepository clientRegistrationRepository() {\n         return new AzureClientRegistrationRepository(\n             createDefaultClient(),\n-            createAuthzClients());\n+            createAuthzClients(),\n+            properties.getAuthorization());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4919d562114517561a0d29324104ee15f420c324"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA3OTUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MTozNFrOH8U-tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MTozNFrOH8U-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDM0MQ==", "bodyText": "getAuthorizationProperties is not necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533020341", "createdAt": "2020-12-01T01:51:34Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "diffHunk": "@@ -56,6 +60,14 @@ public boolean isAuthzClient(ClientRegistration client) {\n \n     public boolean isAuthzClient(String id) {\n         ClientRegistration client = findByRegistrationId(id);\n-        return client != null && isAuthzClient(client);\n+        return client != null && isAuthzClient(client) && !authorizationProperties.get(id).getOnDemand();\n+    }\n+\n+    public Map<String, AuthorizationProperties> getAuthorizationProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4919d562114517561a0d29324104ee15f420c324"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA4MDI3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MTo0OVrOH8U_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MTo0OVrOH8U_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDQ1MQ==", "bodyText": "setAuthorizationProperties is not necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533020451", "createdAt": "2020-12-01T01:51:49Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "diffHunk": "@@ -56,6 +60,14 @@ public boolean isAuthzClient(ClientRegistration client) {\n \n     public boolean isAuthzClient(String id) {\n         ClientRegistration client = findByRegistrationId(id);\n-        return client != null && isAuthzClient(client);\n+        return client != null && isAuthzClient(client) && !authorizationProperties.get(id).getOnDemand();\n+    }\n+\n+    public Map<String, AuthorizationProperties> getAuthorizationProperties() {\n+        return authorizationProperties;\n+    }\n+\n+    public void setAuthorizationProperties(Map<String, AuthorizationProperties> authorizationProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4919d562114517561a0d29324104ee15f420c324"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA4MzA3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MzoxM1rOH8VA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1MzoxM1rOH8VA3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDg5Mw==", "bodyText": "Maybe we should move  && !authorizationProperties.get(id).getOnDemand() to public boolean isAuthzClient(String id).\nAnd enrich AzureActiveDirectoryConfigurationTest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533020893", "createdAt": "2020-12-01T01:53:13Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "diffHunk": "@@ -56,6 +60,14 @@ public boolean isAuthzClient(ClientRegistration client) {\n \n     public boolean isAuthzClient(String id) {\n         ClientRegistration client = findByRegistrationId(id);\n-        return client != null && isAuthzClient(client);\n+        return client != null && isAuthzClient(client) && !authorizationProperties.get(id).getOnDemand();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4919d562114517561a0d29324104ee15f420c324"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDczOTk4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxNzoxOFrOH8a6qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxNzoxOFrOH8a6qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNzYwOQ==", "bodyText": "authorizationProperties -> properties", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533117609", "createdAt": "2020-12-01T07:17:18Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureClientRegistrationRepository.java", "diffHunk": "@@ -19,11 +20,15 @@\n     private final AzureClientRegistration azureClient;\n     private final List<ClientRegistration> otherClients;\n     private final Map<String, ClientRegistration> allClients;\n+    private AADAuthenticationProperties authorizationProperties;\n \n     public AzureClientRegistrationRepository(AzureClientRegistration azureClient,\n-                                             List<ClientRegistration> otherClients) {\n+                                             List<ClientRegistration> otherClients,\n+                                             AADAuthenticationProperties authorizationProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a19a188d3d978a524d5ab714a9d7a538dddb4a6f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc0Njk1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxOTo1OVrOH8a-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo1NjoxOVrOH8b9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODY4Mg==", "bodyText": "https://graph.microsoft.com/User.Read belong to graph client, so https://graph.microsoft.com/User.Read should not exist in DefaultScopes, is that right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533118682", "createdAt": "2020-12-01T07:19:59Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -163,6 +163,38 @@ public void customizeUri() {\n         assertEquals(endpoints.jwkSetEndpoint(\"fake-tenant-id\"), azure.getProviderDetails().getJwkSetUri());\n     }\n \n+    @Test\n+    public void clientRequiresOnDemandPermissions() {\n+        AnnotationConfigApplicationContext context = getContext();\n+        TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.authorization.graph.on-demand = true\",\n+            \"azure.activedirectory.authorization.arm.scopes = https://management.core.windows.net/user_impersonation\"\n+        );\n+        context.refresh();\n+\n+        AzureClientRegistrationRepository repo = context.getBean(AzureClientRegistrationRepository.class);\n+        ClientRegistration azure = repo.findByRegistrationId(\"azure\");\n+        ClientRegistration graph = repo.findByRegistrationId(\"graph\");\n+        ClientRegistration arm = repo.findByRegistrationId(\"arm\");\n+\n+        assertNotNull(azure);\n+        assertDefaultScopes(\n+            azure,\n+            \"openid\",\n+            \"profile\",\n+            \"https://graph.microsoft.com/User.Read\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a19a188d3d978a524d5ab714a9d7a538dddb4a6f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNjcwNA==", "bodyText": "https://graph.microsoft.com/User.Read belong to default client if allowedGroups is not null.\n\n  \n    \n      azure-sdk-for-java/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfiguration.java\n    \n    \n        Lines 77 to 84\n      in\n      d1d7fe0\n    \n    \n    \n    \n\n        \n          \n           private Set<String> accessTokenScopes() { \n        \n\n        \n          \n               Set<String> result = openidScopes(); \n        \n\n        \n          \n               if (properties.allowedGroupsConfigured()) { \n        \n\n        \n          \n                   result.add(\"https://graph.microsoft.com/User.Read\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               addAzureConfiguredScopes(result); \n        \n\n        \n          \n               return result; \n        \n\n        \n          \n           }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533126704", "createdAt": "2020-12-01T07:39:16Z", "author": {"login": "zhichengliu12581"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -163,6 +163,38 @@ public void customizeUri() {\n         assertEquals(endpoints.jwkSetEndpoint(\"fake-tenant-id\"), azure.getProviderDetails().getJwkSetUri());\n     }\n \n+    @Test\n+    public void clientRequiresOnDemandPermissions() {\n+        AnnotationConfigApplicationContext context = getContext();\n+        TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.authorization.graph.on-demand = true\",\n+            \"azure.activedirectory.authorization.arm.scopes = https://management.core.windows.net/user_impersonation\"\n+        );\n+        context.refresh();\n+\n+        AzureClientRegistrationRepository repo = context.getBean(AzureClientRegistrationRepository.class);\n+        ClientRegistration azure = repo.findByRegistrationId(\"azure\");\n+        ClientRegistration graph = repo.findByRegistrationId(\"graph\");\n+        ClientRegistration arm = repo.findByRegistrationId(\"arm\");\n+\n+        assertNotNull(azure);\n+        assertDefaultScopes(\n+            azure,\n+            \"openid\",\n+            \"profile\",\n+            \"https://graph.microsoft.com/User.Read\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODY4Mg=="}, "originalCommit": {"oid": "a19a188d3d978a524d5ab714a9d7a538dddb4a6f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzNDcxMA==", "bodyText": "It make sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17839#discussion_r533134710", "createdAt": "2020-12-01T07:56:19Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/implementation/AzureActiveDirectoryConfigurationTest.java", "diffHunk": "@@ -163,6 +163,38 @@ public void customizeUri() {\n         assertEquals(endpoints.jwkSetEndpoint(\"fake-tenant-id\"), azure.getProviderDetails().getJwkSetUri());\n     }\n \n+    @Test\n+    public void clientRequiresOnDemandPermissions() {\n+        AnnotationConfigApplicationContext context = getContext();\n+        TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.authorization.graph.on-demand = true\",\n+            \"azure.activedirectory.authorization.arm.scopes = https://management.core.windows.net/user_impersonation\"\n+        );\n+        context.refresh();\n+\n+        AzureClientRegistrationRepository repo = context.getBean(AzureClientRegistrationRepository.class);\n+        ClientRegistration azure = repo.findByRegistrationId(\"azure\");\n+        ClientRegistration graph = repo.findByRegistrationId(\"graph\");\n+        ClientRegistration arm = repo.findByRegistrationId(\"arm\");\n+\n+        assertNotNull(azure);\n+        assertDefaultScopes(\n+            azure,\n+            \"openid\",\n+            \"profile\",\n+            \"https://graph.microsoft.com/User.Read\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODY4Mg=="}, "originalCommit": {"oid": "a19a188d3d978a524d5ab714a9d7a538dddb4a6f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2716, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}