{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzA4OTIw", "number": 12784, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoyMjozNVrOEM_Nrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoyMjozNVrOEM_Nrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDU0MDYyOnYy", "diffSide": "RIGHT", "path": "eng/versioning/pom_file_version_scanner.ps1", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoyMjozNVrOGvavaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozOToxM1rOGv58Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDM3Nw==", "bodyText": "What is the conditions about the NextSibling? I'd assume if there is a version tag there must also be a comment tag.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12784#discussion_r452374377", "createdAt": "2020-07-09T17:22:35Z", "author": {"login": "weshaggard"}, "path": "eng/versioning/pom_file_version_scanner.ps1", "diffHunk": "@@ -248,6 +255,100 @@ function Confirm-Node-Is-Part-Of-Configuration {\n     return $false\n }\n \n+# Spring samples will pull in most dependencies through use of the spring bom. Any dependency that is an\n+# an azure sdk client dependency needs to be verified and must have a groupId, artifactId, version and version tag.\n+# Similarly, any dependency with a version needs to have a version tag. Dependencies without a version tag are\n+# ignored as those are assumed to be coming from the BOM.\n+function Assert-Spring-Sample-Version-Tags {\n+    param(\n+        [hashtable]$libHash,\n+        [hashtable]$extDepHash,\n+        [xml]$xmlPomFile\n+    )\n+    Write-Host \"processing Spring Sample pomFile=$($pomFile)\"\n+    $xmlNsManagerSpring = New-Object -TypeName \"Xml.XmlNamespaceManager\" -ArgumentList $xmlPomFile.NameTable\n+    $xmlNsManagerSpring.AddNamespace(\"ns\", $xmlPomFile.DocumentElement.NamespaceURI)\n+\n+    if (-not $xmlPomFile.project.parent.groupId)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/groupId is missing.\"\n+    }\n+\n+    $versionNode = $xmlPomFile.SelectSingleNode(\"/ns:project/ns:parent/ns:version\", $xmlNsManagerSpring)\n+    if (-not $versionNode)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/version is missing.\"\n+        Write-Error-With-ColorWrite-Error-With-Color \"Error: Missing project/version update tag. The tag should be <!-- {x-version-update;$($groupId):$($artifactId);current} -->\"\n+    } else {\n+        $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+        if ($retVal)\n+        {\n+            $script:FoundError = $true\n+            Write-Error-With-Color \"$($retVal)\"\n+        }\n+    }\n+\n+    # Loop through the dependencies. If any dependency is in the libHash (aka, the libraries we build)\n+    # then it needs to have a version element and update tag.\n+    foreach($dependencyNode in $xmlPomFile.GetElementsByTagName(\"dependency\"))\n+    {\n+        $artifactId = $dependencyNode.artifactId\n+        $groupId = $dependencyNode.groupId\n+        # If the artifactId and groupId are both empty then check to see if this\n+        # is part of a configuration entry. If so then just continue.\n+        if (!$artifactId -and !$groupId)\n+        {\n+            $isPartOfConfig = Confirm-Node-Is-Part-Of-Configuration $dependencyNode\n+            if (!$isPartOfConfig)\n+            {\n+                $script:FoundError = $true\n+                # Because this particular case is harder to track down, print the OuterXML which is effectively the entire tag\n+                Write-Error-With-Color \"Error: dependency is missing version element and/or artifactId and groupId elements dependencyNode=$($dependencyNode.OuterXml)\"\n+            }\n+            continue\n+        }\n+        $hashKey = \"$($groupId):$($artifactId)\"\n+        $versionNode = $dependencyNode.GetElementsByTagName(\"version\")[0]\n+        # If this is something we build and release, it better have a version and a version tag\n+        if ($libHash.ContainsKey($hashKey))\n+        {\n+            if (-not $versionNode)\n+            {\n+                $script:FoundError = $true\n+                Write-Error-With-Color \"Error: dependency is missing version element and tag groupId=$($groupId), artifactId=$($artifactId) should be <version></version> <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+            } else {\n+                # verify the version tag and version are correct\n+                if ($versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")\n+                {\n+                    $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+                    if ($retVal)\n+                    {\n+                        $script:FoundError = $true\n+                        Write-Error-With-Color \"$($retVal)\"\n+                    }\n+                } else {\n+                    $script:FoundError = $true\n+                    Write-Error-With-Color \"Error: dependency is missing version tag groupId=$($groupId), artifactId=$($artifactId) tag should be <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+                }\n+            }\n+        } else {\n+            # else, if there's a version tag verify it, otherwise just skip it since the version should be coming\n+            # from the bom\n+            if ($versionNode -and $versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc8a95d8cacd280ea6078a33140ed1a9a5cd161"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNzk5Mw==", "bodyText": "Good catch. This should be checking if there's a version node separately...something like. I'll update it in the next commit. (sorry, it keeps messing up the formatting)\n`\nif ($versionNode) {\nif ($versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\") \n{\n\n    ...do verification on the tag and version\n\n}\nelse {\n\n    Error because there's a version with no version tag\n\n}\n\n}\n`", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12784#discussion_r452537993", "createdAt": "2020-07-09T23:10:20Z", "author": {"login": "JimSuplizio"}, "path": "eng/versioning/pom_file_version_scanner.ps1", "diffHunk": "@@ -248,6 +255,100 @@ function Confirm-Node-Is-Part-Of-Configuration {\n     return $false\n }\n \n+# Spring samples will pull in most dependencies through use of the spring bom. Any dependency that is an\n+# an azure sdk client dependency needs to be verified and must have a groupId, artifactId, version and version tag.\n+# Similarly, any dependency with a version needs to have a version tag. Dependencies without a version tag are\n+# ignored as those are assumed to be coming from the BOM.\n+function Assert-Spring-Sample-Version-Tags {\n+    param(\n+        [hashtable]$libHash,\n+        [hashtable]$extDepHash,\n+        [xml]$xmlPomFile\n+    )\n+    Write-Host \"processing Spring Sample pomFile=$($pomFile)\"\n+    $xmlNsManagerSpring = New-Object -TypeName \"Xml.XmlNamespaceManager\" -ArgumentList $xmlPomFile.NameTable\n+    $xmlNsManagerSpring.AddNamespace(\"ns\", $xmlPomFile.DocumentElement.NamespaceURI)\n+\n+    if (-not $xmlPomFile.project.parent.groupId)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/groupId is missing.\"\n+    }\n+\n+    $versionNode = $xmlPomFile.SelectSingleNode(\"/ns:project/ns:parent/ns:version\", $xmlNsManagerSpring)\n+    if (-not $versionNode)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/version is missing.\"\n+        Write-Error-With-ColorWrite-Error-With-Color \"Error: Missing project/version update tag. The tag should be <!-- {x-version-update;$($groupId):$($artifactId);current} -->\"\n+    } else {\n+        $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+        if ($retVal)\n+        {\n+            $script:FoundError = $true\n+            Write-Error-With-Color \"$($retVal)\"\n+        }\n+    }\n+\n+    # Loop through the dependencies. If any dependency is in the libHash (aka, the libraries we build)\n+    # then it needs to have a version element and update tag.\n+    foreach($dependencyNode in $xmlPomFile.GetElementsByTagName(\"dependency\"))\n+    {\n+        $artifactId = $dependencyNode.artifactId\n+        $groupId = $dependencyNode.groupId\n+        # If the artifactId and groupId are both empty then check to see if this\n+        # is part of a configuration entry. If so then just continue.\n+        if (!$artifactId -and !$groupId)\n+        {\n+            $isPartOfConfig = Confirm-Node-Is-Part-Of-Configuration $dependencyNode\n+            if (!$isPartOfConfig)\n+            {\n+                $script:FoundError = $true\n+                # Because this particular case is harder to track down, print the OuterXML which is effectively the entire tag\n+                Write-Error-With-Color \"Error: dependency is missing version element and/or artifactId and groupId elements dependencyNode=$($dependencyNode.OuterXml)\"\n+            }\n+            continue\n+        }\n+        $hashKey = \"$($groupId):$($artifactId)\"\n+        $versionNode = $dependencyNode.GetElementsByTagName(\"version\")[0]\n+        # If this is something we build and release, it better have a version and a version tag\n+        if ($libHash.ContainsKey($hashKey))\n+        {\n+            if (-not $versionNode)\n+            {\n+                $script:FoundError = $true\n+                Write-Error-With-Color \"Error: dependency is missing version element and tag groupId=$($groupId), artifactId=$($artifactId) should be <version></version> <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+            } else {\n+                # verify the version tag and version are correct\n+                if ($versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")\n+                {\n+                    $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+                    if ($retVal)\n+                    {\n+                        $script:FoundError = $true\n+                        Write-Error-With-Color \"$($retVal)\"\n+                    }\n+                } else {\n+                    $script:FoundError = $true\n+                    Write-Error-With-Color \"Error: dependency is missing version tag groupId=$($groupId), artifactId=$($artifactId) tag should be <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+                }\n+            }\n+        } else {\n+            # else, if there's a version tag verify it, otherwise just skip it since the version should be coming\n+            # from the bom\n+            if ($versionNode -and $versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDM3Nw=="}, "originalCommit": {"oid": "5bc8a95d8cacd280ea6078a33140ed1a9a5cd161"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NTU5NQ==", "bodyText": "This was added with the latest commit. I'm resolving the conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12784#discussion_r452885595", "createdAt": "2020-07-10T14:39:13Z", "author": {"login": "JimSuplizio"}, "path": "eng/versioning/pom_file_version_scanner.ps1", "diffHunk": "@@ -248,6 +255,100 @@ function Confirm-Node-Is-Part-Of-Configuration {\n     return $false\n }\n \n+# Spring samples will pull in most dependencies through use of the spring bom. Any dependency that is an\n+# an azure sdk client dependency needs to be verified and must have a groupId, artifactId, version and version tag.\n+# Similarly, any dependency with a version needs to have a version tag. Dependencies without a version tag are\n+# ignored as those are assumed to be coming from the BOM.\n+function Assert-Spring-Sample-Version-Tags {\n+    param(\n+        [hashtable]$libHash,\n+        [hashtable]$extDepHash,\n+        [xml]$xmlPomFile\n+    )\n+    Write-Host \"processing Spring Sample pomFile=$($pomFile)\"\n+    $xmlNsManagerSpring = New-Object -TypeName \"Xml.XmlNamespaceManager\" -ArgumentList $xmlPomFile.NameTable\n+    $xmlNsManagerSpring.AddNamespace(\"ns\", $xmlPomFile.DocumentElement.NamespaceURI)\n+\n+    if (-not $xmlPomFile.project.parent.groupId)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/groupId is missing.\"\n+    }\n+\n+    $versionNode = $xmlPomFile.SelectSingleNode(\"/ns:project/ns:parent/ns:version\", $xmlNsManagerSpring)\n+    if (-not $versionNode)\n+    {\n+        $script:FoundError = $true\n+        Write-Error-With-Color \"Error: parent/version is missing.\"\n+        Write-Error-With-ColorWrite-Error-With-Color \"Error: Missing project/version update tag. The tag should be <!-- {x-version-update;$($groupId):$($artifactId);current} -->\"\n+    } else {\n+        $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+        if ($retVal)\n+        {\n+            $script:FoundError = $true\n+            Write-Error-With-Color \"$($retVal)\"\n+        }\n+    }\n+\n+    # Loop through the dependencies. If any dependency is in the libHash (aka, the libraries we build)\n+    # then it needs to have a version element and update tag.\n+    foreach($dependencyNode in $xmlPomFile.GetElementsByTagName(\"dependency\"))\n+    {\n+        $artifactId = $dependencyNode.artifactId\n+        $groupId = $dependencyNode.groupId\n+        # If the artifactId and groupId are both empty then check to see if this\n+        # is part of a configuration entry. If so then just continue.\n+        if (!$artifactId -and !$groupId)\n+        {\n+            $isPartOfConfig = Confirm-Node-Is-Part-Of-Configuration $dependencyNode\n+            if (!$isPartOfConfig)\n+            {\n+                $script:FoundError = $true\n+                # Because this particular case is harder to track down, print the OuterXML which is effectively the entire tag\n+                Write-Error-With-Color \"Error: dependency is missing version element and/or artifactId and groupId elements dependencyNode=$($dependencyNode.OuterXml)\"\n+            }\n+            continue\n+        }\n+        $hashKey = \"$($groupId):$($artifactId)\"\n+        $versionNode = $dependencyNode.GetElementsByTagName(\"version\")[0]\n+        # If this is something we build and release, it better have a version and a version tag\n+        if ($libHash.ContainsKey($hashKey))\n+        {\n+            if (-not $versionNode)\n+            {\n+                $script:FoundError = $true\n+                Write-Error-With-Color \"Error: dependency is missing version element and tag groupId=$($groupId), artifactId=$($artifactId) should be <version></version> <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+            } else {\n+                # verify the version tag and version are correct\n+                if ($versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")\n+                {\n+                    $retVal = Test-Dependency-Tag-And-Version $libHash $extDepHash $versionNode.InnerText.Trim() $versionNode.NextSibling.Value\n+                    if ($retVal)\n+                    {\n+                        $script:FoundError = $true\n+                        Write-Error-With-Color \"$($retVal)\"\n+                    }\n+                } else {\n+                    $script:FoundError = $true\n+                    Write-Error-With-Color \"Error: dependency is missing version tag groupId=$($groupId), artifactId=$($artifactId) tag should be <!-- {x-version-update;$($groupId):$($artifactId);current|dependency|external_dependency<select one>} -->\"\n+                }\n+            }\n+        } else {\n+            # else, if there's a version tag verify it, otherwise just skip it since the version should be coming\n+            # from the bom\n+            if ($versionNode -and $versionNode.NextSibling -and $versionNode.NextSibling.NodeType -eq \"Comment\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDM3Nw=="}, "originalCommit": {"oid": "5bc8a95d8cacd280ea6078a33140ed1a9a5cd161"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3683, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}