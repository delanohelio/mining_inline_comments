{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjI2Nzg2", "number": 13816, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxMzowM1rOEVlFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozMTo1OFrOEVlcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDYzMTMzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxMzowM1rOG8a0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxMzowM1rOG8a0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNzIyOA==", "bodyText": "Made AvroSerializer a sub-interface to ObjectSerializer so it can extend at will in the future without cause breaking changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13816#discussion_r466007228", "createdAt": "2020-08-05T21:13:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic Avro serialization and deserialization methods.\n+ */\n+public interface AvroSerializer extends ObjectSerializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b4524c5d07d1d106c9a33eb30e9c7e8a8ea6b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDYzMzc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializerProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxMzo1NlrOG8a2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxMzo1NlrOG8a2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNzYzNw==", "bodyText": "Added these new methods to the provider as they are tied to the specific implementation and not a specific serializer instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13816#discussion_r466007637", "createdAt": "2020-08-05T21:13:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializerProvider.java", "diffHunk": "@@ -3,19 +3,35 @@\n \n package com.azure.core.experimental.serializer;\n \n-import com.azure.core.util.serializer.ObjectSerializer;\n-\n /**\n- * An interface to be implemented by any azure-core plugin that wishes to provide an Avro {@link ObjectSerializer}\n+ * An interface to be implemented by any azure-core plugin that wishes to provide an Avro {@link AvroSerializer}\n  * implementation.\n  */\n public interface AvroSerializerProvider {\n \n     /**\n-     * Creates a new Avro-based {@link ObjectSerializer} tied to the given schema.\n+     * Creates a new {@link AvroSerializer} tied to the given schema.\n      *\n      * @param schema The Avro schema that will be associated to the serializer.\n-     * @return A new Avro-based {@link ObjectSerializer} instance.\n+     * @return A new {@link AvroSerializer} instance.\n+     */\n+    AvroSerializer createInstance(String schema);\n+\n+    /**\n+     * Returns the Avro schema for specified object.\n+     *\n+     * @param object The object having its Avro schema retrieved.\n+     * @return The Avro schema for the object.\n+     * @throws IllegalArgumentException If the object is an unsupported type.\n+     */\n+    String getSchema(Object object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b4524c5d07d1d106c9a33eb30e9c7e8a8ea6b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDY4OTI5OnYy", "diffSide": "RIGHT", "path": "sdk/schemaregistry/azure-data-schemaregistry-avro/src/main/java/com/azure/data/schemaregistry/avro/AvroSchemaRegistryCodec.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozMTo1OFrOG8bYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTozODowMVrOG8biwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNjI5MA==", "bodyText": "Not sure how this will work.\nThe output of this function is required for calling decode().  So if we don't do the parse here, then decode() will have to parse.  That'll lose the deserialization caching that happens on the SR client layer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13816#discussion_r466016290", "createdAt": "2020-08-05T21:31:58Z", "author": {"login": "arerlend"}, "path": "sdk/schemaregistry/azure-data-schemaregistry-avro/src/main/java/com/azure/data/schemaregistry/avro/AvroSchemaRegistryCodec.java", "diffHunk": "@@ -52,20 +45,18 @@ public SerializationType getSerializationType() {\n      * @return avro schema\n      */\n     @Override\n-    public Schema parseSchemaString(String schemaString) {\n-        return (new Schema.Parser()).parse(schemaString);\n+    public String parseSchemaString(String schemaString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b4524c5d07d1d106c9a33eb30e9c7e8a8ea6b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNzAwNw==", "bodyText": "OK I see.  So the provider will be in charge of caching.  That should be fine.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13816#discussion_r466017007", "createdAt": "2020-08-05T21:33:42Z", "author": {"login": "arerlend"}, "path": "sdk/schemaregistry/azure-data-schemaregistry-avro/src/main/java/com/azure/data/schemaregistry/avro/AvroSchemaRegistryCodec.java", "diffHunk": "@@ -52,20 +45,18 @@ public SerializationType getSerializationType() {\n      * @return avro schema\n      */\n     @Override\n-    public Schema parseSchemaString(String schemaString) {\n-        return (new Schema.Parser()).parse(schemaString);\n+    public String parseSchemaString(String schemaString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNjI5MA=="}, "originalCommit": {"oid": "a95b4524c5d07d1d106c9a33eb30e9c7e8a8ea6b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxOTAwOA==", "bodyText": "SchemaRegistryObject has a getSchema() that will need to be removed.  It should only return a schema string now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13816#discussion_r466019008", "createdAt": "2020-08-05T21:38:01Z", "author": {"login": "arerlend"}, "path": "sdk/schemaregistry/azure-data-schemaregistry-avro/src/main/java/com/azure/data/schemaregistry/avro/AvroSchemaRegistryCodec.java", "diffHunk": "@@ -52,20 +45,18 @@ public SerializationType getSerializationType() {\n      * @return avro schema\n      */\n     @Override\n-    public Schema parseSchemaString(String schemaString) {\n-        return (new Schema.Parser()).parse(schemaString);\n+    public String parseSchemaString(String schemaString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNjI5MA=="}, "originalCommit": {"oid": "a95b4524c5d07d1d106c9a33eb30e9c7e8a8ea6b"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}