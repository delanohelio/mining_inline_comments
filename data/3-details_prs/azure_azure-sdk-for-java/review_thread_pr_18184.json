{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDA0NTcx", "number": 18184, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNTowM1rOFHNToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDo0NlrOFHXi7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTAyMzY5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNTowM1rOIIlMVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzo0Mzo0MFrOIOFI3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw==", "bodyText": "Will intel sense show these contracts?\nAlso can it be made deprecated to start with?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545868887", "createdAt": "2020-12-18T14:35:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -130,6 +131,12 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n         return copy;\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static CosmosClientBuilder setUsingState(CosmosClientBuilder cosmosClientBuilder, CosmosClientState state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1ODM1Nw==", "bodyText": "This is an established pattern in the SDK. There are many other methods in this file with the same pattern. We should follow the same pattern here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545958357", "createdAt": "2020-12-18T16:50:07Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -130,6 +131,12 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n         return copy;\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static CosmosClientBuilder setUsingState(CosmosClientBuilder cosmosClientBuilder, CosmosClientState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNTE2Ng==", "bodyText": "removed the CosmosBridgeInternal completely.\nsee this commit please:\n2f31869\nThis is a pattern to get rid of BridgeInternal classes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r551635166", "createdAt": "2021-01-04T23:43:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -130,6 +131,12 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n         return copy;\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static CosmosClientBuilder setUsingState(CosmosClientBuilder cosmosClientBuilder, CosmosClientState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTAyODc4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNjoxN1rOIIlPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozNDo1N1rOIIsLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ==", "bodyText": "Its actually metadata cache only right.\nState might mean many other aspects.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545869631", "createdAt": "2020-12-18T14:36:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NDQxMA==", "bodyText": "Good point. will change the name to reflect it is metadata caches. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545954410", "createdAt": "2020-12-18T16:43:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MzQxMQ==", "bodyText": "addressed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545983411", "createdAt": "2020-12-18T17:34:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTAzMzE2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozNzoyNVrOIIlR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1MDoyMlrOIIqqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDI4OQ==", "bodyText": "ni: Indent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545870289", "createdAt": "2020-12-18T14:37:25Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);\n+        documentClient.serialize(this);\n+    }\n+\n+    public void serializeCollectionInfoByNameCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByNameCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    public void serializeCollectionInfoByIdCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByIdCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    private byte[] serializeAsyncCollectionCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);\n+        objectOutputStream.writeObject(AsyncCache.SerializableAsyncCache.from(cache, String.class, DocumentCollection.class));\n+\n+        objectOutputStream.close();\n+        return baos.toByteArray();\n+    }\n+\n+    public AsyncCache<String, DocumentCollection> getCollectionInfoByNameCache() throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1ODUwOQ==", "bodyText": "This file is revised.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545958509", "createdAt": "2020-12-18T16:50:22Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);\n+        documentClient.serialize(this);\n+    }\n+\n+    public void serializeCollectionInfoByNameCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByNameCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    public void serializeCollectionInfoByIdCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByIdCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    private byte[] serializeAsyncCollectionCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);\n+        objectOutputStream.writeObject(AsyncCache.SerializableAsyncCache.from(cache, String.class, DocumentCollection.class));\n+\n+        objectOutputStream.close();\n+        return baos.toByteArray();\n+    }\n+\n+    public AsyncCache<String, DocumentCollection> getCollectionInfoByNameCache() throws IOException, ClassNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDI4OQ=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTA3MTQ2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NTozOFrOIIlo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozNDoxM1rOIIsKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NjE5Nw==", "bodyText": "CosmosException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876197", "createdAt": "2020-12-18T14:45:38Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -384,7 +387,18 @@ public void init() {\n             this.globalEndpointManager.init();\n             this.initializeGatewayConfigurationReader();\n \n-            this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy);\n+            if (state != null ) {\n+                try {\n+                    this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy,\n+                        state.getCollectionInfoByNameCache(),\n+                        state.getCollectionInfoByIdCache()\n+                    );\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MzAwNw==", "bodyText": "thanks. addressed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545983007", "createdAt": "2020-12-18T17:34:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -384,7 +387,18 @@ public void init() {\n             this.globalEndpointManager.init();\n             this.initializeGatewayConfigurationReader();\n \n-            this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy);\n+            if (state != null ) {\n+                try {\n+                    this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy,\n+                        state.getCollectionInfoByNameCache(),\n+                        state.getCollectionInfoByIdCache()\n+                    );\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NjE5Nw=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTA3NTAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo0NjowOFrOIIlrFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMTozMlrOIIsERA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3Njc1OQ==", "bodyText": "How will be \"backward compatibility\" mnaged?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876759", "createdAt": "2020-12-18T14:46:08Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTUwOA==", "bodyText": "I am assuming you are referring to serializing caches of SDK from an older version of the SDK and trying to deserialize on newer version of the SDK.\nAssuming I understood the question correctly.\n\neach of the component that we serialize/deserialize has a \"serialVersionUID\" which ensures the serialization code and deserialization code are on the same version. If they are not Java serialization will throw exception.\n\nsee this please:\nThe serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an InvalidClassException. A serializable class can declare its own serialVersionUID explicitly by declaring a field named \"serialVersionUID\" that must be static, final, and of type long:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\n\nif this happens in a spark cluster we have a bigger problem as it means different nodes of the spark cluster are on different versions of the spark-connector, in this situation many other things will go wrong too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545981508", "createdAt": "2020-12-18T17:31:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3Njc1OQ=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTExMDA5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MToyNlrOIIl_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoxOTozNlrOIIrqeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTk2NQ==", "bodyText": "By name is a reference or derived one.\nHow about limit to primitive data only?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545881965", "createdAt": "2020-12-18T14:51:26Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);\n+        state.serializeCollectionInfoByNameCache(cache.collectionInfoByNameCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NDkwNQ==", "bodyText": "this is by a reference. serializing cache.collectionInfoByIdCache and cache.collectionInfoByIdCache are necessary for taking a snapshot of the CollectionCache.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545974905", "createdAt": "2020-12-18T17:19:36Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);\n+        state.serializeCollectionInfoByNameCache(cache.collectionInfoByNameCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTk2NQ=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTEzNjAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1NTowMlrOIImO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1MTo0M1rOIIqtxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA==", "bodyText": "Are routing addresses also cached?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545885944", "createdAt": "2020-12-18T14:55:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4Njc2Mw==", "bodyText": "Saw this as TODO in description. Thanks.\n\nIn reply to: 545885944 [](ancestors = 545885944)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545886763", "createdAt": "2020-12-18T14:55:44Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1OTM2Nw==", "bodyText": "This PR provides the foundation for the cache broadcast but for now I only wired up the CollectionCache serialization.\nPlease see PR description TODOs for more info.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545959367", "createdAt": "2020-12-18T16:51:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA=="}, "originalCommit": {"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjcwMDExOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/main/scala/com/azure/cosmos/spark/CosmosPartitionReader.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDowNVrOII0x9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDowNVrOII0x9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDI3Ng==", "bodyText": "Just my 2 cents: I don't think the Spark connector should be allowed to use internal API. Instead I think we need to add this to public surface area (as beta first). It encourages customers to use internal API if we start using it across different maven packages/binaries", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124276", "createdAt": "2020-12-18T22:40:05Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/main/scala/com/azure/cosmos/spark/CosmosPartitionReader.scala", "diffHunk": "@@ -25,10 +30,16 @@ case class CosmosPartitionReader(config: Map[String, String], readSchema: Struct\n \n   // TODO: moderakh cache the cosmos clients and manage the lifetime of the clients\n   // we shouldn't recreate everytime, causing resource leak, inefficient behaviour\n-  val cosmosAsyncContainer = new CosmosClientBuilder()\n+  val builder = new CosmosClientBuilder()\n     .endpoint(endpointConfig.endpoint)\n     .key(endpointConfig.key)\n-    .buildAsyncClient()\n+\n+  val state = cosmosClientStateHandle.value;\n+\n+  CosmosBridgeInternal.metadataCaches(builder, cosmosClientStateHandle.value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjcwMTI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjo0MDo0NlrOII0ypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzo0MTo1M1rOIOFGsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDQ1NQ==", "bodyText": "This should be public instead (see comment above)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124455", "createdAt": "2020-12-18T22:40:46Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -116,6 +118,15 @@ public CosmosClientBuilder() {\n         this.throttlingRetryOptions = new ThrottlingRetryOptions();\n     }\n \n+    CosmosClientBuilder metadataCaches(CosmosClientMetadataCachesSnapshot metadataCachesSnapshot) {\n+        this.state = metadataCachesSnapshot;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNDYxMA==", "bodyText": "please see this commit:\n2f31869\nThe api is internal now and also removed bridge-internal. This is a pattern we can follow elsewhere too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r551634610", "createdAt": "2021-01-04T23:41:53Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -116,6 +118,15 @@ public CosmosClientBuilder() {\n         this.throttlingRetryOptions = new ThrottlingRetryOptions();\n     }\n \n+    CosmosClientBuilder metadataCaches(CosmosClientMetadataCachesSnapshot metadataCachesSnapshot) {\n+        this.state = metadataCachesSnapshot;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDQ1NQ=="}, "originalCommit": {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2604, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}