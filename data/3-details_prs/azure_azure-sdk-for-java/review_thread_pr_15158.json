{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzQ3Mzc0", "number": 15158, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozODo0MlrOEjOUDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozODo1OVrOEjOUZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzcwMTI1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozODo0MlrOHRdhPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MDowM1rOHRdkLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTQ4NQ==", "bodyText": "Is this check required? Wouldn't something other than the accepted response code generate an exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488071485", "createdAt": "2020-09-14T16:38:42Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public static void runRelationshipsSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"RELATIONSHIP SAMPLE\");\n+\n+        // For the purpose of keeping code snippets readable to the user, hardcoded string literals are used in place of assigned variables, eg Ids.\n+        // Despite not being a good code practice, this prevents code snippets from being out of context for the user when making API calls that accept Ids as parameters.\n+\n+        String sampleBuildingModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.BUILDING_MODEL_ID, client, randomIntegerStringGenerator);\n+        String sampleFloorModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.FLOOR_MODEL_ID, client, randomIntegerStringGenerator);\n+\n+        String buildingTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"buildingTwinId\", client, randomIntegerStringGenerator);\n+        String floorTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"floorTwinId\", client, randomIntegerStringGenerator);\n+\n+        final String buildingFloorRelationshipId = \"buildingFloorRelationshipId\";\n+\n+        String buildingModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleBuildingModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Building\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"contains\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleFloorModelId);\n+\n+        String floorModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleFloorModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Floor\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"containedIn\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleBuildingModelId);\n+\n+        List<ModelData> createdModels = client.createModels(new ArrayList<>(Arrays.asList(buildingModelPayload, floorModelPayload)));\n+\n+        for (ModelData model : createdModels) {\n+            ConsoleLogger.print(\"Created model \" + model.getId());\n+        }\n+\n+        // Create a building digital twin\n+        BasicDigitalTwin buildingDigitalTwin = new BasicDigitalTwin()\n+            .setId(buildingTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleBuildingModelId));\n+\n+        client.createDigitalTwin(buildingTwinId, mapper.writeValueAsString(buildingDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + buildingDigitalTwin.getId());\n+\n+        BasicDigitalTwin floorDigitalTwin = new BasicDigitalTwin()\n+            .setId(floorTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleFloorModelId));\n+\n+        client.createDigitalTwin(floorTwinId, mapper.writeValueAsString(floorDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + floorDigitalTwin.getId());\n+\n+        ConsoleLogger.printHeader(\"Create relationships\");\n+\n+        BasicRelationship buildingFloorRelationshipPayload = new BasicRelationship()\n+            .setId(buildingFloorRelationshipId)\n+            .setSourceId(buildingTwinId)\n+            .setTargetId(floorTwinId)\n+            .setName(\"contains\")\n+            .setCustomProperties(\"Prop1\", \"Prop1 value\")\n+            .setCustomProperties(\"Prop2\", 6);\n+\n+        client.createRelationship(buildingTwinId, buildingFloorRelationshipId, mapper.writeValueAsString(buildingFloorRelationshipPayload));\n+\n+        ConsoleLogger.printSuccess(\"Created a digital twin relationship \"+ buildingFloorRelationshipId + \" from twin: \" + buildingTwinId + \" to twin: \" + floorTwinId);\n+\n+        ConsoleLogger.printHeader(\"Get Relationship\");\n+        Response<BasicRelationship> getRelationshipRepsonse = client.getRelationshipWithResponse(\n+            buildingTwinId,\n+            buildingFloorRelationshipId,\n+            BasicRelationship.class,\n+            Context.NONE);\n+\n+        if (getRelationshipRepsonse.getStatusCode() == HttpURLConnection.HTTP_OK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjIzOQ==", "bodyText": "not really a check but a sample code on how to check status codes ... we don't really need it for the sample to function", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072239", "createdAt": "2020-09-14T16:40:03Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public static void runRelationshipsSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"RELATIONSHIP SAMPLE\");\n+\n+        // For the purpose of keeping code snippets readable to the user, hardcoded string literals are used in place of assigned variables, eg Ids.\n+        // Despite not being a good code practice, this prevents code snippets from being out of context for the user when making API calls that accept Ids as parameters.\n+\n+        String sampleBuildingModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.BUILDING_MODEL_ID, client, randomIntegerStringGenerator);\n+        String sampleFloorModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.FLOOR_MODEL_ID, client, randomIntegerStringGenerator);\n+\n+        String buildingTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"buildingTwinId\", client, randomIntegerStringGenerator);\n+        String floorTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"floorTwinId\", client, randomIntegerStringGenerator);\n+\n+        final String buildingFloorRelationshipId = \"buildingFloorRelationshipId\";\n+\n+        String buildingModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleBuildingModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Building\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"contains\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleFloorModelId);\n+\n+        String floorModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleFloorModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Floor\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"containedIn\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleBuildingModelId);\n+\n+        List<ModelData> createdModels = client.createModels(new ArrayList<>(Arrays.asList(buildingModelPayload, floorModelPayload)));\n+\n+        for (ModelData model : createdModels) {\n+            ConsoleLogger.print(\"Created model \" + model.getId());\n+        }\n+\n+        // Create a building digital twin\n+        BasicDigitalTwin buildingDigitalTwin = new BasicDigitalTwin()\n+            .setId(buildingTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleBuildingModelId));\n+\n+        client.createDigitalTwin(buildingTwinId, mapper.writeValueAsString(buildingDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + buildingDigitalTwin.getId());\n+\n+        BasicDigitalTwin floorDigitalTwin = new BasicDigitalTwin()\n+            .setId(floorTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleFloorModelId));\n+\n+        client.createDigitalTwin(floorTwinId, mapper.writeValueAsString(floorDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + floorDigitalTwin.getId());\n+\n+        ConsoleLogger.printHeader(\"Create relationships\");\n+\n+        BasicRelationship buildingFloorRelationshipPayload = new BasicRelationship()\n+            .setId(buildingFloorRelationshipId)\n+            .setSourceId(buildingTwinId)\n+            .setTargetId(floorTwinId)\n+            .setName(\"contains\")\n+            .setCustomProperties(\"Prop1\", \"Prop1 value\")\n+            .setCustomProperties(\"Prop2\", 6);\n+\n+        client.createRelationship(buildingTwinId, buildingFloorRelationshipId, mapper.writeValueAsString(buildingFloorRelationshipPayload));\n+\n+        ConsoleLogger.printSuccess(\"Created a digital twin relationship \"+ buildingFloorRelationshipId + \" from twin: \" + buildingTwinId + \" to twin: \" + floorTwinId);\n+\n+        ConsoleLogger.printHeader(\"Get Relationship\");\n+        Response<BasicRelationship> getRelationshipRepsonse = client.getRelationshipWithResponse(\n+            buildingTwinId,\n+            buildingFloorRelationshipId,\n+            BasicRelationship.class,\n+            Context.NONE);\n+\n+        if (getRelationshipRepsonse.getStatusCode() == HttpURLConnection.HTTP_OK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTQ4NQ=="}, "originalCommit": {"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzcwMjEyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozODo1OVrOHRdh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0MDoyN1rOHRdk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ==", "bodyText": "What does this do?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488071635", "createdAt": "2020-09-14T16:38:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjI5OQ==", "bodyText": "needs to go", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072299", "createdAt": "2020-09-14T16:40:10Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ=="}, "originalCommit": {"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjQ0NA==", "bodyText": "it allows us to use Response without any type parameters.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072444", "createdAt": "2020-09-14T16:40:27Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ=="}, "originalCommit": {"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1120, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}