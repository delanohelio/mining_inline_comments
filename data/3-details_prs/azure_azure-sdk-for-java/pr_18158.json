{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODAyNDU2", "number": 18158, "title": "Sanitize Non-Proxy Host Configurations", "bodyText": "Fixes #18156\nThis PR adds functionality to sanitize non-proxy hosts configurations loaded from http.nonProxyHosts or NO_PROXY before using them in ProxyOptions. The underlying HttpClients expect the non-proxy hosts to be a regex safe string that is used to determine if a request URL host matches and if so proxying doesn't occur.", "createdAt": "2020-12-16T00:13:20Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158", "merged": true, "mergeCommit": {"oid": "f73ace9b998062260865b48486cb2f635dc9982b"}, "closed": true, "closedAt": "2020-12-16T20:39:32Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmfVRdgH2gAyNTQwODAyNDU2OjEyMWJlZGMyMTQzY2IxNTU0NWMxMjk2MTNlYmRiYWZmMDBkOGRhZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm05BLAFqTU1NDA1NDgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "121bedc2143cb15545c129613ebdbaff00d8daec", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/121bedc2143cb15545c129613ebdbaff00d8daec", "committedDate": "2020-12-15T19:16:39Z", "message": "Update ProxyOptions to cleanse http.nonProxyHosts and NO_PROXY configurations before setting the nonProxyHosts property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ede2b1c60d333aaa899b21c68ff5ae8cc40a46", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/02ede2b1c60d333aaa899b21c68ff5ae8cc40a46", "committedDate": "2020-12-15T22:23:40Z", "message": "Update Netty proxying tests with more permutations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caee46f06e02b83eeeed8554ed08c22cacf70449", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/caee46f06e02b83eeeed8554ed08c22cacf70449", "committedDate": "2020-12-16T00:10:44Z", "message": "Update OkHttp proxying tests with more permutations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9", "committedDate": "2020-12-16T01:03:57Z", "message": "Fix linting and test issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTY2NTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#pullrequestreview-553966570", "createdAt": "2020-12-16T18:25:19Z", "commit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyNToyMFrOIHTJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo0MDoyMFrOIHTvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDY2MQ==", "bodyText": "Why did we change to partial match here instead of whole string match?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544524661", "createdAt": "2020-12-16T18:25:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "diffHunk": "@@ -34,7 +34,7 @@ public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, Str\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n          * proxy.\n          */\n-        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).matches())\n+        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).find())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNTUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"http://exmaple.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"\n          \n          \n            \n                        \"http://example.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544525512", "createdAt": "2020-12-16T18:26:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "diffHunk": "@@ -261,32 +282,94 @@ public void nullDispatcherThrows() {\n     }\n \n     /**\n-     * Tests building a client with a given proxy.\n+     * Tests that building a client with a proxy will send the request through the proxy server.\n      */\n     @ParameterizedTest\n-    @EnumSource(ProxyOptions.Type.class)\n-    public void buildWithProxy(ProxyOptions.Type proxyType) {\n-        String expectedProxyHost = \"localhost\";\n-        int expectedProxyPort = 8888;\n-\n-        ProxyOptions proxyOptions = new ProxyOptions(proxyType,\n-            new InetSocketAddress(expectedProxyHost, expectedProxyPort)).setCredentials(\"1\", \"1\");\n-\n-        OkHttpClient validatorClient = new OkHttpClient.Builder()\n-            .eventListener(new TestEventListenerValidator(expectedProxyHost, expectedProxyPort))\n-            .build();\n+    @MethodSource(\"buildWithProxySupplier\")\n+    public void buildWithProxy(boolean shouldHaveProxy, Proxy.Type proxyType, ProxyOptions proxyOptions,\n+        String requestUrl) {\n+        OkHttpClient validatorClient = okHttpClientWithProxyValidation(shouldHaveProxy, proxyType);\n \n-        OkHttpAsyncHttpClient okClient = (OkHttpAsyncHttpClient) new OkHttpAsyncHttpClientBuilder(validatorClient)\n+        HttpClient okClient = new OkHttpAsyncHttpClientBuilder(validatorClient)\n             .proxy(proxyOptions)\n             .build();\n \n-        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, defaultUrl)))\n-            .verifyError();\n+        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, requestUrl)))\n+            .verifyErrorMatches(throwable -> throwable.getMessage()\n+                .contains(TestEventListenerValidator.EXPECTED_EXCEPTION_MESSAGE));\n+    }\n+\n+    private static Stream<Arguments> buildWithProxySupplier() {\n+        InetSocketAddress proxyAddress = new InetSocketAddress(\"localhost\", 12345);\n+\n+        ProxyOptions socks4Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS4, proxyAddress);\n+        ProxyOptions socks5Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS5, proxyAddress);\n+        ProxyOptions simpleHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress);\n+\n+        List<Arguments> arguments = new ArrayList<>();\n+\n+        /*\n+         * Simple non-authenticated proxies without non-proxy hosts configured.\n+         */\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks4Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks5Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, simpleHttpProxy, defaultUrl));\n+\n+        /*\n+         * HTTP proxy with authentication configured.\n+         */\n+        ProxyOptions authenticatedHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress)\n+            .setCredentials(\"1\", \"1\");\n+\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, authenticatedHttpProxy, defaultUrl));\n+\n+        /*\n+         * Information for non-proxy hosts testing.\n+         */\n+        String rawNonProxyHosts = String.join(\"|\", \"localhost\", \"127.0.0.1\", \"*.microsoft.com\", \"*.linkedin.com\");\n+\n+        String[] requestUrlsWithoutProxying = new String[]{\n+            \"http://localhost\", \"http://127.0.0.1\", \"http://azure.microsoft.com\", \"http://careers.linkedin.com\"\n+        };\n+\n+        String[] requestUrlsWithProxying = new String[]{\n+            \"http://exmaple.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMjMyNA==", "bodyText": "Given that we are now using find() instead of matches(), can \"*.microsoft.com\" just be \".microsoft.com\"? The * prefix may not be necessary now if that was the intention to switch to find().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544532324", "createdAt": "2020-12-16T18:37:02Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "diffHunk": "@@ -261,32 +282,94 @@ public void nullDispatcherThrows() {\n     }\n \n     /**\n-     * Tests building a client with a given proxy.\n+     * Tests that building a client with a proxy will send the request through the proxy server.\n      */\n     @ParameterizedTest\n-    @EnumSource(ProxyOptions.Type.class)\n-    public void buildWithProxy(ProxyOptions.Type proxyType) {\n-        String expectedProxyHost = \"localhost\";\n-        int expectedProxyPort = 8888;\n-\n-        ProxyOptions proxyOptions = new ProxyOptions(proxyType,\n-            new InetSocketAddress(expectedProxyHost, expectedProxyPort)).setCredentials(\"1\", \"1\");\n-\n-        OkHttpClient validatorClient = new OkHttpClient.Builder()\n-            .eventListener(new TestEventListenerValidator(expectedProxyHost, expectedProxyPort))\n-            .build();\n+    @MethodSource(\"buildWithProxySupplier\")\n+    public void buildWithProxy(boolean shouldHaveProxy, Proxy.Type proxyType, ProxyOptions proxyOptions,\n+        String requestUrl) {\n+        OkHttpClient validatorClient = okHttpClientWithProxyValidation(shouldHaveProxy, proxyType);\n \n-        OkHttpAsyncHttpClient okClient = (OkHttpAsyncHttpClient) new OkHttpAsyncHttpClientBuilder(validatorClient)\n+        HttpClient okClient = new OkHttpAsyncHttpClientBuilder(validatorClient)\n             .proxy(proxyOptions)\n             .build();\n \n-        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, defaultUrl)))\n-            .verifyError();\n+        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, requestUrl)))\n+            .verifyErrorMatches(throwable -> throwable.getMessage()\n+                .contains(TestEventListenerValidator.EXPECTED_EXCEPTION_MESSAGE));\n+    }\n+\n+    private static Stream<Arguments> buildWithProxySupplier() {\n+        InetSocketAddress proxyAddress = new InetSocketAddress(\"localhost\", 12345);\n+\n+        ProxyOptions socks4Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS4, proxyAddress);\n+        ProxyOptions socks5Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS5, proxyAddress);\n+        ProxyOptions simpleHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress);\n+\n+        List<Arguments> arguments = new ArrayList<>();\n+\n+        /*\n+         * Simple non-authenticated proxies without non-proxy hosts configured.\n+         */\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks4Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks5Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, simpleHttpProxy, defaultUrl));\n+\n+        /*\n+         * HTTP proxy with authentication configured.\n+         */\n+        ProxyOptions authenticatedHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress)\n+            .setCredentials(\"1\", \"1\");\n+\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, authenticatedHttpProxy, defaultUrl));\n+\n+        /*\n+         * Information for non-proxy hosts testing.\n+         */\n+        String rawNonProxyHosts = String.join(\"|\", \"localhost\", \"127.0.0.1\", \"*.microsoft.com\", \"*.linkedin.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzNDM4Mw==", "bodyText": "The names of both these methods are very similar - sanitizeNoProxy and sanitizeNonProxyHosts and they almost do the same thing. It might be worth combining them or having a more descriptive method name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544534383", "createdAt": "2020-12-16T18:40:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -216,6 +221,16 @@ private static ProxyOptions attemptToLoadAzureProxy(Configuration configuration,\n         }\n     }\n \n+    /*\n+     * Helper function that sanitizes 'NO_PROXY' into a Pattern safe string.\n+     */\n+    private static String sanitizeNoProxy(String noProxyString) {\n+        /*\n+         * The 'NO_PROXY' environment variable is expected to be delimited by ','.\n+         */\n+        return sanitizeNonProxyHosts(noProxyString.split(\",\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0a0c198f2447b9b507aa8e94f8714ccdc58589", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e0a0c198f2447b9b507aa8e94f8714ccdc58589", "committedDate": "2020-12-16T19:47:49Z", "message": "Fixed typos, changed handling for NO_PROXY, reverted find back to matches"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDU0ODM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#pullrequestreview-554054838", "createdAt": "2020-12-16T20:23:42Z", "commit": {"oid": "7e0a0c198f2447b9b507aa8e94f8714ccdc58589"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1265, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}