{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODAyNDU2", "number": 18158, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyNToyMFrOFGVbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo0MDoyMFrOFGVz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTg2Nzc4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyNToyMFrOIHTJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo0NzowN1rOIHWTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDY2MQ==", "bodyText": "Why did we change to partial match here instead of whole string match?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544524661", "createdAt": "2020-12-16T18:25:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "diffHunk": "@@ -34,7 +34,7 @@ public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, Str\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n          * proxy.\n          */\n-        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).matches())\n+        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).find())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzOTYxMQ==", "bodyText": "This should be reverted back to find as the pattern should match the entire regex", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544539611", "createdAt": "2020-12-16T18:48:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "diffHunk": "@@ -34,7 +34,7 @@ public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, Str\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n          * proxy.\n          */\n-        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).matches())\n+        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).find())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDY2MQ=="}, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU1NTAwMw==", "bodyText": "Did you mean reverted back to matches()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544555003", "createdAt": "2020-12-16T19:12:37Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "diffHunk": "@@ -34,7 +34,7 @@ public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, Str\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n          * proxy.\n          */\n-        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).matches())\n+        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).find())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDY2MQ=="}, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NjQyMQ==", "bodyText": "Yes \ud83d\ude03", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544576421", "createdAt": "2020-12-16T19:47:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/implementation/OkHttpProxySelector.java", "diffHunk": "@@ -34,7 +34,7 @@ public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, Str\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n          * proxy.\n          */\n-        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).matches())\n+        return (nonProxyHostsPattern == null || !nonProxyHostsPattern.matcher(uri.getHost()).find())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNDY2MQ=="}, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTg3MzU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyNjo0MFrOIHTMyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoyNjo0MFrOIHTMyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyNTUxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"http://exmaple.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"\n          \n          \n            \n                        \"http://example.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544525512", "createdAt": "2020-12-16T18:26:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "diffHunk": "@@ -261,32 +282,94 @@ public void nullDispatcherThrows() {\n     }\n \n     /**\n-     * Tests building a client with a given proxy.\n+     * Tests that building a client with a proxy will send the request through the proxy server.\n      */\n     @ParameterizedTest\n-    @EnumSource(ProxyOptions.Type.class)\n-    public void buildWithProxy(ProxyOptions.Type proxyType) {\n-        String expectedProxyHost = \"localhost\";\n-        int expectedProxyPort = 8888;\n-\n-        ProxyOptions proxyOptions = new ProxyOptions(proxyType,\n-            new InetSocketAddress(expectedProxyHost, expectedProxyPort)).setCredentials(\"1\", \"1\");\n-\n-        OkHttpClient validatorClient = new OkHttpClient.Builder()\n-            .eventListener(new TestEventListenerValidator(expectedProxyHost, expectedProxyPort))\n-            .build();\n+    @MethodSource(\"buildWithProxySupplier\")\n+    public void buildWithProxy(boolean shouldHaveProxy, Proxy.Type proxyType, ProxyOptions proxyOptions,\n+        String requestUrl) {\n+        OkHttpClient validatorClient = okHttpClientWithProxyValidation(shouldHaveProxy, proxyType);\n \n-        OkHttpAsyncHttpClient okClient = (OkHttpAsyncHttpClient) new OkHttpAsyncHttpClientBuilder(validatorClient)\n+        HttpClient okClient = new OkHttpAsyncHttpClientBuilder(validatorClient)\n             .proxy(proxyOptions)\n             .build();\n \n-        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, defaultUrl)))\n-            .verifyError();\n+        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, requestUrl)))\n+            .verifyErrorMatches(throwable -> throwable.getMessage()\n+                .contains(TestEventListenerValidator.EXPECTED_EXCEPTION_MESSAGE));\n+    }\n+\n+    private static Stream<Arguments> buildWithProxySupplier() {\n+        InetSocketAddress proxyAddress = new InetSocketAddress(\"localhost\", 12345);\n+\n+        ProxyOptions socks4Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS4, proxyAddress);\n+        ProxyOptions socks5Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS5, proxyAddress);\n+        ProxyOptions simpleHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress);\n+\n+        List<Arguments> arguments = new ArrayList<>();\n+\n+        /*\n+         * Simple non-authenticated proxies without non-proxy hosts configured.\n+         */\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks4Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks5Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, simpleHttpProxy, defaultUrl));\n+\n+        /*\n+         * HTTP proxy with authentication configured.\n+         */\n+        ProxyOptions authenticatedHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress)\n+            .setCredentials(\"1\", \"1\");\n+\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, authenticatedHttpProxy, defaultUrl));\n+\n+        /*\n+         * Information for non-proxy hosts testing.\n+         */\n+        String rawNonProxyHosts = String.join(\"|\", \"localhost\", \"127.0.0.1\", \"*.microsoft.com\", \"*.linkedin.com\");\n+\n+        String[] requestUrlsWithoutProxying = new String[]{\n+            \"http://localhost\", \"http://127.0.0.1\", \"http://azure.microsoft.com\", \"http://careers.linkedin.com\"\n+        };\n+\n+        String[] requestUrlsWithProxying = new String[]{\n+            \"http://exmaple.com\", \"http://portal.azure.com\", \"http://linkedin.com\", \"http://8.8.8.8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTkxNzc2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODozNzowMlrOIHTnZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODozNzowMlrOIHTnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMjMyNA==", "bodyText": "Given that we are now using find() instead of matches(), can \"*.microsoft.com\" just be \".microsoft.com\"? The * prefix may not be necessary now if that was the intention to switch to find().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544532324", "createdAt": "2020-12-16T18:37:02Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-okhttp/src/test/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilderTests.java", "diffHunk": "@@ -261,32 +282,94 @@ public void nullDispatcherThrows() {\n     }\n \n     /**\n-     * Tests building a client with a given proxy.\n+     * Tests that building a client with a proxy will send the request through the proxy server.\n      */\n     @ParameterizedTest\n-    @EnumSource(ProxyOptions.Type.class)\n-    public void buildWithProxy(ProxyOptions.Type proxyType) {\n-        String expectedProxyHost = \"localhost\";\n-        int expectedProxyPort = 8888;\n-\n-        ProxyOptions proxyOptions = new ProxyOptions(proxyType,\n-            new InetSocketAddress(expectedProxyHost, expectedProxyPort)).setCredentials(\"1\", \"1\");\n-\n-        OkHttpClient validatorClient = new OkHttpClient.Builder()\n-            .eventListener(new TestEventListenerValidator(expectedProxyHost, expectedProxyPort))\n-            .build();\n+    @MethodSource(\"buildWithProxySupplier\")\n+    public void buildWithProxy(boolean shouldHaveProxy, Proxy.Type proxyType, ProxyOptions proxyOptions,\n+        String requestUrl) {\n+        OkHttpClient validatorClient = okHttpClientWithProxyValidation(shouldHaveProxy, proxyType);\n \n-        OkHttpAsyncHttpClient okClient = (OkHttpAsyncHttpClient) new OkHttpAsyncHttpClientBuilder(validatorClient)\n+        HttpClient okClient = new OkHttpAsyncHttpClientBuilder(validatorClient)\n             .proxy(proxyOptions)\n             .build();\n \n-        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, defaultUrl)))\n-            .verifyError();\n+        StepVerifier.create(okClient.send(new HttpRequest(HttpMethod.GET, requestUrl)))\n+            .verifyErrorMatches(throwable -> throwable.getMessage()\n+                .contains(TestEventListenerValidator.EXPECTED_EXCEPTION_MESSAGE));\n+    }\n+\n+    private static Stream<Arguments> buildWithProxySupplier() {\n+        InetSocketAddress proxyAddress = new InetSocketAddress(\"localhost\", 12345);\n+\n+        ProxyOptions socks4Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS4, proxyAddress);\n+        ProxyOptions socks5Proxy = new ProxyOptions(ProxyOptions.Type.SOCKS5, proxyAddress);\n+        ProxyOptions simpleHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress);\n+\n+        List<Arguments> arguments = new ArrayList<>();\n+\n+        /*\n+         * Simple non-authenticated proxies without non-proxy hosts configured.\n+         */\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks4Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.SOCKS, socks5Proxy, defaultUrl));\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, simpleHttpProxy, defaultUrl));\n+\n+        /*\n+         * HTTP proxy with authentication configured.\n+         */\n+        ProxyOptions authenticatedHttpProxy = new ProxyOptions(ProxyOptions.Type.HTTP, proxyAddress)\n+            .setCredentials(\"1\", \"1\");\n+\n+        arguments.add(Arguments.of(true, Proxy.Type.HTTP, authenticatedHttpProxy, defaultUrl));\n+\n+        /*\n+         * Information for non-proxy hosts testing.\n+         */\n+        String rawNonProxyHosts = String.join(\"|\", \"localhost\", \"127.0.0.1\", \"*.microsoft.com\", \"*.linkedin.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTkzMTIyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo0MDoyMFrOIHTvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo0OTowOFrOIHWYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzNDM4Mw==", "bodyText": "The names of both these methods are very similar - sanitizeNoProxy and sanitizeNonProxyHosts and they almost do the same thing. It might be worth combining them or having a more descriptive method name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544534383", "createdAt": "2020-12-16T18:40:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -216,6 +221,16 @@ private static ProxyOptions attemptToLoadAzureProxy(Configuration configuration,\n         }\n     }\n \n+    /*\n+     * Helper function that sanitizes 'NO_PROXY' into a Pattern safe string.\n+     */\n+    private static String sanitizeNoProxy(String noProxyString) {\n+        /*\n+         * The 'NO_PROXY' environment variable is expected to be delimited by ','.\n+         */\n+        return sanitizeNonProxyHosts(noProxyString.split(\",\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NzYwNQ==", "bodyText": "Removed the method being called into as the expected format for NO_PROXY and http.nonProxyHosts differ enough to warrant separate code paths for sanitation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18158#discussion_r544577605", "createdAt": "2020-12-16T19:49:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -216,6 +221,16 @@ private static ProxyOptions attemptToLoadAzureProxy(Configuration configuration,\n         }\n     }\n \n+    /*\n+     * Helper function that sanitizes 'NO_PROXY' into a Pattern safe string.\n+     */\n+    private static String sanitizeNoProxy(String noProxyString) {\n+        /*\n+         * The 'NO_PROXY' environment variable is expected to be delimited by ','.\n+         */\n+        return sanitizeNonProxyHosts(noProxyString.split(\",\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzNDM4Mw=="}, "originalCommit": {"oid": "c7577e5d5e25ffffaeb8c22e5d3ab3c671987df9"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2589, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}