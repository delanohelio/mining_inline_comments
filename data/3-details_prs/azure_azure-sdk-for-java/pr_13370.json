{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MTkzMjk3", "number": 13370, "title": "Changed to use reactive test class StepVerifier to confirm test result", "bodyText": "The relevant PR is #13321", "createdAt": "2020-07-21T06:49:31Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370", "merged": true, "mergeCommit": {"oid": "1d5560c01c7e416071eb4fdb357c95b6e15a91f4"}, "closed": true, "closedAt": "2020-07-22T05:10:59Z", "author": {"login": "moarychan"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2oiAEAH2gAyNDU0MTkzMjk3OjE5NDlkNWIwZTIwNTI1MTYzNTNlOGJjODJlMTY5YWFmZGZjZTYyMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3Ql2AAFqTQ1MjkzNTIyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1949d5b0e2052516353e8bc82e169aafdfce620b", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1949d5b0e2052516353e8bc82e169aafdfce620b", "committedDate": "2020-07-20T02:51:20Z", "message": "Allow Long as ID type in Entity for Cosmos DB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70aa09c72c749642780fdb06690dd1219f0856ad", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/70aa09c72c749642780fdb06690dd1219f0856ad", "committedDate": "2020-07-20T07:50:53Z", "message": "Unified processing of ID type conversion and added test cases\nhttps://github.com/Azure/azure-sdk-for-java/issues/12712"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e42ed2c5b89685d1124bf941b31b3fb9c3e7f4c", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e42ed2c5b89685d1124bf941b31b3fb9c3e7f4c", "committedDate": "2020-07-20T09:45:22Z", "message": "Updated code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103ffa2f9ce3e08e1185e9388ab62e1cedbcbbc2", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/103ffa2f9ce3e08e1185e9388ab62e1cedbcbbc2", "committedDate": "2020-07-20T09:46:32Z", "message": "Updated code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa5b64cdd0f340bd00c26f6f726899bdc3ac98e", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2aa5b64cdd0f340bd00c26f6f726899bdc3ac98e", "committedDate": "2020-07-20T16:36:46Z", "message": "Updated getStringIDValue API to return String instead of Object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3fcfd8a49e7dd3d3685ddf6a0bb7deda19abf6", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee3fcfd8a49e7dd3d3685ddf6a0bb7deda19abf6", "committedDate": "2020-07-21T05:16:15Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into feature/cosmos/long-id-in-entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f3880d001830d805dc4a003f0e4a191b81adc45", "committedDate": "2020-07-21T06:46:14Z", "message": "Changed to use reactive test class StepVerifier to confirm test result; https://github.com/Azure/azure-sdk-for-java/issues/12712"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjUwNDg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#pullrequestreview-452650486", "createdAt": "2020-07-21T16:53:31Z", "commit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MzozMlrOG1BH7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowMzo1OVrOG1BhNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NjEyNg==", "bodyText": "Setup can be done on a blocking call - need not to worry about it, but this looks good, thanks :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458246126", "createdAt": "2020-07-21T16:53:32Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -60,8 +56,8 @@ public void setUp() {\n             staticTemplate = template;\n             template.createContainerIfNotExists(entityInformation);\n         }\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.save(DOMAIN_2).block(DEFAULT_TIME_OUT);\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MDcyMw==", "bodyText": "Here, we should test that the response is the saved DOMAIN_1\nsomething like this ->\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n          \n          \n            \n                    StepVerifier.create(findIdMono).expectNext(DOMAIN_1).expectComplete().verify();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458250723", "createdAt": "2020-07-21T17:00:46Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();\n \n-        Assert.assertTrue(foundOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1.getNumber(), foundOptional.get().getNumber());\n-        Assert.assertEquals(DOMAIN_1.getName(), foundOptional.get().getName());\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTA1Ng==", "bodyText": "Here, we can make sure that nothing is returned from the backend - since we deleted all entities.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(idMono).verifyComplete();\n          \n          \n            \n                    StepVerifier.create(idMono).expectNextCount(0).verifyComplete();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251056", "createdAt": "2020-07-21T17:01:21Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTU4Ng==", "bodyText": "Same here, we can make sure that entities are not returned back.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(afterDelIdMono).verifyComplete();\n          \n          \n            \n                    StepVerifier.create(afterDelIdMono).expectNextCount(0).verifyComplete();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251586", "createdAt": "2020-07-21T17:02:08Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();\n \n-        Assert.assertTrue(foundOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1.getNumber(), foundOptional.get().getNumber());\n-        Assert.assertEquals(DOMAIN_1.getName(), foundOptional.get().getName());\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n \n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(findIdMono).expectNext(DOMAIN_1).expectComplete().verify();\n \n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deleteMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteMono).verifyComplete();\n+\n+        Mono<LongIdDomainPartition> afterDelIdMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(afterDelIdMono).verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTg0MQ==", "bodyText": "We can verify the count here as well, like you have done below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251841", "createdAt": "2020-07-21T17:02:38Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -99,32 +102,21 @@ public void testInvalidDomain() {\n     }\n \n     @Test\n-    public void testBasicQuery() {\n-        LongIdDomainPartition save = this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertNotNull(save);\n-    }\n+    public void testSaveAllAndFindAll() {\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-    @Test\n-    public void testSaveAndFindById() {\n-        Assert.assertNotNull(this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT));\n-        Optional<LongIdDomainPartition> longIdDomainPartitionOptional = this.repository\n-            .findById(DOMAIN_1.getNumber()).blockOptional(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(longIdDomainPartitionOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1, longIdDomainPartitionOptional.get());\n-    }\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjA4Nw==", "bodyText": "Same here, make sure the expectNextCount = 0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252087", "createdAt": "2020-07-21T17:03:04Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjM3Mg==", "bodyText": "expectNext = DOMAIN_1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252372", "createdAt": "2020-07-21T17:03:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteByIdShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.deleteById(DOMAIN_1.getNumber()).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        final Mono<Void> deleteIdMono = repository.deleteById(DOMAIN_1.getNumber(),\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDelete() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(1 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjU5OA==", "bodyText": "expectNextCount = 2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252598", "createdAt": "2020-07-21T17:03:59Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteByIdShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.deleteById(DOMAIN_1.getNumber()).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        final Mono<Void> deleteIdMono = repository.deleteById(DOMAIN_1.getNumber(),\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDelete() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(1 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n+\n+        Mono<Void> deleteMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteMono).verifyComplete();\n+\n+        Mono<Long> countMono = repository.count();\n+        StepVerifier.create(countMono).expectNext(1L).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        Mono<Void> deleteIdMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDeleteAll() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.save(DOMAIN_2).block(DEFAULT_TIME_OUT);\n-        this.repository.deleteAll(Arrays.asList(DOMAIN_1, DOMAIN_2)).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(0 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45"}, "originalPosition": 181}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbdd683d8ed65c5196bad39b7aa803c84eaa1506", "author": {"user": {"login": "moarychan", "name": "Moary Chen"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbdd683d8ed65c5196bad39b7aa803c84eaa1506", "committedDate": "2020-07-22T01:16:41Z", "message": "Optimize use case logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTM1MjI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#pullrequestreview-452935224", "createdAt": "2020-07-22T01:31:44Z", "commit": {"oid": "dbdd683d8ed65c5196bad39b7aa803c84eaa1506"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}