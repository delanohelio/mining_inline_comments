{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzAyMjM1", "number": 17003, "title": "[Service Bus] Migration Guide", "bodyText": "This PR adds a migration guide for Service Bus based on our work at https://github.com/conniey/azure-sdk-for-java/blob/feature/session-receiver/sdk/servicebus/azure-messaging-servicebus/migration-guide.md\nThe changes here over the above content is to accommodate the recent design changes for the processor client.\nThe processor parts here are based on https://gist.github.com/srnagar/0c1bcf22b8536b7234f304682ba1aad9\nCloses #14570", "createdAt": "2020-10-30T01:35:59Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17003", "merged": true, "mergeCommit": {"oid": "e350f882c20940871006cd4afde669d5fa9e0692"}, "closed": true, "closedAt": "2020-10-30T16:27:08Z", "author": {"login": "ramya-rao-a"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXci4UAH2gAyNTEyNzAyMjM1OjM5MTAxNGQ3ZmVjMzg5MDc5MzBjNzBlNzliMDNmYzgxNjk0NzE5NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXgh5mgH2gAyNTEyNzAyMjM1OjNjNzFmMmMzODRlZjU0MTMyZThjYjhiMDkyMjIyOWRiZTViMDcwOWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "391014d7fec38907930c70e79b03fc8169471948", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/391014d7fec38907930c70e79b03fc8169471948", "committedDate": "2020-10-30T01:32:56Z", "message": "[Service Bus] Migration Guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52978baf64e901ec28ccfb24ef771b1db6724d2d", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52978baf64e901ec28ccfb24ef771b1db6724d2d", "committedDate": "2020-10-30T01:48:18Z", "message": "Add processor parts as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8218eaa8cf6bf80b22c46cdf9cce4eaf0cf5c571", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8218eaa8cf6bf80b22c46cdf9cce4eaf0cf5c571", "committedDate": "2020-10-30T01:54:53Z", "message": "Refining session client parts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzg3NjQ1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17003#pullrequestreview-520387645", "createdAt": "2020-10-30T05:37:39Z", "commit": {"oid": "8218eaa8cf6bf80b22c46cdf9cce4eaf0cf5c571"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNzozOVrOHrB37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNzozOVrOHrB37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4MTUxNw==", "bodyText": "We'll probably have to use embedme tool for injecting these code snippets into the migration guide to ensure they are compilable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sender.SendMessage(message);\n          \n          \n            \n            sender.sendMessage(message);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17003#discussion_r514881517", "createdAt": "2020-10-30T05:37:39Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/migration-guide.md", "diffHunk": "@@ -0,0 +1,377 @@\n+# Guide for migrating to azure-messaging-servicebus\n+\n+This guide assists in the migration to version 7 of the Service Bus client library\n+[`com.azure:azure-messaging-servicebus`](https://search.maven.org/artifact/com.azure/azure-messaging-servicebus) from\n+version 3 of\n+[`com.microsoft.azure:azure-servicebus`](https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus/). It\n+will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `com.microsoft.azure:azure-servicebus` library is assumed. For those new to the Service Bus client\n+library for Java, please refer to the\n+[README](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/README.md)\n+and [Service Bus\n+samples](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus)\n+for the `azure-messaging-servicebus` library rather than this guide.\n+\n+## Table of contents\n+\n+- [Guide for migrating to azure-messaging-servicebus](#guide-for-migrating-to-azure-messaging-servicebus)\n+  - [Table of contents](#table-of-contents)\n+  - [Migration benefits](#migration-benefits)\n+  - [General changes](#general-changes)\n+    - [Group id, artifact id, and package names](#group-id-artifact-id-and-package-names)\n+    - [Client hierarchy](#client-hierarchy)\n+    - [Async programming model](#async-programming-model)\n+    - [Connection Pooling](#connection-pooling)\n+  - [Migration Samples](#migration-samples)\n+    - [Instantiating clients](#instantiating-clients)\n+    - [Sending messages](#sending-messages)\n+    - [Receiving messages](#receiving-messages)\n+    - [Working with sessions](#working-with-sessions)\n+  - [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of\n+doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on\n+learning the patterns and practices to best support developer productivity and to understand the gaps that the Java\n+client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most\n+important is that the client libraries for different Azure services have not had a consistent approach to organization,\n+naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs\n+did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific\n+Azure service.\n+\n+To improve the development experience across Azure services, including Service Bus, a set of uniform [design\n+guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a\n+consistent experience with established API patterns for all services. A set of [Java specific\n+guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients\n+have a natural and idiomatic feel that mirrors that of Java developers. Further details are available in the guidelines\n+for those interested.\n+\n+The new Service Bus library `azure-messaging-servicebus` provides the ability to share in some of the cross-service\n+improvements made to the Azure development experience, such as using the new `azure-identity` library to share a single\n+authentication between clients and a unified diagnostics pipeline offering a common view of the activities across each\n+of the client libraries.\n+\n+While we believe that there is significant benefit to adopting the new Service Bus library `azure-messaging-servicebus`,\n+it is important to be aware that the previous version `azure-servicebus` have not been officially deprecated. They will\n+continue to be supported with security and bug fixes as well as receiving some minor refinements. However, in the near\n+future they will not be under active development and new features are unlikely to be added to them.\n+\n+## General changes\n+\n+### Group id, artifact id, and package names\n+\n+Artifact and package names for the modern Azure client libraries for Java have changed. Legacy clients have the\n+`com.microsoft.azure` group id where-as, the new clients use `com.azure`. In addition, each will follow the artifact id\n+pattern `azure-[area].[service]` where the legacy clients followed the pattern `azure-[service]`. This provides a quick\n+and accessible means to help understand, at a glance, whether you are using the modern or legacy clients.\n+\n+In the case of Service Bus, the new client libraries have packages and namespaces that begin with\n+`com.azure.messaging.servicebus` and were released beginning with version 7. The legacy client libraries have packages\n+and namespaces that begin with `com.microsoft.azure.servicebus` and a version of 3.x.x or below.\n+\n+### Client hierarchy\n+\n+As part of the new Java SDK guidelines, all clients are instantiated from a builder which is the single entry point to the library.\n+Each client is expected to have a sync and async version that can be instantiated via `buildAsyncClient()` or `buildClient()` methods\n+on the builder.\n+\n+In the new Service Bus library, this single entry point is the `ServiceBusClientBuilder` which can be used to create sender and receiver\n+clients to the queue/topic/subscription/session of your choice and start sending/receiving messages.\n+\n+### Async programming model\n+\n+Usage of `CompletableFuture` for async operations is replaced with a different programming model that uses [Project Reactor](https://projectreactor.io).\n+This is a shift to thinking about data as a Stream of information.\n+\n+Project Reactor has many bridge APIs to quickly migrate code using `CompletableFuture`. A few examples are:\n+* [Mono.fromFuture(CompletableFuture<T>)](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#fromFuture-java.util.concurrent.CompletableFuture-)\n+* [Mono.fromCompletionStage(CompletionStage<T> completionStage)](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#fromCompletionStage-java.util.concurrent.CompletionStage-)\n+* For more: [Mono](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html)\n+\n+### Connection Pooling\n+\n+By using a single top-level client builder, we can implicitly share a single AMQP connection for all operations that an\n+application performs. In the previous library `azure-servicebus`, connection sharing was explicit. You had to pass in a\n+`MessagingFactory` object  to share a connection.\n+\n+By making this connection sharing be implicit to a `ServiceBusClientBuilder` instance, we can help ensure that\n+applications will not use multiple connections unless they explicitly opt in by creating multiple client builder\n+instances.\n+\n+## Migration Samples\n+\n+### Instantiating clients\n+\n+While we continue to support connection strings when constructing a client, the main difference is when using Azure\n+Active Directory. We now use the new [azure-identity](https://search.maven.org/artifact/com.azure/azure-identity)\n+library to share a single authentication solution between clients of different Azure services.\n+\n+```java\n+// Create a sender client that will authenticate through Active Directory\n+TokenCredential credential = new DefaultAzureCredentialBuilder()\n+    .build();\n+String fullyQualifiedNamespace = \"yournamespace.servicebus.windows.net\";\n+ServiceBusSenderClient client = new ServiceBusClientBuilder()\n+    .credential(fullyQualifiedNamespace, credential)\n+    .sender()\n+    .queueName(\"my-queue\")\n+    .buildClient();\n+\n+// Create a sender client that will authenticate using a connection string\n+String connectionString = \"Endpoint=sb://yournamespace.servicebus.windows.net/;SharedAccessKeyName=your-key-name;SharedAccessKey=your-key\";\n+ServiceBusSenderClient client = new ServiceBusClientBuilder()\n+    .connectionString(connectionString)\n+    .sender()\n+    .queueName(\"my-queue\")\n+    .buildClient();\n+```\n+\n+### Sending messages\n+\n+Previously, in `azure-servicebus`, you could send messages either by using a `IQueueClient` (or `ITopicClient` if you\n+are targeting a topic) or the `IMessageSender`.\n+\n+While the `IQueueClient` supported the simple send operation, the `IMessageSender` supported that and advanced scenarios\n+like scheduling to send messages at a later time and cancelling such scheduled messages.\n+\n+```java\n+String queueName = \"my-queue\";\n+String connectionString = \"Endpoint=sb://yournamespace.servicebus.windows.net/;\"\n+    + \"SharedAccessKeyName=your-key-name;SharedAccessKey=your-key\";\n+\n+// create a message to send\n+Message message = new Message(\"content\");\n+\n+// send using the QueueClient\n+QueueClient client = new QueueClient(new ConnectionStringBuilder(connectionString, queueName),\n+    ReceiveMode.PEEKLOCK);\n+client.send(message);\n+\n+// send using the IMessageSender\n+IMessageSender sender = ClientFactory.createMessageSenderFromConnectionStringBuilder(\n+    new ConnectionStringBuilder(connectionString, queueName));\n+sender.send(message);\n+```\n+\n+Now in `azure-messaging-servicebus`, we combine all send related features under a common class `ServiceBusSenderClient`\n+and its async counterpart `ServiceBusSenderAsyncClient`. You can create these from the top-level client builder using the `sender()` method to\n+get a sub-builder. The sub builder takes the queue or topic you want to target. This way, we give you a one stop shop for\n+all your send related needs.\n+\n+We continue to support sending bytes in the message. Though, if you are working with strings, you can now create a\n+message directly without having to convert it to bytes first. The snippet below demonstrates the sync sender client.\n+\n+```java\n+// create the sync sender via the builder and its sub-builder\n+ServiceBusSenderClient client = new ServiceBusClientBuilder()\n+    .connectionString(connectionString)\n+    .sender()\n+    .queueName(\"my-queue\")\n+    .buildClient();\n+\n+// create a message to send\n+ServiceBusMessage message = new ServiceBusMessage(\"Hello world!\");\n+\n+// send the message\n+sender.SendMessage(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8218eaa8cf6bf80b22c46cdf9cce4eaf0cf5c571"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c71f2c384ef54132e8cb8b0922229dbe5b0709b", "author": {"user": {"login": "ramya-rao-a", "name": "Ramya Rao"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c71f2c384ef54132e8cb8b0922229dbe5b0709b", "committedDate": "2020-10-30T06:11:29Z", "message": "SendMessage -> sendMessage\n\nCo-authored-by: Srikanta <51379715+srnagar@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}