{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzE1OTA5", "number": 12521, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNToxNlrOEI9udQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1ODoxOFrOEKRjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1MzgxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNToxNlrOGpP3og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoyOTo1OVrOGpQFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDgwMg==", "bodyText": "code style: \"{\" on the same line as class definition.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445904802", "createdAt": "2020-06-26T00:15:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODMzMw==", "bodyText": "updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908333", "createdAt": "2020-06-26T00:29:59Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDgwMg=="}, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1NTA5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNjowNVrOGpP4dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDozMDowNlrOGpQFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTAxMw==", "bodyText": "code style: java static field name all caps:\nNull -> NULL\nPropertyName -> PROPERTY_NAME", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905013", "createdAt": "2020-06-26T00:16:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {\n+        public static final UInt128 Null = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODM3Mg==", "bodyText": "updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908372", "createdAt": "2020-06-26T00:30:06Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {\n+        public static final UInt128 Null = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTAxMw=="}, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1NzU4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNzozMlrOGpP59g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDozMDoyN1rOGpQF2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM5OA==", "bodyText": "code style xor?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905398", "createdAt": "2020-06-26T00:17:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 XOR(UInt128 other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODQ0Mg==", "bodyText": "changed to xor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908442", "createdAt": "2020-06-26T00:30:27Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 XOR(UInt128 other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM5OA=="}, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1ODM1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxODowNVrOGpP6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDozMDozOFrOGpQF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUxOA==", "bodyText": "to be consistent with existing tests:\ndrop the \"Test\" prefix. here and other new tests..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905518", "createdAt": "2020-06-26T00:18:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DistinctHashTest {\n+\n+    @Test(groups = {\"unit\"})\n+    public void TestHashForNull() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODQ3OQ==", "bodyText": "changed to *Hash", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908479", "createdAt": "2020-06-26T00:30:38Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DistinctHashTest {\n+\n+    @Test(groups = {\"unit\"})\n+    public void TestHashForNull() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUxOA=="}, "originalCommit": {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTI4NTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0MzoyM1rOGpYyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MTozOVrOGppqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MDg5Ng==", "bodyText": "file header for new files.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446050896", "createdAt": "2020-06-26T08:43:23Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6d6bca1bcc38d4162ae42932462278146362614"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzMyNQ==", "bodyText": "added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446327325", "createdAt": "2020-06-26T17:51:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MDg5Ng=="}, "originalCommit": {"oid": "a6d6bca1bcc38d4162ae42932462278146362614"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAwMzcxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MzoyMFrOGpptWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowNzozOVrOGpqHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODE1Mg==", "bodyText": "the exception message is not correct you are not passing any arg to need String.format and %s", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446328152", "createdAt": "2020-06-26T17:53:20Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting has %s\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8178690bce9782bbefd0fdef0cf578724f9c4df3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDgwMw==", "bodyText": "yea, a typo, want to pass the type and the exception message, changed to following:\nString.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage())", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446334803", "createdAt": "2020-06-26T18:07:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting has %s\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODE1Mg=="}, "originalCommit": {"oid": "8178690bce9782bbefd0fdef0cf578724f9c4df3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAwNTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1Mzo1OVrOGppukQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowNjoxN1rOGpqEpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODQ2NQ==", "bodyText": "static field name?\n-> ROOT_HASH_SEED", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446328465", "createdAt": "2020-06-26T17:53:59Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8178690bce9782bbefd0fdef0cf578724f9c4df3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDExOQ==", "bodyText": "sorry forget this one. Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446334119", "createdAt": "2020-06-26T18:06:17Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODQ2NQ=="}, "originalCommit": {"oid": "8178690bce9782bbefd0fdef0cf578724f9c4df3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTA0ODI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowOTowNVrOGpqJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyMDo0M1rOGpqfKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTQ0NQ==", "bodyText": "with this you will be loosing the cause exception stacktrace.\nYou probably want to keep the root cause exception stacktrace.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446335445", "createdAt": "2020-06-26T18:09:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f37498de4dec4bbdc6112c27ba50f82901765d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDkwNA==", "bodyText": "I see, good point, changed to following:\nnew IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446340904", "createdAt": "2020-06-26T18:20:43Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTQ0NQ=="}, "originalCommit": {"oid": "52f37498de4dec4bbdc6112c27ba50f82901765d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA0MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NDozMVrOGrNw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMjo1NlrOGrOXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzQ0MQ==", "bodyText": "I think there is a possible infinite recursion scenario here.\nThis calls getHashFromJsonSerializable -> which then again calls this method getHash by casing resource to JsonSerializable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447967441", "createdAt": "2020-06-30T20:44:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzI1OA==", "bodyText": "it will return ObjectNode for the propertyBag, so should not have endless loop", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447977258", "createdAt": "2020-06-30T21:02:56Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzQ0MQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA1MjE1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0NzozMlrOGrN3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToxNToyOVrOGrOv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ==", "bodyText": "I think this is a typo ->\nthis.high < this.high -> should be -> this.high < other.high ??", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447969095", "createdAt": "2020-06-30T20:47:32Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 xor(UInt128 other) {\n+        return new UInt128(this.low ^ other.low, this.high ^ other.high);\n+    }\n+\n+    @Override\n+    public int compareTo(UInt128 other) {\n+        if (this.equals(other)) {\n+            return 0;\n+        }\n+        if ((this.high < this.high) || ((this.high == other.high) && (this.low < other.low))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzU1Mw==", "bodyText": "oh, yea, definitely a typo", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447977553", "createdAt": "2020-06-30T21:03:31Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 xor(UInt128 other) {\n+        return new UInt128(this.low ^ other.low, this.high ^ other.high);\n+    }\n+\n+    @Override\n+    public int compareTo(UInt128 other) {\n+        if (this.equals(other)) {\n+            return 0;\n+        }\n+        if ((this.high < this.high) || ((this.high == other.high) && (this.low < other.low))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzU5MQ==", "bodyText": "Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447983591", "createdAt": "2020-06-30T21:15:29Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 xor(UInt128 other) {\n+        return new UInt128(this.low ^ other.low, this.high ^ other.high);\n+    }\n+\n+    @Override\n+    public int compareTo(UInt128 other) {\n+        if (this.equals(other)) {\n+            return 0;\n+        }\n+        if ((this.high < this.high) || ((this.high == other.high) && (this.low < other.low))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA2MTI3OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1MDoxNlrOGrN80Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowNToxMFrOGrObuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MDUxMw==", "bodyText": "why do we need this ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447970513", "createdAt": "2020-06-30T20:50:16Z", "author": {"login": "kushagraThapar"}, "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "diffHunk": "@@ -1836,6 +1836,13 @@\n     <Bug pattern=\"UPM_UNCALLED_PRIVATE_METHOD\"/>\n   </Match>\n \n+\n+  <Match>\n+    <Class name=\"com.azure.cosmos.implementation.routing.UInt128\"/>\n+    <Method name=\"compareTo\"/>\n+    <Bug pattern=\"SA_FIELD_SELF_COMPARISON\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3ODQyNQ==", "bodyText": "I implements Comparable in Uint128, so implements compareTo, and got the complaining from spotbugs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447978425", "createdAt": "2020-06-30T21:05:10Z", "author": {"login": "xinlian12"}, "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "diffHunk": "@@ -1836,6 +1836,13 @@\n     <Bug pattern=\"UPM_UNCALLED_PRIVATE_METHOD\"/>\n   </Match>\n \n+\n+  <Match>\n+    <Class name=\"com.azure.cosmos.implementation.routing.UInt128\"/>\n+    <Method name=\"compareTo\"/>\n+    <Bug pattern=\"SA_FIELD_SELF_COMPARISON\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MDUxMw=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA4NDc0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1NzowNVrOGrOLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToxNjozMlrOGrOyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDE5NQ==", "bodyText": "I can see a possibility to merge the logic of this function - getHashFromList and getHashFromArrayNode since the logic is exactly same.\nOr @xinlian12  do you want to keep it separate for more readability ? The only downside of keeping them separate is that if we have a bug in one logic, we could have it in other logic as well and we will have to fix them separately.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447974195", "createdAt": "2020-06-30T20:57:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);\n+        }\n+        if (resource instanceof List) {\n+            return getHashFromList((List<Object>) resource, seed);\n+        }\n+        if (resource instanceof Boolean) {\n+            return (Boolean)resource ? MurmurHash3_128.hash128(HashSeeds.TRUE, seed) : MurmurHash3_128.hash128(HashSeeds.FALSE, seed);\n+        }\n+        if (resource instanceof Integer) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.INTEGER, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Long) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.LONG, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Double) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.DOUBLE, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof String) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.STRING, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof ValueNode) {\n+            return getHash(JsonSerializable.getValue((JsonNode) resource));\n+        }\n+        if (resource instanceof ArrayNode) {\n+            return getHashFromArrayNode((ArrayNode) resource, seed);\n+        }\n+        if (resource instanceof ObjectNode) {\n+            return getHashFromObjectNode((ObjectNode) resource, seed);\n         }\n \n-        final byte[] bytes = Utils.serializeObjectToByteArray(resource);\n-        UInt128 uInt128 = MurmurHash3_128.hash128(bytes, bytes.length);\n-        return uInt128;\n+        throw new IllegalArgumentException(String.format(\"Unexpected type: %s\", resource.getClass().toString()));\n     }\n \n-    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource) {\n-        final ByteBuffer byteBuffer = ModelBridgeInternal.serializeJsonToByteBuffer(resource, OBJECT_MAPPER);\n-        final byte[] bytes = byteBuffer.array();\n-        return MurmurHash3_128.hash128(bytes, bytes.length);\n+    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource, UInt128 seed) throws IOException {\n+        resource.populatePropertyBag();\n+        return getHash(resource.getPropertyBag(), seed);\n     }\n \n-    private static UInt128 getHashFromList(List<Object> resource) {\n-        UInt128 hash = ARRAY_HASH_SEED;\n-        for (Object obj : resource) {\n-            if (obj instanceof JsonSerializable) {\n-                byte[] bytes = hash.toByteBuffer().array();\n-                if (bytes.length == 0) {\n-                    throw new IllegalStateException(\"Failed to hash!\");\n-                }\n-                hash = MurmurHash3_128.hash128(bytes, bytes.length,\n-                                               getHashFromJsonSerializable((JsonSerializable) obj));\n-            }\n+    private static UInt128 getHashFromArrayNode(ArrayNode arrayNode, UInt128 seed) throws IOException {\n+        // Start the array with a distinct hash, so that empty array doesn't hash to another value.\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);\n+\n+        for (int i = 0; i < arrayNode.size(); i++) {\n+            // Order of array items matter in equality check, so add the index just in case that property does not hold in the future.\n+            UInt128 arrayItemSeed = HashSeeds.ARRAY_INDEX.add(i);\n+            hash = MurmurHash3_128.hash128(hash, getHash(arrayNode.get(i), arrayItemSeed));\n+        }\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromObjectNode(ObjectNode objectNode, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.OBJECT, seed);\n+        UInt128 intermediateHash = UInt128.ZERO;\n+\n+        // Property order should not result in a different hash.\n+        // This is consistent with equality comparison.\n+        Iterator<Map.Entry<String, JsonNode>> children = objectNode.fields();\n+        while ((children.hasNext())) {\n+            Map.Entry<String, JsonNode> child = children.next();\n+            UInt128 nameHash = MurmurHash3_128.hash128(child.getKey(), HashSeeds.PROPERTY_NAME);\n+            UInt128 propertyHash = getHash(child.getValue(), nameHash);\n+            intermediateHash = intermediateHash.xor(propertyHash);\n+        }\n+\n+        if (intermediateHash.compareTo(UInt128.ZERO) == 1) {\n+            hash = MurmurHash3_128.hash128(intermediateHash, hash);\n+        }\n+\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromList(List<Object> resource, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NDEyOA==", "bodyText": "I combined into one: getHashFromIterator, was not sure which way I should choose, but I agree it is better to keep the same logic in same method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447984128", "createdAt": "2020-06-30T21:16:32Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);\n+        }\n+        if (resource instanceof List) {\n+            return getHashFromList((List<Object>) resource, seed);\n+        }\n+        if (resource instanceof Boolean) {\n+            return (Boolean)resource ? MurmurHash3_128.hash128(HashSeeds.TRUE, seed) : MurmurHash3_128.hash128(HashSeeds.FALSE, seed);\n+        }\n+        if (resource instanceof Integer) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.INTEGER, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Long) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.LONG, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Double) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.DOUBLE, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof String) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.STRING, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof ValueNode) {\n+            return getHash(JsonSerializable.getValue((JsonNode) resource));\n+        }\n+        if (resource instanceof ArrayNode) {\n+            return getHashFromArrayNode((ArrayNode) resource, seed);\n+        }\n+        if (resource instanceof ObjectNode) {\n+            return getHashFromObjectNode((ObjectNode) resource, seed);\n         }\n \n-        final byte[] bytes = Utils.serializeObjectToByteArray(resource);\n-        UInt128 uInt128 = MurmurHash3_128.hash128(bytes, bytes.length);\n-        return uInt128;\n+        throw new IllegalArgumentException(String.format(\"Unexpected type: %s\", resource.getClass().toString()));\n     }\n \n-    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource) {\n-        final ByteBuffer byteBuffer = ModelBridgeInternal.serializeJsonToByteBuffer(resource, OBJECT_MAPPER);\n-        final byte[] bytes = byteBuffer.array();\n-        return MurmurHash3_128.hash128(bytes, bytes.length);\n+    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource, UInt128 seed) throws IOException {\n+        resource.populatePropertyBag();\n+        return getHash(resource.getPropertyBag(), seed);\n     }\n \n-    private static UInt128 getHashFromList(List<Object> resource) {\n-        UInt128 hash = ARRAY_HASH_SEED;\n-        for (Object obj : resource) {\n-            if (obj instanceof JsonSerializable) {\n-                byte[] bytes = hash.toByteBuffer().array();\n-                if (bytes.length == 0) {\n-                    throw new IllegalStateException(\"Failed to hash!\");\n-                }\n-                hash = MurmurHash3_128.hash128(bytes, bytes.length,\n-                                               getHashFromJsonSerializable((JsonSerializable) obj));\n-            }\n+    private static UInt128 getHashFromArrayNode(ArrayNode arrayNode, UInt128 seed) throws IOException {\n+        // Start the array with a distinct hash, so that empty array doesn't hash to another value.\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);\n+\n+        for (int i = 0; i < arrayNode.size(); i++) {\n+            // Order of array items matter in equality check, so add the index just in case that property does not hold in the future.\n+            UInt128 arrayItemSeed = HashSeeds.ARRAY_INDEX.add(i);\n+            hash = MurmurHash3_128.hash128(hash, getHash(arrayNode.get(i), arrayItemSeed));\n+        }\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromObjectNode(ObjectNode objectNode, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.OBJECT, seed);\n+        UInt128 intermediateHash = UInt128.ZERO;\n+\n+        // Property order should not result in a different hash.\n+        // This is consistent with equality comparison.\n+        Iterator<Map.Entry<String, JsonNode>> children = objectNode.fields();\n+        while ((children.hasNext())) {\n+            Map.Entry<String, JsonNode> child = children.next();\n+            UInt128 nameHash = MurmurHash3_128.hash128(child.getKey(), HashSeeds.PROPERTY_NAME);\n+            UInt128 propertyHash = getHash(child.getValue(), nameHash);\n+            intermediateHash = intermediateHash.xor(propertyHash);\n+        }\n+\n+        if (intermediateHash.compareTo(UInt128.ZERO) == 1) {\n+            hash = MurmurHash3_128.hash128(intermediateHash, hash);\n+        }\n+\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromList(List<Object> resource, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDE5NQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA4OTEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1ODoxOFrOGrON4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxMTozOFrOGrRg_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ==", "bodyText": "I don't think this exception message makes sense, since there is no type1 in this try catch block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447974881", "createdAt": "2020-06-30T20:58:18Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NTA1OA==", "bodyText": "hmmm, we could remove the type from the exception message, but thought it might give some hint which type is having hash issue?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447985058", "createdAt": "2020-06-30T21:18:27Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzM0OQ==", "bodyText": "why only type1 and not type2 ?\nAlso, what does type1.toString() represents ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r448027349", "createdAt": "2020-06-30T23:06:33Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODkyNw==", "bodyText": "since we can only reach to this step when type1 equals type2, so I think either should work.\nit will tell us whether it is objectNode or arrayNode. (The name of the ItemType enum)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r448028927", "createdAt": "2020-06-30T23:11:38Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}, "originalCommit": {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3750, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}