{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTU5MzQ1", "number": 15188, "title": "Add Query Tests", "bodyText": "Query tests:\nThere is an outstanding task to add test infrastructure that can test APIs that have Pageable response to test paging mechanism as well. It will be done at a later time.\nI have recorded these two test with a digital twin instance that has hundreds of twins that are eligible for the query to make sure it hits paging mechanism.", "createdAt": "2020-09-15T00:28:03Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188", "merged": true, "mergeCommit": {"oid": "22969f5ec750529fff7ea49eb253ffa8bcec5ae7"}, "closed": true, "closedAt": "2020-09-15T01:10:04Z", "author": {"login": "azabbasi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI8pBAAH2gAyNDg2OTU5MzQ1OjU5OWE0YzRmOGU3NWI0ZjYyNjVlNGUyYTAwOGRmOWY2NmIxYzc4YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI9OmRgFqTQ4ODI1NDQ1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "committedDate": "2020-09-15T00:27:44Z", "message": "Add Query Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQzODc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488243875", "createdAt": "2020-09-15T00:34:31Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNDozMVrOHRsOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNDozMVrOHRsOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMjUwNw==", "bodyText": "XML comments? I know you need to do this but I did not understand why we need this. What are we serializing a string to and why?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488312507", "createdAt": "2020-09-15T00:34:31Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {\n+    public static String serialize(String continueationToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ0Mzg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488244385", "createdAt": "2020-09-15T00:36:21Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNjoyMVrOHRsQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNjoyMVrOHRsQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzAxNQ==", "bodyText": "turns\n{\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\ninto\n\"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313015", "createdAt": "2020-09-15T00:36:21Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ0NTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488244563", "createdAt": "2020-09-15T00:36:59Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNjo1OVrOHRsRTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozNjo1OVrOHRsRTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzE2Nw==", "bodyText": "In C# you had added a test to be enabled later to test pagination. I think we should add it here as well to ensure next page really goes to the next page.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313167", "createdAt": "2020-09-15T00:36:59Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ0OTA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488244909", "createdAt": "2020-09-15T00:38:10Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ2NjM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488246639", "createdAt": "2020-09-15T00:43:48Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0Mzo0OFrOHRsY2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0Mzo0OFrOHRsY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTA5Ng==", "bodyText": "the spelling \"continueationToken\" has a typo", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488315096", "createdAt": "2020-09-15T00:43:48Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {\n+    public static String serialize(String continueationToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ3MTEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488247113", "createdAt": "2020-09-15T00:45:07Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0NTowN1rOHRsarA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0NTowN1rOHRsarA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTU2NA==", "bodyText": "IoT Hub query tests add a buffer or retry to account for any sort of propagation delay between when a twin is created and when query can find it. Does this test pass reliably?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488315564", "createdAt": "2020-09-15T00:45:07Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryAsyncTests.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryAsyncTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        try {\n+            String roomModelPayload = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+\n+            StepVerifier.create(asyncClient.createModels(new ArrayList<>(Arrays.asList(roomModelPayload))))\n+                .assertNext(response ->\n+                    assertThat(response.size())\n+                        .as(\"Created models successfully\")\n+                        .isEqualTo(1))\n+                .verifyComplete();\n+\n+            // Create a room twin with property \"IsOccupied\" : true\n+            String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+\n+            StepVerifier.create(asyncClient.createDigitalTwinWithResponse(roomTwinId, roomTwin))\n+                .assertNext(response ->\n+                    assertThat(response.getStatusCode())\n+                        .as(\"Created digitaltwin successfully\")\n+                        .isEqualTo(HttpURLConnection.HTTP_OK))\n+                .verifyComplete();\n+\n+            String queryString = \"SELECT * FROM digitaltwins where IsOccupied = true\";\n+\n+            StepVerifier.create(asyncClient.query(queryString, BasicDigitalTwin.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477956af3fe572bf42484b96479f02d0814f31be", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/477956af3fe572bf42484b96479f02d0814f31be", "committedDate": "2020-09-15T00:48:32Z", "message": "Update ContinuationTokenSerializer.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ4MzA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488248306", "createdAt": "2020-09-15T00:49:01Z", "commit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0OTowMVrOHRse5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0OTowMVrOHRse5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjY0NA==", "bodyText": "You can move the try down until the digital twin is created successfully. If the finally block executes before the digital twin is created, the thrown exception will just be \"Failed to delete digital twin\" rather than the exception that caused the pre-mature finally block", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488316644", "createdAt": "2020-09-15T00:49:01Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ5NjU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488249657", "createdAt": "2020-09-15T00:53:29Z", "commit": {"oid": "477956af3fe572bf42484b96479f02d0814f31be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjU0NDU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#pullrequestreview-488254454", "createdAt": "2020-09-15T01:08:47Z", "commit": {"oid": "477956af3fe572bf42484b96479f02d0814f31be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3510, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}