{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjExMjg5", "number": 14910, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowNzozNlrOEhW_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MTo1MVrOEhXr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE1MDY0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowNzozNlrOHOobyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxNzowN1rOHOov3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNDU4Nw==", "bodyText": "nit: Is there an additional backtick here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485104587", "createdAt": "2020-09-08T18:07:36Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTcyNw==", "bodyText": "ah yes :) You have a good eye!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485109727", "createdAt": "2020-09-08T18:17:07Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNDU4Nw=="}, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE1NTUxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowOToxMFrOHOoe7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyMjoxMlrOHOo6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNTM4OQ==", "bodyText": "does queryNextPage need the query string again?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485105389", "createdAt": "2020-09-08T18:09:10Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjQzNQ==", "bodyText": "It does not need it but no harm in passing it as well. To keep it consistent with .net, I will remove it here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485112435", "createdAt": "2020-09-08T18:22:12Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNTM4OQ=="}, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE2MjU1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMTowN1rOHOojSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMTowN1rOHOojSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjUwNA==", "bodyText": "Doesn't QuerySpecification have fluent setters?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485106504", "createdAt": "2020-09-08T18:11:07Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE2OTYzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMzoxOFrOHOon2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMzoxOFrOHOon2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNzY3Mw==", "bodyText": "nit: we've followed the pattern where the sync APIs call their next max overloads -> this sync API should call the sync API overload with Context.NONE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485107673", "createdAt": "2020-09-08T18:13:18Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE3MDcxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMzo0MVrOHOoooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxMzo0MVrOHOoooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNzg3Mg==", "bodyText": "same here as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485107872", "createdAt": "2020-09-08T18:13:41Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query, Context context) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedIterable<T> query(String query, Class<T> clazz) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, clazz));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE3Nzk1OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxNTo1NVrOHOotdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoxOTo1MFrOHOo1bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTEwOQ==", "bodyText": "I see that the query API doesn't return a pageable, is it the same for the .net client as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485109109", "createdAt": "2020-09-08T18:15:55Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMTE0OA==", "bodyText": "yes it is the same for .net as well. We need to convert it to pageable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485111148", "createdAt": "2020-09-08T18:19:50Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTEwOQ=="}, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIwMjEyOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyMzowOFrOHOo8bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNzozM1rOHOpFcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjk0Mw==", "bodyText": "From the .NET client, it looks like all we need to supply to the service is the cont. token, we don't need to pass in the query string again: https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/digitaltwins/Azure.DigitalTwins.Core/src/DigitalTwinsClient.cs#L1360-L1363\nAlso, what is our testing strategy with this (the pageable part)? Do we create 100+ twin instances and then query them? The page size isn't configurable yet, correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485112943", "createdAt": "2020-09-08T18:23:08Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTI0OQ==", "bodyText": "yes that is what I replied to your earlier comment. You don't need to pass it but there is no harm in passing it. But to keep consistency I removed it here. The page size is not configurable but we will follow the same strategy as we have in .net. I will look at it as I start implementing samples.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485115249", "createdAt": "2020-09-08T18:27:33Z", "author": {"login": "vinagesh"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjk0Mw=="}, "originalCommit": {"oid": "b42c0590b284064c1d92f3106c222566e33cf398"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2MDU2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MDoyNVrOHOpf4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MDoyNVrOHOpf4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjAxOQ==", "bodyText": "This can be return query(query, Context.NONE) instead. We can call the sync overload directly, instead of calling the async overload and creating a new PagedIterable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485122019", "createdAt": "2020-09-08T18:40:25Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, Context.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2NTU0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MTo1MVrOHOpi3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MTo1MVrOHOpi3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjc4MQ==", "bodyText": "here as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485122781", "createdAt": "2020-09-08T18:41:51Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, Context.NONE));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query, Context context) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedIterable<T> query(String query, Class<T> clazz) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, clazz, Context.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1218, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}