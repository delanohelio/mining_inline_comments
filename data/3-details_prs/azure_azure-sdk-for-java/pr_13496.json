{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDY2MTAx", "number": 13496, "title": "Search onboard with core serializer SPI ", "bodyText": "", "createdAt": "2020-07-24T20:01:21Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496", "merged": true, "mergeCommit": {"oid": "693134b56d170813cde6c2fc773810681074cece"}, "closed": true, "closedAt": "2020-08-06T16:21:27Z", "author": {"login": "sima-zhu"}, "timelineItems": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3jw8LgH2gAyNDU2NDY2MTAxOmY5NTA1NzE4ZmYzMTk5MTNiMjczODU4YjBjYjIxNTM1MTljZWEwMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8EVDKgH2gAyNDU2NDY2MTAxOmNkYThjYzlkMGY0ZDNjYTgzNWZhODkxZTAzYjZjNTQwOTg1ODU1ZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9505718ff319913b273858b0cb2153519cea00a", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9505718ff319913b273858b0cb2153519cea00a", "committedDate": "2020-07-22T23:52:03Z", "message": "Added search serializer SPI and plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b9404d1d3f27cada5f50cae9b773bb6f5b680d", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f4b9404d1d3f27cada5f50cae9b773bb6f5b680d", "committedDate": "2020-07-22T23:52:23Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into addbackexperimental"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09760c11cd8db49daec0a9dcc9b4b05bf8579108", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09760c11cd8db49daec0a9dcc9b4b05bf8579108", "committedDate": "2020-07-23T15:57:58Z", "message": "more fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0cc8b5b78058439b7c240f36fed3faae0f005a", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a0cc8b5b78058439b7c240f36fed3faae0f005a", "committedDate": "2020-07-24T19:59:05Z", "message": "Search serializer changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa49c6c4588d2ac5afe3f095625ab4bf0b62a6dd", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa49c6c4588d2ac5afe3f095625ab4bf0b62a6dd", "committedDate": "2020-07-24T20:03:38Z", "message": "Delete extra modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff6314edeb448460b0446ddd8032660fb2731b7", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ff6314edeb448460b0446ddd8032660fb2731b7", "committedDate": "2020-07-24T22:29:53Z", "message": "Fixed live tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f8fa674b069276381e0cadebe8abb8a135b1aa", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/40f8fa674b069276381e0cadebe8abb8a135b1aa", "committedDate": "2020-07-24T23:01:23Z", "message": "Keep fixing the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1314c5bd879b3f6b4387d7527bef77b4e0561969", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1314c5bd879b3f6b4387d7527bef77b4e0561969", "committedDate": "2020-07-27T15:48:46Z", "message": "Fixed linting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f8b3a8c9b1c2aea2632cf24cd7b7ebceeea41e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/75f8b3a8c9b1c2aea2632cf24cd7b7ebceeea41e", "committedDate": "2020-07-27T16:03:35Z", "message": "remove unused version changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e76f9c8eb15e805741dba0a81f108e001f1c737", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e76f9c8eb15e805741dba0a81f108e001f1c737", "committedDate": "2020-07-27T16:17:47Z", "message": "Change the way of mocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "438d4301d52784caaeb29c9443513c2baccb2379", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/438d4301d52784caaeb29c9443513c2baccb2379", "committedDate": "2020-07-27T16:25:53Z", "message": "Change the tests for mocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9aeff9ec4c8faed55e4579dc6434904e88a3e5", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab9aeff9ec4c8faed55e4579dc6434904e88a3e5", "committedDate": "2020-07-27T17:43:42Z", "message": "Fixed all tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae918caeb15bb821b07d3910c40a1c7e87abc20", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ae918caeb15bb821b07d3910c40a1c7e87abc20", "committedDate": "2020-07-27T17:57:14Z", "message": "Added tests back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b90bab191a77ed147bcc66eed777fd1e156b41e", "committedDate": "2020-07-27T18:17:23Z", "message": "Having a helper assert method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDI4MjIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-456028220", "createdAt": "2020-07-27T18:23:35Z", "commit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoyMzozNlrOG3uTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1MToxNlrOG3vOpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzQyNg==", "bodyText": "Does this ClientLogger get used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461083426", "createdAt": "2020-07-27T18:23:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java", "diffHunk": "@@ -17,11 +18,13 @@\n \n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Type;\n \n /**\n  * Apache Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public class ApacheAvroSerializer implements ObjectSerializer {\n+    private final ClientLogger logger = new ClientLogger(ApacheAvroSerializer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzYyNg==", "bodyText": "Does this ClientLogger get used?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461083626", "createdAt": "2020-07-27T18:23:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -4,17 +4,21 @@\n package com.azure.core.serializer.avro.jackson;\n \n import com.azure.core.experimental.serializer.ObjectSerializer;\n+import com.azure.core.experimental.serializer.Type;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n import reactor.core.publisher.Mono;\n \n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Type;\n \n /**\n  * Jackson Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public final class JacksonAvroSerializer implements ObjectSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonAvroSerializer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NTIyNQ==", "bodyText": "Revert these as this is the Core Jackson JSON Serializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461085225", "createdAt": "2020-07-27T18:26:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/README.md", "diffHunk": "@@ -1,6 +1,6 @@\n-# Azure Core Jackson JSON Serializer plugin library for Java\n+# Azure Search Jackson JSON Serializer plugin library for Java\n \n-Azure Core Jackson JSON Serializer is a plugin for the `azure-core` `JsonSerializer` API.\n+Azure Search Jackson JSON Serializer is a plugin for the `azure-search-documents` `JsonSerializer` API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NjMwNA==", "bodyText": "Does GSON maintain full method names or does it drop Java bean notation? I know in Jackson's case this would serialize as hotelName (possibly HotelName as I'm not completely certain about how it handles casing).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461086304", "createdAt": "2020-07-27T18:28:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.annotations.SerializedName;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GsonPropertyNameTests {\n+    private static final String expectValueInField = \"expectFieldName\";\n+    private static GsonPropertyNameSerializer serializer;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        serializer = new GsonPropertyNameSerializer();\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldName() throws NoSuchFieldException {\n+        class Hotel {\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+\n+        assertMemberValue(f, \"hotelName\");\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldAnnotation() throws NoSuchFieldException {\n+        class Hotel {\n+            @SerializedName(value = expectValueInField)\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+        assertMemberValue(f, expectValueInField);\n+\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldAnnotationWithEmptyValue() throws NoSuchFieldException {\n+        class Hotel {\n+            @SerializedName(value = \"\")\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+\n+        assertMemberValue(f, \"hotelName\");\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnMethodName() throws NoSuchMethodException {\n+        class Hotel {\n+            String hotelName;\n+\n+            public String getHotelName() {\n+                return hotelName;\n+            }\n+        }\n+\n+        Method m = Hotel.class.getDeclaredMethod(\"getHotelName\");\n+\n+        assertMemberValue(m, \"getHotelName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4OTExNg==", "bodyText": "This needs to take into account a few more common scenarios.\n\nFields marked as transient will be ignored for serialization. This is an expectation in Java that transient fields are never serialized.\nNeed to check whether the field is marked with GSON's Expose annotation. A common configuration in GSON is constructing a Gson with excludeFieldsWithoutExposeAnnotation which won't include those in serialization. Additionally, Expose could contain information on whether the field will ever be included in serialization with serialize = false.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461089116", "createdAt": "2020-07-27T18:34:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (member instanceof Field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDM1MA==", "bodyText": "Javadoc copy and paste error?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461094350", "createdAt": "2020-07-27T18:43:29Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "diffHunk": "@@ -34,4 +39,17 @@ public JacksonJsonSerializerBuilder serializer(ObjectMapper objectMapper) {\n         this.objectMapper = objectMapper;\n         return this;\n     }\n+\n+    /**\n+     * Sets the {@link ObjectMapper} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     *\n+     * @param options {@link JsonOptions} that will be used during serialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTgxOA==", "bodyText": "Is this how Jackson serializes methods annotated with JsonProperty? Also, do we need to handle JsonGetter for methods?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461095818", "createdAt": "2020-07-27T18:46:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Jackson based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class JacksonPropertyNameSerializer implements PropertyNameSerializer {\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+\n+        return Mono.fromCallable(() -> {\n+            String propertyName = null;\n+            if (member instanceof Field) {\n+                if (!((Field) member).isAnnotationPresent(JsonProperty.class)) {\n+                    return member.getName();\n+                }\n+                propertyName = ((Field) member).getDeclaredAnnotation(JsonProperty.class).value();\n+                propertyName = CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n+            } else if (member instanceof Method) {\n+                if (!((Method) member).isAnnotationPresent(JsonProperty.class)) {\n+                    return member.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjIyOQ==", "bodyText": "I believe we need to account for JsonIgnore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461096229", "createdAt": "2020-07-27T18:46:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Jackson based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class JacksonPropertyNameSerializer implements PropertyNameSerializer {\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+\n+        return Mono.fromCallable(() -> {\n+            String propertyName = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjcyMQ==", "bodyText": "I don't think we should suppress this warning.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461096721", "createdAt": "2020-07-27T18:47:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -67,13 +66,15 @@\n \n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.search.documents.implementation.util.Utility.initializeSerializerAdapter;\n \n /**\n  * This class provides a client that contains the operations for querying an index and uploading, merging, or deleting\n  * documents in an Azure Cognitive Search service.\n  *\n  * @see SearchClientBuilder\n  */\n+@SuppressWarnings(\"checkstyle:LineLength\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzAzMw==", "bodyText": "Same comment about suppressing checkstyle:LineLength.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461097033", "createdAt": "2020-07-27T18:48:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -529,24 +527,20 @@ public String getEndpoint() {\n         return withContext(context -> getDocumentWithResponse(key, modelClass, selectedFields, context));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({\"unchecked\", \"checkstyle:LineLength\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODI2Nw==", "bodyText": "Don't remove these <p> tags, Javadocs doesn't retain text newlines as it is HTML. This without it the Javadocs will go from being:\nSets the HTTP pipeline to use for the service client.\n\nIf pipeline is set...\n\nto\nSets the HTTP pipeline to use for the service client. If pipeline is set...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461098267", "createdAt": "2020-07-27T18:50:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -258,7 +276,7 @@ public SearchClientBuilder httpClient(HttpClient client) {\n \n     /**\n      * Sets the HTTP pipeline to use for the service client.\n-     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODY2Mg==", "bodyText": "@srnagar, looks like this will require codegen changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461098662", "createdAt": "2020-07-27T18:51:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java", "diffHunk": "@@ -57,8 +59,11 @@\n      *\n      * @param client the instance of the service client containing this operation class.\n      */\n-    DocumentsImpl(SearchIndexClientImpl client) {\n-        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline());\n+    DocumentsImpl(SearchIndexClientImpl client, SerializerAdapter serializerAdapter) {\n+        if (serializerAdapter == null) {\n+            serializerAdapter = new JacksonAdapter();\n+        }\n+        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline(), serializerAdapter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/428e7ce1280754f2812c123a9a4dc93bec24a31b", "committedDate": "2020-07-27T19:43:14Z", "message": "Addressed the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a471d3c55c9605d56416caeb6bec7e5f31b382a3", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a471d3c55c9605d56416caeb6bec7e5f31b382a3", "committedDate": "2020-07-27T19:50:19Z", "message": "Fixed the Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ffc352a6fe1bbd3bc4b418b434df5e38a35326f", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ffc352a6fe1bbd3bc4b418b434df5e38a35326f", "committedDate": "2020-07-27T21:06:19Z", "message": "fixed linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b3270844da0d4421214a2ebe6b635b174eee6e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9b3270844da0d4421214a2ebe6b635b174eee6e", "committedDate": "2020-07-28T00:25:44Z", "message": "Fixed linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef26e374f78d89e772596bf3a574b91ddce99d3", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cef26e374f78d89e772596bf3a574b91ddce99d3", "committedDate": "2020-07-28T18:25:50Z", "message": "Make changes on property name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81fdd3cf4fbc3d4789124accfb9dda6ee81a44fd", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/81fdd3cf4fbc3d4789124accfb9dda6ee81a44fd", "committedDate": "2020-07-28T20:28:02Z", "message": "Make up more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7cf60d6b0f40988b2ff11a07889a59df7b2ef91", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7cf60d6b0f40988b2ff11a07889a59df7b2ef91", "committedDate": "2020-07-28T20:59:48Z", "message": "Fixed the linting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcece7b4023bb788dbf5aa66b26b8d05acb02bc7", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fcece7b4023bb788dbf5aa66b26b8d05acb02bc7", "committedDate": "2020-07-28T21:53:22Z", "message": "Regen the code from new feature in autorest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6383838a0de92350447710ed57eaa427e9b3ec91", "committedDate": "2020-07-28T22:15:26Z", "message": "Swallow the unsupported types from SDK."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd05fd0660901f338154be6bc3d38b9ca6a011f", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2cd05fd0660901f338154be6bc3d38b9ca6a011f", "committedDate": "2020-07-28T22:33:49Z", "message": "remove useless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9c2e9b048ded4959097470ea6c0a1464c45634", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b9c2e9b048ded4959097470ea6c0a1464c45634", "committedDate": "2020-07-28T22:43:17Z", "message": "Merge from mainline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTAzODY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-457103864", "createdAt": "2020-07-28T23:48:26Z", "commit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0ODoyN1rOG4jnxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoxNTo1OFrOG4kI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzA2MQ==", "bodyText": "Could rename this to SerializedNameProvider, right now the interface sounds like it will serialize property names.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957061", "createdAt": "2020-07-28T23:48:27Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzE4OQ==", "bodyText": "gerSerializedName?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957189", "createdAt": "2020-07-28T23:48:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {\n+    /**\n+     * Get property member name from the class field.\n+     *\n+     * @param member Gets property name from the class member.\n+     * @return The serializer member name.\n+     */\n+    Mono<String> getSerializerMemberName(Member member);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzMxNw==", "bodyText": "I think this is a case where this being synchronous would lead to easier usability. Also because this operation is truly synchronous as it is working on local, simple data.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957317", "createdAt": "2020-07-28T23:49:13Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {\n+    /**\n+     * Get property member name from the class field.\n+     *\n+     * @param member Gets property name from the class member.\n+     * @return The serializer member name.\n+     */\n+    Mono<String> getSerializerMemberName(Member member);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzcxNQ==", "bodyText": "We should look at this as an option to play around with in azure-core-experimental but I'm not certain this will propagate into Azure Core as quickly. This would offer minor convenience to creating a customized serializer but in most cases I would expect the customer to pass a fully configured ObjectMapper instance of GsonBuilder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957715", "createdAt": "2020-07-28T23:50:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonOptions.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+/**\n+ * The json serializer options.\n+ */\n+public class JsonOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODIzMA==", "bodyText": "If the name of the interface changes this will need to change as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461958230", "createdAt": "2020-07-28T23:52:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProvider.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+/**\n+ * Interface to be implemented by an azure-core plugin that wishes to provide a {@link PropertyNameSerializer}\n+ * implementation.\n+ */\n+public interface PropertyNameSerializerProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODQwOQ==", "bodyText": "Should update this error message since it was copied from JsonSerializerProviders.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461958409", "createdAt": "2020-07-28T23:52:38Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * This class is a proxy for using a {@link PropertyNameSerializerProvider} loaded from the classpath.\n+ */\n+public final class PropertyNameSerializerProviders {\n+    private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =\n+        \"Cannot find any JSON serializer provider on the classpath.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTIxNQ==", "bodyText": "I would have GsonJsonSerializer implement the PropertyNameSerializer interface. The reason we made them separate was for cases when a customer wants to just create a custom JsonSerializer implementation they aren't strictly required to implement PropertyNameSerializer as well (though it would be recommended for completeness).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461959215", "createdAt": "2020-07-28T23:55:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTQxOQ==", "bodyText": "Great find with this excluder API!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461959419", "createdAt": "2020-07-28T23:55:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDI0Ng==", "bodyText": "To make the code cleaner in this condition may want to instantiate a local Field variable instead of casting every time it needs to be Field.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960246", "createdAt": "2020-07-28T23:58:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDQ4Mg==", "bodyText": "Should run validation on whether GSON leverages getters in their databind.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960482", "createdAt": "2020-07-28T23:59:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {\n+                    return null;\n+                }\n+                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n+                    return member.getName();\n+                }\n+                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n+            } else if (member instanceof Method) {\n+                return member.getName();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDc0NA==", "bodyText": "If we have GsonJsonSerializer implement the PropertyNameSerializer interface we won't need this class, which feels very duplicative of GsonJsonSerializerBuilder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960744", "createdAt": "2020-07-29T00:00:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonPropertyNameSerializer}.\n+ */\n+public class GsonPropertyNameSerializerBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MTM3MA==", "bodyText": "Would love to see some integration tests to go along with these unit tests. Cases where we pass a class into the PropertyNameSerializer and also serialize the same class into a JsonElement where we then validate that the JsonElement contains JSON attributes with the names returned by PropertyNameSerializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461961370", "createdAt": "2020-07-29T00:02:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GsonPropertyNameTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjMxNg==", "bodyText": "This can be removed as TypeReference<T> has been merged into Azure Core Experimental.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461962316", "createdAt": "2020-07-29T00:05:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/serializer/TypeRef.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.serializer;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+public abstract class TypeRef<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjkwMQ==", "bodyText": ".copy() the serializer otherwise this will mutate the Azure Core serializer which we won't want. Another option would be creating a new instance of JacksonAdapter rather than use createDefaultSerializerAdapter (which creates or returns the global instance depending on whether it has already been instantiated).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461962901", "createdAt": "2020-07-29T00:07:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public final class Utility {\n+    /**\n+     * Helper class to initialize the SerializerAdapter.\n+     * @return The SerializeAdapter instance.\n+     */\n+    public static SerializerAdapter initializeSerializerAdapter() {\n+        JacksonAdapter adapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n+\n+        ObjectMapper mapper = adapter.serializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzE3Mw==", "bodyText": "May need to comment this out again as I don't think PointGeometry will be released this month.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461963173", "createdAt": "2020-07-29T00:08:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzYyMw==", "bodyText": "Any reason we can't support CharSequence by using its toString method which returns its value as a String? I believe Jackson and GSON will handle CharSequence similar to a String.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461963623", "createdAt": "2020-07-29T00:10:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDAwMQ==", "bodyText": "Would we be allowed to upcast these types into Double and Integer respectively? Possible the same with Byte and byte to Integer?\nOr is the idea being more restrictive is safer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461964001", "createdAt": "2020-07-29T00:11:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,\n+        Float.class, float.class,\n+        Short.class, short.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDM5Nw==", "bodyText": "Could we call this method getSearchFields? build feels analogous to a builder pattern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461964397", "createdAt": "2020-07-29T00:12:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,\n+        Float.class, float.class,\n+        Short.class, short.class);\n \n     /**\n      * Creates a collection of {@link SearchField} objects corresponding to the properties of the type supplied.\n      *\n      * @param modelClass The class for which fields will be created, based on its properties.\n+     * @param serializer Optional serializer which allow to use customized serializer library. Default to take Jackson\n+     * serialization.\n      * @param <T> The generic type of the model class.\n      * @return A collection of fields.\n      */\n-    public static <T> List<SearchField> build(Class<T> modelClass) {\n+    public static <T> List<SearchField> build(Class<T> modelClass, PropertyNameSerializer serializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NTUyOA==", "bodyText": "This should only require. transitive is when it is used as part of the public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461965528", "createdAt": "2020-07-29T00:15:58Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/module-info.java", "diffHunk": "@@ -5,6 +5,7 @@\n     requires transitive com.azure.core;\n     requires com.fasterxml.jackson.datatype.jsr310;\n     requires jakarta.activation;\n+    requires transitive com.azure.core.serializer.json.jackson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf0ebaa988936f911fc9121979f8ac008a2acfb", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bf0ebaa988936f911fc9121979f8ac008a2acfb", "committedDate": "2020-07-29T01:17:26Z", "message": "Merge the API from mainline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "committedDate": "2020-07-29T22:15:35Z", "message": "Addressed feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a501baf12624e5541c97962813d871727da98c86", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a501baf12624e5541c97962813d871727da98c86", "committedDate": "2020-07-29T22:32:20Z", "message": "Merge from mainlne"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eabbbf008b8d4c18c1732a8590386f92fb55a51", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8eabbbf008b8d4c18c1732a8590386f92fb55a51", "committedDate": "2020-07-29T23:14:22Z", "message": "Fixed the core serializer used in search."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ca283df0e6d941343a36338def52ff9c6aba78", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5ca283df0e6d941343a36338def52ff9c6aba78", "committedDate": "2020-07-30T00:19:31Z", "message": "Fixed more on jackson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4ddad94e51c75accfe6ec7739db12d5ff385064", "committedDate": "2020-07-30T17:38:33Z", "message": "Merge from mainline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb13cba36987b1cff0228c5757c6af14100d4a5", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fb13cba36987b1cff0228c5757c6af14100d4a5", "committedDate": "2020-07-30T17:59:11Z", "message": "Added some tests on constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjI2OTk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-458626998", "createdAt": "2020-07-30T17:51:03Z", "commit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo1MTowM1rOG5tnrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMzowOFrOG5uDdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTQ1NA==", "bodyText": "Why is the SPI provider being removed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463169454", "createdAt": "2020-07-30T17:51:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/resources/META-INF/services/com.azure.core.experimental.serializer.JsonSerializerProvider", "diffHunk": "@@ -1 +0,0 @@\n-com.azure.core.serializer.json.gson.GsonJsonSerializerProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzY0Nw==", "bodyText": "Search needs to requires transitive com.azure.core since it contains Azure Core types in the public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463173647", "createdAt": "2020-07-30T17:58:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/module-info.java", "diffHunk": "@@ -2,9 +2,10 @@\n // Licensed under the MIT License.\n \n module com.azure.search.documents {\n-    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTE0OA==", "bodyText": "We should create this outside of the stream, right now this is going to construct a new instance for each declared field.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463175148", "createdAt": "2020-07-30T18:00:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -82,31 +87,48 @@\n         classChain.push(currentClass);\n         List<SearchField> searchFields = Arrays.stream(currentClass.getDeclaredFields())\n             .filter(classField -> !classField.isAnnotationPresent(FieldIgnore.class))\n-            .map(classField -> buildField(classField, classChain, logger))\n+            .map(classField -> buildField(classField, classChain, serializer, logger))\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n         classChain.pop();\n         return searchFields;\n     }\n \n-    private static SearchField buildField(java.lang.reflect.Field classField, Stack<Class<?>> classChain,\n-        ClientLogger logger) {\n+    private static SearchField buildField(Field classField, Stack<Class<?>> classChain,\n+        PropertyNameSerializer serializer, ClientLogger logger) {\n+        if (serializer == null) {\n+            serializer = new JacksonJsonSerializerProvider().createInstance();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NjU2NA==", "bodyText": "I'm wondering if the SPI providers should be different but return the same type, basically copying this class but only having it implement PropertyNameSerializerProvider.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463176564", "createdAt": "2020-07-30T18:03:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java", "diffHunk": "@@ -3,15 +3,15 @@\n \n package com.azure.core.serializer.json.gson;\n \n-import com.azure.core.experimental.serializer.JsonSerializer;\n import com.azure.core.experimental.serializer.JsonSerializerProvider;\n+import com.azure.core.experimental.serializer.PropertyNameSerializerProvider;\n \n /**\n  * Implementation of {@link JsonSerializerProvider}.\n  */\n-public class GsonJsonSerializerProvider implements JsonSerializerProvider {\n+public class GsonJsonSerializerProvider implements JsonSerializerProvider, PropertyNameSerializerProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f24005fbf9e66a0cc3ab1ecd646b5a33a1f507ed", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f24005fbf9e66a0cc3ab1ecd646b5a33a1f507ed", "committedDate": "2020-07-30T18:17:55Z", "message": "Added some tests on constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380c10b4d4595d020e53f51e98b55d2c368bef60", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/380c10b4d4595d020e53f51e98b55d2c368bef60", "committedDate": "2020-07-30T20:17:57Z", "message": "Added integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1abf03c5ec807772bd35b68aa77009eb280581bb", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1abf03c5ec807772bd35b68aa77009eb280581bb", "committedDate": "2020-07-30T20:52:12Z", "message": "Fixed linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20600e5b9286ee22a078c3ea30748824d4bd3dd2", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/20600e5b9286ee22a078c3ea30748824d4bd3dd2", "committedDate": "2020-07-30T21:18:54Z", "message": "Fixed infer type problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09198e2488eb2d43ba7c5a3ce210744eda08ea4", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f09198e2488eb2d43ba7c5a3ce210744eda08ea4", "committedDate": "2020-07-30T21:34:26Z", "message": "Fixed the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e84f5e2c4fa4d3611404fc4eb2446ce8fb7668e", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e84f5e2c4fa4d3611404fc4eb2446ce8fb7668e", "committedDate": "2020-07-30T22:19:04Z", "message": "Correct the API names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d7889cca16a9ae10ab46ef4e3ed8bf7cdb4c33", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2d7889cca16a9ae10ab46ef4e3ed8bf7cdb4c33", "committedDate": "2020-07-31T16:30:19Z", "message": "Merge remote-tracking branch 'origin' into search_serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "committedDate": "2020-07-31T16:54:59Z", "message": "Merge from mainline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392f749aefa316e22aa5ea5670947d5626ee3827", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/392f749aefa316e22aa5ea5670947d5626ee3827", "committedDate": "2020-07-31T17:51:58Z", "message": "Fixed the import after merge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/902a9cba95a0401c43beb2f74f141ba311543abd", "committedDate": "2020-07-31T21:59:33Z", "message": "Rename the member name converter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTEwOTY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-459510967", "createdAt": "2020-07-31T22:39:08Z", "commit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjozOTowOFrOG6YrCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo1MDoxNVrOG6Y1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NDgyNw==", "bodyText": "Should return null if Member is either a Constructor or Executable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463874827", "createdAt": "2020-07-31T22:39:08Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -65,4 +70,22 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTUxMw==", "bodyText": "This won't be how Jackson default handles a JsonProperty annotated method, it'll attempt to remove the Java bean prefix of get or is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463875513", "createdAt": "2020-07-31T22:42:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -67,4 +74,31 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {\n+        if (member instanceof Field) {\n+            Field f = (Field) member;\n+            if (f.isAnnotationPresent(JsonIgnore.class)) {\n+                return null;\n+            }\n+            if (f.isAnnotationPresent(JsonProperty.class)) {\n+                String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n+            }\n+        }\n+\n+        if (member instanceof Method) {\n+            Method m = (Method) member;\n+            if (m.isAnnotationPresent(JsonIgnore.class)) {\n+                return null;\n+            }\n+            if (m.isAnnotationPresent(JsonProperty.class)) {\n+                String propertyName = m.getDeclaredAnnotation(JsonProperty.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? m.getName() : propertyName;\n+            }\n+        }\n+\n+        return member.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTU5MQ==", "bodyText": "Same comment about returning null if member is a Constructor or Executable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463875591", "createdAt": "2020-07-31T22:42:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -67,4 +74,31 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjE5NQ==", "bodyText": "Generic interface that attempts to retrieve the JSON serialized property name from Class Members.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463876195", "createdAt": "2020-07-31T22:44:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjY0MA==", "bodyText": "Attempts to retrieve the JSON serializer property name for the passed Member.\nIf the Member type if unsupported or it is ignored for serialization null will be returned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463876640", "createdAt": "2020-07-31T22:46:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface MemberNameConverter {\n+    /**\n+     * Get property member name from the class field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzE2MA==", "bodyText": "I thought it was an error to include both analyzerName and either indexAnalyzerName or searchAnalyzerName, at least an exception on the service side as I thought analyzerName set the latter two.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463877160", "createdAt": "2020-07-31T22:48:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/test/environment/models/HotelAnalyzerException.java", "diffHunk": "@@ -6,7 +6,7 @@\n import com.azure.search.documents.indexes.SearchableFieldProperty;\n \n public class HotelAnalyzerException {\n-    @SearchableFieldProperty(analyzerName = \"en.microsoft\", indexAnalyzer = \"whitespce\")\n+    @SearchableFieldProperty(analyzerName = \"en.microsoft\", indexAnalyzerName = \"whitespce\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzUwMQ==", "bodyText": "Does this class exist anymore?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463877501", "createdAt": "2020-07-31T22:50:15Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -200,6 +200,8 @@\n             files=\"com.azure.core.serializer.avro.jackson.JacksonAvroSerializerBuilder\"/>\n   <suppress checks=\"com.azure.tools.checkstyle.checks.ExternalDependencyExposedCheck\"\n             files=\"com.azure.core.serializer.json.gson.GsonJsonSerializerBuilder\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.ExternalDependencyExposedCheck\"\n+            files=\"com.azure.core.serializer.json.gson.GsonPropertyNameSerializerBuilder\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df32122b01216663cc9f0a646d6a8bfc35837f19", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df32122b01216663cc9f0a646d6a8bfc35837f19", "committedDate": "2020-08-03T17:29:35Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87681f8d333da1707b04d37b7fd0e3cf29f42d54", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/87681f8d333da1707b04d37b7fd0e3cf29f42d54", "committedDate": "2020-08-03T17:43:18Z", "message": "Merge from mainline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc41517fb679aadb1c6eb00fd746260d8c99dcfb", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc41517fb679aadb1c6eb00fd746260d8c99dcfb", "committedDate": "2020-08-03T20:54:04Z", "message": "Add more comments on FieldBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe2353a1cace668e4ded8c359089d1fd2e309aa", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fe2353a1cace668e4ded8c359089d1fd2e309aa", "committedDate": "2020-08-03T21:18:46Z", "message": "Address feedback on javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c27002ecfcd8ec9253cd7b4ef1c00e6998d90fe", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c27002ecfcd8ec9253cd7b4ef1c00e6998d90fe", "committedDate": "2020-08-04T00:33:11Z", "message": "Have static method of buildSearchField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2c5fe577960be607a42aa18611834c1ed8314aa", "committedDate": "2020-08-04T00:48:47Z", "message": "Update linting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTU3OTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-460957983", "createdAt": "2020-08-04T16:04:55Z", "commit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowNDo1NVrOG7nOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowNDo1NVrOG7nOlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MTg3OA==", "bodyText": "Did we ever determine whether GSON uses Methods during serialization?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465161878", "createdAt": "2020-08-04T16:04:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -65,4 +71,26 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {\n+        if (Modifier.isTransient(member.getModifiers())) {\n+            return null;\n+        }\n+        if (member instanceof Field) {\n+            Field f = (Field) member;\n+            if (gson.excluder().excludeField(f, true)) {\n+                return null;\n+            }\n+            if (f.isAnnotationPresent(SerializedName.class)) {\n+                return f.getDeclaredAnnotation(SerializedName.class).value();\n+            }\n+            return member.getName();\n+        }\n+        if (member instanceof Method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2371efe0d1e27574d80c6029e2afccdb9a5b1581", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2371efe0d1e27574d80c6029e2afccdb9a5b1581", "committedDate": "2020-08-04T16:15:58Z", "message": "convertMemberName deal with the member which can rename through field name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTYxNTEz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-460961513", "createdAt": "2020-08-04T16:09:15Z", "commit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowOToxNVrOG7nZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyNDo1NFrOG7oBsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2NDcwMQ==", "bodyText": "Let's make this a static somewhere instead of instantiating a new instance every time we are deserializing. I believe TypeReference<Map<String, Object>> is used in a few places so let's make it a constant somewhere in implementation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465164701", "createdAt": "2020-08-04T16:09:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -66,19 +57,16 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        Map<String, Object> additionalProperties;\n-        TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n \n         Map<String, Object> mapProperties = PrivateFieldAccessHelper.get(obj, \"properties\", Map.class);\n-        if (mapProperties != null) {\n-            DYNAMIC_TYPE_MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = DYNAMIC_TYPE_MAPPER.convertValue(mapProperties, typeRef);\n-        } else {\n+        if (mapProperties == null) {\n             T properties = obj.getDocument();\n-            additionalProperties = STRONGLY_TYPE_MAPPER.convertValue(properties, typeRef);\n+            ByteArrayOutputStream sourceStream = serializer.serialize(new ByteArrayOutputStream(), properties);\n+            mapProperties = serializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()),\n+                new TypeReference<Map<String, Object>>() { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2Njk2Ng==", "bodyText": "There is an issue with changing this for all clients as this could affect how AppConfiguration, KeyVault, Storage, etc serialize and deserialize when used along side Search which mutates the global serializer. Maybe this method should be turned into a lazy loaded which initializes a constant ObjectMapper used for Search instead of changing the global ObjectMapper.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465166966", "createdAt": "2020-08-04T16:12:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public final class Utility {\n+    /**\n+     * Helper class to initialize the SerializerAdapter.\n+     * @return The SerializeAdapter instance.\n+     */\n+    public static SerializerAdapter initializeSerializerAdapter() {\n+        JacksonAdapter adapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n+\n+        ObjectMapper mapper = adapter.serializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjkwMQ=="}, "originalCommit": {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2ODcxNQ==", "bodyText": "This should use JsonSerializerProviders.createInstance(), if azure-core-serializer-json-jackson is excluded this will fail to compile.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465168715", "createdAt": "2020-08-04T16:15:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {\n+            return Mono.just(FieldBuilder.build(model, new JacksonJsonSerializerProvider().createInstance()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTk2NA==", "bodyText": "We're in a tricky spot for Search here as we've used a non-standard JacksonAdapter to handle serialization before introducing a pluggable serializer. I'm wondering for Search whether the custom JacksonAdapter should be used to handle serialization when JsonSerializer is null. That way we retain previous functionality when a customer upgrades but then we don't need to have this which will force a customer to include azure-core-serializer-json-jackson on their classpath, potentially never allowing azure-core-serializer-json-gson to work implicitly (not certain this would be the case but I don't exactly know how the classpath ordering is determined for a service provider).\nIf this change is made in places where serialization of customer objects take place it would need to be updated to the following:\nif (jsonSerializer == null) {\n  // Use Search JacksonAdapter\n} else {\n  // Use customer JsonSerializer\n}\ncc: @srnagar @JonathanGiles", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465171964", "createdAt": "2020-08-04T16:20:05Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public final class Utility {\n+    /**\n+     * Helper class to initialize the SerializerAdapter.\n+     * @return The SerializeAdapter instance.\n+     */\n+    public static SerializerAdapter initializeSerializerAdapter() {\n+        JacksonAdapter adapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n+\n+        ObjectMapper mapper = adapter.serializer();\n+        SerializationUtil.configureMapper(mapper);\n+\n+        return adapter;\n+    }\n+\n+    public static JsonSerializer creatDefaultJsonSerializerInstance() {\n+        JacksonAdapter adapter = (JacksonAdapter) initializeSerializerAdapter();\n+        return new JacksonJsonSerializerBuilder().serializer(adapter.serializer()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MjIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n          \n          \n            \n                public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465172206", "createdAt": "2020-08-04T16:20:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +601,16 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw==", "bodyText": "Do we want this to be MemberNameConverter or JsonSerializer? .NET is using ObjectSerializer as a parameter to FieldBuilder.\ncc: @heaths @tg-msft @srnagar @JonathanGiles", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465173087", "createdAt": "2020-08-04T16:21:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n+     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzYwNg==", "bodyText": "I don't think this matches what the FieldBuilder API allows, that checks if the serializer is null and uses a default implementation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465173606", "createdAt": "2020-08-04T16:22:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n+     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {\n+        return serializer;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param serializer The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setSerializer(MemberNameConverter serializer) {\n+        this.serializer = Objects.requireNonNull(serializer, \"The serializer cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3NDk2MQ==", "bodyText": "Not a huge fan of this being an asynchronous return and we have prior art which has non-service APIs returning synchronously in an asynchronous client. getSearchAsyncClient on this client is synchronous, I think this should be made synchronous as well.\n@srnagar @JonathanGiles, let me know if you disagree.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465174961", "createdAt": "2020-08-04T16:24:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc2b8018da753503ae339524ce291fbcb2b8663", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acc2b8018da753503ae339524ce291fbcb2b8663", "committedDate": "2020-08-04T16:34:58Z", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n\nCo-authored-by: Alan Zimmer <48699787+alzimmermsft@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "committedDate": "2020-08-04T16:40:00Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9cca9580a2d32f7df05f3bd308dfab5c30d86e8", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9cca9580a2d32f7df05f3bd308dfab5c30d86e8", "committedDate": "2020-08-04T16:40:11Z", "message": "Merge branch 'search_serializers' of https://github.com/sima-zhu/azure-sdk-for-java into search_serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "884501a6f611075ccf2d6ec75c5997ac51de2442", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/884501a6f611075ccf2d6ec75c5997ac51de2442", "committedDate": "2020-08-04T17:09:15Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0c2206010f331ce0ee9ece4b359101bd0125eae", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0c2206010f331ce0ee9ece4b359101bd0125eae", "committedDate": "2020-08-04T18:54:55Z", "message": "Having search jackson adapter as default serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1077d964dbda66c55a305cddc3684680fa05e24", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1077d964dbda66c55a305cddc3684680fa05e24", "committedDate": "2020-08-04T19:00:23Z", "message": "Remove extra method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDk0NTkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-461094593", "createdAt": "2020-08-04T19:13:55Z", "commit": {"oid": "b1077d964dbda66c55a305cddc3684680fa05e24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1caa9671a892bdfcf23f4fd5c1d8ef2318e513b", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1caa9671a892bdfcf23f4fd5c1d8ef2318e513b", "committedDate": "2020-08-04T21:14:15Z", "message": "merge from mainline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65aac36d5976e322848e664e421f647a05d45ecf", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/65aac36d5976e322848e664e421f647a05d45ecf", "committedDate": "2020-08-04T21:14:21Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into search_serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a891fb31e26af881633d11517abb402da163cf47", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a891fb31e26af881633d11517abb402da163cf47", "committedDate": "2020-08-04T21:15:43Z", "message": "remove tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f48cf908611b98f8d5fe5db718c7ad69dd6c7e5", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f48cf908611b98f8d5fe5db718c7ad69dd6c7e5", "committedDate": "2020-08-04T21:38:40Z", "message": "Remove the gson expose checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6507ddd4c0021e97729f9cff8cc72e61f326b0bf", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6507ddd4c0021e97729f9cff8cc72e61f326b0bf", "committedDate": "2020-08-04T21:52:37Z", "message": "Change to right provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9d586ffb0911d65feefaca2bda7faeb408f2247", "committedDate": "2020-08-04T22:45:28Z", "message": "Added readme for field builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzgxNzc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-461381774", "createdAt": "2020-08-05T06:44:44Z", "commit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0NDo0NFrOG78VyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowMToyM1rOG78y4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzc4NA==", "bodyText": "This should be named  CANNOT_FIND_MEMBER_NAME_CONVERTER_PROVIDER.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465507784", "createdAt": "2020-08-05T06:44:44Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * This class is a proxy for using a {@link MemberNameConverterProvider} loaded from the classpath.\n+ */\n+public final class MemberNameConverterProviders {\n+    private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODM1MA==", "bodyText": "Looks like the line numbers should be updated to get the right codesnippet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465508350", "createdAt": "2020-08-05T06:46:09Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/README.md", "diffHunk": "@@ -104,20 +104,20 @@ URL endpoint and admin key.\n \n <!-- embedme ./src/samples/java/com/azure/search/documents/ReadmeSamples.java#L66-L69 -->\n ```Java\n-SearchIndexClient searchIndexClient = new SearchIndexClientBuilder()\n-    .endpoint(endpoint)\n-    .credential(new AzureKeyCredential(apiKey))\n-    .buildClient();\n+\n+public void createIndexClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODkxMg==", "bodyText": "This should be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465508912", "createdAt": "2020-08-05T06:47:20Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -241,6 +242,18 @@ public SearchClientBuilder addPolicy(HttpPipelinePolicy policy) {\n         return this;\n     }\n \n+    /**\n+     * Adds customer serializer to apply to external defined models.\n+     *\n+     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code policy} is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTE4Mg==", "bodyText": "Is .NET using ObjectSerializer here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465509182", "createdAt": "2020-08-05T06:47:59Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -241,6 +242,18 @@ public SearchClientBuilder addPolicy(HttpPipelinePolicy policy) {\n         return this;\n     }\n \n+    /**\n+     * Adds customer serializer to apply to external defined models.\n+     *\n+     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code policy} is {@code null}.\n+     */\n+    public SearchClientBuilder serializer(JsonSerializer jsonSerializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMDQ0Ng==", "bodyText": "Name this as MAP_STRING_OBJECT_TYPE_REFERENCE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465510446", "createdAt": "2020-08-05T06:50:45Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.TypeReference;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.Map;\n+\n+public final class Utility {\n+    // Type reference that used across many places. Have one copy here to minimize the memory.\n+    public static final TypeReference<Map<String, Object>> TYPE_REFERENCE = new TypeReference<Map<String, Object>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTUyNw==", "bodyText": "This annotation should be removed as it's not a service method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465511527", "createdAt": "2020-08-05T06:53:08Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTY1MQ==", "bodyText": "Same here. Remove annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465511651", "createdAt": "2020-08-05T06:53:26Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +603,20 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjYzMw==", "bodyText": "This should check if options.getSerializer() is null too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465512633", "createdAt": "2020-08-05T06:55:43Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjk1NA==", "bodyText": "Instead of repeating this implementation, this method should call the buildSearchFields in async client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465512954", "createdAt": "2020-08-05T06:56:27Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +603,20 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {\n+            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n+        }\n+        return FieldBuilder.build(model, options.getSerializer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDMwNg==", "bodyText": "I think @alzimmermsft was referring to using JsonSerialier or MemberNameConverter. Using the options class is okay, we should align on what the options will contain - serializer or member name converter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465514306", "createdAt": "2020-08-05T06:59:24Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n+     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw=="}, "originalCommit": {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDg0MA==", "bodyText": "It's odd to call this setSerializer and take a MemberNameConverter as arg.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465514840", "createdAt": "2020-08-05T07:00:33Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {\n+        return serializer;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param serializer The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setSerializer(MemberNameConverter serializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTIzMg==", "bodyText": "Then azure.core.serializer.json.jackson must be made transitive.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465515232", "createdAt": "2020-08-05T07:01:23Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/module-info.java", "diffHunk": "@@ -2,9 +2,10 @@\n // Licensed under the MIT License.\n \n module com.azure.search.documents {\n-    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzY0Nw=="}, "originalCommit": {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766029399f339b49344372dfa40b9d14d2e9c533", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/766029399f339b49344372dfa40b9d14d2e9c533", "committedDate": "2020-08-05T17:01:48Z", "message": "Addressed feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786c9c28fe0fcca5cc923a2aa5c0ac948cf1cf41", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/786c9c28fe0fcca5cc923a2aa5c0ac948cf1cf41", "committedDate": "2020-08-05T17:13:56Z", "message": "fix compile issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243f1318355f8d50cc291681daf0604b9c1c51a3", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/243f1318355f8d50cc291681daf0604b9c1c51a3", "committedDate": "2020-08-05T19:40:50Z", "message": "Added transient keyword check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTg2MDc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#pullrequestreview-461986079", "createdAt": "2020-08-05T20:08:13Z", "commit": {"oid": "243f1318355f8d50cc291681daf0604b9c1c51a3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowODoxM1rOG8Yzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowODoxM1rOG8Yzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3NDEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.converter = Objects.requireNonNull(converter, \"The serializer cannot be null\");\n          \n          \n            \n                    this.converter = Objects.requireNonNull(converter, \"The converter cannot be null\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465974139", "createdAt": "2020-08-05T20:08:13Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter converter;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getConverter() {\n+        return converter;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param converter The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setConverter(MemberNameConverter converter) {\n+        this.converter = Objects.requireNonNull(converter, \"The serializer cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "243f1318355f8d50cc291681daf0604b9c1c51a3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26b847b7dcde9dc001fe07a106fc1c7841c32a5", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a26b847b7dcde9dc001fe07a106fc1c7841c32a5", "committedDate": "2020-08-05T20:11:52Z", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\nCo-authored-by: Srikanta <51379715+srnagar@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed37bc3738ed039bfa0a0cbc2134fa6a9a5c70d7", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed37bc3738ed039bfa0a0cbc2134fa6a9a5c70d7", "committedDate": "2020-08-05T21:03:26Z", "message": "Throw exceptions for unsupported type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1528f9161fc2dd85e9e2883273e4eedab4cc6ff", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1528f9161fc2dd85e9e2883273e4eedab4cc6ff", "committedDate": "2020-08-05T21:06:45Z", "message": "Merge branch 'search_serializers' of https://github.com/sima-zhu/azure-sdk-for-java into search_serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c5c2c5dc18a4b11687ab5a33fc1c9e12f56ad6", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1c5c2c5dc18a4b11687ab5a33fc1c9e12f56ad6", "committedDate": "2020-08-05T23:45:51Z", "message": "Added link to FieldBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda8cc9d0f4d3ca835fa891e03b6c540985855da", "author": {"user": {"login": "sima-zhu", "name": "Sima Zhu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cda8cc9d0f4d3ca835fa891e03b6c540985855da", "committedDate": "2020-08-06T00:04:09Z", "message": "Update changelog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1131, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}