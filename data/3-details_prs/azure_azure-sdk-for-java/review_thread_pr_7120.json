{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTY5NzY5", "number": 7120, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODoxOFrODWRO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1OTowN1rODX_HlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc3NjI5OnYy", "diffSide": "RIGHT", "path": "eng/versioning/external_dependencies.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODoxOFrOFa7gWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODoxOFrOFa7gWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MjIzNQ==", "bodyText": "I like that this is moving past a preview version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r363782235", "createdAt": "2020-01-07T14:48:18Z", "author": {"login": "JimSuplizio"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -62,7 +62,7 @@ com.microsoft.azure:azure-mgmt-keyvault;1.11.1\n com.microsoft.azure:azure-mgmt-resources;1.3.0\n com.microsoft.azure:azure-mgmt-storage;1.3.0\n com.microsoft.azure:azure-storage;8.0.0\n-com.microsoft.azure:msal4j;0.5.0-preview\n+com.microsoft.azure:msal4j;1.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2ac04850708f89145442d7cb0e453c7e15d578"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDkxODY1OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0Mjo1NVrOFdAsLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo0Mzo1OVrOFdjpTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NDMzNQ==", "bodyText": "1.2.0 is out for this library.\nIs that what we intend to add here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365964335", "createdAt": "2020-01-13T18:42:55Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/pom.xml", "diffHunk": "@@ -81,5 +81,11 @@\n       <version>3.3.0.RELEASE</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNzAzOA==", "bodyText": "Using 1.2.0 now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366537038", "createdAt": "2020-01-14T19:43:59Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/pom.xml", "diffHunk": "@@ -81,5 +81,11 @@\n       <version>3.3.0.RELEASE</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NDMzNQ=="}, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDkyODYzOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0Njo0N1rOFdAywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODoxOTozMVrOFdPHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjAxOA==", "bodyText": "so, here we don't check if (options.getHttpPipeline() != null)  before setting the pipeline ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365966018", "createdAt": "2020-01-13T18:46:47Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -137,28 +139,23 @@\n     public Mono<AccessToken> authenticateWithPfxCertificate(String pfxCertificatePath, String pfxCertificatePassword,\n                                                             TokenRequestContext request) {\n         String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        try {\n+        return Mono.fromCallable(() -> {\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n-                    .authority(authorityUrl);\n+                    ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                                new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n+                            .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwMDU3OA==", "bodyText": "Removing in favor of the other checked one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366200578", "createdAt": "2020-01-14T08:19:31Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -137,28 +139,23 @@\n     public Mono<AccessToken> authenticateWithPfxCertificate(String pfxCertificatePath, String pfxCertificatePassword,\n                                                             TokenRequestContext request) {\n         String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        try {\n+        return Mono.fromCallable(() -> {\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n-                    .authority(authorityUrl);\n+                    ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                                new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n+                            .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NjAxOA=="}, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDkzOTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MDo0MVrOFdA5mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODoxOTo0MVrOFdPHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2Nzc3MA==", "bodyText": "we're already setting the pipeline on top, even before this check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365967770", "createdAt": "2020-01-13T18:50:41Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -137,28 +139,23 @@\n     public Mono<AccessToken> authenticateWithPfxCertificate(String pfxCertificatePath, String pfxCertificatePassword,\n                                                             TokenRequestContext request) {\n         String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        try {\n+        return Mono.fromCallable(() -> {\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n-                    .authority(authorityUrl);\n+                    ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                                new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n+                            .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))\n+                            .authority(authorityUrl);\n             if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n-            ConfidentialClientApplication application = applicationBuilder.build();\n-            return Mono.fromFuture(application.acquireToken(\n-                ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n-                    .build()))\n-                .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n-                    ZoneOffset.UTC)));\n-        } catch (CertificateException\n-            | UnrecoverableKeyException\n-            | NoSuchAlgorithmException\n-            | KeyStoreException\n-            | NoSuchProviderException\n-            | IOException e) {\n-            return Mono.error(e);\n-        }\n+            if (options.getHttpPipeline() != null) {\n+                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwMDY0NA==", "bodyText": "This actually should be used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366200644", "createdAt": "2020-01-14T08:19:41Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -137,28 +139,23 @@\n     public Mono<AccessToken> authenticateWithPfxCertificate(String pfxCertificatePath, String pfxCertificatePassword,\n                                                             TokenRequestContext request) {\n         String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId;\n-        try {\n+        return Mono.fromCallable(() -> {\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n-                    .authority(authorityUrl);\n+                    ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                                new FileInputStream(pfxCertificatePath), pfxCertificatePassword))\n+                            .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))\n+                            .authority(authorityUrl);\n             if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n-            ConfidentialClientApplication application = applicationBuilder.build();\n-            return Mono.fromFuture(application.acquireToken(\n-                ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n-                    .build()))\n-                .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n-                    ZoneOffset.UTC)));\n-        } catch (CertificateException\n-            | UnrecoverableKeyException\n-            | NoSuchAlgorithmException\n-            | KeyStoreException\n-            | NoSuchProviderException\n-            | IOException e) {\n-            return Mono.error(e);\n-        }\n+            if (options.getHttpPipeline() != null) {\n+                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2Nzc3MA=="}, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk0MjE0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTozNFrOFdA7SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTozNFrOFdA7SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODIwMQ==", "bodyText": "same here, setting without checking pipeline being null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365968201", "createdAt": "2020-01-13T18:51:34Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -173,12 +170,17 @@\n         try {\n             byte[] pemCertificateBytes = Files.readAllBytes(Paths.get(pemCertificatePath));\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(CertificateUtil.privateKeyFromPem(pemCertificateBytes),\n-                        CertificateUtil.publicKeyFromPem(pemCertificateBytes))).authority(authorityUrl);\n+                ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                            CertificateUtil.privateKeyFromPem(pemCertificateBytes),\n+                            CertificateUtil.publicKeyFromPem(pemCertificateBytes)))\n+                        .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk0Mjk0OnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTo0OVrOFdA7yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTo0OVrOFdA7yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODMzMA==", "bodyText": "setting it above already.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365968330", "createdAt": "2020-01-13T18:51:49Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -173,12 +170,17 @@\n         try {\n             byte[] pemCertificateBytes = Files.readAllBytes(Paths.get(pemCertificatePath));\n             ConfidentialClientApplication.Builder applicationBuilder =\n-                ConfidentialClientApplication.builder(clientId,\n-                    ClientCredentialFactory.create(CertificateUtil.privateKeyFromPem(pemCertificateBytes),\n-                        CertificateUtil.publicKeyFromPem(pemCertificateBytes))).authority(authorityUrl);\n+                ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromCertificate(\n+                            CertificateUtil.privateKeyFromPem(pemCertificateBytes),\n+                            CertificateUtil.publicKeyFromPem(pemCertificateBytes)))\n+                        .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()))\n+                        .authority(authorityUrl);\n             if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n+            if (options.getHttpPipeline() != null) {\n+                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDk0NzAyOnYy", "diffSide": "RIGHT", "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MzoxMFrOFdA-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozMDozMlrOFdn7tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODk3MQ==", "bodyText": "why are we commenting them out ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r365968971", "createdAt": "2020-01-13T18:53:10Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientTests.java", "diffHunk": "@@ -182,15 +182,16 @@ private void mockForClientCertificate(TokenRequestContext request, String access\n         ConfidentialClientApplication.Builder builder = PowerMockito.mock(ConfidentialClientApplication.Builder.class);\n         when(builder.build()).thenReturn(application);\n         when(builder.authority(any())).thenReturn(builder);\n+        when(builder.httpClient(any())).thenReturn(builder);\n         whenNew(ConfidentialClientApplication.Builder.class).withAnyArguments().thenAnswer(invocation -> {\n             String cid = (String) invocation.getArguments()[0];\n-            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n+//            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n             if (!clientId.equals(cid)) {\n                 throw new MsalServiceException(\"Invalid clientId\", \"InvalidClientId\");\n             }\n-            if (keyCredential == null || keyCredential.key() == null) {\n-                throw new MsalServiceException(\"Invalid clientCertificate\", \"InvalidClientCertificate\");\n-            }\n+//            if (keyCredential == null || keyCredential.key() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwMTE5NA==", "bodyText": "The certificate / secret now is not accessible anymore so I cannot verify it here - I was planning to fix the tests later", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366201194", "createdAt": "2020-01-14T08:21:02Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientTests.java", "diffHunk": "@@ -182,15 +182,16 @@ private void mockForClientCertificate(TokenRequestContext request, String access\n         ConfidentialClientApplication.Builder builder = PowerMockito.mock(ConfidentialClientApplication.Builder.class);\n         when(builder.build()).thenReturn(application);\n         when(builder.authority(any())).thenReturn(builder);\n+        when(builder.httpClient(any())).thenReturn(builder);\n         whenNew(ConfidentialClientApplication.Builder.class).withAnyArguments().thenAnswer(invocation -> {\n             String cid = (String) invocation.getArguments()[0];\n-            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n+//            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n             if (!clientId.equals(cid)) {\n                 throw new MsalServiceException(\"Invalid clientId\", \"InvalidClientId\");\n             }\n-            if (keyCredential == null || keyCredential.key() == null) {\n-                throw new MsalServiceException(\"Invalid clientCertificate\", \"InvalidClientCertificate\");\n-            }\n+//            if (keyCredential == null || keyCredential.key() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODk3MQ=="}, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNzI4NQ==", "bodyText": "I added it back though we still cannot access the .key() value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366607285", "createdAt": "2020-01-14T22:30:32Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientTests.java", "diffHunk": "@@ -182,15 +182,16 @@ private void mockForClientCertificate(TokenRequestContext request, String access\n         ConfidentialClientApplication.Builder builder = PowerMockito.mock(ConfidentialClientApplication.Builder.class);\n         when(builder.build()).thenReturn(application);\n         when(builder.authority(any())).thenReturn(builder);\n+        when(builder.httpClient(any())).thenReturn(builder);\n         whenNew(ConfidentialClientApplication.Builder.class).withAnyArguments().thenAnswer(invocation -> {\n             String cid = (String) invocation.getArguments()[0];\n-            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n+//            AsymmetricKeyCredential keyCredential = (AsymmetricKeyCredential) invocation.getArguments()[1];\n             if (!clientId.equals(cid)) {\n                 throw new MsalServiceException(\"Invalid clientId\", \"InvalidClientId\");\n             }\n-            if (keyCredential == null || keyCredential.key() == null) {\n-                throw new MsalServiceException(\"Invalid clientCertificate\", \"InvalidClientCertificate\");\n-            }\n+//            if (keyCredential == null || keyCredential.key() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODk3MQ=="}, "originalCommit": {"oid": "c1c4478e9c25014072a6f7c1c58d1d1836be0d32"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc3OTczOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/microsoft-azure-eventhubs/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1OTowN1rOFdlmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NDo1N1rOFdnDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTA3Mw==", "bodyText": "This is track 1 event hubs module. Did you intend to update msal version of track 1 module too? This might need service team's validation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366569073", "createdAt": "2020-01-14T20:59:07Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/microsoft-azure-eventhubs/pom.xml", "diffHunk": "@@ -76,7 +76,7 @@\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n       <artifactId>msal4j</artifactId>\n-      <version>0.5.0-preview</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+      <version>1.3.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1617b80ff125af1037c90ac3999e6b0e32b56116"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3OTk5OA==", "bodyText": "Seems to be only used in tests. And I don't know a way to specify a dependency of 2 different versions across our SDKs.\n\n@conniey  @mssfang for their opinion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366579998", "createdAt": "2020-01-14T21:25:24Z", "author": {"login": "jianghaolu"}, "path": "sdk/eventhubs/microsoft-azure-eventhubs/pom.xml", "diffHunk": "@@ -76,7 +76,7 @@\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n       <artifactId>msal4j</artifactId>\n-      <version>0.5.0-preview</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+      <version>1.3.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTA3Mw=="}, "originalCommit": {"oid": "1617b80ff125af1037c90ac3999e6b0e32b56116"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MjkwMQ==", "bodyText": "Is this because you are using the script to update the external dependency version and it's updating both track 1 and track 2 dependencies?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7120#discussion_r366592901", "createdAt": "2020-01-14T21:54:57Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/microsoft-azure-eventhubs/pom.xml", "diffHunk": "@@ -76,7 +76,7 @@\n     <dependency>\n       <groupId>com.microsoft.azure</groupId>\n       <artifactId>msal4j</artifactId>\n-      <version>0.5.0-preview</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->\n+      <version>1.3.0</version> <!-- {x-version-update;com.microsoft.azure:msal4j;external_dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTA3Mw=="}, "originalCommit": {"oid": "1617b80ff125af1037c90ac3999e6b0e32b56116"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 663, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}