{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTUxNDkz", "number": 17464, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyODowMVrOE33Lng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0NzozN1rOE7Ab5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDExMjMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyODowMVrOHxdG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyODowMVrOHxdG9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxOTE4OQ==", "bodyText": "final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r521619189", "createdAt": "2020-11-11T20:28:01Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information.\n+ */\n+public class AmqpAddress {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01aeb75f448b8d4b184ce7f1db5bb4a2796dcea3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDExNjc1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyOToyNlrOHxdJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyOToyNlrOHxdJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxOTkwNA==", "bodyText": "Can we add a little more information in the doc about what this address is? Also, link the AMQP spec to all these AMQP types because a lot of the model contents are dictated by the spec. So, we should have more descriptive docs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r521619904", "createdAt": "2020-11-11T20:29:26Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01aeb75f448b8d4b184ce7f1db5bb4a2796dcea3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDEyNjY3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozMjozMVrOHxdP6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozMjozMVrOHxdP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMTQ4Mg==", "bodyText": "This check is unnecessary as the AmqpAnnotatedMessage instance can only be created with a non-null body.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r521621482", "createdAt": "2020-11-11T20:32:31Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -49,7 +52,22 @@ public AmqpAnnotatedMessage(AmqpMessageBody body) {\n      */\n     public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        amqpMessageBody = Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");\n+        Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01aeb75f448b8d4b184ce7f1db5bb4a2796dcea3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDEzMzcxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNDozOVrOHxdUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNDozOVrOHxdUJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjU2NQ==", "bodyText": "These should be documented in javadoc @throws section.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r521622565", "createdAt": "2020-11-11T20:34:39Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -49,7 +52,22 @@ public AmqpAnnotatedMessage(AmqpMessageBody body) {\n      */\n     public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        amqpMessageBody = Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");\n+        Objects.requireNonNull(message.getBody(), \"'message.body' cannot be null.\");\n+\n+        AmqpBodyType bodyType = message.getBody().getBodyType();\n+        switch (bodyType) {\n+            case DATA:\n+                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getData());\n+                break;\n+            case SEQUENCE:\n+            case VALUE:\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(\"Body type not supported yet \"\n+                    + bodyType.toString()));\n+            default:\n+                throw logger.logExceptionAsError(new IllegalStateException(\"Body type not valid \"\n+                    + bodyType.toString()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01aeb75f448b8d4b184ce7f1db5bb4a2796dcea3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDYwODUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoxNzoxNlrOHxhuVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoxNzoxNlrOHxhuVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDgwNw==", "bodyText": "I guess we should make this javadoc crisp on why we do this. For the customer, this decision seems arbitrary and we need to document the justification for doing this. This, as we discussed earlier, has the potential for dropping data that is sent from another client that does support more than one byte[].", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r521694807", "createdAt": "2020-11-11T23:17:16Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,97 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpBodyType} map to AMQP specification message body types.\n+ * Current implementation only support {@link AmqpBodyType#DATA DATA}. Other types will be supported in future releases.\n+ * Client should test for {@link AmqpBodyType} before calling corresponding get method.\n+ * Get methods not corresponding to the type of the body throw exception.\n+ *\n+ * @see AmqpBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpBodyType bodyType;\n+\n+    private byte[] data;\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given {@link Iterable} of byte array. Please note that this\n+     * version of the SDK supports only one element in given {@link Iterable}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01aeb75f448b8d4b184ce7f1db5bb4a2796dcea3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjgyODg1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjoxMzozNVrOHydiMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjoxMzozNVrOHydiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NDczNw==", "bodyText": "This should not use current tag as it's outside the core directory.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522674737", "createdAt": "2020-11-13T06:13:35Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/pom.xml", "diffHunk": "@@ -52,7 +52,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-amqp</artifactId>\n-      <version>1.7.0-beta.1</version> <!-- {x-version-update;beta_com.azure:azure-core-amqp;dependency} -->\n+      <version>1.7.0-beta.2</version> <!-- {x-version-update;com.azure:azure-core-amqp;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ1MTU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxOToxOVrOHykA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowMDowNFrOHy0EOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4MDg5Mw==", "bodyText": "Why is this a static logger? I see this used only in instance methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522780893", "createdAt": "2020-11-13T08:19:19Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0Mzg5Nw==", "bodyText": "This is left over, Earlier this was used in static methods.  Changin it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r523043897", "createdAt": "2020-11-13T16:00:04Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4MDg5Mw=="}, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ1NTkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxOTo1OFrOHykDog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxOTo1OFrOHykDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4MTYwMg==", "bodyText": "Update javadoc since the return type is now an IterableStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522781602", "createdAt": "2020-11-13T08:19:58Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private byte[] data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = data;\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an immutable list containing only first byte array set on this {@link AmqpMessageBody}. This library only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ2NTIwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMTo0MVrOHykKTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMTo0MVrOHykKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4MzMxMA==", "bodyText": "Why do we create a new singletonList each time getData() is called? We can create the singletonList just once when fromData() is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522783310", "createdAt": "2020-11-13T08:21:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private byte[] data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = data;\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an immutable list containing only first byte array set on this {@link AmqpMessageBody}. This library only\n+     * support one byte array, so the returned list will have only one element. Look for future releases where we will\n+     * support multiple byte array.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"\n+                + \"message which is of type %s.\", getBodyType().toString())));\n+        }\n+\n+        return new IterableStream<>(Collections.singletonList(data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ3MDMzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMjozM1rOHykNzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMjozM1rOHykNzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDIwNA==", "bodyText": "Why does getData() not make a copy of the array but this method does?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522784204", "createdAt": "2020-11-13T08:22:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private byte[] data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = data;\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an immutable list containing only first byte array set on this {@link AmqpMessageBody}. This library only\n+     * support one byte array, so the returned list will have only one element. Look for future releases where we will\n+     * support multiple byte array.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"\n+                + \"message which is of type %s.\", getBodyType().toString())));\n+        }\n+\n+        return new IterableStream<>(Collections.singletonList(data));\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets first byte array set on this {@link AmqpMessageBody}. This library only support one byte array on Amqp\n+     * Message. Look for future releases where we will support multiple byte array and you can use\n+     * {@link AmqpMessageBody#getData()} API.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n      *\n-     * @return The {@link AmqpBodyType}.\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+     *     Amqp Message Format.</a>\n      */\n-    AmqpBodyType getBodyType();\n+    public byte[] getFirstData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"\n+                + \"message which is of type %s.\", getBodyType().toString())));\n+        }\n+\n+        return Arrays.copyOf(data, data.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ3MjcyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMjo1OFrOHykPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyMjo1OFrOHykPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"\n          \n          \n            \n                        throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Cannot return data for a \"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522784582", "createdAt": "2020-11-13T08:22:58Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,108 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private static final ClientLogger LOGGER = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private byte[] data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = data;\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an immutable list containing only first byte array set on this {@link AmqpMessageBody}. This library only\n+     * support one byte array, so the returned list will have only one element. Look for future releases where we will\n+     * support multiple byte array.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"\n+                + \"message which is of type %s.\", getBodyType().toString())));\n+        }\n+\n+        return new IterableStream<>(Collections.singletonList(data));\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets first byte array set on this {@link AmqpMessageBody}. This library only support one byte array on Amqp\n+     * Message. Look for future releases where we will support multiple byte array and you can use\n+     * {@link AmqpMessageBody#getData()} API.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n      *\n-     * @return The {@link AmqpBodyType}.\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\">\n+     *     Amqp Message Format.</a>\n      */\n-    AmqpBodyType getBodyType();\n+    public byte[] getFirstData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(\"Can not return data for a \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQ4OTY0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNTozMVrOHykafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNTozMVrOHykafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NzQ1Mg==", "bodyText": "Add more details about what are the various forms of message id and why and how to use this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522787452", "createdAt": "2020-11-13T08:25:31Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id in various forms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzUwNDYwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNzo0NlrOHykktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyNzo0NlrOHykktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MDA2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!messageId.equals(other.toString())) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Objects.equals(messageId, other.toString());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522790069", "createdAt": "2020-11-13T08:27:46Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id in various forms.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-message-id-ulong\">\n+ *     Amqp Message Id.</a>\n+ */\n+public final class AmqpMessageId {\n+    private final String messageId;\n+\n+    /**\n+     * Creates the {@link AmqpMessageId} with given {@code messageId}.\n+     *\n+     * @param messageId representing id of the message.\n+     */\n+    public AmqpMessageId(String messageId) {\n+        this.messageId = Objects.requireNonNull(messageId, \"'messageId' cannot be null.\");\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return messageId.hashCode();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object other) {\n+        if (other == null) {\n+            return false;\n+        }\n+\n+        if (this.getClass() != other.getClass()) {\n+            return false;\n+        }\n+\n+        if (this == other) {\n+            return true;\n+        }\n+\n+        if (!messageId.equals(other.toString())) {\n+            return false;\n+        }\n+\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzUxMDg0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyODo0MlrOHyko4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoyODo0MlrOHyko4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MTEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!address.equals(other.toString())) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Objects.equals(address, other.toString());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r522791139", "createdAt": "2020-11-13T08:28:42Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information. This will be used in populating information like 'To', 'ReplyTo' etc.\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string\">\n+ *     Address type Format.</a>\n+ */\n+public final class AmqpAddress {\n+\n+    private final String address;\n+\n+    /**\n+     * Creates the {@link AmqpAddress} with given {@code address}.\n+     *\n+     * @param address to use.\n+     */\n+    public AmqpAddress(String address) {\n+        this.address = Objects.requireNonNull(address, \"'address' cannot be null.\");\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return address.hashCode();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object other) {\n+        if (other == null) {\n+            return false;\n+        }\n+\n+        if (this.getClass() != other.getClass()) {\n+            return false;\n+        }\n+\n+        if (this == other) {\n+            return true;\n+        }\n+\n+        if (!address.equals(other.toString())) {\n+            return false;\n+        }\n+\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb5273d7e3e30623d97f771e34a3e2ddbff2286"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDU3NTY1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo0NTozMlrOHzB9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo0NTozMlrOHzB9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MTQ4OQ==", "bodyText": "The amqp in master branch just updated to 1.7.0-beta.3. You might want to update this to beta.3 as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r523271489", "createdAt": "2020-11-13T22:45:32Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/pom.xml", "diffHunk": "@@ -52,7 +52,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-amqp</artifactId>\n-      <version>1.7.0-beta.1</version> <!-- {x-version-update;beta_com.azure:azure-core-amqp;dependency} -->\n+      <version>1.7.0-beta.2</version> <!-- {x-version-update;unreleased_com.azure:azure-core-amqp;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5513888eff77aa242c898e40f8e7d4c5fe71ae38"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc1MTAwOnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/revapi/revapi.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzowNDoyNlrOH0imog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzowNDoyNlrOH0imog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NDk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"justification\": \"Renamed to matach AmqpMessage prefix.\"\n          \n          \n            \n                    \"justification\": \"Renamed to match AmqpMessage prefix.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524854946", "createdAt": "2020-11-17T03:04:26Z", "author": {"login": "JonathanGiles"}, "path": "eng/code-quality-reports/src/main/resources/revapi/revapi.json", "diffHunk": "@@ -269,6 +269,87 @@\n         \"code\": \"java.annotation.added\",\n         \"new\": \"class com.azure.storage.blob.models.PageList\",\n         \"justification\": \"Annotation required to resolve deserialization bug.\"\n+      },{\n+        \"code\": \"java.method.returnTypeChanged\",\n+        \"old\": \"method com.azure.core.util.IterableStream<byte[]> com.azure.core.amqp.models.AmqpDataBody::getData()\",\n+        \"new\": \"method java.util.List<byte[]> com.azure.core.amqp.models.AmqpDataBody::getData()\",\n+        \"justification\": \"Updated \"\n+      },\n+      {\n+        \"code\": \"java.class.removed\",\n+        \"old\": \"class com.azure.core.amqp.models.AmqpDataBody\",\n+        \"justification\": \"Renamed as AmqpMessageBody.\"\n+      },\n+      {\n+        \"code\": \"java.class.kindChanged\",\n+        \"old\": \"interface com.azure.core.amqp.models.AmqpMessageBody\",\n+        \"new\": \"class com.azure.core.amqp.models.AmqpMessageBody\",\n+        \"justification\": \"AmqpMessageBody is class representing all the new AMQP data types.\"\n+      },\n+      {\n+        \"code\": \"java.class.nowFinal\",\n+        \"old\": \"interface com.azure.core.amqp.models.AmqpMessageBody\",\n+        \"new\": \"class com.azure.core.amqp.models.AmqpMessageBody\",\n+        \"justification\": \"Made it final.\"\n+      },\n+      {\n+        \"code\": \"java.class.removed\",\n+        \"old\": \"enum com.azure.core.amqp.models.AmqpBodyType\",\n+        \"justification\": \"Because It is renamed to AmqpMessageBodyType\"\n+      },\n+      {\n+        \"code\": \"java.method.returnTypeChanged\",\n+        \"old\": \"method com.azure.core.amqp.models.AmqpBodyType com.azure.core.amqp.models.AmqpMessageBody::getBodyType()\",\n+        \"new\": \"method com.azure.core.amqp.models.AmqpMessageBodyType com.azure.core.amqp.models.AmqpMessageBody::getBodyType()\",\n+        \"justification\": \"Renamed to matach AmqpMessage prefix.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc1MzM3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzowNToyOVrOH0in7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODozMzo1MVrOH0pqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NTI3Nw==", "bodyText": "Have you checked that this renders correctly in generated JavaDoc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524855277", "createdAt": "2020-11-17T03:05:29Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information. This will be used in populating information like 'To', 'ReplyTo' etc.\n+ *\n+ * <p><strong>Create and retrieve address</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpAddress.createAndGet}\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string\">\n+ *     Address type Format.</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MDY3Mw==", "bodyText": "Yes, I did verify them.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524970673", "createdAt": "2020-11-17T08:33:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information. This will be used in populating information like 'To', 'ReplyTo' etc.\n+ *\n+ * <p><strong>Create and retrieve address</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpAddress.createAndGet}\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string\">\n+ *     Address type Format.</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NTI3Nw=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc1NzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzowNzo0MFrOH0iqVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMjozM1rOH0mwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NTg5Mw==", "bodyText": "This documentation is really unclear. You're telling the user what will happen, but you aren't tell them why or how to avoid the issue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524855893", "createdAt": "2020-11-17T03:07:40Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -46,10 +49,27 @@ public AmqpAnnotatedMessage(AmqpMessageBody body) {\n      * @param message used to create another instance of {@link AmqpAnnotatedMessage}.\n      *\n      * @throws NullPointerException if {@code message} or {@link AmqpAnnotatedMessage#getBody() body} is null.\n+     * @throws UnsupportedOperationException if {@link AmqpMessageBodyType} is {@link AmqpMessageBodyType#SEQUENCE} or\n+     * {@link AmqpMessageBodyType#VALUE}.\n+     * @throws IllegalStateException for invalid {@link AmqpMessageBodyType}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMzA3OQ==", "bodyText": "Okay  added more doc and code sample to explain more.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524923079", "createdAt": "2020-11-17T07:02:33Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -46,10 +49,27 @@ public AmqpAnnotatedMessage(AmqpMessageBody body) {\n      * @param message used to create another instance of {@link AmqpAnnotatedMessage}.\n      *\n      * @throws NullPointerException if {@code message} or {@link AmqpAnnotatedMessage#getBody() body} is null.\n+     * @throws UnsupportedOperationException if {@link AmqpMessageBodyType} is {@link AmqpMessageBodyType#SEQUENCE} or\n+     * {@link AmqpMessageBodyType#VALUE}.\n+     * @throws IllegalStateException for invalid {@link AmqpMessageBodyType}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NTg5Mw=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc2MTE3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzowOTo0NFrOH0ishA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzoxMToxOVrOH0iuOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NjQ1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n          \n          \n            \n             * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524856452", "createdAt": "2020-11-17T03:09:44Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ *\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1Njg5MQ==", "bodyText": "This error is copy / pasted in many places - please review all docs for similar typos.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524856891", "createdAt": "2020-11-17T03:11:19Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ *\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NjQ1Mg=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc2Njc4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzoxMjo1OVrOH0iv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzoxMjo1OVrOH0iv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1NzMwOQ==", "bodyText": "This kind of error message only serves to confuse users. It is better to say that the type is not supported at present and that it will be available in future releases. Perhaps even going so far as to point to a pre-filed github issue so that users may find more or subscribe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524857309", "createdAt": "2020-11-17T03:12:59Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ *\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private List<byte[]> data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));\n+        return body;\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an {@link IterableStream} of byte array containing only first byte array set on this\n+     * {@link AmqpMessageBody}. This library only support one byte array, so the returned list will have only one\n+     * element. Look for future releases where we will support multiple byte array.\n      *\n-     * @return The {@link AmqpBodyType}.\n+     * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+     * corresponding to the type of the body throws exception.</b>\n+     *\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n      */\n-    AmqpBodyType getBodyType();\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\"Cannot return data for a \"\n+                + \"message which is of type %s.\", getBodyType().toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc3NDg3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzoxNzozMFrOH0i0ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1MTozMlrOH0jYEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1ODUzMQ==", "bodyText": "you can call getFirstData now, can't you?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524858531", "createdAt": "2020-11-17T03:17:30Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -162,11 +162,10 @@ public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n      * @return A byte array representing the data.\n      */\n     public BinaryData getBody() {\n-        final AmqpBodyType type = amqpAnnotatedMessage.getBody().getBodyType();\n+        final AmqpMessageBodyType type = amqpAnnotatedMessage.getBody().getBodyType();\n         switch (type) {\n             case DATA:\n-                Optional<byte[]> byteArrayData = ((AmqpDataBody) amqpAnnotatedMessage.getBody()).getData().stream()\n-                    .findFirst();\n+                Optional<byte[]> byteArrayData = amqpAnnotatedMessage.getBody().getData().stream().findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NzYwMQ==", "bodyText": "Yeah, this can either use body.getFirstData() or body.getData().iterator().next(). No need to use optional.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524867601", "createdAt": "2020-11-17T03:51:32Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -162,11 +162,10 @@ public AmqpAnnotatedMessage getAmqpAnnotatedMessage() {\n      * @return A byte array representing the data.\n      */\n     public BinaryData getBody() {\n-        final AmqpBodyType type = amqpAnnotatedMessage.getBody().getBodyType();\n+        final AmqpMessageBodyType type = amqpAnnotatedMessage.getBody().getBodyType();\n         switch (type) {\n             case DATA:\n-                Optional<byte[]> byteArrayData = ((AmqpDataBody) amqpAnnotatedMessage.getBody()).getData().stream()\n-                    .findFirst();\n+                Optional<byte[]> byteArrayData = amqpAnnotatedMessage.getBody().getData().stream().findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1ODUzMQ=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDc4MDU2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzoyMDozMVrOH0i3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0NDoxNlrOH1Msjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA==", "bodyText": "Will service bus never support the other AmqpMessageId formats and will only ever support String?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524859388", "createdAt": "2020-11-17T03:20:31Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwODc1MQ==", "bodyText": "My understanding is that service bus will expose String only but advance user who want to stay in AMQP land, they can get AmqpAnnotatedMesage and set MessageId in other format whenever we provide support for it.\n@ramya-rao-a  Is this assumption correct ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524908751", "createdAt": "2020-11-17T06:21:48Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNjcyOQ==", "bodyText": "@JoshLove-msft has the details on this from the conversation with Clemens", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524926729", "createdAt": "2020-11-17T07:12:32Z", "author": {"login": "ramya-rao-a"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyMTU4MQ==", "bodyText": "If there is a future scenario where these other types are relevant, we should have a plan for how they will be enabled so that we can be sure it will be possible in a non-breaking fashion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525421581", "createdAt": "2020-11-17T19:14:36Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTAzNg==", "bodyText": "The service already supports all formats. We didn't enable it yet in .NET because the AMQP lib doesn't allow for getting back the data in its underlying format - it only allows you to get it as a string.\nThe way we will support it in .NET would be to have different ctors for each of the additional formats.\nWe will also have TryGetX methods where users can attempt to get back the data for each format, and an enum Format Property that has the format, similar to how the AmqpMessageBody/BodyType works.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525425036", "createdAt": "2020-11-17T19:20:27Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyODk3Mg==", "bodyText": "When you speak to how you will do this in .NET, are you speaking to how you would implement ServiceBusReceivedMessage? Right now we are looking at methods in Java such as setMessageId here, and it sounds like your proposed way forward would require a number of setter overloads for each type (or else, support for setting the AmqpMessageId directly)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525428972", "createdAt": "2020-11-17T19:26:53Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NjcwMg==", "bodyText": "No this would be for setting it directly on the AmqpMessageProperties. We would not expose this on the ServiceBus API directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525446702", "createdAt": "2020-11-17T19:44:56Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NDU5MA==", "bodyText": "So the Service Bus APIs will continue to be String-only forever? @hemanttanwar Can you provide sample code on how this would be done (either today or in the future) for Java using the approach Josh shares above?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525544590", "createdAt": "2020-11-17T21:44:16Z", "author": {"login": "JonathanGiles"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -554,7 +579,11 @@ void setLockedUntil(OffsetDateTime lockedUntil) {\n      * @param messageId to be set.\n      */\n     void setMessageId(String messageId) {\n-        amqpAnnotatedMessage.getProperties().setMessageId(messageId);\n+        AmqpMessageId id = null;\n+        if (messageId != null) {\n+            id = new AmqpMessageId(messageId);\n+        }\n+        amqpAnnotatedMessage.getProperties().setMessageId(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1OTM4OA=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgyOTg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0NzoyN1rOH0jUMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0NzoyN1rOH0jUMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NjYxMA==", "bodyText": "I don't think copy is required here. Even if we did this for immutability, we'll have to do this again in getter methods which we are currently not doing. So, just copying here isn't useful.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524866610", "createdAt": "2020-11-17T03:47:27Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ *\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private List<byte[]> data;\n+\n+    AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg0MDUxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1Mzo0NlrOH0jaHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1Mzo0NlrOH0jaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2ODEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param address to use.\n          \n          \n            \n                 * @param The address to set for this instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524868125", "createdAt": "2020-11-17T03:53:46Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information. This will be used in populating information like 'To', 'ReplyTo' etc.\n+ *\n+ * <p><strong>Create and retrieve address</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpAddress.createAndGet}\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string\">\n+ *     Address type Format.</a>\n+ */\n+public final class AmqpAddress {\n+\n+    private final String address;\n+\n+    /**\n+     * Creates the {@link AmqpAddress} with given {@code address}.\n+     *\n+     * @param address to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg0MzM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1NToyMFrOH0jbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1NToyMFrOH0jbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2ODUzOA==", "bodyText": "The javadoc for overridden methods is inconsistent. hashCode has no javadoc, equals has @inheritdoc and toString has custom documentation. We should have consistent doc here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524868538", "createdAt": "2020-11-17T03:55:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAddress.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents amqp address information. This will be used in populating information like 'To', 'ReplyTo' etc.\n+ *\n+ * <p><strong>Create and retrieve address</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpAddress.createAndGet}\n+ *\n+ * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-address-string\">\n+ *     Address type Format.</a>\n+ */\n+public final class AmqpAddress {\n+\n+    private final String address;\n+\n+    /**\n+     * Creates the {@link AmqpAddress} with given {@code address}.\n+     *\n+     * @param address to use.\n+     * @throws NullPointerException if {@code address} is null.\n+     */\n+    public AmqpAddress(String address) {\n+        this.address = Objects.requireNonNull(address, \"'address' cannot be null.\");\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return address.hashCode();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object other) {\n+        if (other == null) {\n+            return false;\n+        }\n+\n+        if (this.getClass() != other.getClass()) {\n+            return false;\n+        }\n+\n+        if (this == other) {\n+            return true;\n+        }\n+\n+        return Objects.equals(address, other.toString());\n+    }\n+\n+    /**\n+     * Gets string representation of the address.\n+     *\n+     * @return string representation of the address.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg0NjM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1Njo1NVrOH0jdXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1Njo1NVrOH0jdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2ODk1Nw==", "bodyText": "These links should be on AmqpMessageBodyType instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524868957", "createdAt": "2020-11-17T03:56:55Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg0ODMzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1ODowNlrOH0jejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo1ODowNlrOH0jejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2OTI2Mw==", "bodyText": "I don't think we should have information about future releases in this JavaDoc. It should instead be a GitHub issue tracked in our backlog.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524869263", "createdAt": "2020-11-17T03:58:06Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg1MjU2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDowMDowMVrOH0jgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDowMDowMVrOH0jgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2OTgyMA==", "bodyText": "This can be made private as it's not required by any other class within the package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524869820", "createdAt": "2020-11-17T04:00:01Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to AMQP specification message body\n+ * types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA}. Other types will be supported in\n+ * future releases.\n+ * <b>Amqp message body types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-data\">DATA</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-amqp-sequence\">SEQUENCE</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-amqp-value\">VALUE</a></li>\n+ * </ul>\n+ *\n+ * <b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method.Get methods not\n+ * corresponding to the type of the body throws exception.</b>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private List<byte[]> data;\n+\n+    AmqpMessageBody() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDg1ODEzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDowMzoxM1rOH0jj4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDo1ODoyNlrOH0kbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3MDYyNg==", "bodyText": "If the message ids support string, long, uuid and binary types why does the constructor only have String?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524870626", "createdAt": "2020-11-17T04:03:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id. Amqp specification support message id in various types. This class only implements\n+ * {@link String} representation at present.\n+ *\n+ * <p><strong>Create and retrieve message id </strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * <b>Amqp message id types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-string\">String</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-message-id-ulong\">long</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-uuid\">Uuid</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-binary\">binary</a></li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NDc3OA==", "bodyText": "We ,including dotnet, are only implementing String in this GA release.   And other types will be supported in future and by all the languages as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r524884778", "createdAt": "2020-11-17T04:58:26Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id. Amqp specification support message id in various types. This class only implements\n+ * {@link String} representation at present.\n+ *\n+ * <p><strong>Create and retrieve message id </strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * <b>Amqp message id types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-string\">String</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-message-id-ulong\">long</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-uuid\">Uuid</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-binary\">binary</a></li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3MDYyNg=="}, "originalCommit": {"oid": "4839f2f408edfe1c6a4e5aab43fe734cc0e29e47"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDMxOTU1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1ODozNVrOH1Ee5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1ODozNVrOH1Ee5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMDAyMQ==", "bodyText": "nit: upper-case 'C'\nnit: 'supports', not 'support'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525410021", "createdAt": "2020-11-17T18:58:35Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -45,12 +48,19 @@ public AmqpAnnotatedMessage(AmqpMessageBody body) {\n \n     /**\n      * Creates instance of {@link AmqpAnnotatedMessage} with given {@link AmqpAnnotatedMessage} instance.\n+     * The Current implementation only support {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDMzOTk0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNDowNVrOH1Er4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyNjo1N1rOH1MIZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzM0Nw==", "bodyText": "Why are you copying the byte[] here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525413347", "createdAt": "2020-11-17T19:04:05Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMDg4Nw==", "bodyText": "I actually removed copy constructor from AmqpAnnotatedMessage  , since this was created for service bus needs. dotnet also do not have copy constructor.\nAnd moved this logic into ServiceBusMessage, I still do Arrays.copyOf because when use is copying a ServiceBusReceivedMessage into ServiceBusMessage , changing one bytes should not effect bytes in other object. Thus I need to use  Arrays.copyOf", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525510887", "createdAt": "2020-11-17T20:41:09Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzM0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTQyOQ==", "bodyText": "You should clarify the behavior with @JoshLove-msft to ensure we are not doing needless copies. Specifically, where, if anywhere, does .NET copy in their amqp or service bus library. I would guess it is less than we do.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525515429", "createdAt": "2020-11-17T20:49:52Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzM0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyMDUxMA==", "bodyText": "We do not copy the bytes - we just create a new instance of AmqpMessageBody wrapping the same bytes - https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/servicebus/Azure.Messaging.ServiceBus/src/Primitives/ServiceBusMessage.cs#L66-L72", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525520510", "createdAt": "2020-11-17T20:59:12Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzM0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNTMzMw==", "bodyText": "Okay I will  remove this copy from here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525535333", "createdAt": "2020-11-17T21:26:57Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzM0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM0NDEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNTowNFrOH1EueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNTowNFrOH1EueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDAwOQ==", "bodyText": "Just noting that we don't make a copy in .NET.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525414009", "createdAt": "2020-11-17T19:05:04Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM0NTI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNToyMVrOH1EvJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNToyMVrOH1EvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDE4MQ==", "bodyText": "\"support body type [%s] at present\" -> \"supports the AMQP Data body type at present\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525414181", "createdAt": "2020-11-17T19:05:21Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpAnnotatedMessage.java", "diffHunk": "@@ -59,12 +69,15 @@ public AmqpAnnotatedMessage(AmqpAnnotatedMessage message) {\n         AmqpMessageBodyType bodyType = message.getBody().getBodyType();\n         switch (bodyType) {\n             case DATA:\n-                amqpMessageBody = AmqpMessageBody.fromData(message.getBody().getFirstData());\n+                final byte[] data = message.getBody().getFirstData();\n+                amqpMessageBody = AmqpMessageBody.fromData(Arrays.copyOf(data, data.length));\n                 break;\n             case SEQUENCE:\n             case VALUE:\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(\"Body type not supported yet \"\n-                    + bodyType.toString()));\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(\n+                    String.format(Locale.US, \"This constructor only support body type [%s] at present. Track \"\n+                        + \"this issue, https://github.com/Azure/azure-sdk-for-java/issues/17614 for other body type \"\n+                        + \"support in future.\", AmqpMessageBodyType.DATA.toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM0NzA5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNTo1MVrOH1EwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNTo1MVrOH1EwTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDQ3OA==", "bodyText": "Why do we not copy here, but do in the AmqpMessage ctor?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525414478", "createdAt": "2020-11-17T19:05:51Z", "author": {"login": "JoshLove-msft"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -53,7 +48,7 @@ public static AmqpMessageBody fromData(byte[] data) {\n         Objects.requireNonNull(data, \"'data' cannot be null.\");\n         AmqpMessageBody body = new AmqpMessageBody();\n         body.bodyType = AmqpMessageBodyType.DATA;\n-        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));\n+        body.data = Collections.singletonList(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM0OTQwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNjoyOFrOH1Exvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMToxMVrOH1MRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDg0Nw==", "bodyText": "Why did you stop copying here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525414847", "createdAt": "2020-11-17T19:06:28Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -53,7 +48,7 @@ public static AmqpMessageBody fromData(byte[] data) {\n         Objects.requireNonNull(data, \"'data' cannot be null.\");\n         AmqpMessageBody body = new AmqpMessageBody();\n         body.bodyType = AmqpMessageBodyType.DATA;\n-        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));\n+        body.data = Collections.singletonList(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjQ2MA==", "bodyText": "We are not providing immutable AmqpMessageBody . So I do not copy bytes when user create this object and also in getters. Matching how dotnet is doing.\nSrikanta also commented in his comment above.\n#17464 (comment)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525506460", "createdAt": "2020-11-17T20:35:06Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -53,7 +48,7 @@ public static AmqpMessageBody fromData(byte[] data) {\n         Objects.requireNonNull(data, \"'data' cannot be null.\");\n         AmqpMessageBody body = new AmqpMessageBody();\n         body.bodyType = AmqpMessageBodyType.DATA;\n-        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));\n+        body.data = Collections.singletonList(data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDg0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNzY1NA==", "bodyText": "Based on discussion above #17464 (comment), I have  removed Arrays.copyOf from  AmqpMessageBody and ServiceBusMessage", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525537654", "createdAt": "2020-11-17T21:31:11Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -53,7 +48,7 @@ public static AmqpMessageBody fromData(byte[] data) {\n         Objects.requireNonNull(data, \"'data' cannot be null.\");\n         AmqpMessageBody body = new AmqpMessageBody();\n         body.bodyType = AmqpMessageBodyType.DATA;\n-        body.data = Collections.singletonList(Arrays.copyOf(data, data.length));\n+        body.data = Collections.singletonList(data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDg0Nw=="}, "originalCommit": {"oid": "0886d24a21dc92ebb8db6f2ebd5eacfc69facbda"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA3NzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMDo0MFrOH1MQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMDo0MFrOH1MQSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNzM1NQ==", "bodyText": "nit: these new lines under the if statement in various places look out of place.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525537355", "createdAt": "2020-11-17T21:30:40Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to an AMQP specification message\n+ * body types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this\n+ * <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a> to find out support for\n+ * other AMQP types.\n+ *\n+ * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+ * corresponding to the type of the body throws exception.</b></p>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private List<byte[]> data;\n+\n+    private AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = Collections.singletonList(data);\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an {@link IterableStream} of byte array containing only first byte array set on this\n+     * {@link AmqpMessageBody}. This library only support one byte array at present, so the returned list will have only\n+     *  one element.\n+     * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+     * corresponding to the type of the body throws exception.</b></p>\n+     *\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"This method can only be called for AMQP Data body type at present. Track this issue, \"\n+                    + \"https://github.com/Azure/azure-sdk-for-java/issues/17614 for other body type support in \"\n+                    + \"future.\"));\n+        }\n+\n+        return new IterableStream<>(data);\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets first byte array set on this {@link AmqpMessageBody}. This library only support one byte array on Amqp\n+     * Message. Look for future releases where we will support multiple byte array and you can use\n+     * {@link AmqpMessageBody#getData()} API.\n+     * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+     * corresponding to the type of the body throws exception.</b></p>\n      *\n-     * @return The {@link AmqpBodyType}.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\" target=\"_blank\">\n+     *     Amqp Message Format.</a>\n      */\n-    AmqpBodyType getBodyType();\n+    public byte[] getFirstData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+\n+            throw logger.logExceptionAsError(new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA4MTE2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMTozN1rOH1MSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMTozN1rOH1MSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNzkxMw==", "bodyText": "If the common case is to have users call this getFirstData API, we shouldn't wrap into a collection and call get(0) on it, as it is just extra work. We should only wrap the first time the getData call is made, and keep it as a byte[] otherwise.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525537913", "createdAt": "2020-11-17T21:31:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,113 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to an AMQP specification message\n+ * body types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this\n+ * <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a> to find out support for\n+ * other AMQP types.\n+ *\n+ * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+ * corresponding to the type of the body throws exception.</b></p>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    private List<byte[]> data;\n+\n+    private AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = Collections.singletonList(data);\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an {@link IterableStream} of byte array containing only first byte array set on this\n+     * {@link AmqpMessageBody}. This library only support one byte array at present, so the returned list will have only\n+     *  one element.\n+     * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+     * corresponding to the type of the body throws exception.</b></p>\n+     *\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"This method can only be called for AMQP Data body type at present. Track this issue, \"\n+                    + \"https://github.com/Azure/azure-sdk-for-java/issues/17614 for other body type support in \"\n+                    + \"future.\"));\n+        }\n+\n+        return new IterableStream<>(data);\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets first byte array set on this {@link AmqpMessageBody}. This library only support one byte array on Amqp\n+     * Message. Look for future releases where we will support multiple byte array and you can use\n+     * {@link AmqpMessageBody#getData()} API.\n+     * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+     * corresponding to the type of the body throws exception.</b></p>\n      *\n-     * @return The {@link AmqpBodyType}.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     * @see <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format\" target=\"_blank\">\n+     *     Amqp Message Format.</a>\n      */\n-    AmqpBodyType getBodyType();\n+    public byte[] getFirstData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"This method can only be called for AMQP Data body type at present. Track this issue, \"\n+                    + \"https://github.com/Azure/azure-sdk-for-java/issues/17614 for other body type support in \"\n+                    + \"future.\"));\n+        }\n+\n+        return data.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA5MTExOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAnnotatedMessageJavaDocCodeSamples.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozNDozOFrOH1MYhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NzowM1rOH1QU_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzOTQ2MA==", "bodyText": "I'm curious, what are the repercussions of a user doing this:\nmessageBody = amqpAnnotatedMessage.getBody();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525539460", "createdAt": "2020-11-17T21:34:38Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAnnotatedMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Class contains sample code snippets that will be used in javadocs.\n+ */\n+public class AmqpAnnotatedMessageJavaDocCodeSamples {\n+    /**\n+     * Get message body from {@link AmqpAnnotatedMessage}.\n+     */\n+    public void checkBodyType() {\n+        AmqpAnnotatedMessage amqpAnnotatedMessage = null;\n+        // BEGIN: com.azure.core.amqp.models.AmqpBodyType.checkBodyType\n+        AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n+        AmqpMessageBody messageBody = null;\n+        switch (bodyType) {\n+            case DATA:\n+                messageBody = AmqpMessageBody.fromData(amqpAnnotatedMessage.getBody().getFirstData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MDEyNA==", "bodyText": "Put another way...this code is demonstrating how to switch off the body type, but to me it raises questions about what it is actually demonstrating, and what the real use case is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525540124", "createdAt": "2020-11-17T21:35:51Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAnnotatedMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Class contains sample code snippets that will be used in javadocs.\n+ */\n+public class AmqpAnnotatedMessageJavaDocCodeSamples {\n+    /**\n+     * Get message body from {@link AmqpAnnotatedMessage}.\n+     */\n+    public void checkBodyType() {\n+        AmqpAnnotatedMessage amqpAnnotatedMessage = null;\n+        // BEGIN: com.azure.core.amqp.models.AmqpBodyType.checkBodyType\n+        AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n+        AmqpMessageBody messageBody = null;\n+        switch (bodyType) {\n+            case DATA:\n+                messageBody = AmqpMessageBody.fromData(amqpAnnotatedMessage.getBody().getFirstData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzOTQ2MA=="}, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTExMw==", "bodyText": "It would be good to clarify to the user in this sample code and / or Java why the code I put above is wrong, because I would guess that most people would do that by default.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525541113", "createdAt": "2020-11-17T21:37:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAnnotatedMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Class contains sample code snippets that will be used in javadocs.\n+ */\n+public class AmqpAnnotatedMessageJavaDocCodeSamples {\n+    /**\n+     * Get message body from {@link AmqpAnnotatedMessage}.\n+     */\n+    public void checkBodyType() {\n+        AmqpAnnotatedMessage amqpAnnotatedMessage = null;\n+        // BEGIN: com.azure.core.amqp.models.AmqpBodyType.checkBodyType\n+        AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n+        AmqpMessageBody messageBody = null;\n+        switch (bodyType) {\n+            case DATA:\n+                messageBody = AmqpMessageBody.fromData(amqpAnnotatedMessage.getBody().getFirstData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzOTQ2MA=="}, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNDA5Mg==", "bodyText": "updated sample to clarify this  why user should not call this directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r525604092", "createdAt": "2020-11-17T23:57:03Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAnnotatedMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Class contains sample code snippets that will be used in javadocs.\n+ */\n+public class AmqpAnnotatedMessageJavaDocCodeSamples {\n+    /**\n+     * Get message body from {@link AmqpAnnotatedMessage}.\n+     */\n+    public void checkBodyType() {\n+        AmqpAnnotatedMessage amqpAnnotatedMessage = null;\n+        // BEGIN: com.azure.core.amqp.models.AmqpBodyType.checkBodyType\n+        AmqpMessageBodyType bodyType = amqpAnnotatedMessage.getBody().getBodyType();\n+        AmqpMessageBody messageBody = null;\n+        switch (bodyType) {\n+            case DATA:\n+                messageBody = AmqpMessageBody.fromData(amqpAnnotatedMessage.getBody().getFirstData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzOTQ2MA=="}, "originalCommit": {"oid": "79c54385a95525092a645413af64c215995ce178"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjk5NDg0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNDoxN1rOH2Yy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNDoxN1rOH2Yy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MTQxOA==", "bodyText": "nit: Update comment as this is not a package-private constructor anymore or remove the comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526791418", "createdAt": "2020-11-19T11:24:17Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,115 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to an AMQP specification message\n+ * body types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this\n+ * <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a> to find out support for\n+ * other AMQP types.\n+ *\n+ * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+ * corresponding to the type of the body throws exception.</b></p>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    // We expect user to call `getFirstData()` more because we support one byte[] as present.\n+    // This the priority here to store payload as `byte[] data` and\n+    private byte[] data;\n+    private List<byte[]> dataList;\n+\n+    private AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAwOTA4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNzoyMFrOH2Y79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNzoyMFrOH2Y79w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzcxOQ==", "bodyText": "We don't need to include future release plans in javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526793719", "createdAt": "2020-11-19T11:27:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBody.java", "diffHunk": "@@ -3,14 +3,115 @@\n \n package com.azure.core.amqp.models;\n \n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n /**\n- * Interface representing Amqp Message Body.\n+ * This class encapsulates the body of a message. The {@link AmqpMessageBodyType} map to an AMQP specification message\n+ * body types. Current implementation only support {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this\n+ * <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a> to find out support for\n+ * other AMQP types.\n+ *\n+ * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+ * corresponding to the type of the body throws exception.</b></p>\n+ *\n+ * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+ *\n+ * @see AmqpMessageBodyType\n  */\n-public interface AmqpMessageBody {\n+public final class AmqpMessageBody {\n+    private final ClientLogger logger = new ClientLogger(AmqpMessageBody.class);\n+    private AmqpMessageBodyType bodyType;\n+\n+    // We expect user to call `getFirstData()` more because we support one byte[] as present.\n+    // This the priority here to store payload as `byte[] data` and\n+    private byte[] data;\n+    private List<byte[]> dataList;\n+\n+    private AmqpMessageBody() {\n+        // package constructor so no one can create instance of this except classes im this package.\n+    }\n+\n+    /**\n+     * Creates instance of {@link AmqpMessageBody} with given byte array.\n+     *\n+     * @param data used to create another instance of {@link AmqpMessageBody}.\n+     *\n+     * @return AmqpMessageBody Newly created instance.\n+     *\n+     * @throws NullPointerException if {@code data} is null.\n+     */\n+    public static AmqpMessageBody fromData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        AmqpMessageBody body = new AmqpMessageBody();\n+        body.bodyType = AmqpMessageBodyType.DATA;\n+        body.data = data;\n+        return body;\n+    }\n+\n+    /**\n+     * Gets the {@link AmqpMessageBodyType} of the message.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return AmqpBodyType type of the message.\n+     */\n+    public AmqpMessageBodyType getBodyType() {\n+        return bodyType;\n+    }\n+\n+    /**\n+     * Gets an {@link IterableStream} of byte array containing only first byte array set on this\n+     * {@link AmqpMessageBody}. This library only support one byte array at present, so the returned list will have only\n+     *  one element.\n+     * <p><b>Client should test for {@link AmqpMessageBodyType} before calling corresponding get method. Get methods not\n+     * corresponding to the type of the body throws exception.</b></p>\n+     *\n+     * <p><strong>How to check for {@link AmqpMessageBodyType}</strong></p>\n+     * {@codesnippet com.azure.core.amqp.models.AmqpBodyType.checkBodyType}\n+     * @return data set on {@link AmqpMessageBody}.\n+     *\n+     * @throws IllegalArgumentException If {@link AmqpMessageBodyType} is not {@link AmqpMessageBodyType#DATA DATA}.\n+     */\n+    public IterableStream<byte[]> getData() {\n+        if (bodyType != AmqpMessageBodyType.DATA) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"This method can only be called for AMQP Data body type at present. Track this issue, \"\n+                    + \"https://github.com/Azure/azure-sdk-for-java/issues/17614 for other body type support in \"\n+                    + \"future.\"));\n+        }\n+        if (dataList ==  null) {\n+            dataList = Collections.singletonList(data);\n+        }\n+        return new IterableStream<>(dataList);\n+    }\n+\n     /**\n-     * Type representing various supported amqp body types.\n+     * Gets first byte array set on this {@link AmqpMessageBody}. This library only support one byte array on Amqp\n+     * Message. Look for future releases where we will support multiple byte array and you can use\n+     * {@link AmqpMessageBody#getData()} API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAxNjY2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBodyType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyOToyNVrOH2ZAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo0MjoxNVrOH2nmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NDkzNg==", "bodyText": "Same here - javadoc doesn't have to include future release issues. We can just state that currently only DATA type is supported.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526794936", "createdAt": "2020-11-19T11:29:25Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBodyType.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Represents all valid {@link AmqpMessageBodyType} for an AMQP Message. Current SDK only support\n+ * {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a>\n+ * to find out support for other AMQP types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNDAyNw==", "bodyText": "Jonathan specifically asked me to create an issue and include which user can subscribe to,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r527034027", "createdAt": "2020-11-19T16:42:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageBodyType.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Represents all valid {@link AmqpMessageBodyType} for an AMQP Message. Current SDK only support\n+ * {@link AmqpMessageBodyType#DATA DATA} AMQP data type. Track this <a href=\"https://github.com/Azure/azure-sdk-for-java/issues/17614\" target=\"_blank\">issue</a>\n+ * to find out support for other AMQP types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NDkzNg=="}, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAyMTcwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozMDozOVrOH2ZDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo0NTo0OVrOH2nxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NTY5Mw==", "bodyText": "If this class only supports string id, do we need to have all other types in this javadoc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526795693", "createdAt": "2020-11-19T11:30:39Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id. Amqp specification support message id in various types. This class only implements\n+ * {@link String} representation at present.\n+ *\n+ * <p><strong>Create and retrieve message id </strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpMessageId.createAndGet}\n+ *\n+ * <b>Amqp message id types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-string\" target=\"_blank\">String</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-message-id-ulong\" target=\"_blank\">long</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-uuid\" target=\"_blank\">Uuid</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-binary\" target=\"_blank\">binary</a></li>\n+ * </ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNjcyNg==", "bodyText": "ok removing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r527036726", "createdAt": "2020-11-19T16:45:49Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/models/AmqpMessageId.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This represents Message id. Amqp specification support message id in various types. This class only implements\n+ * {@link String} representation at present.\n+ *\n+ * <p><strong>Create and retrieve message id </strong></p>\n+ * {@codesnippet com.azure.core.amqp.models.AmqpMessageId.createAndGet}\n+ *\n+ * <b>Amqp message id types:</b>\n+ * <ul>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-string\" target=\"_blank\">String</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-message-id-ulong\" target=\"_blank\">long</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-uuid\" target=\"_blank\">Uuid</a></li>\n+ * <li><a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-id-binary\" target=\"_blank\">binary</a></li>\n+ * </ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NTY5Mw=="}, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAyOTcwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAddressJavaDocCodeSamples.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozMjo1M1rOH2ZIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozMjo1M1rOH2ZIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5NjkwNw==", "bodyText": "We should have a single class for all javadocs. Users landing on our samples directory will see too many javadoc classes and can distract them from real samples.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526796907", "createdAt": "2020-11-19T11:32:53Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-amqp/src/samples/java/com/azure/core/amqp/models/AmqpAddressJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.models;\n+\n+/**\n+ * Class contains sample code snippets that will be used in javadocs.\n+ */\n+public class AmqpAddressJavaDocCodeSamples {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA0NzI5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozNzoxM1rOH2ZTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozNzoxM1rOH2ZTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5OTYzMA==", "bodyText": "Why point users to AmqpAnnotatedMessage when we are trying to hide/minimize it's usage?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526799630", "createdAt": "2020-11-19T11:37:13Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -108,23 +109,109 @@ public ServiceBusMessage(BinaryData body) {\n      * @param receivedMessage The received message to create new message from.\n      *\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n+     * @throws UnsupportedOperationException if {@link AmqpMessageBodyType} is {@link AmqpMessageBodyType#SEQUENCE} or\n+     * {@link AmqpMessageBodyType#VALUE}. See code sample above explaining how to check for {@link AmqpMessageBodyType}\n+     * before calling this constructor.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType} before calling this constructor</strong></p>\n+     * {@codesnippet com.azure.messaging.servicebus.ServiceBusMessage.copyServiceBusMessage}\n+     * @throws IllegalStateException for invalid {@link AmqpMessageBodyType}.\n+     * @see AmqpAnnotatedMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA1MTgyOnYy", "diffSide": "LEFT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTozODozNVrOH2ZV1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1MDoxMVrOH2n-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDM0MQ==", "bodyText": "Why was the copy-constructor removed from AmqpAnnotatedMessage? We did have the copy constructor earlier.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526800341", "createdAt": "2020-11-19T11:38:35Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -108,23 +109,109 @@ public ServiceBusMessage(BinaryData body) {\n      * @param receivedMessage The received message to create new message from.\n      *\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n+     * @throws UnsupportedOperationException if {@link AmqpMessageBodyType} is {@link AmqpMessageBodyType#SEQUENCE} or\n+     * {@link AmqpMessageBodyType#VALUE}. See code sample above explaining how to check for {@link AmqpMessageBodyType}\n+     * before calling this constructor.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType} before calling this constructor</strong></p>\n+     * {@codesnippet com.azure.messaging.servicebus.ServiceBusMessage.copyServiceBusMessage}\n+     * @throws IllegalStateException for invalid {@link AmqpMessageBodyType}.\n+     * @see AmqpAnnotatedMessage\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n         Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n \n-        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDE1MQ==", "bodyText": "I removed it for following reasons\n\nCopy constructor is kind of Service bus needs and other library do not need it, for example Events hub.\ndotnet also do not have it,  so to in sync with dotnet.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r527040151", "createdAt": "2020-11-19T16:50:11Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java", "diffHunk": "@@ -108,23 +109,109 @@ public ServiceBusMessage(BinaryData body) {\n      * @param receivedMessage The received message to create new message from.\n      *\n      * @throws NullPointerException if {@code receivedMessage} is {@code null}.\n+     * @throws UnsupportedOperationException if {@link AmqpMessageBodyType} is {@link AmqpMessageBodyType#SEQUENCE} or\n+     * {@link AmqpMessageBodyType#VALUE}. See code sample above explaining how to check for {@link AmqpMessageBodyType}\n+     * before calling this constructor.\n+     * <p><strong>How to check for {@link AmqpMessageBodyType} before calling this constructor</strong></p>\n+     * {@codesnippet com.azure.messaging.servicebus.ServiceBusMessage.copyServiceBusMessage}\n+     * @throws IllegalStateException for invalid {@link AmqpMessageBodyType}.\n+     * @see AmqpAnnotatedMessage\n      */\n     public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage) {\n         Objects.requireNonNull(receivedMessage, \"'receivedMessage' cannot be null.\");\n \n-        this.amqpAnnotatedMessage = new AmqpAnnotatedMessage(receivedMessage.getAmqpAnnotatedMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMDM0MQ=="}, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA3ODI3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusMessageJavaDocCodeSamples.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0NTozMFrOH2Zlfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0NTozMFrOH2Zlfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNDM1MA==", "bodyText": "Same applies here. Add all javadoc samples in one class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526804350", "createdAt": "2020-11-19T11:45:30Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.models.AmqpAnnotatedMessage;\n+import com.azure.core.amqp.models.AmqpMessageBodyType;\n+\n+/**\n+ * java doc sample for  {@link ServiceBusMessage}.\n+ */\n+public class ServiceBusMessageJavaDocCodeSamples {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA4NTgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusMessageJavaDocCodeSamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0NzozN1rOH2ZqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzoyMToxMFrOH2pZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNTUwNw==", "bodyText": "To copy a received message, why does the user have to check the body type? This should be taken care of in the constructor of ServiceBusMessage.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r526805507", "createdAt": "2020-11-19T11:47:37Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.models.AmqpAnnotatedMessage;\n+import com.azure.core.amqp.models.AmqpMessageBodyType;\n+\n+/**\n+ * java doc sample for  {@link ServiceBusMessage}.\n+ */\n+public class ServiceBusMessageJavaDocCodeSamples {\n+    /**\n+     * Copy {@link AmqpAnnotatedMessage}.\n+     */\n+    public void copyServiceBusReceivedMessage() {\n+        ServiceBusReceivedMessage sourceServiceBusReceivedMessage = null;\n+        // BEGIN: com.azure.messaging.servicebus.ServiceBusMessage.copyServiceBusMessage\n+        AmqpMessageBodyType bodyType = sourceServiceBusReceivedMessage.getAmqpAnnotatedMessage().getBody().getBodyType();\n+        ServiceBusMessage copyMessage = null;\n+        switch (bodyType) {\n+            case DATA:\n+                copyMessage = new ServiceBusMessage(sourceServiceBusReceivedMessage);\n+                break;\n+            case SEQUENCE:\n+            case VALUE:\n+                throw new RuntimeException(\"Body type not supported yet.\");\n+            default:\n+                throw new RuntimeException(\"Body type not valid.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2MzQwNA==", "bodyText": "Actually, we will not create a SBRM with any other type except DATA for now. So User should not face this problem in copy constructor where type is something else. So  user should not need to check this type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17464#discussion_r527063404", "createdAt": "2020-11-19T17:21:10Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusMessageJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.models.AmqpAnnotatedMessage;\n+import com.azure.core.amqp.models.AmqpMessageBodyType;\n+\n+/**\n+ * java doc sample for  {@link ServiceBusMessage}.\n+ */\n+public class ServiceBusMessageJavaDocCodeSamples {\n+    /**\n+     * Copy {@link AmqpAnnotatedMessage}.\n+     */\n+    public void copyServiceBusReceivedMessage() {\n+        ServiceBusReceivedMessage sourceServiceBusReceivedMessage = null;\n+        // BEGIN: com.azure.messaging.servicebus.ServiceBusMessage.copyServiceBusMessage\n+        AmqpMessageBodyType bodyType = sourceServiceBusReceivedMessage.getAmqpAnnotatedMessage().getBody().getBodyType();\n+        ServiceBusMessage copyMessage = null;\n+        switch (bodyType) {\n+            case DATA:\n+                copyMessage = new ServiceBusMessage(sourceServiceBusReceivedMessage);\n+                break;\n+            case SEQUENCE:\n+            case VALUE:\n+                throw new RuntimeException(\"Body type not supported yet.\");\n+            default:\n+                throw new RuntimeException(\"Body type not valid.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNTUwNw=="}, "originalCommit": {"oid": "6c9667aa9134963ad6f27882617e18331bfd9a34"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2914, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}