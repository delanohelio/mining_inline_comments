{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNzcxMDQ4", "number": 14890, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo0ODo0N1rOEhFvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoyMjozN1rOEiAZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTMyNDYyOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/arm/collection/implementation/BatchDeletionImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo0ODo0N1rOHONjMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo0ODo0N1rOHONjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NDExNQ==", "bodyText": "Added to reduce duplicate code. Plan to move same code from a few other classes to use this as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484664115", "createdAt": "2020-09-08T05:48:47Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/arm/collection/implementation/BatchDeletionImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.resources.fluentcore.arm.collection.implementation;\n+\n+import com.azure.resourcemanager.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.resourcemanager.resources.fluentcore.utils.ReactorMapper;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.function.BiFunction;\n+\n+/**\n+ * Utility class for batch deletion.\n+ */\n+public class BatchDeletionImpl {\n+\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public static Flux<String> deleteByIdsAsync(Collection<String> ids,\n+                                                BiFunction<String, String, Mono<Void>> deleteByIdAsync) {\n+        if (ids == null || ids.isEmpty()) {\n+            return Flux.empty();\n+        }\n+\n+        Collection<Mono<String>> observables = new ArrayList<>();\n+        for (String id : ids) {\n+            final String resourceGroupName = ResourceUtils.groupFromResourceId(id);\n+            final String name = ResourceUtils.nameFromResourceId(id);\n+            Mono<String> o = ReactorMapper.map(deleteByIdAsync.apply(resourceGroupName, name), id);\n+            observables.add(o);\n+        }\n+\n+        return Flux.mergeDelayError(32, observables.toArray(new Mono[0]));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9f3e493dd73d8c90a29c004748d2ce4bc29821"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTM2NzAzOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppBaseImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjowNjoxOFrOHON7Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyMToxOFrOHOOSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MDI1OA==", "bodyText": "Why this property remains?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484670258", "createdAt": "2020-09-08T06:06:18Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppBaseImpl.java", "diffHunk": "@@ -214,67 +215,44 @@ private void normalizeProperties() {\n         this.diagnosticLogsToUpdate = false;\n         this.sslBindingsToCreate = new TreeMap<>();\n         this.msiHandler = null;\n-        if (inner().hostNames() != null) {\n-            this.hostNamesSet = new HashSet<>(inner().hostNames());\n-        }\n-        if (inner().enabledHostNames() != null) {\n-            this.enabledHostNamesSet = new HashSet<>(inner().enabledHostNames());\n-        }\n-        if (inner().trafficManagerHostNames() != null) {\n-            this.trafficManagerHostNamesSet = new HashSet<>(inner().trafficManagerHostNames());\n-        }\n-        if (inner().outboundIpAddresses() != null) {\n-            this.outboundIPAddressesSet = new HashSet<>(Arrays.asList(inner().outboundIpAddresses().split(\",[ ]*\")));\n-        }\n-        this.hostNameSslStateMap = new HashMap<>();\n-        if (inner().hostnameSslStates() != null) {\n-            for (HostnameSslState hostNameSslState : inner().hostnameSslStates()) {\n-                // Server returns null sometimes, invalid on update, so we set default\n-                if (hostNameSslState.sslState() == null) {\n-                    hostNameSslState.withSslState(SslState.DISABLED);\n-                }\n-                hostNameSslStateMap.put(hostNameSslState.name(), hostNameSslState);\n-            }\n-        }\n+        this.webSiteBase = new WebSiteBaseImpl(inner());\n+        this.hostNameSslStateMap = new HashMap<>(this.webSiteBase.hostnameSslStates());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4b7b3c71091a772fcc654680a38490cc20b7d5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NDg3Nw==", "bodyText": "In Update flow, code changes the Map to add new items.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484674877", "createdAt": "2020-09-08T06:18:21Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppBaseImpl.java", "diffHunk": "@@ -214,67 +215,44 @@ private void normalizeProperties() {\n         this.diagnosticLogsToUpdate = false;\n         this.sslBindingsToCreate = new TreeMap<>();\n         this.msiHandler = null;\n-        if (inner().hostNames() != null) {\n-            this.hostNamesSet = new HashSet<>(inner().hostNames());\n-        }\n-        if (inner().enabledHostNames() != null) {\n-            this.enabledHostNamesSet = new HashSet<>(inner().enabledHostNames());\n-        }\n-        if (inner().trafficManagerHostNames() != null) {\n-            this.trafficManagerHostNamesSet = new HashSet<>(inner().trafficManagerHostNames());\n-        }\n-        if (inner().outboundIpAddresses() != null) {\n-            this.outboundIPAddressesSet = new HashSet<>(Arrays.asList(inner().outboundIpAddresses().split(\",[ ]*\")));\n-        }\n-        this.hostNameSslStateMap = new HashMap<>();\n-        if (inner().hostnameSslStates() != null) {\n-            for (HostnameSslState hostNameSslState : inner().hostnameSslStates()) {\n-                // Server returns null sometimes, invalid on update, so we set default\n-                if (hostNameSslState.sslState() == null) {\n-                    hostNameSslState.withSslState(SslState.DISABLED);\n-                }\n-                hostNameSslStateMap.put(hostNameSslState.name(), hostNameSslState);\n-            }\n-        }\n+        this.webSiteBase = new WebSiteBaseImpl(inner());\n+        this.hostNameSslStateMap = new HashMap<>(this.webSiteBase.hostnameSslStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MDI1OA=="}, "originalCommit": {"oid": "2d4b7b3c71091a772fcc654680a38490cc20b7d5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NTU3Mg==", "bodyText": "Then should we just use it to save the update items?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484675572", "createdAt": "2020-09-08T06:19:55Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppBaseImpl.java", "diffHunk": "@@ -214,67 +215,44 @@ private void normalizeProperties() {\n         this.diagnosticLogsToUpdate = false;\n         this.sslBindingsToCreate = new TreeMap<>();\n         this.msiHandler = null;\n-        if (inner().hostNames() != null) {\n-            this.hostNamesSet = new HashSet<>(inner().hostNames());\n-        }\n-        if (inner().enabledHostNames() != null) {\n-            this.enabledHostNamesSet = new HashSet<>(inner().enabledHostNames());\n-        }\n-        if (inner().trafficManagerHostNames() != null) {\n-            this.trafficManagerHostNamesSet = new HashSet<>(inner().trafficManagerHostNames());\n-        }\n-        if (inner().outboundIpAddresses() != null) {\n-            this.outboundIPAddressesSet = new HashSet<>(Arrays.asList(inner().outboundIpAddresses().split(\",[ ]*\")));\n-        }\n-        this.hostNameSslStateMap = new HashMap<>();\n-        if (inner().hostnameSslStates() != null) {\n-            for (HostnameSslState hostNameSslState : inner().hostnameSslStates()) {\n-                // Server returns null sometimes, invalid on update, so we set default\n-                if (hostNameSslState.sslState() == null) {\n-                    hostNameSslState.withSslState(SslState.DISABLED);\n-                }\n-                hostNameSslStateMap.put(hostNameSslState.name(), hostNameSslState);\n-            }\n-        }\n+        this.webSiteBase = new WebSiteBaseImpl(inner());\n+        this.hostNameSslStateMap = new HashMap<>(this.webSiteBase.hostnameSslStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MDI1OA=="}, "originalCommit": {"oid": "2d4b7b3c71091a772fcc654680a38490cc20b7d5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NjE0MQ==", "bodyText": "Yes. Hence I keep it there. I.e., WebSiteBase init the variable (instead of previous code in this method), then logic remains same as before.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484676141", "createdAt": "2020-09-08T06:21:18Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppBaseImpl.java", "diffHunk": "@@ -214,67 +215,44 @@ private void normalizeProperties() {\n         this.diagnosticLogsToUpdate = false;\n         this.sslBindingsToCreate = new TreeMap<>();\n         this.msiHandler = null;\n-        if (inner().hostNames() != null) {\n-            this.hostNamesSet = new HashSet<>(inner().hostNames());\n-        }\n-        if (inner().enabledHostNames() != null) {\n-            this.enabledHostNamesSet = new HashSet<>(inner().enabledHostNames());\n-        }\n-        if (inner().trafficManagerHostNames() != null) {\n-            this.trafficManagerHostNamesSet = new HashSet<>(inner().trafficManagerHostNames());\n-        }\n-        if (inner().outboundIpAddresses() != null) {\n-            this.outboundIPAddressesSet = new HashSet<>(Arrays.asList(inner().outboundIpAddresses().split(\",[ ]*\")));\n-        }\n-        this.hostNameSslStateMap = new HashMap<>();\n-        if (inner().hostnameSslStates() != null) {\n-            for (HostnameSslState hostNameSslState : inner().hostnameSslStates()) {\n-                // Server returns null sometimes, invalid on update, so we set default\n-                if (hostNameSslState.sslState() == null) {\n-                    hostNameSslState.withSslState(SslState.DISABLED);\n-                }\n-                hostNameSslStateMap.put(hostNameSslState.name(), hostNameSslState);\n-            }\n-        }\n+        this.webSiteBase = new WebSiteBaseImpl(inner());\n+        this.hostNameSslStateMap = new HashMap<>(this.webSiteBase.hostnameSslStates());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MDI1OA=="}, "originalCommit": {"oid": "2d4b7b3c71091a772fcc654680a38490cc20b7d5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTM3MjI5OnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjowODozNlrOHON-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyMToyN1rOHOOSZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MTA1MA==", "bodyText": "Flux.fromIterable().flatMapDelayError()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484671050", "createdAt": "2020-09-08T06:08:36Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppsImpl.java", "diffHunk": "@@ -85,4 +103,61 @@ protected WebAppImpl wrapModel(SiteInner inner) {\n     public WebAppImpl define(String name) {\n         return wrapModel(name);\n     }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {\n+        if (ids == null || ids.isEmpty()) {\n+            return Flux.empty();\n+        }\n+\n+        Collection<Mono<String>> observables = new ArrayList<>();\n+        for (String id : ids) {\n+            final String resourceGroupName = ResourceUtils.groupFromResourceId(id);\n+            final String name = ResourceUtils.nameFromResourceId(id);\n+            Mono<String> o = ReactorMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);\n+            observables.add(o);\n+        }\n+\n+        return Flux.mergeDelayError(32, observables.toArray(new Mono[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "978d0f3aed7c4a8c3ba87a249bf7f621148abe32"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NjE5OA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484676198", "createdAt": "2020-09-08T06:21:27Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/WebAppsImpl.java", "diffHunk": "@@ -85,4 +103,61 @@ protected WebAppImpl wrapModel(SiteInner inner) {\n     public WebAppImpl define(String name) {\n         return wrapModel(name);\n     }\n+\n+    @Override\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {\n+        if (ids == null || ids.isEmpty()) {\n+            return Flux.empty();\n+        }\n+\n+        Collection<Mono<String>> observables = new ArrayList<>();\n+        for (String id : ids) {\n+            final String resourceGroupName = ResourceUtils.groupFromResourceId(id);\n+            final String name = ResourceUtils.nameFromResourceId(id);\n+            Mono<String> o = ReactorMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);\n+            observables.add(o);\n+        }\n+\n+        return Flux.mergeDelayError(32, observables.toArray(new Mono[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MTA1MA=="}, "originalCommit": {"oid": "978d0f3aed7c4a8c3ba87a249bf7f621148abe32"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTYyMzQyOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/arm/collection/implementation/BatchDeletionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozMTowOVrOHOQTSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozODowOVrOHOQi4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwOTE5NA==", "bodyText": "I think the deleteByIdAsync should take one string id rather than two strings (some resource will need more).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484709194", "createdAt": "2020-09-08T07:31:09Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/arm/collection/implementation/BatchDeletionImpl.java", "diffHunk": "@@ -17,21 +16,17 @@\n  */\n public class BatchDeletionImpl {\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     public static Flux<String> deleteByIdsAsync(Collection<String> ids,\n                                                 BiFunction<String, String, Mono<Void>> deleteByIdAsync) {\n         if (ids == null || ids.isEmpty()) {\n             return Flux.empty();\n+        } else {\n+            return Flux.fromIterable(ids)\n+                .flatMapDelayError(id -> {\n+                    final String resourceGroupName = ResourceUtils.groupFromResourceId(id);\n+                    final String name = ResourceUtils.nameFromResourceId(id);\n+                    return ReactorMapper.map(deleteByIdAsync.apply(resourceGroupName, name), id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0b7237c47e06416aa92711c511f12335828d63"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMzE4NQ==", "bodyText": "We can easily overload it with same name, and take Function<String, Mono<Void>> for this case (I actually wrote this signature first, then changed it since most case it is resourceGroupName+name).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484713185", "createdAt": "2020-09-08T07:38:09Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/arm/collection/implementation/BatchDeletionImpl.java", "diffHunk": "@@ -17,21 +16,17 @@\n  */\n public class BatchDeletionImpl {\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     public static Flux<String> deleteByIdsAsync(Collection<String> ids,\n                                                 BiFunction<String, String, Mono<Void>> deleteByIdAsync) {\n         if (ids == null || ids.isEmpty()) {\n             return Flux.empty();\n+        } else {\n+            return Flux.fromIterable(ids)\n+                .flatMapDelayError(id -> {\n+                    final String resourceGroupName = ResourceUtils.groupFromResourceId(id);\n+                    final String name = ResourceUtils.nameFromResourceId(id);\n+                    return ReactorMapper.map(deleteByIdAsync.apply(resourceGroupName, name), id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwOTE5NA=="}, "originalCommit": {"oid": "6b0b7237c47e06416aa92711c511f12335828d63"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTYyMzczOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozMToxM1rOHOQTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoxNzoxNVrOHOR6eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwOTIzNg==", "bodyText": "For delete operations, do the users need Flux as return type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484709236", "createdAt": "2020-09-08T07:31:13Z", "author": {"login": "xseeseesee"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppsImpl.java", "diffHunk": "@@ -124,4 +134,48 @@ public FunctionAppImpl define(String name) {\n     public Mono<Void> deleteByResourceGroupAsync(String groupName, String name) {\n         return this.inner().deleteAsync(groupName, name);\n     }\n+\n+    @Override\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a846c1a302af15e14f1c8621ab4aa0e76c6ddc4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMDg0MQ==", "bodyText": "I think this is a list of IDs that got deleted. As method with DelayError, error will be after Flux of IDs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484710841", "createdAt": "2020-09-08T07:34:11Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppsImpl.java", "diffHunk": "@@ -124,4 +134,48 @@ public FunctionAppImpl define(String name) {\n     public Mono<Void> deleteByResourceGroupAsync(String groupName, String name) {\n         return this.inner().deleteAsync(groupName, name);\n     }\n+\n+    @Override\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwOTIzNg=="}, "originalCommit": {"oid": "4a846c1a302af15e14f1c8621ab4aa0e76c6ddc4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNTYwOA==", "bodyText": "Got it. So users would get IDs returned, which are success deletion, and errors if applicable returned after all completed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r484735608", "createdAt": "2020-09-08T08:17:15Z", "author": {"login": "xseeseesee"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppsImpl.java", "diffHunk": "@@ -124,4 +134,48 @@ public FunctionAppImpl define(String name) {\n     public Mono<Void> deleteByResourceGroupAsync(String groupName, String name) {\n         return this.inner().deleteAsync(groupName, name);\n     }\n+\n+    @Override\n+    public Flux<String> deleteByIdsAsync(Collection<String> ids) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwOTIzNg=="}, "originalCommit": {"oid": "4a846c1a302af15e14f1c8621ab4aa0e76c6ddc4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDkzNTU2OnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppBasicImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoyMjozN1rOHPomGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozNDoxMVrOHQLJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1NTgwMQ==", "bodyText": "just curious, why name it refresh on a get call?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r486155801", "createdAt": "2020-09-10T08:22:37Z", "author": {"login": "yungezz"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppBasicImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appservice.implementation;\n+\n+import com.azure.resourcemanager.appservice.AppServiceManager;\n+import com.azure.resourcemanager.appservice.fluent.inner.SiteInner;\n+import com.azure.resourcemanager.appservice.models.FunctionApp;\n+import com.azure.resourcemanager.appservice.models.FunctionAppBasic;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.HasManager;\n+import reactor.core.publisher.Mono;\n+\n+class FunctionAppBasicImpl extends WebSiteBaseImpl implements FunctionAppBasic, HasManager<AppServiceManager> {\n+\n+    private final AppServiceManager myManager;\n+\n+    FunctionAppBasicImpl(SiteInner innerObject, AppServiceManager myManager) {\n+        super(innerObject);\n+        this.myManager = myManager;\n+    }\n+\n+    @Override\n+    public FunctionApp refresh() {\n+        return this.refreshAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<FunctionApp> refreshAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2de39f365d9a44d3a312de9a457467960bedcb7f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMjAwMw==", "bodyText": "To make it like other common resource instance, e.g.FunctionApp, which implement a Refreshable<FunctionApp> https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resourcemanager/azure-resourcemanager-resources/src/main/java/com/azure/resourcemanager/resources/fluentcore/model/Refreshable.java, which refresh() method updates itself and return a FunctionApp instance (actually just this).\nAnd here FunctionAppBasic has same refresh() method to update itself, and return a more complete FunctionApp instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14890#discussion_r486722003", "createdAt": "2020-09-11T01:34:11Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-appservice/src/main/java/com/azure/resourcemanager/appservice/implementation/FunctionAppBasicImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appservice.implementation;\n+\n+import com.azure.resourcemanager.appservice.AppServiceManager;\n+import com.azure.resourcemanager.appservice.fluent.inner.SiteInner;\n+import com.azure.resourcemanager.appservice.models.FunctionApp;\n+import com.azure.resourcemanager.appservice.models.FunctionAppBasic;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.HasManager;\n+import reactor.core.publisher.Mono;\n+\n+class FunctionAppBasicImpl extends WebSiteBaseImpl implements FunctionAppBasic, HasManager<AppServiceManager> {\n+\n+    private final AppServiceManager myManager;\n+\n+    FunctionAppBasicImpl(SiteInner innerObject, AppServiceManager myManager) {\n+        super(innerObject);\n+        this.myManager = myManager;\n+    }\n+\n+    @Override\n+    public FunctionApp refresh() {\n+        return this.refreshAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<FunctionApp> refreshAsync() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1NTgwMQ=="}, "originalCommit": {"oid": "2de39f365d9a44d3a312de9a457467960bedcb7f"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1208, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}