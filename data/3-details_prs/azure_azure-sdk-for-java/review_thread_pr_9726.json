{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjUwNjYw", "number": 9726, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozODozNlrODtltDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxOTo1MlrODtoUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMwMjU1OnYy", "diffSide": "LEFT", "path": "sdk/search/tests.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozODozNlrOF_Gk1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNjoxMVrOF_KpKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjM0Mw==", "bodyText": "Did we want to remove this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401712343", "createdAt": "2020-04-01T15:38:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/tests.yml", "diffHunk": "@@ -5,9 +5,6 @@ jobs:\n     parameters:\n       ServiceDirectory: search\n       Timeout: 120\n-      # Live tests create their own resources for testing. Resources are created against a\n-      # finite resource pool, so we limit parallelism to conserve availability in that pool.\n-      MaxParallel: 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MjI2MQ==", "bodyText": "We have so many tests which timeout for the second round. I want to test the behavior of removing this. If it does not works as expected, we can revert it back.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401752261", "createdAt": "2020-04-01T16:35:23Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/tests.yml", "diffHunk": "@@ -5,9 +5,6 @@ jobs:\n     parameters:\n       ServiceDirectory: search\n       Timeout: 120\n-      # Live tests create their own resources for testing. Resources are created against a\n-      # finite resource pool, so we limit parallelism to conserve availability in that pool.\n-      MaxParallel: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjM0Mw=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3Njk3MA==", "bodyText": "There are 20 free quota under subscription. We only use 6 of them. Other languages sequentially executes on the same resources. Quickly finish our tests can minimize the conflicts with other languages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401776970", "createdAt": "2020-04-01T17:12:56Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/tests.yml", "diffHunk": "@@ -5,9 +5,6 @@ jobs:\n     parameters:\n       ServiceDirectory: search\n       Timeout: 120\n-      # Live tests create their own resources for testing. Resources are created against a\n-      # finite resource pool, so we limit parallelism to conserve availability in that pool.\n-      MaxParallel: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjM0Mw=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODk4NQ==", "bodyText": "Sounds good, if the bucketing is working correctly it would be better for us to try to finish all our runs as fast as possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401778985", "createdAt": "2020-04-01T17:16:11Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/tests.yml", "diffHunk": "@@ -5,9 +5,6 @@ jobs:\n     parameters:\n       ServiceDirectory: search\n       Timeout: 120\n-      # Live tests create their own resources for testing. Resources are created against a\n-      # finite resource pool, so we limit parallelism to conserve availability in that pool.\n-      MaxParallel: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjM0Mw=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMwNzc2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOTo0MVrOF_GoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0Mzo1NFrOF_Gz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzE2OQ==", "bodyText": "nit: Possibly rename this to shouldCheckField", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401713169", "createdAt": "2020-04-01T15:39:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjIwMg==", "bodyText": "Another possible name is shouldSkipField since it's only use is negated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401716202", "createdAt": "2020-04-01T15:43:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzE2OQ=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMxODA5OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjowM1rOF_Guog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjowM1rOF_Guog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNDg1MA==", "bodyText": "nit: Renamed this to ignoredFields", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401714850", "createdAt": "2020-04-01T15:42:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMxOTkwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjoyOVrOF_Gvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0MjoyOVrOF_Gvzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNTE1MA==", "bodyText": "If this is going to be passed in many times should we convert ignoredFields to a Set before processing?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401715150", "createdAt": "2020-04-01T15:42:29Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMzOTgxOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0Njo1MFrOF_G8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0MTo0N1rOF_JRJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw==", "bodyText": "This is pretty risky code as null, false, and 0 could all be legitimate values being returned. Given that we are validating equality by traversing the JSON tree we could modify the serialization of the objects to always include default values and this section could be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401718387", "createdAt": "2020-04-01T15:46:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {\n+        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+            return false;\n+        }\n+\n+        if (ignoreDefaults) {\n+            if (fieldValue.isNull()) {\n+                return false;\n+            }\n+            if (fieldValue.isBoolean() && !fieldValue.asBoolean()) {\n+                return false;\n+            }\n+            return !fieldValue.isNumber() || fieldValue.asDouble() != 0.0D;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NTE0Nw==", "bodyText": "This is mimic the Reflection assertion IGNORE_DEFAULTS behavior.\nhttps://github.com/arteam/unitils/blob/master/unitils-core/src/main/java/org/unitils/reflectionassert/comparator/impl/IgnoreDefaultsComparator.java#L40", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401755147", "createdAt": "2020-04-01T16:39:40Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {\n+        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+            return false;\n+        }\n+\n+        if (ignoreDefaults) {\n+            if (fieldValue.isNull()) {\n+                return false;\n+            }\n+            if (fieldValue.isBoolean() && !fieldValue.asBoolean()) {\n+                return false;\n+            }\n+            return !fieldValue.isNumber() || fieldValue.asDouble() != 0.0D;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NjQ1Mw==", "bodyText": "There is a boolean field control this.\npublic static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults, String ... ignoreFields) {\nIf we want to test default value, we can set ignoreDefaults to false.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401756453", "createdAt": "2020-04-01T16:41:47Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {\n+        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+            return false;\n+        }\n+\n+        if (ignoreDefaults) {\n+            if (fieldValue.isNull()) {\n+                return false;\n+            }\n+            if (fieldValue.isBoolean() && !fieldValue.asBoolean()) {\n+                return false;\n+            }\n+            return !fieldValue.isNumber() || fieldValue.asDouble() != 0.0D;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw=="}, "originalCommit": {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTczMTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxOTo1MlrOF_KyDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxOTo1MlrOF_KyDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTI2MA==", "bodyText": "You'll want to move this outside of the while loop, right now this will be recreated each time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401781260", "createdAt": "2020-04-01T17:19:52Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +98,93 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    /**\n+     * Assert whether two objects are equal.\n+     *\n+     * @param expected The expected object.\n+     * @param actual The actual object.\n+     */\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    /**\n+     * Assert whether two objects are equal.\n+     *\n+     * @param expected The expected object.\n+     * @param actual The actual object.\n+     * @param ignoredDefaults Set to true if it needs to ignore default value of expected object.\n+     * @param ignoredFields Varargs of ignored fields.\n+     */\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoredDefaults,\n+        String... ignoredFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoredDefaults,ignoredFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoredDefaults, String[] ignoredFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            Set<String> ignoredFieldSet = new HashSet<>(Arrays.asList(ignoredFields));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf211ecc51c6b1512de1d0c467c33cc714b6a28"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2064, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}