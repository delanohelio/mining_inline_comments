{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzkxNDE1", "number": 9513, "title": "Servicebus track 2 service bus sync sender client", "bodyText": "Create ServiceBusSenderClient based on API\nAdd unit test\nadd integration test\nfixes #9355", "createdAt": "2020-03-25T05:25:45Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513", "merged": true, "mergeCommit": {"oid": "f33c2ad00846e5bb898413f8ad71139f4d1f0b27"}, "closed": true, "closedAt": "2020-03-25T23:40:44Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ52koAH2gAyMzkzMzkxNDE1OmU4YmI0Mzk1ZTMwMGMxMjM0NGU2YjFjMjU5NGZhNzZhM2Y1NzI1N2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRPB17gH2gAyMzkzMzkxNDE1OjdkZDJmN2I5YjI5M2Y0Y2ZiMWMzMmNlYzk3OGUyN2ZjNGYyZjIzZjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8bb4395e300c12344e6b1c2594fa76a3f57257f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8bb4395e300c12344e6b1c2594fa76a3f57257f", "committedDate": "2020-03-24T21:33:04Z", "message": "Sync Sender client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09570c47b2d407e17d535c7a9f09357047e54439", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09570c47b2d407e17d535c7a9f09357047e54439", "committedDate": "2020-03-24T21:48:08Z", "message": "Sync Sender client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1fa052eddfe5fcefcc6c81b5ab8a709811ec0cf", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1fa052eddfe5fcefcc6c81b5ab8a709811ec0cf", "committedDate": "2020-03-25T05:23:34Z", "message": "Merge master into branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b94d41c559454376f7f29d59626196340b5cb58", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b94d41c559454376f7f29d59626196340b5cb58", "committedDate": "2020-03-25T05:36:51Z", "message": " java doc changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3f695a96add8fc07fbeb4fb6ee1ca97047061e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d3f695a96add8fc07fbeb4fb6ee1ca97047061e", "committedDate": "2020-03-25T05:46:09Z", "message": "api name change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzg0MDMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#pullrequestreview-381384033", "createdAt": "2020-03-25T17:38:20Z", "commit": {"oid": "6d3f695a96add8fc07fbeb4fb6ee1ca97047061e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozODoyMFrOF7mubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozODoyMFrOF7mubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0NDc4Mw==", "bodyText": "This test doesn't need to be this complex. You can mock the ServiceBusSenderAsyncClient and then make sure the appropriate methods are called.\nThis is basically testing logic in ServiceBusSenderAsyncClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398044783", "createdAt": "2020-03-25T17:38:20Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpEndpointState;\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.amqp.implementation.AmqpSendLink;\n+import com.azure.core.amqp.implementation.CbsAuthorizationType;\n+import com.azure.core.amqp.implementation.ConnectionOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection;\n+import com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.message.Message;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3f695a96add8fc07fbeb4fb6ee1ca97047061e"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63", "committedDate": "2020-03-25T18:54:25Z", "message": "using mock for AsyncSender"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDQ2MTA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#pullrequestreview-381446108", "createdAt": "2020-03-25T18:55:48Z", "commit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1NTo0OFrOF7p1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowMTowN1rOF7qBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTYzMg==", "bodyText": "Should be Autocloseable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398095632", "createdAt": "2020-03-25T18:55:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -3,14 +3,97 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n /**\n- * A <b>synchronous</b> client to send messages to a Service Bus resource.\n+ * A <b>synchronous</b> sender responsible for sending {@link ServiceBusMessage} to  specific queue or topic on\n+ * Azure Service Bus.\n+ *\n+ * @see ServiceBusClientBuilder\n+ * @see ServiceBusSenderAsyncClient See ServiceBusSenderAsyncClient to communicate with a Service Bus resource using\n+ *     an asynchronous client.\n  */\n-public class ServiceBusSenderClient implements AutoCloseable {\n+@ServiceClient(builder = ServiceBusClientBuilder.class)\n+public class ServiceBusSenderClient implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTk5OQ==", "bodyText": "These tests don't have to be public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398095999", "createdAt": "2020-03-25T18:56:23Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class ServiceBusSenderClientIntegrationTest extends IntegrationTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NjYzNA==", "bodyText": "I would double-check that you need these member variables, most if not all, of them can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398096634", "createdAt": "2020-03-25T18:57:31Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NzMyMg==", "bodyText": "nit: uneeded line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398097322", "createdAt": "2020-03-25T18:58:40Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();\n+    private TracerProvider tracerProvider = new TracerProvider(Collections.emptyList());\n+    private final MessageSerializer messageSerializer = new ServiceBusMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(10));\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+\n+        sender = new ServiceBusSenderClient(asyncSender, retryOptions.getTryTimeout());\n+\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        messageBatchCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender, times(1)).createBatch();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NzUyMg==", "bodyText": "this can be simplified to verify(asyncSender).createBatch();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398097522", "createdAt": "2020-03-25T18:58:59Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();\n+    private TracerProvider tracerProvider = new TracerProvider(Collections.emptyList());\n+    private final MessageSerializer messageSerializer = new ServiceBusMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(10));\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+\n+        sender = new ServiceBusSenderClient(asyncSender, retryOptions.getTryTimeout());\n+\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        messageBatchCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender, times(1)).createBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NzczOQ==", "bodyText": "There is Assertions.assertThrows.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398097739", "createdAt": "2020-03-25T18:59:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();\n+    private TracerProvider tracerProvider = new TracerProvider(Collections.emptyList());\n+    private final MessageSerializer messageSerializer = new ServiceBusMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(10));\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+\n+        sender = new ServiceBusSenderClient(asyncSender, retryOptions.getTryTimeout());\n+\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        messageBatchCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender, times(1)).createBatch();\n+\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBigThanOnSendLink() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        when(asyncSender.createBatch(options)).thenThrow(new IllegalArgumentException(\"too large size\"));\n+\n+        // Act & Assert\n+        try {\n+            sender.createBatch(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5ODQ2MQ==", "bodyText": "You don't need all this logic. You can assert that the correct properties for the batch were passed to asyncClient. We assume asyncClient does the right thing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398098461", "createdAt": "2020-03-25T19:00:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();\n+    private TracerProvider tracerProvider = new TracerProvider(Collections.emptyList());\n+    private final MessageSerializer messageSerializer = new ServiceBusMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(10));\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+\n+        sender = new ServiceBusSenderClient(asyncSender, retryOptions.getTryTimeout());\n+\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        messageBatchCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender, times(1)).createBatch();\n+\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBigThanOnSendLink() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        when(asyncSender.createBatch(options)).thenThrow(new IllegalArgumentException(\"too large size\"));\n+\n+        // Act & Assert\n+        try {\n+            sender.createBatch(options);\n+            Assertions.fail(\"Should not have created batch because batchSize is bigger than the size on SenderLink.\");\n+        } catch (Exception ex) {\n+            Assertions.assertTrue(ex instanceof IllegalArgumentException);\n+        }\n+\n+        verify(asyncSender, times(1)).createBatch(options);\n+    }\n+\n+    /**\n+     * Verifies that the producer can create a batch with a given {@link CreateBatchOptions#getMaximumSizeInBytes()}.\n+     */\n+    @Test\n+    void createsMessageBatchWithSize() {\n+        // Arrange\n+        int maxLinkSize = 10000;\n+        int batchSize = 1024;\n+\n+        // Overhead when serializing an event, to figure out what the maximum size we can use for an event payload.\n+        int eventOverhead = 46;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5ODgzNA==", "bodyText": "You don't need this. You just need to assert that the send(ServiceBusMessage) is called on the asyncClient. And same with the one below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398098834", "createdAt": "2020-03-25T19:01:07Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.AmqpRetryMode;\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ErrorContextProvider errorContextProvider;\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessageBatch> messageBatchCaptor;\n+\n+    private MessageSerializer serializer = new ServiceBusMessageSerializer();\n+    private TracerProvider tracerProvider = new TracerProvider(Collections.emptyList());\n+    private final MessageSerializer messageSerializer = new ServiceBusMessageSerializer();\n+    private final AmqpRetryOptions retryOptions = new AmqpRetryOptions()\n+        .setDelay(Duration.ofMillis(500))\n+        .setMode(AmqpRetryMode.FIXED)\n+        .setTryTimeout(Duration.ofSeconds(10));\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+\n+        sender = new ServiceBusSenderClient(asyncSender, retryOptions.getTryTimeout());\n+\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        messageBatchCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender, times(1)).createBatch();\n+\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBigThanOnSendLink() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        when(asyncSender.createBatch(options)).thenThrow(new IllegalArgumentException(\"too large size\"));\n+\n+        // Act & Assert\n+        try {\n+            sender.createBatch(options);\n+            Assertions.fail(\"Should not have created batch because batchSize is bigger than the size on SenderLink.\");\n+        } catch (Exception ex) {\n+            Assertions.assertTrue(ex instanceof IllegalArgumentException);\n+        }\n+\n+        verify(asyncSender, times(1)).createBatch(options);\n+    }\n+\n+    /**\n+     * Verifies that the producer can create a batch with a given {@link CreateBatchOptions#getMaximumSizeInBytes()}.\n+     */\n+    @Test\n+    void createsMessageBatchWithSize() {\n+        // Arrange\n+        int maxLinkSize = 10000;\n+        int batchSize = 1024;\n+\n+        // Overhead when serializing an event, to figure out what the maximum size we can use for an event payload.\n+        int eventOverhead = 46;\n+        int maxEventPayload = batchSize - eventOverhead;\n+\n+        // This is 1024 bytes when serialized.\n+        final ServiceBusMessage message = new ServiceBusMessage(new byte[maxEventPayload]);\n+\n+        final ServiceBusMessage tooLargeMessage = new ServiceBusMessage(new byte[maxEventPayload + 1]);\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(batchSize, null, tracerProvider,\n+            messageSerializer);\n+        when(asyncSender.createBatch(options)).thenReturn(Mono.just(batch));\n+\n+        // Act & Assert\n+        ServiceBusMessageBatch messageBatch = sender.createBatch(options);\n+\n+        Assertions.assertEquals(batchSize, messageBatch.getMaxSizeInBytes());\n+        Assertions.assertTrue(messageBatch.tryAdd(message));\n+        Assertions.assertFalse(messageBatch.tryAdd(tooLargeMessage));\n+\n+    }\n+\n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(MessageBatch).\n+     */\n+    @Test\n+    void sendMultipleMessages() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessageBatch batch = new ServiceBusMessageBatch(256 * 1024,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc8e52f8f8d05aa312e5f1639f1f3ee423f4f63"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1996cb9f6761fe3e9523dd85c8a71387deac93f9", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1996cb9f6761fe3e9523dd85c8a71387deac93f9", "committedDate": "2020-03-25T19:09:53Z", "message": "making sender AutoCloseable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/59a700e27afc49e0dc63250011bac586a056bd78", "committedDate": "2020-03-25T20:32:19Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTI3ODY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#pullrequestreview-381527866", "createdAt": "2020-03-25T20:53:39Z", "commit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo1MzozOVrOF7t5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTowMDo0OVrOF7uJQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MjI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ServiceBusSenderClient(ServiceBusSenderAsyncClient asyncClient,  Duration tryTimeout) {\n          \n          \n            \n                ServiceBusSenderClient(ServiceBusSenderAsyncClient asyncClient, Duration tryTimeout) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398162281", "createdAt": "2020-03-25T20:53:39Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -3,14 +3,96 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n /**\n- * A <b>synchronous</b> client to send messages to a Service Bus resource.\n+ * A <b>synchronous</b> sender responsible for sending {@link ServiceBusMessage} to  specific queue or topic on\n+ * Azure Service Bus.\n+ *\n+ * @see ServiceBusClientBuilder\n+ * @see ServiceBusSenderAsyncClient See ServiceBusSenderAsyncClient to communicate with a Service Bus resource using\n+ *     an asynchronous client.\n  */\n+@ServiceClient(builder = ServiceBusClientBuilder.class)\n public class ServiceBusSenderClient implements AutoCloseable {\n     private final ServiceBusSenderAsyncClient asyncClient;\n+    private final Duration tryTimeout;\n+\n+    /**\n+     * Creates a new instance of {@link ServiceBusSenderClient} that sends messages to an Azure Service Bus.\n+     *\n+     * @throws NullPointerException if {@code asyncClient} or {@code tryTimeout} is null.\n+     */\n+    ServiceBusSenderClient(ServiceBusSenderAsyncClient asyncClient,  Duration tryTimeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MjgzNA==", "bodyText": "nit: extra new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398162834", "createdAt": "2020-03-25T20:54:31Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+class ServiceBusSenderClientIntegrationTest extends IntegrationTestBase {\n+    private ServiceBusSenderClient sender;\n+\n+    ServiceBusSenderClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusSenderAsyncClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sender = createBuilder().buildSenderClientBuilder().buildClient();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        sender.close();\n+    }\n+\n+    /**\n+     * Verifies that we can send a message to a non-session queue.\n+     */\n+    @Test\n+    void nonSessionQueueSendMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+\n+        // Assert & Act\n+        sender.send(message);\n+    }\n+\n+    /**\n+     * Verifies that we can send a {@link ServiceBusMessageBatch} to a non-session queue.\n+     */\n+    @Test\n+    void nonSessionMessageBatch() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(1024);\n+        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(3, messageId);\n+\n+        // Assert & Act\n+        ServiceBusMessageBatch batch = sender.createBatch(options);\n+        for (ServiceBusMessage message : messages) {\n+            Assertions.assertTrue(batch.tryAdd(message));\n+        }\n+        sender.send(batch);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NjAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(batchSize, null, null,\n          \n          \n            \n                    final ServiceBusMessageBatch batch = new ServiceBusMessageBatch(batchSize, null, null,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398166009", "createdAt": "2020-03-25T21:00:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final Duration RETRY_TIMEOUT = Duration.ofSeconds(10);\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+        sender = new ServiceBusSenderClient(asyncSender, RETRY_TIMEOUT);\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender).createBatch();\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBigThanOnSendLink() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        when(asyncSender.createBatch(options)).thenThrow(new IllegalArgumentException(\"too large size\"));\n+\n+        // Act & Assert\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> sender.createBatch(options));\n+        verify(asyncSender, times(1)).createBatch(options);\n+    }\n+\n+    /**\n+     * Verifies that the producer can create a batch with a given {@link CreateBatchOptions#getMaximumSizeInBytes()}.\n+     */\n+    @Test\n+    void createsMessageBatchWithSize() {\n+        // Arrange\n+        int batchSize = 1024;\n+\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(batchSize, null, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NjMzOQ==", "bodyText": "In Arrange, Act, and Assert, this line would be \"Act\". And the Line 135 would be \"Assert\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9513#discussion_r398166339", "createdAt": "2020-03-25T21:00:49Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+\n+import static com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceBusSenderClientTest {\n+    private static final String NAMESPACE = \"my-namespace\";\n+    private static final String ENTITY_NAME = \"my-servicebus-entity\";\n+\n+    @Mock\n+    private ServiceBusSenderAsyncClient asyncSender;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceBusMessage> singleMessageCaptor;\n+\n+    private ServiceBusSenderClient sender;\n+\n+    private static final Duration RETRY_TIMEOUT = Duration.ofSeconds(10);\n+    private static final String TEST_CONTENTS = \"My message for service bus queue!\";\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        when(asyncSender.getEntityPath()).thenReturn(ENTITY_NAME);\n+        when(asyncSender.getFullyQualifiedNamespace()).thenReturn(NAMESPACE);\n+        sender = new ServiceBusSenderClient(asyncSender, RETRY_TIMEOUT);\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        sender.close();\n+        singleMessageCaptor = null;\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @Test\n+    void verifyProperties() {\n+        Assertions.assertEquals(ENTITY_NAME, sender.getEntityPath());\n+        Assertions.assertEquals(NAMESPACE, sender.getFullyQualifiedNamespace());\n+    }\n+\n+    /**\n+     * Verifies that an exception is thrown when we create a batch with null options.\n+     */\n+    @Test\n+    void createBatchNull() {\n+        Assertions.assertThrows(NullPointerException.class, () -> sender.createBatch(null));\n+    }\n+\n+    /**\n+     * Verifies that the default batch is the same size as the message link.\n+     */\n+    @Test\n+    void createBatchDefault() {\n+        // Arrange\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(MAX_MESSAGE_LENGTH_BYTES, null, null,\n+            null);\n+        when(asyncSender.createBatch()).thenReturn(Mono.just(batch));\n+\n+        //Act\n+        ServiceBusMessageBatch batchMessage = sender.createBatch();\n+\n+        //Assert\n+        Assertions.assertEquals(MAX_MESSAGE_LENGTH_BYTES, batchMessage.getMaxSizeInBytes());\n+        Assertions.assertEquals(0, batchMessage.getCount());\n+        verify(asyncSender).createBatch();\n+    }\n+\n+    /**\n+     * Verifies we cannot create a batch if the options size is larger than the link.\n+     */\n+    @Test\n+    void createBatchWhenSizeTooBigThanOnSendLink() {\n+        // Arrange\n+        int maxLinkSize = 1024;\n+        int batchSize = maxLinkSize + 10;\n+\n+        // This event is 1024 bytes when serialized.\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        when(asyncSender.createBatch(options)).thenThrow(new IllegalArgumentException(\"too large size\"));\n+\n+        // Act & Assert\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> sender.createBatch(options));\n+        verify(asyncSender, times(1)).createBatch(options);\n+    }\n+\n+    /**\n+     * Verifies that the producer can create a batch with a given {@link CreateBatchOptions#getMaximumSizeInBytes()}.\n+     */\n+    @Test\n+    void createsMessageBatchWithSize() {\n+        // Arrange\n+        int batchSize = 1024;\n+\n+        final CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(batchSize);\n+        ServiceBusMessageBatch batch =  new ServiceBusMessageBatch(batchSize, null, null,\n+            null);\n+        when(asyncSender.createBatch(options)).thenReturn(Mono.just(batch));\n+\n+        // Act & Assert\n+        ServiceBusMessageBatch messageBatch = sender.createBatch(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a700e27afc49e0dc63250011bac586a056bd78"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6be461bf3dcb65568f5a9213d986cc3dae18cab", "author": {"user": {"login": "hemanttanwar", "name": "Hemant Tanwar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6be461bf3dcb65568f5a9213d986cc3dae18cab", "committedDate": "2020-03-25T21:16:08Z", "message": "Update sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n\nCo-Authored-By: Connie Yau <conniey@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd84e16d64ba9ed603473dda2315c74472f5b92d", "author": {"user": {"login": "hemanttanwar", "name": "Hemant Tanwar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd84e16d64ba9ed603473dda2315c74472f5b92d", "committedDate": "2020-03-25T21:16:27Z", "message": "Update sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n\nCo-Authored-By: Connie Yau <conniey@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc7e2f18dc20482e437aa390b0332bced9fb9a8", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/efc7e2f18dc20482e437aa390b0332bced9fb9a8", "committedDate": "2020-03-25T21:59:46Z", "message": "incorporated review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd2f7b9b293f4cfb1c32cec978e27fc4f2f23f0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7dd2f7b9b293f4cfb1c32cec978e27fc4f2f23f0", "committedDate": "2020-03-25T22:13:23Z", "message": "fix spotbug issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1454, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}