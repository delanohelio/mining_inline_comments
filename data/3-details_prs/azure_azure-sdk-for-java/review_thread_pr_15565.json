{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTg2NDEy", "number": 15565, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMDo0MFrOEpIkXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0NjoxMlrOEvdN9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY3NDUyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMDo0MFrOHaoM7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjozMDo0N1rOHgTO8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzY5Mw==", "bodyText": "Can make this into a singleton as we have with UNSET.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r497683693", "createdAt": "2020-09-30T17:30:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMTYwMg==", "bodyText": "added singleton for EMPTY.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503631602", "createdAt": "2020-10-13T02:30:47Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzY5Mw=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY3ODIzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMTo0M1rOHaoPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozMTo0M1rOHaoPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NDI2OQ==", "bodyText": "We'll need to expand on these Javadocs because isSet will be true when the value is null and for many null indicates that a value isn't present.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r497684269", "createdAt": "2020-09-30T17:31:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTMxMzUyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMToxOTo1N1rOHbfEPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyODo1MVrOHgTNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA==", "bodyText": "I think we should change this into empty and make the current empty clear. This pattern will follow more closely with what Optional types in Java do, where it is expected that isPresent on empty will return false. With the current design empty will return true for isSet, which makes it a better candidate to be called clear.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r498582590", "createdAt": "2020-10-02T01:19:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NTExMw==", "bodyText": "The Option type is for \"tri-state\", to support explicit-null. When the user uses Option::ofNullable(null), it means value-present as explicit-null.\nThe JDK Optional is for \"two-sate\". The Optional::ofNullable(non-null) means value-present and Optional::ofNullable(null) means value-not-present.  Optional::ofNullable(null)  == Optional::empty() (isPresent() == false).\nDue to above \"tri-state\" vs \"two-state\", the meaning of Option::ofNullable(null) [value-present i.e. explicit-null] and Optional::ofNullable(null) [value-not-present] is different. This indirectly affect meaning of empty as well.\nNow I wonder should we remove Option::empty() from the\"Option\" to reduce confusion? then we'll have:\nOption.of(non-null) | Option.ofNullable(value|null) == value-present\nOption.unset() == value-not-present\nBtw I'm still not happy with the name Option.unset(), while Option a normal type but when used in the REST API context, Option.unset() means don't change the server value.\nThoughts?\n\\cc @alzimmermsft  @JonathanGiles @srnagar", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503445113", "createdAt": "2020-10-12T17:47:17Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4Njg2MQ==", "bodyText": "We can borrow the JavaScript terminology for tri-state - uninitialized to represent not set, empty for initialized but with a null value and T for non-null value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503486861", "createdAt": "2020-10-12T19:19:28Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MjQyMg==", "bodyText": "I think that's what we have today, js_uninitialized == java_unset, Option.empty() == explicit-null. One proposed name for \"unset\" is \"uninitialized\" i.e. Option.uninitialized().\nRegarding using \"empty\" for \"null\", do want empty? or given Option is for \"tri-state\" and \"null\" is a valid value, should we just expose \"Option.ofNullable(null)\" or  \"Option.of(null)\"  for explicit-null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503492422", "createdAt": "2020-10-12T19:32:34Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NDYzNg==", "bodyText": "Yeah, I was proposing we use the term uninitialized instead of unset. unset can have dual meaning which can either mean that the value is not set or that the value that is already set is reverted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503494636", "createdAt": "2020-10-12T19:38:03Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMTEyOQ==", "bodyText": "renamed unset to uninitialized.\nI kept empty() with the same meaning i.e. empty == initialized with a null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503631129", "createdAt": "2020-10-13T02:28:51Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4MjU5MA=="}, "originalCommit": {"oid": "893fe861abbf5a56c6d8a2ab0eae06cea12ed6f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzYwNTM1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyMzozNVrOHgKgbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyODowMlrOHgTMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4ODYyMg==", "bodyText": "I think these two can be combined. We can just have Option.of(T value) if the value is null we know it represents empty. Do we have any added benefit of having two separate methods? With these two methods - the user will either always use ofNullable just to be safe or will have to write something like\nOption<T> patchValue;\nif( value != null) { \n      patchValue = Option.of(value); \n} else { \n     patchValue = Option.empty();\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503488622", "createdAt": "2020-10-12T19:23:35Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NTIwOA==", "bodyText": "I agree with that, T is anyway nullable, so we can just have of(non-null|null)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503495208", "createdAt": "2020-10-12T19:39:27Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4ODYyMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMDkzNg==", "bodyText": "removed ofNullable and enable of to take null as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503630936", "createdAt": "2020-10-13T02:28:02Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4ODYyMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzYxMjgwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNjowM1rOHgKkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyOTo1NVrOHgTOFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg==", "bodyText": "If we use the JS terminology, we can change this method name to isInitialized(). We should also consider adding isPresent() to return true if isInitialized() && value != null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503489732", "createdAt": "2020-10-12T19:26:03Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjA4OQ==", "bodyText": "sounds good, so Option.unset() will be Option.uninitialized(). Option.isSet() become Option.isInitialized()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503496089", "createdAt": "2020-10-12T19:41:47Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NzU5Mg==", "bodyText": "I've question-related to isPresent(), given \"of(null)\" represent \"presence\" of explicit-null, would it be confusing having this method returning false when Option is in the explicit-null state?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503497592", "createdAt": "2020-10-12T19:45:38Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5ODY4NA==", "bodyText": "I think that's what isPresent() in Java's Optional does. It returns true only if the value is non-null. For everything else, it returns false. So, in our case, isPresent will return the following:\nuninitialized - false\nnull value - false\nnon-null value - true", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503498684", "createdAt": "2020-10-12T19:48:32Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5OTkzMg==", "bodyText": "Also, if you think there's room for confusion with this API and is something that we don't need to add right away, we can add this later too. It just means that the user will have to do this check themselves: if(patchValue.isInitialized() && patchValue.getValue() != null). So, isPresent() is just syntactic sugar that can be introduced later, if required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503499932", "createdAt": "2020-10-12T19:51:20Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwNzI4Nw==", "bodyText": "thanks! yes, it's clear the purpose of \"isPresent()\" w.r.t Optional, given it's a two-state type. It's a bit confusing for me the behaviour of  \"isPresent()\" in a tri-state type.\nLike you said, maybe we want to hold on to it and introduce it later once we see a need for it. At least now, I see the \"Option\" type is mainly used in the input model than output model, its mostly inspected in the azure-core side while serializing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503507287", "createdAt": "2020-10-12T20:05:04Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMTM4Mw==", "bodyText": "Renamed, Option.unset() -> Option.uninitialized(). Option.isSet() -> Option.isInitialized().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r503631383", "createdAt": "2020-10-13T02:29:55Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * The Option type, every Option is either has a value present including null,\n+ * or has no value present.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNSET = new Option<>();\n+    private final boolean isSet;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} instance with no value.\n+     *\n+     * @param <T> The value type.\n+     * @return An Option type with no value present.\n+     */\n+    public static <T> Option<T> unset() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> none = (Option<T>) UNSET;\n+        return none;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with an empty value.\n+     *\n+     * @param <T> The value type.\n+     * @return an {@link Option} with the empty value present.\n+     */\n+    public static <T> Option<T> empty() {\n+        return new Option<>(null);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified non-null value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value, which must be non-null.\n+     * @return an {@link Option} with the non-null value present.\n+     * @throws NullPointerException if value is null.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        Objects.requireNonNull(value);\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with the specified nullable value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the null or non-null value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> ofNullable(T value) {\n+        return new Option<>(value);\n+    }\n+\n+    /**\n+     * Return {@code true} if there is a value present, otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isSet() {\n+        return this.isSet;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTczMg=="}, "originalCommit": {"oid": "20acbe56b0086c338612468be9ccb6d882f5172d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzU3MTI0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjozODo1NVrOHgv5ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyODo1M1rOHjRbKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTI3OA==", "bodyText": "Do we want to state No value initialized?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504101278", "createdAt": "2020-10-13T16:38:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NzY4OA==", "bodyText": "agree, the proposed text better aligns the purpose of type, will update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506747688", "createdAt": "2020-10-16T22:28:53Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTI3OA=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzU3MzI2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjozOToxNFrOHgv7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMDoyMDoxNlrOHjSzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTYzNQ==", "bodyText": "May want to discuss that the value could be null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504101635", "createdAt": "2020-10-13T16:39:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDI1NA==", "bodyText": "updated the JavaDoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506770254", "createdAt": "2020-10-17T00:20:16Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMTYzNQ=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzU4MTcxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0MDozMlrOHgwAVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMDoyMjowMFrOHjS0Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMjk5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if there is a value present, otherwise {@code false}\n          \n          \n            \n                 * @return {@code true} if a value has been initialized, otherwise {@code false}\n          \n      \n    \n    \n  \n\nThink it would be good to use the terminology initialized everywhere instead of present as present usually has a different connotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504102996", "createdAt": "2020-10-13T16:40:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDUyMw==", "bodyText": "done! Thanks for the suggestion, this is better doc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506770523", "createdAt": "2020-10-17T00:22:00Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwMjk5Ng=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYwNTY5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NTowMFrOHgwQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMTowOToyNVrOHjTLHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzAzMA==", "bodyText": "We should add code snippets which outline the three scenarios with calls to isInitialized and getValue and have comments on what their expected result would be, for the non-null and uninitialized scenarios:\nOption<String> endpointOption = Option.of(\"https://example.com\");\n\nif (endpointOption.isInitialized()) { // Returns true\n  System.out.println(endpointOption.getValue());\n}\n\nOption<String> unitializedOption = Option.unitialized();\n\nif (unitializedOption.isInitialized()) { // Returns false\n\n}\n\nunitializedOption.getValue(); // Throws NoSuchElementException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504107030", "createdAt": "2020-10-13T16:45:00Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3NjM1MQ==", "bodyText": "code-snippet added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506776351", "createdAt": "2020-10-17T01:09:25Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzAzMA=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjY2MzMxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0NDozNVrOHhgYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMDoxNzo1MFrOHjSx8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5NTU4Mw==", "bodyText": "Are we going to add a JsonSerializer<Option> implementation to JacksonAdapter?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r504895583", "createdAt": "2020-10-14T18:44:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0ODEwOA==", "bodyText": "yes, we will, it will look very close to the serializer for Optional in Java8Module.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506748108", "createdAt": "2020-10-16T22:30:24Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5NTU4Mw=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2OTkwNg==", "bodyText": "Serializer for Option type is added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506769906", "createdAt": "2020-10-17T00:17:50Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5NTU4Mw=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA1Nzk2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0MDo1NlrOHjRm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoyMToxMVrOHjSLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDcwNw==", "bodyText": "Should we allow uninitialized Option to be initialized later after creation by calling setValue(T value)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506750707", "createdAt": "2020-10-16T22:40:56Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDA1Ng==", "bodyText": "pls refer comment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506760056", "createdAt": "2020-10-16T23:21:11Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDcwNw=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA2MzUwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0NDozM1rOHjRqEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTowMjoxNVrOHkdg_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTUwNA==", "bodyText": "This should log and throw.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506751504", "createdAt": "2020-10-16T22:44:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MTc3Nw==", "bodyText": "@srnagar  I have a question - Is it a hard rule that any exception has to be wrapped in logger?\nThe reason for asking is - this method we will be called from serializer and will have a isInitialized check before accessing it. We will not have an output model with Option property where the user have to call getValue().\nMy question is, for a type used in input only model with internal guarded access, do we need a logger?. Think of it as the Optional ::value() method in an input only model.\nIf we still require a logger - do we need ONE logger instance per Option instance given there can be many patch Option properties OR should we prefer a static logger?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506771777", "createdAt": "2020-10-17T00:31:05Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTUwNA=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4OTU0Mw==", "bodyText": "@anuchandy - logging the exception before throwing is just a general guideline to help us investigate issues when customers contact us. In this case, it's debatable whether it adds too much value, so, I am fine with not logging if this doesn't help much in troubleshooting any issues. If we do want to log, then instead of creating a lot of logger instances, we can simply use a static logger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r507989543", "createdAt": "2020-10-19T18:55:04Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTUwNA=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5NDM2Ng==", "bodyText": "thanks for the response, yep it's a bit hard to pick here - general guideline vs value addition for the specific case. Let's go without logger and add it if we ever use it in the output model.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r507994366", "createdAt": "2020-10-19T19:02:15Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {\n+        if (!this.isInitialized) {\n+            throw new NoSuchElementException(\"No value present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTUwNA=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA2NjYxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0NjoyM1rOHjRr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzozMTo1OVrOHjST7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTk1Mw==", "bodyText": "We need a setValue() method as well. Otherwise, this will be immutable resulting in many Option objects being created to mutate the value.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506751953", "createdAt": "2020-10-16T22:46:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1OTg3NA==", "bodyText": "was thinking about it, the current \"known\" use case is - This type will be used for JSON-merge-patch input only model.\nThe JSON-merge-patch model type will not have any required property constraints. If the user wants to clear a property in the server they set it to \"Option.of(null)\" and to set a value \"Option.of(non-null)\". The instantiation of such a model and setting of its properties highly likely to happen in one place along with an update API call.\nIn this known use case, I couldn't find a need to make this type mutable, unless we foresee the immediate application of this type in any other use case. So I was preferring to keep it simple & immutable, like JDK's Optional type.\nPlease let me know your thoughts.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506759874", "createdAt": "2020-10-16T23:20:25Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTk1Mw=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjIyMQ==", "bodyText": "Yeah, I am fine with just keeping this immutable for now and we can extend it later if there's a usecase for it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r506762221", "createdAt": "2020-10-16T23:31:59Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/Option.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util;\n+\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Option type to describe tri-state. Every Option instance is in one of\n+ * the three states: a state representing a non-null-value, null-value, or no-value.\n+ *\n+ * @param <T> The value type.\n+ */\n+public final class Option<T> {\n+    private static final Option<?> UNINITIALIZED = new Option<>();\n+    private static final Option<?> EMPTY = new Option<>(null);\n+    private final boolean isInitialized;\n+    private final T value;\n+\n+    /**\n+     * Returns an {@link Option} with the specified null-value or non-null-value.\n+     *\n+     * @param <T> The value type.\n+     * @param value the value.\n+     * @return an {@link Option} with the value present.\n+     */\n+    public static <T> Option<T> of(T value) {\n+        return value == null ? empty() : new Option<>(value);\n+    }\n+\n+    /**\n+     * Returns an {@link Option} with null-value.\n+     * <p>\n+     * {@code Option.empty()} is a syntactic sugar for {@code Option.of(null)}.\n+     * </p>\n+     * @param <T> The value type.\n+     * @return an {@link Option} with a null-value.\n+     */\n+    public static <T> Option<T> empty() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> empty = (Option<T>) EMPTY;\n+        return empty;\n+    }\n+\n+    /**\n+     * Returns an {@link Option} instance with no-value.\n+     *\n+     * @param <T> Type of the non-existent value.\n+     * @return An Option type with no-value.\n+     */\n+    public static <T> Option<T> uninitialized() {\n+        @SuppressWarnings(\"unchecked\")\n+        Option<T> uninitialized = (Option<T>) UNINITIALIZED;\n+        return uninitialized;\n+    }\n+\n+    /**\n+     * Return {@code true} if this instance is initialized with a null-value or non-null-value,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if there is a value present, otherwise {@code false}\n+     */\n+    public boolean isInitialized() {\n+        return this.isInitialized;\n+    }\n+\n+    /**\n+     * Gets the value in the {@link Option}.\n+     *\n+     * @return The value.\n+     * @throws NoSuchElementException thrown if the {@link Option} has no value.\n+     */\n+    public T getValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTk1Mw=="}, "originalCommit": {"oid": "3726ae207d133ba40047d59d93298c744a5037d9"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk3MjM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/OptionPropertiesModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0NjoxM1rOHkc5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1ODowOVrOHkdWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NDIzNg==", "bodyText": "It might be easier to use stream().filter().foreach() here. Also, is it better to create a new list with new property writers instead of mutating the input list?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r507984236", "createdAt": "2020-10-19T18:46:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/OptionPropertiesModifier.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2013 FasterXML.com\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License. You may obtain\n+ * a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+/*\n+ * Portions Copyright (c) Microsoft Corporation\n+ */\n+\n+package com.azure.core.util.serializer;\n+\n+import com.azure.core.util.Option;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+\n+import java.util.List;\n+\n+/**\n+ * The Serializer modifier for {@link Option} properties to not serialize them when\n+ * those properties are in uninitialized state.\n+ */\n+final class OptionPropertiesModifier extends BeanSerializerModifier {\n+    @Override\n+    public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n+                                                     BeanDescription beanDesc,\n+                                                     List<BeanPropertyWriter> beanPropertyWriters) {\n+        for (int i = 0; i < beanPropertyWriters.size(); i++) {\n+            final BeanPropertyWriter writer = beanPropertyWriters.get(i);\n+            if (writer.getType().isTypeOrSubTypeOf(Option.class)) {\n+                beanPropertyWriters.set(i, new OptionBeanPropertyWriter(writer));\n+            }\n+        }\n+        return beanPropertyWriters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5MTU1NQ==", "bodyText": "I'm with you on creating a new list; however, this is a hot-path for serialization, so I was debating myself with new list vs mutation, then thought of following what official Jackson doing in its property writers, i.e., mutation :(.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15565#discussion_r507991555", "createdAt": "2020-10-19T18:58:09Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/OptionPropertiesModifier.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2013 FasterXML.com\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License. You may obtain\n+ * a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+/*\n+ * Portions Copyright (c) Microsoft Corporation\n+ */\n+\n+package com.azure.core.util.serializer;\n+\n+import com.azure.core.util.Option;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+\n+import java.util.List;\n+\n+/**\n+ * The Serializer modifier for {@link Option} properties to not serialize them when\n+ * those properties are in uninitialized state.\n+ */\n+final class OptionPropertiesModifier extends BeanSerializerModifier {\n+    @Override\n+    public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n+                                                     BeanDescription beanDesc,\n+                                                     List<BeanPropertyWriter> beanPropertyWriters) {\n+        for (int i = 0; i < beanPropertyWriters.size(); i++) {\n+            final BeanPropertyWriter writer = beanPropertyWriters.get(i);\n+            if (writer.getType().isTypeOrSubTypeOf(Option.class)) {\n+                beanPropertyWriters.set(i, new OptionBeanPropertyWriter(writer));\n+            }\n+        }\n+        return beanPropertyWriters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NDIzNg=="}, "originalCommit": {"oid": "700d802638f70b03b2717b76dec187fc81240fc8"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 849, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}